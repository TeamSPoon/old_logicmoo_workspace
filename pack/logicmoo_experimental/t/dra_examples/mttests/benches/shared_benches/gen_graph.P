
:- dynamic '_$edges'/2.
:- index('_$edges'/2,trie).

:- dynamic '_$nodes'/1.
:- index('_$nodes'/1,trie).

:- import random/1, random/3 from random.
:- import member/2,flatten/2 from basics.
:- import datime_setrand/0 from random.

?- datime_setrand.

%----------------------------------

% generates a regular graph of Nodes nodes (i.e. where each node has
% Links links)
genRegGraph(Nodes,Links,GraphS):-
	Links1 is Links + 1,
	genRegGraph_1(0,Nodes,Links1,NestL),
	flatten(NestL,GraphS).

genRegGraph_1(Nodes,Nodes,_,[]):- !.
genRegGraph_1(N,Nodes,Links,[NewList|List]):-
	N1 is N + 1,
	Nodes1 is Nodes + 1,
	genRegGraph_2(1,Links,N1,Nodes1,[],NewList),
	genRegGraph_1(N1,Nodes,Links,List).

genRegGraph_2(Links,Links,_N,_Nodes,List,List):- !.
genRegGraph_2(L,Links,N,Nodes,List,Out):-
	random(1,Nodes,To),
	((member(edge(N,To),List) ; To = N) ->
		genRegGraph_2(L,Links,N,Nodes,List,Out)
	 ;      L1 is L + 1,
		genRegGraph_2(L1,Links,N,Nodes,[edge(N,To)|List],Out) ).

%-------------------

% Generates a graph with Glinks among nodes from 1..Nodes
genGraph(Nodes,Links,GraphS):-
	retractall('_$edges'(_,_)),
	genGraph_1(Links,Nodes),
	findall(edge(F,T),'_$edges'(F,T),Graph),
	sort(Graph,GraphS),
	retractall('_$edges'(_,_)).

genGraph_1(0,_Nodes):- !.
genGraph_1(N,Nodes):-
	gen_edge(Nodes),
	N1 is N - 1,
	genGraph_1(N1,Nodes).

gen_edge(Nodes):-
	repeat,
	random(1,Nodes,F),
	random(1,Nodes,T),
	T \== F,
	\+ '_$edges'(F,T),
	assert('_$edges'(F,T)),
	!.

%-------------------

do_write_graph( L ) :-
	member( edge(A,B), L ),
	write( edge(A,B) ),
	writeln( '.' ),
	fail.
do_write_graph( _ ).

fileGraph(M,F,Name) :-
	genRegGraph( M, F, L ),
	tell( Name ),
	do_write_graph(L),
	told.

