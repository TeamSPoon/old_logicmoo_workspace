:- compiler_options([spec_off]).

:- import ord_subset/2, ord_disjoint/2,ord_subtract/3,ord_member/2, 
	ord_union/3 from ordsets.
:- import flatten/2,memberchk/2, member/2,length/2,memberchk/2,ground/1 from basics.
:- import conget/2, conset/2 from machine.

:- ensure_loaded(clpr).
:- import entailed/1, {}/1 from clpr.
:- import dump/3 from dump.

:- table reachable/2.
reachable(InState,NewState):-
	reachable(InState,State),
%	writeln(reachable(InState,State)),
	hasTransition(State,NewState).
%	writeln(hasTransition(State,NewState)).
reachable(InState,NewState):-
	hasTransition(InState,NewState).

:- thread_shared shared_reachable/2.
:- table shared_reachable/2.
shared_reachable(InState,NewState):-
	shared_reachable(InState,State),
	hasTransition(State,NewState).
shared_reachable(InState,NewState):-
	hasTransition(InState,NewState).

hasTransition(State,NewState):-
%	writeln(hasTransition(State)),
	get_rules_for_state(State,State,AllRules),
	flatten(AllRules,FlatRules),
	member(Rule,FlatRules),
	apply_rule_to_state(Rule,State,NewState).

get_rules_for_state([],_State,[]).
get_rules_for_state([place(P,_Stuff)|T],State,[Rules|RT]):-
	findall(rule([place(P,RuleStuff)|Places],Output,Tran),
	        rule([place(P,RuleStuff)|Places],Output,Tran),Rules),
	get_rules_for_state(T,State,RT).

%-------

apply_rule_to_state(rule(In,Entailment,Out),State,NewState):-
	unify_for_entailment(In,State,MidState),
	entailed(Entailment),
	call_new_constraints(Out,OutPlaces),
	flatsort([OutPlaces|MidState],NewState).
%	(show_state(NewState),fail ; true).

%----

call_new_constraints([],[]).
call_new_constraints([place(P,Vars,Constraints)|R],[place(P,Vars)|R1]):-
	call(Constraints),
	call_new_constraints(R,R1).

unify_for_entailment([],State,State).
unify_for_entailment([place(P,Stuff)|Rest],State,NewState):- 
	member_split(place(P,Stuff),State,MidState),
	unify_for_entailment(Rest,MidState,NewState).

member_split(H,[H|T],T).
member_split(place(P,Stuff),[place(P1,StateStuff)|T],[place(P1,StateStuff)|T1]):- 
	P @> P1,
	member_split(place(P,Stuff),T,T1).

%----

flatsort(In,Out):- 
	flatten(In,In1),
	sort(In1,Out).

%----
:- import term_variables/2 from constraintLib.

show_state([]).
show_state([place(P,Stuff)|Rest]):-
	term_variables(Stuff,Vars),
	dump(Vars,Vars,VarConsts),
	write(place(P,Stuff)),write(' : '),writeln(VarConsts),
	show_state(Rest),!.

aat:- abolish_all_tables.	



count_states(L):- 
	findall(1,get_residual(reachable(_X,_Y),_F),List),
	length(List,L).

count_rr_states(L):- 
	findall(1,get_residual(right_reachable(_X,_Y),_F),List),
	length(List,L).

show_states:- 
	findall(Y,get_residual(reachable(_X,Y),_F),Ys),
	sort(Ys,Ysort),
	member(Y,Ysort),
	writeln(Y),fail.
show_states.

show_shared_states:- 
	findall(Y,get_residual(shared_reachable(_X,Y),_F),Reached),
	sort(Reached,Rsort),
	member(State,Rsort),
	writeln(State),
	fail.
show_shared_states.

count_shared_states(L):- 
	findall(1,get_residual(shared_reachable(_X,_Y),_F),List),
	length(List,L).

% perhaps rewrite for ordsets -- this could be expensive.
reset:- 
	abolish_all_tables,
	retractall(instance_passed(_)).

state_contains(constr(Term,Constr),State):- 
	member(Term,State),call_c(Constr),!.
state_contains(','(C1,C2),State):- 
	state_contains(C1,State),state_contains(C2,State).
state_contains(';'(C1,C2),State):- 
	( state_contains(C1,State) ; state_contains(C2,State)),!.

state_doesnt_contain(constr(Term,Constr),State):- 
	\+ (member(Term,State),call_c(Constr)).
state_doesnt_contain(','(C1,C2),State):- 
	state_doesnt_contain(C1,State),state_doesnt_contain(C2,State).
state_doesnt_contain(';'(C1,C2),State):- 
	( state_doesnt_contain(C1,State) ; state_doesnt_contain(C2,State)),!.

% shd. probably change these to use log ith
% state_subset should bind inputlist
state_subset(Ilist,Input,Mid):- 
	slow_subset(Ilist,Input,Mid).

slow_subset([],List,List).
slow_subset([H|T],List2):- 
	member_split(H,List2),
	slow_subset(T,List2).

% subtrace *everything* in Input that binds w. Ilist
state_subtract(Ilist,Input):- 
	(ground(Ilist) -> 
	    ord_subtract(Ilist,Input)
	 ;  slow_subtract(Ilist,Input) ).

slow_subtract(Ilist,Input):- 
	findall(X,(member(X,Ilist),member(X,Input)),SubList),
	sort(SubList,SortList),
	ord_subtract(SortList,Input).

end_of_file.

state_disjoint(Ilist,Input):- !,
	(ground(Ilist) -> 
	    ord_disjoint(Ilist,Input)
	 ;  slow_disjoint(Ilist,Input) ).

slow_disjoint(List1,List2):- 
	\+ (member(Elt,List1),membr(Elt,List2)).

find_conflicts([],[]).
find_conflicts([H|T],[InconsH|InconsT]):- 
	find_conflicts_1(T,H,InconsH),
	find_conflicts(T,InconsT).
	
find_conflicts_1([],_,[]).
find_conflicts_1([rule(Ilist,Outlist,N)|T],
                	rule(Ilist1,Outlist1,N1),[Incons|TI]):- 
	(\+ ord_disjoint(Ilist,Ilist)
	  ; \+ ord_disjoint(Outlist,Outlist1) ),!,
	  (N @< N1 -> Incons = incons(N,N1) ; Incons = incons(N1,N)),
	find_conflicts_1(T,rule(Ilist1,Outlist1,N1),TI).
find_conflicts_1([_|T],rule(Ilist1,Outlist1,N1),TI):- 
	find_conflicts_1(T,rule(Ilist1,Outlist1,N1),TI).

% Backtracks through ALL non-conflicting sets of rules for a given
% state
/* 
generate_rulesets([],_Incons,Accum,Accum):- Accum \= [].
generate_rulesets([rule(Ilist,Outlist,N)|TR],Incons,
	          InAccum,Out):- 
	check_incons(Incons,InAccum,N),
	generate_rulesets(TR,Incons,[rule(Ilist,Outlist,N)|InAccum],Out).
generate_rulesets([_|TR],Incons,Accum,TRS):- 
	generate_rulesets(TR,Incons,Accum,TRS).

check_incons([],_InAccum,_N).
check_incons([incons(N1,N)|R],InAccum,N):-!,
	\+ memberchk(rule(_,_,_,N1),InAccum),
	check_incons(R,InAccum,N).
check_incons([_|R],InAccum,N):-
	check_incons(R,InAccum,N).
*/



get_rules_for_state_1([],_State,[]).
get_rules_for_state_1([H|T],State,[Rules2|RT]):-
	findall(rule([H|Places],Output,Dyn,Tran),rule([H|Places],Output,Dyn,Tran),Rules),
	check_concession(Rules,State,Rules1),
	check_dynamic_constraints(Rules1,Rules2,State),
	get_rules_for_state_1(T,State,RT).

% Check concession checks that a token is in all places in *t, and no
% token is in t*. 
check_concession([],_,[]).
check_concession([rule([Inp|Ilist],Outlist,Dyn,Name)|T],Input,
                	[rule([Inp|Ilist],Outlist,Dyn,Name)|T1]):-
	state_subset(Ilist,Input),
	ord_disjoint(Outlist,Input),!,
	check_concession(T,Input,T1).
check_concession([_Rule|T],Input,T1):-
	check_concession(T,Input,T1).

	
bound_search:- 
	conget(foo,N),
	(N > 1000000 -> 
	    abort('Too many states!')
	  ; N1 is N + 1,
	    conset(foo,N1) ).

:- table right_reachable/2.
right_reachable(InState,NewState):-
	hasTransition(InState,MidState),
	right_reachable(MidState,NewState).
right_reachable(InState,NewState):-
	hasTransition(InState,NewState).

