
:- dynamic '_$edges'/2.
:- index('_$edges'/2,trie).

:- dynamic '_$nodes'/1.
:- index('_$nodes'/1,trie).

:- import random/1, random/3 from random.
:- import member/2,flatten/2 from basics.
:- import datime_setrand/0 from random.
:- import concat_atom/2 from string.

?- datime_setrand.

:- dynamic rule/4.
:- index(rule/4,2).

:- ensure_loaded(elemNet).
%----------------------------------

/* Generates an Elementary Petri Net with Places places, Transitions
   transitions, and for each transition, the number of its input and
   output set drawn uniformly from [1..TranInput], and |OutputSet| <=
   |InputSet| + 1 

On my Mac

For a 10000 place 40000 transition w. up to four places linked for input/output
    time_P_N(10000,10000) took about 15 secs. 
    timeright_P_N(10000,10000) took about 1 secs. 

For a 20000 place 100000 transition w. up to four places linked for input/output
    timeright_P_N(1000,10000) took about 24 secs. 

*/

genNet(Places,Transitions,TranInput,NetS):-
	retractall(rule(_,_,_,_)),
	TranInput1 is TranInput + 1,
	Places1 is Places + 1,
	genNet_1(Transitions,Places1,TranInput1),
	findall(rule(T,I1,I,O),rule(T,I1,I,O),Net),
	sort(Net,NetS).

genNet(Places,Transitions,TranInput):-
	retractall(rule(_,_,_,_)),
	TranInput1 is TranInput + 1,
	Places1 is Places + 1,
	genNet_1(Transitions,Places1,TranInput1).

genNet_1(0,_Places,_TranInput):- !.
genNet_1(N,Places,TranInput):-
	concat_atom([t,N],Tran),
	random(1,TranInput,ThisInput),
	OutputBound is ThisInput + 1,
	random(1,OutputBound,ThisOutput),
	gen_rule(Tran,Places,ThisInput,ThisOutput),
	N1 is N - 1,
	genNet_1(N1,Places,TranInput).

gen_rule(Tran,Places,ThisInput,ThisOutput):- 
	repeat,
	gen_places(ThisInput,Places,Input),
	sort(Input,[First|InputS]),
	gen_places(ThisOutput,Places,Output),
	sort(Output,OutputS),
	\+ rule(_,First,InputS,OutputS),
	assert(rule(Tran,First,InputS,OutputS)),
	!.

gen_places(0,_Places,[]):- !.
gen_places(N,Places,[Place|R]):- 
	random(1,Places,PlaceNum),
	concat_atom([p,PlaceNum],Place),
	N1 is N - 1,
	gen_places(N1,Places,R).

%-------------------

do_write_net( L ) :-
	member( rule(A,B,C,D), L ),
	write( rule(A,B,C,D) ),
	writeln( '.' ),
	fail.
do_write_net( _ ).

fileNet(M,F,Name) :-
	genNet( M, F, L ),
	tell( Name ),
	do_write_net(L),
	told.

%-------------------

time_P_N(N,Places):- 
     cputime(Before),
     test_P_N(N,Places),
     cputime(After),
     Time is After - Before,
     writeln(Time).
		     
test_P_N(N,Places):- 
	test_P_N_1(N,Places,Plist),
	member(Place,Plist),
%	writeln(Place),
	call_reachable([Place]),
%	count_states(L), 
%	writeln(L),
	fail.
test_P_N(_N,_Trans).

test_P_N_1(0,_Trans,[]):- !.
test_P_N_1(N,Trans,[T|R]):- 
	random(1,Trans,Tnum),
	concat_atom([p,Tnum],T),
	N1 is N - 1,
	test_P_N_1(N1,Trans,R).

:- import conset/2 from machine.

call_reachable(H):- 
	conset(foo,0),
	reachable(H,_),
	!.

timeright_P_N(N,Places):- 
     cputime(Before),
     testright_P_N(N,Places),
     cputime(After),
     Time is After - Before,
     writeln(Time).
		     
testright_P_N(N,Places):- 
	testright_P_N_1(N,Places,Plist),
	member(Place,Plist),
	writeln(Place),
	call_right_reachable([Place]),
%	count_rr_states(L), 
%	writeln(L),
	fail.
testright_P_N(_N,_Trans).

testright_P_N_1(0,_Trans,[]):- !.
testright_P_N_1(N,Trans,[T|R]):- 
	random(1,Trans,Tnum),
	concat_atom([p,Tnum],T),
	N1 is N - 1,
	testright_P_N_1(N1,Trans,R).

call_right_reachable(H):- 
	conset(foo,0),
	right_reachable(H,_),
	!.

reset:- 
	abolish_all_tables,
	retractall(rule(_,_,_,_)).

end_of_file.

genNet(1000,1000,3).  -- too sparce.
genNet(1000,2000,2).  -- too rich.

test_N(N,Trans):- 
	test_N_1(N,Trans,Tlist),
	member(Tran,Tlist),
	rule(Tran,I,I1,O),
	writeln(rule(Tran,I,I1,O)),
	call_reachable([I|I1]),
%	writeln(reachable([I|I1],O1)),
	count_states(L), 
	writeln(L),fail.
test_N(_N,_Trans).

test_N_1(0,_Trans,[]):- !.
test_N_1(N,Trans,[T|R]):- 
	random(1,Trans,Tnum),
	concat_atom([t,Tnum],T),
	N1 is N - 1,
	test_N_1(N1,Trans,R).

