:- import ord_subset/2, ord_disjoint/2,ord_subtract/3 from ordsets.
:- import flatten/2,memberchk/2, member/2,length/2 from basics.
:- dynamic max/1.

% Time Elementary Petri Net Evaluator.

:- import filterPO/3,temp_filterReduce/4 from aggregs.

time_reachable(Instate,Newstate,Newtime):- 
%	filterPO(reachable(Instate,Newstate),Time,contains_list_list).
	temp_filterReduce(reachable(Instate,Newstate),union_intervals,[],Newtime).

%:- table reachable/3.
reachable(InState,NewState,Time):-
	temp_filterReduce(reachable(InState,State),union_intervals,[],Time1),
	hasTransition(State,NewState,Time2),
%	writeln(returning(State,NewState,Time2)),
	add_and_filter_intervals(Time1,Time2,Time).
%	Time = Time2.
reachable(InState,NewState,Time):-
	hasTransition(InState,NewState,Time).

hasTransition(State,NewState,Time):-
	get_rules_for_state(State,AllRules),
	member(Rule,AllRules),
	apply_rule_to_state(Rule,State,NewState,Time).
%        writeln(state(State,Rule,NewState,Time)).

%----
% Constructs sets of rules with concession in State.  Also indicates which
% rules have input or output conflicts
get_rules_for_state(State,Flatrules):-
	get_rules_for_state_1(State,State,Rules),
	flatten(Rules,Flatrules),
	!.

get_rules_for_state_1([],_State,[]).
get_rules_for_state_1([H|T],State,[Rules1|RT]):-
	findall(rule(Tran,H,Places,Output,Time),rule(Tran,H,Places,Output,Time),Rules),
	check_concession(Rules,State,Rules1),
	get_rules_for_state_1(T,State,RT).

% Check concession checks that a token is in all places in *t, and no
% token is in t*. 
check_concession([],_,[]).
check_concession([rule(Name,Inp,Ilist,Outlist,Time)|T],Input,
                	[rule(Name,Inp,Ilist,Outlist,Time)|T1]):-
	ord_subset(Ilist,Input),
	ord_disjoint(Outlist,Input),!,
	check_concession(T,Input,T1).
check_concession([_Rule|T],Input,T1):-
	check_concession(T,Input,T1).

%-------
apply_rule_to_state(rule(_Name,In,InS,Out,Time),State,NewState,Time):-
	ord_subtract(State,[In|InS],Diff),
	flatsort([Out|Diff],NewState).

flatsort(In,Out):- 
	flatten(In,In1),
	sort(In1,Out).

%rule(A,B,C,D):- rule(A,B,C,D,_).

union_intervals(L1,L2,L3):- (L1 == id,L3 = L2 ; L2 == id,L3 = L1),!. 
union_intervals(L1,L2,L3):- 
	flatsort([L1,L2],Lmid),
	normalize_intervals(Lmid,L3).

% takes a sorted list of intervals and constructs a minimal number of
% max intervals.
normalize_intervals([],[]).
normalize_intervals([H],[H]):- !.
normalize_intervals([i(F1in,T1in),i(F2in,T2in)|Rest],Out):- 
	abstract_interval(i(F1in,T1in),i(F1,T1)),
	abstract_interval(i(F2in,T2in),i(F2,T2)),
	(T1 >= F2 -> 
	    (T1 >= T2 -> T = T1 ; T = T2),
	    normalize_intervals([i(F1,T)|Rest],Out)
	;
	    Out = [i(F1,T1)|NewOut],
	    normalize_intervals([i(F2,T2)|Rest],NewOut) ).
	
abstract_interval(i(F2in,T2in),i(F2,T2)):- 
	max(Max),!,
	(F2in >= Max -> F2 = Max ; F2 = F2in),
	(T2in >= Max -> T2 = Max ; T2 = T2in).
abstract_interval(I,I).

add_and_filter_intervals(Time1,Time2,Time):- 
	add_intervals(Time1,Time2,Time3),
	union_intervals(Time3,[],Time).

add_intervals([],_Time2,[]).
add_intervals([I1|R1],Time2,[Thistime|Time]):- 
	add_intervals_1(Time2,I1,Thistime),
	add_intervals(R1,Time2,Time).

add_intervals_1([],_Time2,[]).
add_intervals_1([I1|R1],Time2,[Thistime|Time]):- 
	add_base_intervals(Time2,I1,Thistime),
	add_intervals_1(R1,Time2,Time).

add_base_intervals(i(F1,T1),i(F2,T2),i(F,T)):- 
	add(F1,F2,F),add(T1,T2,T).

%show_states:- 
%	get_residual(reachable(X,Y,Z),_F),writeln((X,Y,Z)),fail.
%show_states.

count_shared_states(L):- 
	findall(1,get_residual(shared_reachable(_X,_Y),_F),List),
	length(List,L).

add(N1,N2,N):- 
	N_temp is N1 + N2,
	(max(Max),N_temp >= Max -> N = max ; N = N_temp).

end_of_file.

add(N1,N2,max):- max(Max),(N1 >= Max ; N2 >= Max),!.
add(N1,N2,N):- 
	N_temp is N1 + N2,
	(max(Max),N_temp >= Max -> N = max ; N = N_temp).

gte(max,N):- !, N == max.
gte(N1,N2):- integer(N2),N1 >= N2.

contains_list_list(A,B):- contained_in_list_list(B,A).

contained_in_list_list([],_I2).
contained_in_list_list([I1|Irest],I2):- 
	contains_list(I2,I1),
	contained_in_list_list(Irest,I2).

/* Some interval in list contains I1 */
contains_list([I2|_],I1):- 
	contains(I2,I1),!.
contains_list([_|Rest],I1):- 
	contains_list(Rest,I1).

contains([F1,T1],[F2,T2]):- F1 =< F2,T1 >= T2.

temporal_intersect(L1,L2,L3):- (L1 == id,L3 = L2 ; L2 == id,L3 = L1),!. 
temporal_intersect([],_List2,[]).
temporal_intersect([In|Tin],List2,Out):- 
	temporal_intersect_1(List2,In,Out,Diff),
	temporal_intersect(Tin,List2,Diff).

temporal_intersect_1([],_In,Diff,Diff).
temporal_intersect_1([Int1|R],Int2,In,Out):- 
	(intersect_2_intervals(Int1,Int2,Int3) -> 
	    In = [Int3|Mid]
	  ; In = Mid),
	temporal_intersect_1(R,Int2,Mid,Out).

intersect_2_intervals(i(F1,T1),i(F2,T2),i(F,T)):- 
	(T1 >= F2,F1 =< T2 ; T2 >= F1,F2 =< T1),
	(F1 > F2 -> F = F1 ; F = F2),
	(T1 < T2 -> T = T1 ; T = T2). 

union_2_intervals([F1,T1],[F2,T2],Out):- 
	((T1 >= F2,F1 =< T2 ; T2 >= F1,F2 =< T1) -> 
	    (Out = [F,T],
	     (F1 < F2 -> F = F1 ; F = F2),
	     (T1 > T2 -> T = T1 ; T = T2) )
	 ; Out = [ [F1,T1],[F2,T2] ] ).

find_conflicts([],[]).
find_conflicts([H|T],[InconsH|InconsT]):- 
	find_conflicts_1(T,H,InconsH),
	find_conflicts(T,InconsT).
	
find_conflicts_1([],_,[]).
find_conflicts_1([rule(N,Inp,Ilist,Outlist)|T],
                	rule(N1,Inp1,Ilist1,Outlist1),[Incons|TI]):- 
	(\+ ord_disjoint([Inp|Ilist],[Inp1|Ilist1])
	  ; \+ ord_disjoint(Outlist,Outlist1) ),!,
	  (N @< N1 -> Incons = incons(N,N1) ; Incons = incons(N1,N)),
	find_conflicts_1(T,rule(N1,Inp1,Ilist1,Outlist1),TI).
find_conflicts_1([_|T],rule(N1,Inp1,Ilist1,Outlist1),TI):- 
	find_conflicts_1(T,rule(N1,Inp1,Ilist1,Outlist1),TI).

% Backtracks through ALL non-conflicting sets of rules for a given
% state
/* 
generate_rulesets([],_Incons,Accum,Accum):- Accum \= [].
generate_rulesets([rule(N,Inp,Ilist,Outlist)|TR],Incons,
	          InAccum,Out):- 
	check_incons(Incons,InAccum,N),
	generate_rulesets(TR,Incons,[rule(N,Inp,Ilist,Outlist)|InAccum],Out).
generate_rulesets([_|TR],Incons,Accum,TRS):- 
	generate_rulesets(TR,Incons,Accum,TRS).

check_incons([],_InAccum,_N).
check_incons([incons(N1,N)|R],InAccum,N):-!,
	\+ memberchk(rule(N1,_,_,_),InAccum),
	check_incons(R,InAccum,N).
check_incons([_|R],InAccum,N):-
	check_incons(R,InAccum,N).
*/

