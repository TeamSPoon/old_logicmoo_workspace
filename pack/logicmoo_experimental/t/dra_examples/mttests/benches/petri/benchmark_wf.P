:- import between/3 from basics.
:- import conset/2,conget/2 from machine.
:- import concat_atom/2 from string.
:- import member/2,length/2 from basics.

:- conset(placectr,0).
:- conset(transctr,0).

:- index(rule/4,trie).

:- import par_execute/1, n_par_execute/2 from thread.

:- thread_shared rule/4.

:- [colorNet].

% All benchmarks are based on a graph of workflow branches called a
% widget.  Branching always starts off with creation of multiple
% instances (14) and ends either with or a cancellation pattern (20)
% which cancels all of the tokens in the path after the first one
% reaches the cancellation point; a synchronizing merge (7) which
% joins any paths that may be present, or a discriminator (9) which
% propagates the first token T to reach the discrimination point, and
% simply "consumes" other tokens in Ts group when the discrimator is
% reached.  9 is the most expensive, then 7, then 20.
%
%                              ---------------------------------------
%                              |                                      |
%                             \ /                                     |
% A widget has the form:  p0: 14-7 -> p8: 14-20 -> p15: 14-7 -> p23: 14-9
%                                            |
%                                            ----> p30: 14-20
%
% This takes up about 40 places, but generates a lot of places, as
% shown below.
%
% Shared benchmark: The shared benchmark generates 4 widgets that are
% not connected to each other (states explode otherwise), starting at
% places 0, 40, 80, 120. The shared benchmark thus has 20 different
% goals that could be executed, so it should scale, to some extent, up
% to 20 processors.
%
%Times on my mac for 1 thread. 
% All 20 states: 2.87 million states ; reachable 305 secs ; shared_reachable 339 secs.  
% 0,40,80,120: 1.07 million states ; reachable 114 secs 
% 20 states - {0,40,80,120} 1.8 million stats; ; reachable 192 secs
%
% I have set up the shared benchmark to used shared reachable on the
% last set of 16 queries.  Maybe this will work ok, but we may have to
% fuss with it if the queries take different time.
%
% Private benchmark: Use gen_private and private_scale_wf/1
% The shared benchmark probably has too many states
% to scale up to 16 processors.  
%
% 0,8,15,23,30 1.33 million states ; reachable 165 secs
% 8             .267 millison states ; reachable 32 seconds; 100MB table space
%
% Ive set up the private benchmark to use only state 8.  This should
% allow us enough room to scale up to 16.
%
% If this proves to be a problem, use alt_private_gen_wf in
% bench_private_wf 
%
% 8 .25 million states; reachable 29 secs; 48MB table
%
% space which would require 800MB of table space for 16 threads. 

/* simply duplicates a single goal to be executed independently by N threads */
private_scale_wf(NThreads) :-
	abolish_all_tables,
	once(private_init_state(S)),
%	alt_private_gen_wf_1,
	walltime(Before),
	n_par_execute(reachable(S,_),NThreads),
	walltime(After),
	Time is After - Before,
	write(datum([wf,priv],NThreads,Time)),
	writeln('.'),
	flush_output.

/* divies up all the start states among N threads. */
shared_bench_wf(NThreads,NWidgets):- 
	abolish_all_tables,
	gen_shared_goal_list( NThreads, NWidgets, shared_reachable, LG ),
	writelist(LG),
	walltime(Before),
	par_execute(LG),
	walltime(After),
	Time is After - Before,
	write(datum([wf,shared],NThreads,Time)),
	writeln('.'),
	flush_output.

/* Used for private test */
duplicate_private_goal( NThreads, P, LG ) :-
%	findall( S, private_init_state( S ), LS ),
	private_init_state(S),
	duplicate_goal(NThreads,P,S,LG).

duplicate_goal(0,_Pred,_List,[]):-!.
duplicate_goal(N,Pred,Arg,[[Goal]|R]):-
	N1 is N - 1,
	Goal =.. [Pred,Arg,_],
	duplicate_goal(N1,Pred,Arg,R).

/* Divvies up into Len/Nthreads batches, each of which are executed via seq_execute */
gen_shared_goal_list( NThreads,NWidgets, P, LG ) :-
	(NThreads > NWidgets -> abort('Too many threads for states') ; true),
	get_init_states(NWidgets,LS),
%	findall( S, shared_init_state( S ), LS ),
%	length(LS,Len),
	Quot is NWidgets//NThreads,
	get_goals( LS, Quot, LG, P ).	

get_init_states(0,[]):- !.
get_init_states(N,[[p(Place,1)]|R]):- 
	N1 is N - 1,
	Place is N1*40 + 8,
	get_init_states(N1,R).

get_goals( [], _NT, [], _P ).
get_goals( LS, NT, [seq_execute(G)|Gs], P ) :-
	get_first_goals( NT, LS, LS1, G, P ),
	get_goals( LS1, NT, Gs, P ).

get_first_goals( _NT, [], [], [], _P ).
get_first_goals( 0, LS, LS, [], _P ).
get_first_goals( NT, [S|LS], LS1, [G|Gs], P ) :-
	G =.. [P,S,_],
	NT1 is NT - 1,
	get_first_goals( NT1, LS, LS1, Gs, P ).

all_par_execute([]).
all_par_execute([H|L]) :-
	writeln(par_execute(H)),
	par_execute(H),
	all_par_execute(L).

seq_execute(H):- 
	member(G,H),
%	writeln(G),
	call(G),
	fail.
seq_execute(_H).

writelist([]).
writelist([H|T]):- 
	writeln(H),
	writelist(T).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/* Generation of workflows */

gen_private_wf:- 
	retractall(rule(_,_,_,_)),
        private_gen_wf_1.

private_gen_wf_1 :-
	retractall(rule(_,_,_,_)),
	restartplace,
	nextplace(First1),
	gen_wf_2(First1,_First2).

gen_wf_2(First,Last):- 
	gen_widget_14_7(6,6,First,P1),
	gen_widget_14_20(5,5,P1,P2),
	gen_widget_14_7(6,6,P2,P3),
	gen_widget_14_20(5,5,P3,P4),
	gen_widget_14_9(5,5,P3,Last),
	nexttrans(T),
	assert(rule([p(P4,X)],[p(0,X)],dyn([],[]),T)).

alt_private_gen_wf_1 :-
	abolish(rule/4),
	restartplace,
	nextplace(First1),
	alt_gen_wf_2(First1,_First2).

alt_gen_wf_2(First,_Last):- 
	gen_widget_14_7(6,6,First,P1),
	gen_widget_14_20(5,5,P1,P2),
	gen_widget_14_7(6,6,P2,P3),
	gen_widget_14_20(5,5,P3,P4),
%	gen_widget_14_9(5,5,P3,Last),
	nexttrans(T),
	assert(rule([p(P4,X)],[p(0,X)],dyn([],[]),T)).

gen_shared_wf(0).
gen_shared_wf(N):- 
	gen_shared_wf_1,
	N1 is N - 1,
	gen_shared_wf(N1).

gen_shared_wf_1:- 
	nextplace(In),
	writeln(in(In)),
	gen_widget_14_7(6,6,In,P1),
	writeln(p1(P1)),
	gen_widget_14_20(5,5,P1,P2),
	writeln(p2(P2)),
	gen_widget_14_7(6,6,P2,P3),
	writeln(p3(P3)),
	gen_widget_14_20(5,5,P3,P4),
	writeln(p4(P4)),
	gen_widget_14_9(5,5,P3,_P5),
	nextplace(_).

% 14_7  - 6X6 is abt 12 secs
% 14_9  - 6X6 is abt 32 secs  262207 states
% 14_20 - 6X6 is abt 17 secs  117650 states

/* Generation of goals */
%private_init_state( [p(0,1)] ).
private_init_state( [p(8,1)] ).
%private_init_state( [p(15,1)] ).
%private_init_state( [p(23,1)] ).
%private_init_state( [p(30,1)] ).

restartplace :-
	conset(placectr,0).

nextplace(N):- 
	coninc(placectr,N).
nexttrans(P):- 
	coninc(transctr,N),
	concat_atom([t,N],P).

coninc(Ctr,N):- 
	conget(Ctr,N),
	N1 is N + 1,
	conset(Ctr,N1).

% create multiple instances, then synchronized merge.  There will be ~(Length+1)**Width states.	
gen_widget_14_7(Width,Length,Pin,Pout):- 
	nexttrans(T),
	nextplace(P1),
	assert(rule([p(Pin,X)],[],dyn([],[insert(p(P1,o(X,N)),between(1,Width,N))]),T)),
	gen_chain(Length,P1,Pendchn),
	nexttrans(Tend),
	nextplace(Pout),
	gen_noconts(P1,Pendchn,EndInst,NoConts),
	assert(rule([p(Pendchn,o(EndInst,1))],[p(Pout,EndInst)],dyn(NoConts,
	                                                       [delete(p(Pendchn,o(EndInst,_)))]),Tend)).

gen_widget_14_9(Width,Length,Pin,Pout):- 
	nexttrans(T),
	nextplace(P1),
	assert(rule([p(Pin,X)],[],dyn([],[insert(p(P1,o(X,N)),between(1,Width,N))]),T)),
	gen_chain(Length,P1,Pendchn),
	nextplace(Pout),
	gen_noconts(P1,Pendchn,EndInst,NoConts),
	% propagate first & set up catcher 
	nexttrans(Tend1),	nextplace(Preset),
	assert(rule([p(Pendchn,o(EndInst,_))],[p(Pout,EndInst),p(Preset,EndInst)],
	            dyn([doesnt_contain(constr(p(Preset,EndInst),true))],[]),Tend1)),
        % remove all but first
	nexttrans(Tend2),
	assert(rule([p(Pendchn,o(EndInst,_))],[],
	            dyn([contains(constr(p(Preset,EndInst),true))],[]),Tend2)),
        % reset catcher
	nexttrans(Tend3),
	assert(rule([p(Preset,EndInst)],[],dyn(NoConts,[]),Tend3)).

gen_widget_14_20(Width,Length,Pin,Pout):- 
	nexttrans(T),
	nextplace(P1),
	assert(rule([p(Pin,X)],[],dyn([],[insert(p(P1,o(X,N)),between(1,Width,N))]),T)),
	gen_chain(Length,P1,Pendchn),
	nexttrans(Tend),
	nextplace(Pout),
	gen_deletes(P1,Pout,EndInst,Deletes),
	assert(rule([p(Pendchn,o(EndInst,_))],[p(Pout,EndInst)],dyn([],Deletes),Tend)).

gen_noconts(Pout,Pout,_Var,[]):- !.
gen_noconts(Pin,Pout,Var,[doesnt_contain(constr(p(Pin,o(Var,_)),true))|R]):- 
	Pmid is Pin + 1,
	gen_noconts(Pmid,Pout,Var,R).

gen_deletes(Pout,Pout,_Var,[]):- !.
gen_deletes(Pin,Pout,Var,[delete(p(Pin,o(Var,_)))|R]):- 
	Pmid is Pin + 1,
	gen_deletes(Pmid,Pout,Var,R).

gen_chain(0,Pendchain,Pendchain):-!.
gen_chain(N,Pin,Pendchain):-
	nexttrans(T),
	nextplace(Pout),
	assert(rule([p(Pin,X)],[p(Pout,X)],dyn([],[]),T)),
	N1 is N - 1,
	gen_chain(N1,Pout,Pendchain).

end_of_file.

rule([p(p1,X)],[],dyn([],[insert(p(p2,o(X,N)),between(1,4,N))],t1)).
rule([p(p2,X)],[p3(X)],dyn([],[],t2)).
rule([p(p3,X)],[p4(X)],dyn([],[],t3)).
rule([p(p4,X)],[p5(X)],dyn([doesnt_contain(constr(p(p2,o(X,_)),true)),
	                           doesnt_contain(constr(p(p3,o(X,_)),true))],[delete(p(p4,o(X,_)))],t4)).

/* dont know if this one is being used */
% all 5x5 -- 5 seconds
% 6x6,5x5,6x6,5x5 -- 33 seconds
% break apart at p(8,1), p(15,1) p(23,1), p(30,1)
bench_wf_1(Time):- 
	nextplace(Pstart),
	gen_widget_14_7(6,6,Pstart,P1),
	writeln(p1(P1)),
	gen_widget_14_20(5,5,P1,P2),
	writeln(p1(P2)),
	gen_widget_14_7(6,6,P2,P3),
	writeln(p1(P3)),
	gen_widget_14_20(5,5,P3,P4),
	writeln(p1(P4)),
	gen_widget_14_9(5,5,P3,_P5),
	nexttrans(T),
	assert(rule([p(P4,X)],[p(0,X)],dyn([],[]),T)),
	walltime(Before),
	reachable([p(0,1)],_),
	walltime(After),
	Time is After - Before,
	statistics.

all_seq_execute([]).
all_seq_execute([H|L]) :-
	seq_execute(H),
	all_seq_execute(L).

/*
gen_private_goal_list( NThreads, P, LG ) :-
	findall( S, private_init_state( S ), LS ),
	get_goals( LS, NThreads, LG, P ).	
*/


gen_shared_wf:- 
	retractall(rule(_,_,_,_)),
	gen_shared_wf_1,
	gen_shared_wf_1,
	gen_shared_wf_1,
	gen_shared_wf_1.

/*	gen_widget_14_7(6,6,Pstart,P1),
	writeln(p1(P1)),
	gen_widget_14_20(5,5,P1,P2),
	writeln(p2(P2)),
	gen_widget_14_7(6,6,P2,P3),
	writeln(p3(P3)),
	gen_widget_14_20(5,5,P3,P4),
	writeln(p4(P4)),
	gen_widget_14_9(5,5,P3,_P5),
%	nexttrans(T),
%	assert(rule([p(P4,X)],[p(0,X)],dyn([],[]),T)),
%---------
	nextplace(_),
	nextplace(P5),
	writeln(p5(P5)),
	gen_widget_14_7(6,6,P5,P6),
	writeln(p6(P6)),
	gen_widget_14_20(5,5,P6,P7),
	writeln(p7(P7)),
	gen_widget_14_7(6,6,P7,P8),
	writeln(p8(P8)),
	gen_widget_14_20(5,5,P8,P9),
	writeln(p9(P9)),
	gen_widget_14_9(5,5,P9,_P10),
%---------
	nextplace(_),
	nextplace(P10),
	writeln(p10(P10)),
	gen_widget_14_7(6,6,P10,P11),
	writeln(p11(P11)),
	gen_widget_14_20(5,5,P11,P12),
	writeln(p12(P12)),
	gen_widget_14_7(6,6,P12,P13),
	writeln(p13(P13)),
	gen_widget_14_20(5,5,P13,P14),
	writeln(p14(P14)),
	gen_widget_14_9(5,5,P14,_P15),
%---------
	nextplace(_),
	nextplace(P15),
	writeln(p15(P15)),
	gen_widget_14_7(6,6,P15,P16),
	writeln(p16(P16)),
	gen_widget_14_20(5,5,P16,P17),
	writeln(p17(P17)),
	gen_widget_14_7(6,6,P17,P18),
	writeln(p18(P18)),
	gen_widget_14_20(5,5,P18,P19),
	writeln(p19(P19)),
	gen_widget_14_9(5,5,P19,P20),
	writeln(p20(P20)).
*/

%shared_init_state( [p(0,1)] ).
shared_init_state( [p(8,1)] ).
%shared_init_state( [p(15,1)] ).
%shared_init_state( [p(23,1)] ).
%shared_init_state( [p(30,1)] ).

%shared_init_state( [p(40,1)] ).
shared_init_state( [p(48,1)] ).
%shared_init_state( [p(55,1)] ).
%shared_init_state( [p(63,1)] ).
%shared_init_state( [p(70,1)] ).

%shared_init_state( [p(80,1)] ).
shared_init_state( [p(88,1)] ).
%shared_init_state( [p(95,1)] ).
%shared_init_state( [p(103,1)] ).
%shared_init_state( [p(110,1)] ).

%shared_init_state( [p(120,1)] ).
shared_init_state( [p(128,1)] ).
%shared_init_state( [p(135,1)] ).
%shared_init_state( [p(143,1)] ).
%shared_init_state( [p(150,1)] ).

