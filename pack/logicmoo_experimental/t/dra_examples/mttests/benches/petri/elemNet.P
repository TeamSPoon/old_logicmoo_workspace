:- import ord_subset/2, ord_disjoint/2,ord_subtract/3 from ordsets.
:- import flatten/2,memberchk/2, member/2,length/2 from basics.

% Elementary Petri Net Evaluator.
% Also, could find useful transitions, live transitions, (sequential)
% configuration graph. 
% Based on this, could extend to check whether two nets are bisimular, 
% to find all processes in a net, contact-freeness, etc.

% Finds all configurations reachable from instate
% First arg is a state: i.e. a sorted list of places each of which
% have a token in S.

:- import conget/2, conset/2 from machine.
:- import coninc/1 from gensym.

%:- conset(findall_cnt,0).

:- table reachable/2.
reachable(InState,NewState):-
	reachable(InState,State),
%	writeln(reachable(InState,State)),
	hasTransition(State,NewState).
%        bound_search.
reachable(InState,NewState):-
	hasTransition(InState,NewState).

bound_search:- 
	conget(foo,N),
	(N > 1000000 -> 
	    abort('Too many states!')
	  ; N1 is N + 1,
	    conset(foo,N1) ).


:- table right_reachable/2.
:- use_subsumptive_tabling right_reachable/2.
right_reachable(InState,NewState):-
	hasTransition(InState,MidState),
	right_reachable(MidState,NewState).
right_reachable(InState,NewState):-
	hasTransition(InState,NewState).

:- dynamic dyn_reachable/2.
:- table dyn_reachable/2.

go_dyn_reachable(In,_):- 
%	(table dyn_reachable/2),
	assert((dyn_reachable(InState,NewState):- dyn_reachable(InState,State),hasTransition(State,NewState))),
	assert((dyn_reachable(InState,NewState):-hasTransition(InState,NewState))),
%	writeln('-----------'),
%	listing(dyn_reachable),
%	writeln('-----------').
	dyn_reachable(In,_).

:- thread_shared shared_dyn_reachable/2.
:- dynamic shared_dyn_reachable/2.
:- table shared_dyn_reachable/2.

:- assert((shared_dyn_reachable(InState,NewState):- 
	shared_dyn_reachable(InState,State),hasTransition(State,NewState))).
:- assert((shared_dyn_reachable(InState,NewState):-hasTransition(InState,NewState))).

go_shared_dyn_reachable(In,_):- 
%	(table dyn_reachable/2),
%	writeln('-----------'),
%	listing(dyn_reachable),
%	writeln('-----------').
	shared_dyn_reachable(In,_).

:- thread_shared shared_reachable/2.
:- table shared_reachable/2.
shared_reachable(InState,NewState):-
	shared_reachable(InState,State),
	hasTransition(State,NewState).
shared_reachable(InState,NewState):-
	hasTransition(InState,NewState).

hasTransition(State,NewState):-
	get_rules_for_state(State,AllRules),
	member(Rule,AllRules),
	apply_rule_to_state(Rule,State,NewState).
%        writeln(state(State,Rule,NewState)).

%----
% Constructs sets of rules with concession in State.  Also indicates which
% rules have input or output conflicts
get_rules_for_state(State,Flatrules):-
	get_rules_for_state_1(State,State,Rules),
	flatten(Rules,Flatrules),
	!.

get_rules_for_state_1([],_State,[]).
get_rules_for_state_1([H|T],State,[Rules1|RT]):-
	findall(rule([H|Places],Output,Tran),rule([H|Places],Output,Tran),Rules),
%	coninc(findall_cnt),
	check_concession(Rules,State,Rules1),
	get_rules_for_state_1(T,State,RT).

% Check concession checks that a token is in all places in *t, and no
% token is in t*. 
check_concession([],_,[]).
check_concession([rule([Inp|Ilist],Outlist,Name)|T],Input,
                	[rule([Inp|Ilist],Outlist,Name)|T1]):-
	ord_subset(Ilist,Input),
	ord_disjoint(Outlist,Input),!,
	check_concession(T,Input,T1).
check_concession([_Rule|T],Input,T1):-
	check_concession(T,Input,T1).

%-------
apply_rule_to_state(rule(Input,Out,_Name),State,NewState):-
	ord_subtract(State,Input,Diff),
	flatsort([Out|Diff],NewState).

flatsort(In,Out):- 
	flatten(In,In1),
	sort(In1,Out).

count_states(L):- 
	findall(1,get_residual(reachable(_X,_Y),_F),List),
	length(List,L).

count_rr_states(L):- 
	findall(1,get_residual(right_reachable(_X,_Y),_F),List),
	length(List,L).

show_states:- 
	get_residual(reachable(X,Y),_F),writeln((X,Y)),fail.
show_states.

show_shared_states:- 
	findall(Y,get_residual(shared_reachable(_X,Y),_F),Reached),
	sort(Reached,Rsort),
	member(State,Rsort),
	writeln(State),
	fail.
show_shared_states.

count_shared_states(L):- 
	findall(1,get_residual(shared_reachable(_X,_Y),_F),List),
	length(List,L).

count_rules(L):- 
	findall(1,rule(_,_,_),List),
	length(List,L).

end_of_file.

find_conflicts([],[]).
find_conflicts([H|T],[InconsH|InconsT]):- 
	find_conflicts_1(T,H,InconsH),
	find_conflicts(T,InconsT).
	
find_conflicts_1([],_,[]).
find_conflicts_1([rule(Inplist,Outlist,N)|T],
                	rule(Inplist1,Outlist1,N1),[Incons|TI]):- 
	(\+ ord_disjoint(Inp|Ilist,Inplist1])
	  ; \+ ord_disjoint(Outlist,Outlist1) ),!,
	  (N @< N1 -> Incons = incons(N,N1) ; Incons = incons(N1,N)),
	find_conflicts_1(T,rule(Inplist1,Outlist1,N1),TI).
find_conflicts_1([_|T],rule(Inplist1,Outlist1,N1),TI):- 
	find_conflicts_1(T,rule(Inplist1,Outlist1,N1),TI).

% Backtracks through ALL non-conflicting sets of rules for a given
% state
/* 
generate_rulesets([],_Incons,Accum,Accum):- Accum \= [].
generate_rulesets([rule(N,Inp,Ilist,Outlist)|TR],Incons,
	          InAccum,Out):- 
	check_incons(Incons,InAccum,N),
	generate_rulesets(TR,Incons,[rule(N,Inp,Ilist,Outlist)|InAccum],Out).
generate_rulesets([_|TR],Incons,Accum,TRS):- 
	generate_rulesets(TR,Incons,Accum,TRS).

check_incons([],_InAccum,_N).
check_incons([incons(N1,N)|R],InAccum,N):-!,
	\+ memberchk(rule(N1,_,_,_),InAccum),
	check_incons(R,InAccum,N).
check_incons([_|R],InAccum,N):-
	check_incons(R,InAccum,N).
*/

