
:- import between/3,length/2 from basics.

%:- table distance(X,Y,(<)/2).
:- table distance(X,Y,min/3-999999999).
distance(X,Y,1):- edge(X,Y).
distance(X,Z,N):- 
	distance(X,Y,N1),
	edge(Y,Z),
	N is N1 + 1.

%----------

:- table d3(X,Y,min/3-999999999).
d3(X,Y,M):- edge(X,Y,M).
d3(X,Z,N):- 
	d3(X,Y,N1),
	edge(Y,Z,M),
	N is N1 + M.

%----------

:- table reach/2.
reach(X,Y):- edge(X,Y).
reach(X,Z):- 
	reach(X,Y),
	edge(Y,Z).

min(X,Y,Z):- X =< Y -> Z = X ; Z = Y.

:- table win/1, loser/1, player/1.
win(X) :- player(X),tnot(loser(X)).
loser(X):- attacks(Y,X),win(Y),attacks(Y1,X),Y1 \== Y,win(Y1).

attacks(X,Y):- edge(Y,X).
player(X):- edge(X,_).
player(X):- edge(_,X).

/* DLV
    win(X) :- player(X), #count{Y : attacks(Y,X), win(Y)} <= 1.
    player(X) :- attacks(X,_).
    player(X) :- attacks(_,X).
*/

%----------

test_reach(File):- 
	write('------'),writeln(testing(File)),
	load_dync(File),
	test_reach_1(T),writeln(cputime(T)),
	statistics,
	count_reach(F),writeln(facts(F)),
	nl,nl.

test_reach_1(Time):- 
	abolish_all_tables,
	cputime(Bef),
	reach(_,_),
	cputime(Aft),
	Time is Aft - Bef.

%----------

test_min(File):- 
	write('------'),writeln(testing(File)),
	load_dync(File),
	test_distance(T),writeln(cputime(T)),
	statistics,
	count_facts(F),writeln(facts(F)),
	nl,nl.

test_distance(Time):- 
	abolish_all_tables,
	cputime(Bef),
	distance(_,_,_),
	cputime(Aft),
	Time is Aft - Bef.

%----------

test_d3(File):- 
	write('------'),writeln(testing(File)),
	load_dync(File),
	test_d3_1(T),writeln(cputime(T)),
	statistics,
	count_d3_facts(F),writeln(facts(F)),
	nl,nl.

test_d3_1(Time):- 
	abolish_all_tables,
	cputime(Bef),
	d3(_,_,_),
	cputime(Aft),
	Time is Aft - Bef.

%----------

count_facts(N):- 
	findall(1,distance(_,_,_),L),
	length(L,N).

count_d3_facts(N):- 
	findall(1,d3(_,_,_),L),
	length(L,N).

count_reach(N):- 
	findall(1,reach(_,_),L),
	length(L,N).

end_of_file.

%-----------

write_dist(File):-
	tell(File),
	dist(X,Y,Z),write(dist(X,Y,Z)),writeln('.'),fail.
write_dist(_):- told.

distp(X,Y,D) :- dist(X,Z,D1),edge(Z,Y),D is D1 + 1.
distp(X,Y,1) :- edge(X,Y).

:- table dist/3.
dist(X,Y,D) :-
        get_calls(dist(X,Y,OD),CallHandle,Skel),
        distp(X,Y,CD),
%        writeln(distp(X,Y,CD)),
        (get_returns(CallHandle,Skel,RetHandle)
         ->     min(OD,CD,D),
                OD \== D,
                delete_return(CallHandle,RetHandle)
%         ;      min(999999999,CD,D)
         ;      CD = D
        ).


%-----------

test_spec_dist(Time):- 
	cputime(Bef),
	dist(_,_,_),
	cputime(Aft),
	Time is Aft - Bef.

%-----------

test_distance_1(N,Time):- 
	cputime(Bef),
	test_distance_1_1(N),
	cputime(Aft),
	Time is Aft - Bef.

test_distance_1_1(N):- 
	between(1,N,M),
	distance(M,_,_),
	fail.
test_distance_1_1(_N).

%-----------

test_distance_2(N,Time):- 
	cputime(Bef),
	test_distance_2_1(N),
	cputime(Aft),
	Time is Aft - Bef.

test_distance_2_1(N):- 
	between(1,N,From),
	between(1,N,To),
	distance(From,To,_),
	fail.
test_distance_2_1(_N).

%-----------

connected(Numnodes):- 
	reach(_X,_Y),
	\+ (between(1,Numnodes,From),
	    between(1,Numnodes,To),
	    From \== To,
	    \+ reach(From,To)).

:- table reach/2 as subsumptive.
reach(X,Y):- edge(X,Y).
reach(X,Z):- reach(X,Y),edge(Y,Z).

:- table reacha/2.
reacha(X,Y):- edge(X,Y).
reacha(X,Z):- reacha(X,Y),edge(Y,Z).

%-----------

test_cohesion(N,Coh,Time):- 
	cputime(Bef),
	test_cohesion_1(N,Coh),
	cputime(Aft),
	Time is Aft - Bef.

test_cohesion_1(N,Coh):- 
%	aggregate(sum(D),dist(_X,_Y,D),Ds),
	findall(D,dist(_,_,D),Ds),
	sumlist(Ds,Dsum),
	Coh is Dsum / (N * (N-1)).

sumlist([],0).
sumlist([H|T],S):-
	sumlist(T,S1),
	S is H + S1.

:- import aggregate/3 from c_aggregate.
test(F):- 
	aggregate(sum(X),member(X,[1,2,3]),