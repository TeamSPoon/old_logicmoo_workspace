/* This file contains code to process the (slightly edited) output of
generate_anscmp_examples, and create a file that can be used to test
answer_completion.  Run gen_db/0 to create the test file anscmp_ex.P
from the previous output.  (This needs to be done only once.)

And then you can run test/0 to test the current xsb on examples that
require answer completion.

*/


:- import conset/2, coninc/1, conget/2 from gensym.
:- import concat_atom/2, read_atom_to_term/2 from string.
:- import for/3 from basics.
:- import xwam_state/2 from machine.

:- dynamic db_clauses/2, wfm_clauses/2, db_queries/2.

gen_db :-
	load_all_ex,
	(queries -> true; true),
	dump_db.

dump_db :-
	open('anscmp_ex.P',write,OStr),
	(db_clauses(I,R),
	 write_canonical(OStr,db_clauses(I,R)),
	 writeln(OStr,'.'),
	 fail
	 ;
	 db_queries(I,Q),
	 (wfm_clauses(I,Q)
	  ->	 RA = true
	  ; wfm_clauses(I,not(Q))
	  ->	 RA = false
	  ;	 writeln(userout,error_undef(I,Q)),
		 RA = undefined
	 ),
	 write_canonical(OStr,db_queries(I,Q,RA)),
	 writeln(OStr,'.'),
	 fail
	 ;
	 true
	),
	close(OStr).

load_all_ex :-
	open('raw_examples.txt',read,IS),
	conset('_ctr',0),
	conset('_state',0),
	retractall(db_clauses(_,_)),
	retractall(wfm_clauses(_,_)),

	repeat,
	(file_read_line(IS,T)
	 ->	(T == 'Original DB:\n'
		 ->	coninc('_ctr'),
			conset('_state',0),
			fail
		 ; T == 'WF Model:\n'
		 ->	conset('_state',1),
			fail
		 ; T == '\n'
		 ->	fail
		 ;	concat_atom([Atom,'.\n'],T),
			read_atom_to_term(Atom,Term),
			conget('_state',State),
			conget('_ctr',Ctr),
			(State =:= 0
			 ->	assert(db_clauses(Ctr,Term)),
				fail
			 ;	assert(wfm_clauses(Ctr,Term)),
				fail
			)
		),
		fail
	 ;	!, close(IS)
	).

queries :-
	retractall(db_queries(_,_)),
	for(I,1,20000),
	(\+ db_clauses(I,_) -> !,fail ; true),
	db_clauses(I,p(Q)),
	abolish_table_pred(interp_in_db(_,_)),
	(interp_in_db(I,Q)
	 ->	xwam_state(2,DelayReg),
		(DelayReg =:= 0
		 ->	TVal = true
		 ;	TVal = undefined
		)
	 ;	TVal = false
	),
	(wfm_clauses(I,Q)
	 ->	WVal = true
	 ; wfm_clauses(I,not(Q))
	 ->	WVal = false
	 ;	WVal = undefined
	),
	TVal \== WVal,
	assert(db_queries(I,Q)),
	writeln(userout,w(I,Q,TVal,WVal)),
	fail.


:- table interp_in_db/2.
interp_in_db(I,(G1,G2)) :-
	interp_in_db(I,G1),
	interp_in_db(I,G2).
interp_in_db(I,not(G)) :-
	tnot(interp_in_db(I,G)).
interp_in_db(I,G) :-
	db_clauses(I,G).
interp_in_db(I,G) :-
	db_clauses(I,(G:-Body)),
	interp_in_db(I,Body).


test :-
	writeln(userout,'Loading anscmp_ex.P'),
	load_dyn(anscmp_ex),
	writeln(userout,'Testing'),
	for(I,1,20000),
	(db_queries(I,_,_)
	 ->	true
	 ;	!,
		writeln(userout,'Testing Complete'),
		fail
	),
	db_queries(I,Q,RA),
	(interp_in_db(I,Q)
	 ->	xwam_state(2,DelayReg),
		(DelayReg =:= 0
		 ->	TVal = true
		 ;	TVal = undefined
		)
	 ;	TVal = false
	),
	TVal \== RA,
	writeln(userout,error(db=I,query=Q,answer=TVal,right_answer=RA)),
	fail.
