/* Author: David S. Warren 1/2/2015.

This program generates examples of normal programs for which XSB
needs answer completion.  It generates propositional programs (with
propositions as integers) of certain simple forms, and then call an
XSB meta-interpreter for each proposition in the program and for each
goal that returns undefined, it calls for a computation of the WFS
using a bottom-up algorithm.  If the answer in that WFM is not
undefined, it prints out the program, and the well-founded model.

It uses the prolog_db predicates to represent a normal program (a
database).  For each proposition I in a program, there is a fact p(I)
in the database.

The programs that are generated are controlled by 3 parameters:
NRules, K, the max number of rules in a program;
NNeg, [NMin,NMax], the minimum number and maximum number of
      negative literals in the body of a program rule.
NPos, [PMin,PMax], the minimum number and maximum number of
      positive literals in the body of a program rule.

Negative literals always precede positive literals.  These paramters
are set in the predicate gen_db/1 below.

Set the parameters and then consult this file and run:
| ?- find_ac_nec.

See examples parameter settings below.  The numbers should be small;
for example, with NRules=4,NNeg=[0,1],NPos=[0,2], I canceled it after
48 hours.

I have gone to some effort to eliminate many symmetric programs.
*/


:- import call_in_db/2, clause_in_db/3, assert_in_db/3, dump_db/1, union_db/3
	from prolog_db.
:- import xwam_state/2 from machine.
:- import length/2, for/3, member/2, append/3, select/3  from basics.
:- import conset/2, conget/2, coninc/2 from gensym.

find_ac_nec :-
	gen_db(DB),
	%nl,dump_db(DB),
	clause_in_db(p(Q),true,DB),
	xsbwfs(Q,DB,TV2),
	TV2 = undefined,
	coninc('__ctr_undef',_),
	%writeln(undefined(Q)),
	buwfs(DB,WFDB),
	(clause_in_db(Q,true,WFDB)
	 ;
	 clause_in_db(not(Q),true,WFDB)
	),
	nl, writeln(userout,'Original DB:'),dump_db(DB),
	nl, write(userout,'query: '),writeln(Q),
	writeln(userout,'WF Model:'),dump_model(WFDB),
	fail.

test_gen_db(DB) :-
	assert_in_db([(p:-not(q)),p(p),p(q),(p :- p),(q :- not p),q],[],DB).

/* example runs:
[nrules = 3,numneglits = [0,1],numposlits = [0,1]] complete (none)
[nrules = 3,numneglits = [0,1],numposlits = [0,2]] complete (none)
[nrules = 4,numneglits = [0,1],numposlits = [0,1]] complete
[nrules = 4,numneglits = [0,1],numposlits = [0,2]] partial
[nrules = 4,numneglits = [0,2],numposlits = [0,1]] partial

*/

gen_db(DB) :-
	NRules = 5, %4
	NNeg = [0,1], %2
	NPos = [0,1], %2
	writeln(userout,[nrules=NRules,numneglits=NNeg,numposlits=NPos]),
	conset('__ctr',0),
	conset('__ctr_undef',0),
	gen_prog(NRules,NNeg,NPos,none,[],Rules),
	%writeln(userout,Rules), fail,
	assert_in_db(Rules,[],DB).
gen_db(_) :-
	coninc('__ctr',CTR),cputime(T0),
	conget('__ctr_undef',NUndef),
	writeln(userout,new_rule_form(CTR,NUndef,T0)),
	fail.

gen_prog(NRules,NNeg,NPos,PrevRule,PropsSoFar,Prog) :-
	(NRules =< 0
	 ->	coninc('__ctr',CTR),cputime(T0),
		length(PropsSoFar,NVars),
		conget('__ctr_undef',NUNDEF),
		writeln(userout,new_rule_form(CTR,NVars,NUNDEF,T0)),
		conset('__ctr_undef',0),
		number_all_ways(PropsSoFar,NProps),
		findall(p(K),for(K,1,NProps),Prog)
	 ;	gen_rule(NNeg,NPos,Props,Rule),
		\+ \+ bigger_new_rule(PrevRule,Rule),
		Prog = [Rule|Prog1],
		append(Props,PropsSoFar,MoreProps),
		NRules1 is NRules-1,
		gen_prog(NRules1,NNeg,NPos,Rule,MoreProps,Prog1)
	).
	 
bigger_new_rule(OldRule,NewRule) :-
	ground_1(p(OldRule,NewRule)),
	OldRule @=< NewRule.

ground_1(X) :- var(X), !, X=1.
ground_1(X) :- atomic(X), !.
ground_1(X) :- X =.. [_|Args], ground_1_list(Args).

ground_1_list([]).
ground_1_list([X|L]) :- ground_1(X), ground_1_list(L).

gen_rule([NNegL,NNegH],[NPosL,NPosH],AllProps,(Head:-Body)) :-
	for(NN1,NNegL,NNegH),
	length(PosNegList,NN1),
	wrap_neg(PosNegList,NegList),
	for(NP1,NPosL,NPosH),
	length(PosList,NP1),
	append(NegList,PosList,BodyList),
	list_to_commas(BodyList,Body),
	append([Head|PosNegList],PosList,AllProps).

last([X],X).
last([_|L],X) :- last(L,X).

distinct_asgn(K,List) :-
	all_sets_subset_k(K,SS),
	build_lst(SS,1,List).

build_lst([],_,[]).
build_lst([[]|R],K,List) :- K1 is K+1, build_lst(R,K1,List).
build_lst([[K|Rs]|R],K,[K|List]) :- build_lst([Rs|R],K,List).

:- table all_sets_subset_k/2.
all_sets_subset_k(K,SS) :-
	length(List,K),
	all_sets_subset(List,SS).

all_sets_subset([],[]) :- !.
all_sets_subset(Set,[SS|ListSS]) :-
	subset(Set,SS,LO),
	SS \== [],
%	SS = [_,_|_], % at least 2
	all_sets_subset(LO,ListSS).

subset([],[],[]).
subset([X|S],SS,[X|LO]) :- subset(S,SS,LO).
subset([X|S],[X|SS],LO) :- subset(S,SS,LO).

proplist(NP,Len,PL) :-
	length(PL,Len),
	bind(PL,NP).

wrap_neg([],[]).
wrap_neg([X|L],[not(X)|R]) :- wrap_neg(L,R).


bind([],_).
bind([P|L],C) :- for(P,1,C),bind(L,C).

list_to_commas([],true) :- !.
list_to_commas([L],L) :- !.
list_to_commas([L|Ls],(L,Cs)) :-
	list_to_commas(Ls,Cs).

equate_to_cnts([],_,[]).
equate_to_cnts([Cnt|Cnts],K,FullList) :-
	select(K,FullList,LessList),
	(Cnt =< 1
	 ->	K1 is K+1,
		equate_to_cnts(Cnts,K1,LessList)
	 ;	Cnt1 is Cnt-1,
		equate_to_cnts([Cnt1|Cnts],K,LessList)
	).

% counts that add to N
prop_cnts(N,List) :- N >= 1, length(List0,N), bind_all(List0,1),
	compute_all_sums(List0,List).

bind_all([],_).
bind_all([V|L],V) :- bind_all(L,V).

:- table compute_all_sums/2.
compute_all_sums(L,R) :-
	(R = L
	 ;
	 compute_all_sums_le(L,L1),
	 compute_all_sums(L1,R)
	).


compute_all_sums_le([X,Y],[Z]) :- !, Z is X+Y.
compute_all_sums_le([X,Y,Z|R],[S,Z|R]) :-
	S is X+Y, S =< Z.
compute_all_sums_le([X|L],[X|R]) :- compute_all_sums_le(L,R).



/*gen_db(DB) :-
	Props = [p,q,r],
	cross_neg([P1,P2,P3,P4,P5,P6,P7,P8,P9,P10],Props),
	cross([H1,H2,H3,H4,H5],Props),
	findall(p(PP),member(PP,Props),PropDcls),
	assert_in_db([(H1:-P1,P2),(H2:-P3,P4,P5),(H3:-P6),H4,(H5:-P7,P8,P9,P10)|PropDcls],[],DB).

cross([],_).
cross([V|Vs],Props) :-
	member(V,Props),
	cross(Vs,Props).

cross_neg([],_).
cross_neg([V|Vs],Props) :-
	(V = not(X) ; V = X),
	member(X,Props),
	cross_neg(Vs,Props).
*/

xsbwfs(Q,RDB,TVal) :-
	abolish_table_pred(interp_in_db(_,_)),
	(interp_in_db(Q,RDB)
	 ->	xwam_state(2,DelayReg),
		(DelayReg =:= 0
		 ->	TVal = true
		 ;	TVal = undefined
		)
	 ;	TVal = false
	).	

% assume underlying XSB does NOT have answer completion.
:- table interp_in_db/2.
interp_in_db(true,_).
interp_in_db((G1,G2),DB) :-
	interp_in_db(G1,DB),
	interp_in_db(G2,DB).
interp_in_db(not(G),DB) :-
	tnot(interp_in_db(G,DB)).
interp_in_db(G,DB) :-
	clause_in_db(G,Body,DB),
	interp_in_db(Body,DB).

buwfs(CWFM,DBO) :-
	%writeln(userout,before_true_iter),dump_db(CWFM),
	really_true_iter(CWFM,[],DBM),
	%writeln(userout,pos_add),dump_db(DBM),
	union_db(DBM,CWFM,CWFM1),
	%writeln(userout,before_maybe_iter),dump_db(DBM),
	maybe_true_iter(CWFM1,[],DBMM),
	%writeln(userout,after_maybe_iter),dump_db(DBMM),
	add_compl(DBMM,CWFM1,DBI),
	%writeln(userout,after_compl),dump_db(DBI),
	(DBI == CWFM
	 ->	DBO = CWFM
	 ;	buwfs(DBI,DBO)
	).

really_true_iter(CWFM,TDB,DB) :-
	(findall(Head,
		(clause_in_db(p(Head),true,CWFM),
		 clause_in_db(Head,Body,CWFM),
		 \+ clause_in_db(Head,true,TDB),
		 all_really_true(Body,TDB,CWFM)
		), ReallyTrues),
	 ReallyTrues \== []
	 ->	assert_in_db(ReallyTrues,TDB,TDB1),
		really_true_iter(CWFM,TDB1,DB)
	 ;	DB = TDB
	).

all_really_true(true,_,_).
all_really_true((G1,G2),TDB,WFM) :-
	all_really_true(G1,TDB,WFM),
	all_really_true(G2,TDB,WFM).
all_really_true(G,_,WFM) :-
	clause_in_db(G,true,WFM).
all_really_true(G,TDB,_WFM) :-
	clause_in_db(G,true,TDB).

maybe_true_iter(CWFM,TDB,DB) :-
	(findall(Head, (clause_in_db(p(Head),true,CWFM),
		       clause_in_db(Head,Body,CWFM),
		       \+ clause_in_db(Head,true,TDB),
		       all_maybe_true(Body,TDB,CWFM)
		      ), MaybeTrues),
	 MaybeTrues \== []
	 ->	assert_in_db(MaybeTrues,TDB,TDB1),
		maybe_true_iter(CWFM,TDB1,DB)
	 ;	DB = TDB
	).

all_maybe_true(true,_,_).
all_maybe_true((G1,G2),TDB,WFM) :-
	all_maybe_true(G1,TDB,WFM),
	all_maybe_true(G2,TDB,WFM).
all_maybe_true(G,_TDB,WFM) :-
	clause_in_db(G,true,WFM).
all_maybe_true(G,TDB,_WFM) :-
	clause_in_db(G,true,TDB).
all_maybe_true(not(G),_TDB,WFM) :-
	\+ clause_in_db(G,true,WFM).

add_compl(DBMM,DBM,DBI) :-
	findall(not(P),
		(clause_in_db(p(P),true,DBM),\+ clause_in_db(P,true,DBMM)),
		Negs),
	assert_in_db(Negs,DBM,DBI).

dump_model(DB) :-
	clause_in_db(F,true,DB),
	\+ F=p(_),
	write_canonical(userout,F),
	writeln('.'),
	fail.
dump_model(_).


number_all_ways(L,K) :-
	equate_all_ways(L),
	number_way(L,1,K).

number_way([],K0,K) :- K is K0-1.
number_way([X|L],K0,K) :-
	(var(X)
	 ->	X = K0,
		K1 is K0+1,
		number_way(L,K1,K)
	 ;	number_way(L,K0,K)
	).

equate_all_ways(L) :-
	equate_all(L,[],_).

equate_all([],S,S).
equate_all([X|L],S0,S) :-
	(S1 = S0, member(X,S0)
	 ;
	 S1 = [X|S0]
	),
	equate_all(L,S1,S).

