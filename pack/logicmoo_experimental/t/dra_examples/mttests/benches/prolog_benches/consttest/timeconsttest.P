:- compiler_options([xpp_on]).

#include "maxint.h"

:- import concat_atom/2 from string.
:- import member/2 from basics.

test_alg(ArcList,PeriodList,Intlist,Time):- 
	ta_setup(ArcList,PeriodList,Intlist),
	cc(_Time).

/*
test_alg(ArcList,PeriodList,Intlist,Time):- 
	ta_setup(ArcList,PeriodList,Intlist),
	cc(Time),
	findall(arc(X,Y,Z),
	     (arc(X,Y,Z) ; arc(Y,X,Z1),inverse_list(Z1,Z2),sort(Z2,Z)),
	      OutL),
	sort(OutL,OutSort),
	write_list(OutSort),
	writeln('***********************************'),
	check_inverses.
*/

ta_setup(ArcList,PeriodList,Intlist):- 
	retractall(arc(_,_,_)),
	assert_arclist(ArcList),
	assert_intlist(Intlist),
	apply_periodics(PeriodList).

check_inverses:- 
	arc(X,Y,One),arc(Y,X,Two),inverse_list(One,OneI),sort(OneI,OneInv),
	(\+ (OneInv = Two) -> 
	    writeln(different(X,Y,One,Two))
	 ;  true),
	fail.
check_inverses.

write_list([]).
write_list([H|T]):- 
	writeq(H),write('.'),nl,
	write_list(T).

assert_arclist([]).
assert_arclist([arc(X,Y,List)|T]):-
	quantitize_constraint_list(List,Qlist),
	assert(arc(X,Y,Qlist)),
	assert_arclist(T).

quantitize_constraint_list([],[]).
quantitize_constraint_list([after|T],[after([1,MAXINT])|T1]):- !,
	quantitize_constraint_list(T,T1).
quantitize_constraint_list([before|T],[before([1,MAXINT])|T1]):- !,
	quantitize_constraint_list(T,T1).
quantitize_constraint_list([H|T],[H|T1]):- 
	quantitize_constraint_list(T,T1).

assert_intlist([]).
assert_intlist([H|T]):-
	assert(H),
	assert_intlist(T).

%-----

apply_periodics([]).
apply_periodics([periodic(Event,SubEvents,Interval,Num)|Rest]):- 
	apply_periodic(Event,SubEvents,Interval,Num),
	apply_periodics(Rest).

apply_periodic(Event,SubEvents,Interval,Number):- 
	event_constraints(Event,SubEvents,Constraints),
	instantiate_periods(1,Number,Event,SubEvents,Constraints,NewEvents),
	add_interval_constraints([Event|NewEvents],Interval).

event_constraints(Event,SubEvents,Constraints):- 
	setof(arc(X,Y,C),(arc(X,Y,C),relevent_arc(X,Y,Event,SubEvents)),
			  Constraints).

relevent_arc(X,Y,Event,SubEvents):- 
	(Event = X ; Event = Y ; member(X,SubEvents) ; member(Y,SubEvents)),!.

instantiate_periods(N,N,_,_,_,[]):-!.
instantiate_periods(N1,N,Event,SubEvents,Constraints,[NewEvent|Rest]):-
	N2 is N1 + 1,
	concat_atom([Event,'_',N2],NewEvent),
        instantiate_intervals([Event|SubEvents],N2),
	instantiate_period(Constraints,[Event|SubEvents],N2),
        instantiate_periods(N2,N,Event,SubEvents,Constraints,Rest).
	
instantiate_period([],_Events,_N).
instantiate_period([arc(X,Y,Z)|Rest],EventList,N):- 
	replace_event(X,NewX,EventList,N),
	replace_event(Y,NewY,EventList,N),
	assert(arc(NewX,NewY,Z)),
	instantiate_period(Rest,EventList,N).
	
replace_event(Y,NewY,Events,N):- 
	member(Y,Events) -> 
	    concat_atom([Y,'_',N],NewY)
	 ;  Y = NewY.
	
instantiate_intervals([],_).
instantiate_intervals([H|T],N):- 
	(interval_length(H,L) ->
	    concat_atom([H,'_',N],NewEvent),
	    assert(interval_length(NewEvent,L))
	 ; true),
	 instantiate_intervals(T,N).

add_interval_constraints([_],_Interval):-!.
add_interval_constraints([Event1,Event2|NewEvents],Interval):- 
	assert(arc(Event1,Event2,[before(Interval)])),
	add_interval_constraints([Event2|NewEvents],Interval).

	
tper(Event,ArcList,Plist,Intlist,Time,Length):- 
	tp_setup(ArcList,Plist,Intlist),
	cc(Time),
	shuffle_arcs(Event),
	findall(arc(X,Y,Z),
	     (old_arc(Event,X,Y,Z) ; old_arc(Event,Y,X,Z1),inverse_list(Z1,Z2),sort(Z2,Z)),
	      OutL),
	sort(OutL,OutSort),
	write_list(OutSort),
	writeln('***********************************'),
	check_inverses.
%        deduced_interval_length(Event,Length).

tp_setup(ArcList,Plist,Intlist):- 
	retractall(arc(_,_,_)),
	assert_arclist(ArcList),
	assert_intlist(Intlist),
	apply_periodics(Plist).

shuffle_arcs(Event):- 
	retractall(old_arc(Event,_,_,_)),
	arc(F,T,C),
	asserta(old_arc(Event,F,T,C)),
	fail.
shuffle_arcs(_Event).

deduced_interval_length(Event,[F,T]):- 
	(old_arc(Event,baseline,endline,[before([F,T])]) 
          ; old_arc(Event,endline,baseline,[after([F,T])])
          ; interval_length(Event,[F,T])),!.
