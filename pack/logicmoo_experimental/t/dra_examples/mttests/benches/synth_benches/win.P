:- import xsb_configuration/2 from xsb_configuration.

:- import abolish_all_private_tables/0 from thread.

:- import 
	abolish_table_info/0,
	buff_alloc/3, buff_cell/3, buff_dealloc/4, buff_set_word/3, buff_word/3,
	call_hash/5, conpsc/2, cut_if_leader/3, slg_not/1,
	is_incomplete/5, get_osp_breg/2, get_ptcp/1, get_subgoal_ptr/2,
	print_predicate_table/1,
        psc_tabled/2,
	stat_flag/2, stat_set_flag/3, 
	term_type/2, tip_prop/4, get_emu_dependent_const/2,
	conpsc/2, buff_byte/3, buff_set_byte/3, 
	zero_out_profile/0,write_out_profile/0
	from machine.

:- import ground/1, copy_term/2, member/2 from basics.

:- import tcall/1 from standard.

:- import get_residual/2 from tables.
:- import 't not'/1 from tables.

:- thread_shared move2k/2, move1k/2.

:- index(move2k/2,trie).
:- index(move1k/2,trie).

benchChain(N,Arg,T):- 
	abolish_all_tables,
	generate_chain(N),
	cputime(B),
	win(Arg),writeln(here),
	cputime(A),
	T is A - B.

generate_chain(N):- 
	retractall(move(_,_)),
	generate_chain_1(N).

generate_chain_1(1):- !.
generate_chain_1(N):- 
	N1 is N - 1,
	asserta(move(N1,N)),
	generate_chain_1(N1).

benchCycle(N,Arg,T):- 
	abolish_all_tables,
	generate_cycle(N),
	cputime(B),
	win(Arg),
	cputime(A),
	T is A - B.

generate_cycle(N):- 
	retractall(move(_,_)),
	generate_cycle_1(N,N).

generate_cycle_1(1,L):- assert(move(L,1)),!.
generate_cycle_1(N,L):- 
	N1 is N - 1,
	asserta(move(N1,N)),
	generate_cycle_1(N1,L).

:- table win/1.
win(X):- move(X,Y),tnot(win(Y)).


% Obsolescent.

cycle_win_bench:- 
	bigbench(win2k(1),[win,cycle(2048),its(150)],150),
	%bigbench(unsafe_win(1),[unsafe_win,cycle(2048),its(150)],150),
	flush_output.

mt_cycle_win_bench(M):- 
	mt_bigbench(win2k(1),[win,cycle(2048),its(80)],80,M),
	mt_bigbench(unsafe_win(1),[unsafe_win,cycle(2048),its(80)],80,M),
	flush_output.

chain_win_bench:- 
	bigbench(win2k(1),[win,chain(2048),its(400)],400),
	%bigbench(unsafe_win(1),[unsafe_win,chain(2048),its(400)],400),
	%bigbench(sldnf1_win(1),[sldnf1_win,chain(2048),its(2000)],2000),
	%bigbench(sldnf2_win(1),[sldnf2_win,chain(2048),its(2000)],2000),
	flush_output.

mt_chain_win_bench(M):- 
	mt_bigbench(win2k(1),[win,chain(2048),its(200)],200,M),
	mt_bigbench(unsafe_win(1),[unsafe_win,chain(2048),its(200)],200,M),
	mt_bigbench(sldnf1_win(1),[sldnf1_win,chain(2048),its(1000)],1000,M),
	mt_bigbench(sldnf2_win(1),[sldnf2_win,chain(2048),its(1000)],1000,M),
	flush_output.

abolish_tables :-
	xsb_configuration(engine_mode,'multi-threading') ->
	abolish_all_private_tables ;
	abolish_all_tables.

%abolish_tables :-
%	abolish_table_pred(win2k/1),
%	abolish_table_pred(unsafe_win/1).

:- table unsafe_win/1.
unsafe_win(X):- move2k(X,Y),'t not'(unsafe_win(Y)).

sldnf1_win(X):- move2k(X,Y),my_not(sldnf1_win(Y)).

sldnf2_win(X):- move2k(X,Y),\+ sldnf2_win(Y).

:- table dual_win/1,neg_win/1.
dual_win(X):- move2k(X,Y),neg_win(Y).

neg_win(X):- \+ move2k(X,Y).
neg_win(X):- move2k(X,Y),dual_win(Y).

my_not(Term):- (tcall(Term), !, fail) ; true.

:- table my_win/1.
my_win(X):- move2k(X,Y),tnot(my_win(Y)).

fake_win(X):- tnot(pwin(X)).

:- table pwin/1.
pwin(X):- move2k(X,Y),pwin(Y).

:- table p1win/1.
p1win(X):- move2k(X,Y),neg_call(p1win(Y)).

neg_call(X) :-
	get_ptcp(PTCP), get_subgoal_ptr(X, SubgPtr),
	( SubgPtr == 0 ->  tcall(X), fail
	; is_incomplete(X, SubgPtr, PTCP, 1, Subg), true
	).


my_tnot(X):-
	( ground(X) -> my_tnot1(X)
	; functor(X,F,A),
	  abort(('FLOUNDERING: tnot/1 used with a non-ground subgoal of predicate ', F/A))
	).

my_tnot1(X) :-
	get_ptcp(PTCP), get_subgoal_ptr(X, SubgPtr),
	( SubgPtr == 0 ->  tcall(X), fail
	; is_incomplete(X, SubgPtr, PTCP, 1, Subg), slg_not(Subg)
	).


:- table pnwin/1.
pnwin(X):- move2k(X,Y),'t not'(pnwin(Y)),fail.

:- table swin/1.
swin(X):- move2k(X,Y),'t not'(swin(Y)).

:- table rwin/1.
rwin(X):- get_residual(win(X),[tnot(win(Y))]),
	  tnot(rwin(Y)).

:- table simp_win/1, myfail/1.
simp_win(X):- move2k(X,Y),tnot(simp_win(Y)),myfail(X).

:- table spec_simp_win/1.
spec_simp_win(X):- move2k(X,Y),tnot(spec_simp_win(Y)),\+ pmyfail(X).

myfail(X):- X \== 1.
pmyfail(1).

:- table win_t/1.
:- table  win_tu/1.
:- table  neg/1.
win_t(X):- move2k(X,Y),tnot(win_tu(Y)).
win_tu(X):- move2k(X,Y),tnot(win_t(Y)),tnot(neg(win_tu(X))).

neg(win(1)).


end_of_file.
