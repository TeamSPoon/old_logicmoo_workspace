% This file tests newIntRule/3 and retractallIntRule/2 for
% hasAttr_int, newIntRule/23 for minAttr_int, and checks cross
% dependencies for minAttr_int and hasAttr_int. 

:- [altcdf].
:- [test_utils].

:- import load_intensional_rules/1 from cdf_io.

:- import retractallIntRule/3,abolish_cdf_tables/0 from cdf_init_cdf.
:- import allAttr/3, hasAttr/3, classHasAttr/3, minAttr/4, maxAttr/4, 
	 coversAttr/3,
	 newIntRule/3 from cdf_init_cdf.

loadrules:- 
	load_intensional_rules('type0_testdir'),
%	load_dyn(initialization_file,type0_testdir).
	load_dyn('type0_testdir/initialization_file.P').

testreturns:- 
	loadrules,
	testhasAttrreturns_1,nl,
	testhasAttrreturns_2,nl,
	testhasAttrreturns_3,nl,
	testhasAttrreturns_4.

%------------------------------------------------------------------------------------------
/*       Baseline check of hasAttr/3: return
         hasAttr(oid(o2,test),rid(r4,test),oid(o12,test))
         hasAttr(oid(o2,test),rid(r2,test),oid(o12,test))
         hasAttr(oid(o2,test),rid(r1,test),cid(c12,test))
         hasAttr(oid(o2,test),rid(prod(rid(r2,test),rid(r2,test)),test),cid(c12,test)) */
testhasAttrreturns_1:- 
	test_display(hasAttr(oid(o2,test),_X,_Y)).

%------------------------------------------------------------------------------------------

/*          below the following bindings should be returned.
            hasAttr(oid(o2,test),rid(r4,test),oid(o13,test))
            hasAttr(oid(o2,test),rid(r4,test),oid(o12,test))
            hasAttr(oid(o2,test),rid(r1,test),oid(o12,test))
            hasAttr(oid(o2,test),rid(prod(rid(r2,test),rid(r2,test)),test),cid(c12,test))
Note that  X = rid(r2,test) Y = oid(o12,test) is implied by          
               X = rid(r1,test) Y = oid(o12,test); */
testhasAttrreturns_2:- 
%	add an object in a class that already has a hasAttr
	newIntRule(hasAttr_int(oid(o2,test),rid(r1,test),oid(o12,test)),
	                 hasAttr_aux(_,_,_),test),
%	add an object not in a class that already has a hasAttr
	newIntRule(hasAttr_int(oid(o2,test),rid(r4,test),oid(o13,test)),
	                 hasAttr_aux(_,_,_),test),
	test_display(hasAttr(oid(o2,test),_X,_Y)).

%------------------------------------------------------------------------------------------

/*  bindings should be the same as testhasAttrreturns_1 */
testhasAttrreturns_3:- 
	retractallIntRule(hasAttr_int(oid(o2,test),rid(r4,test),oid(o13,test)),
	                 hasAttr_aux(_,_,_),test),
	retractallIntRule(hasAttr_int(oid(o2,test),rid(r1,test),oid(o12,test)),
	                 hasAttr_aux(_,_,_),test),
	test_display(hasAttr(oid(o2,test),_X,_Y)).

%------------------------------------------------------------------------------------------
/*   check hasAttr / minAttr cross dependencies.
     bindings should be the same as testhasAttrreturns_2 */
testhasAttrreturns_4:- 
	newIntRule(minAttr_int(oid(o2,test),rid(r1,test),oid(o12,test),1),
	                 hasAttr_aux(_,_,_),test),
	newIntRule(minAttr_int(oid(o2,test),rid(r4,test),oid(o13,test),1),
	                 hasAttr_aux(_,_,_),test),
	test_display(hasAttr(oid(o2,test),_X,_Y)).

end_of_file.

