test('Val(x,"walks") iff walks(x)').
test('Val(x,"arrived") iff arrived(x)').
test('Val(<x,y>,"bakes") iff bakes_for(x,y,z)').
test('Val(<x,y,z>,"bakes") iff bakes_for(x,y,z)').
test('Val(x, "John") iff x=John').
test('Val(x, "Mary") iff x=Mary ').

test('Val(t,[S NP VP]) iff Val(x,NP)&Val(x,VP)').
test('Val(x,[NP N]) iff Val(x, N)').
test('Val(x,[NP Det N]) iff Val(x,Det) & Val(x, N)').
test('Val(x,[VP V]) iff Val(x, V)').
test('Val(x,[VP V NP]) iff Val(x, V) & Val(x, NP)').
test('Val(x,[VP V NP PP]) iff Val(x, V) & Val(x, NP) & Val(x, PP)').
test('Val(x,[VP V PP]) iff Val(x, V) & Val(x, PP)').
test('Val(x,[PP P NP]) iff Val(x, P) & Val(x, NP)').

test('Val(x,[N "man"]) iff Val(x,"man")').
test('Val(x,[N "John"]) iff Val(x,"John")').
test('Val(x,[N "Mary"]) iff Val(x,"Mary")').
test('Val(x,[N "cake"]) iff Val(x,"cake")').
test('Val(x,[V "walks"]) iff Val(x, "walks")').
test('Val(x,[V "bakes"]) iff Val(x, "bakes")').
test('Val(x,[V "arrived"]) iff Val(x, "arrived")').

test('Val(t,[S S_1 "and" S_2]) iff Val(x,S_1) & Val(x,S_2)').
test('Val(t,[X X_1 "and" X_2]) iff Val(x,X_1) & Val(x,X_2)').
test('Val(t,[NP NP_1 "or" NP_2]) iff Val(x,NP_1) \/ Val(x,NP_2)').
% test('Val(x,[XP X XP_1]) iff Val(x,X) & Val(x,XP_1)').

test('Val(t, [S "it_is_not_the_case_that" S_1 ]) iff -Val(t, S_1)').
test('Val(t, [S "it_is_false_that" S_1 ]) iff -(Val(t, S_1))').
test('Val(t, [S "it_is_false_that" S_1 ]) iff It_is_false_that(Val(t, S_1))').
test('Val(X, [S "it_is_not_the_case_that" S_1 ]) iff - - - Val(X, S_1)').
test('Val(X, [S S_1 "," "not"]) iff - Val(X, S_1)').

test('Val(t, [S "Phil_ponders"]) iff Phil_ponders').
test('Val(t, [S "Phil_ponders"]) iff ponders(Phil)').

test('Val(X,[V "walks"]) iff X = {x: walks(x)}').

test('Val(x,[VP V NP]) iff x=the_prop_of_standing_in_to(y,z)&Val(y,V)&Val(z,NP)').
test('Val(x,[VP V NP]) iff x = some_property(x1,x2) & Val(x1,V) & Val(x2,NP)').

