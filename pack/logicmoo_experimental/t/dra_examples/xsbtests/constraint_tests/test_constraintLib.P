
:- import numbervars/1 from num_vars.
:- import when/2,unifiable/3 from constraintLib.

test:- 
	testwhen,fail.
test:- 
	test_unifiable,fail.
test.

%------------------------------------------

testwhen:- testwhen1,testwhen2,testwhen3,testwhen4,testwhen5,testwhen6,testwhen7.

testwhen1:- 
	when(nonvar(X),writeln(test(1-2,nonvar))),
	writeln(testwhen(1,nonvar)),
	X = f(_Y).
testwhen2:- 
	when(ground(X),writeln(test(2-2,ground))),
	writeln(testwhen(2,ground)),
	X = f(_Y).
testwhen3:- 
	when(ground(X),writeln(test(3-2,ground))),
	writeln(testwhen(3,ground)),
	X = a.
testwhen4:- 
	when(?=(X,Y),writeln(test(4-2,'?='))),
	writeln(testwhen(4,'?=')),
	X = Y.
testwhen5:- 
	when(?=(X,Y),writeln(test(5-2,'?='))),
	writeln(testwhen(5,'?=')),
	X = a.
testwhen6:- 
	when(?=(X,Y),writeln(test(6-2,'?='))),
	writeln(testwhen(6,'?=')),
	X = a,Y = b.
testwhen7:- 
	when(ground(X),3>X),
	X is 2+2,
	writeln(testwhen7_failing).
testwhen7.

%------------------------------------------
test:- test_unifiable.

test_unifiable(Term1,Term2):- 
	(unifiable(Term1,Term2,List) -> 
	   numbervars(unifiable(Term1,Term2,List)),
	   writeln(yes(Term1,Term2,List))
        ;  numbervars(unifiable(Term1,Term2)),
	   writeln(no(Term1,Term2)) ).

test_unifiable:- test_unifiable(X,X),fail.
test_unifiable:- test_unifiable(X,Y),fail.
test_unifiable:- test_unifiable(X,a),fail.
test_unifiable:- test_unifiable(a,Y),fail.
test_unifiable:- test_unifiable(X,a(Y)),fail.
test_unifiable:- test_unifiable(b,a),fail.
test_unifiable:- test_unifiable(f(X),f(X)),fail.
test_unifiable:- test_unifiable(f(X),f(Y)),fail.
test_unifiable:- test_unifiable(f(X),f(a)),fail.
test_unifiable:- test_unifiable(f(X),f(a,Y)),fail.
test_unifiable:- test_unifiable(f(X,g(Y)),f(Z,g(b))),fail.
test_unifiable:- test_unifiable(f(X,g(a)),f(Z,g(b))),fail.
test.

