
%% tests for backtrackable and non-backtrackable updates.

?- ['../datafiles/marymodule'>>mod2].

a[f->b].
a[f->c].

%% Should have no effect
?- writeln('Query 1 begins')@prolog().
?- btinsert{a[f->d]}, btdelete{a[f->b]},
	delete{mary[salary(1990)->_]@mod2},
	btdelete{mary[salary(_X) -> _]@mod2| _X=1991;_X=1992;_X=1993}, fail.
%% X=b,c, mary's salary for years 1991-1998
?- writeln('After the no-effect query:')@prolog(),
	a[f->X], fmt_write('a[f->%S]\n', arg(X))@flora(io).
?-  mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


%% Because storage is committed at the end of the query,
%% the changes made by these should stick.
?- abolish_all_tables.
?- writeln('Query 2 begins')@prolog().
?- btinsert{a[f->d]}, btdelete{a[f->b]},
	btdelete{mary[salary(_X)->_]@mod2| _X=1991;_X=1992;_X=1993}.
%% X=c,d, one of mary's salary for years 1991,2,3 deleted
?- writeln('After query2:')@prolog(),
	a[f->X], fmt_write('a[f->%S]\n', arg(X))@flora(io).
?- mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- abolish_all_tables.
?- writeln('Query 3 begins')@prolog().
?- btinsert{a[f->e]}, (btdeleteall{a[f->_X]}, fail; btdelete{a[f->e]}),
	btinsert{a[f->f]},
	btdeleteall{mary[salary(_XX)->_]@mod2| _XX=1991;_XX=1992;_XX=1993},
	btinsert{mary[salary(1999)->100]@mod2}.
%% X=c,d,f, mary's salary for 1994-9
?- writeln('After query3:')@prolog(),
	a[f->X], fmt_write('a[f->%S]\n', arg(X))@flora(io).
?-  mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).

p(1993).
p(1994).
p(1996).
p(1997).
p(1998).
?- abolish_all_tables.
%% Supposed to delete for all years in p/1. (1993 has already been deleted)
?- writeln('Query 4 begins')@prolog().
%% Note: if we use don't care variables, _Y,_V, below, then the query will
%% be executed only ONCE, so only the salary for one year will be removed!!
?- p(Y), btdelete{mary[salary(Y)->V]@mod2}.
?- abolish_all_tables.
%% mary's salary for 1995,1999 only
?- writeln('After query4:')@prolog(),
	mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- writeln('Query 5 begins')@prolog().
q(2001,110).
q(2002,111).
q(2003,100).

?- abolish_all_tables.
/*
  %% XSB is broken with respect to backtracking over the updates.
  %% while-do uses failure loop, so it can crash XSB. Use while-loop instead
?- while q(Y,S) do
       btinsert{mary[salary(Y)->S]@mod2}.
*/
?- while q(Y,S) loop (
       btinsert{mary[salary(Y)->S]@mod2},
	delete{q(Y,S)}
    ).
?- abolish_all_tables.
%% Should have salaries for 1995, 1999, 2001-2003
?- writeln('After query5:')@prolog(), mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).

?- writeln('Query 6 begins')@prolog().
?- insert{mary[salary(2010)->200]@mod2}.

rr(2010) :- true.
rr(3000) :- true.
%% Here deletion for Y=3000 should fail and so the entire query should fail
/*
  %% XSB is broken with respect to backtracking over the updates.
  %% while-do uses failure loop, so it can crash XSB. Use while-loop instead
?- while rr(Y) do
       btdelete{mary[salary(Y)->_]@mod2}.
*/
?- while rr(Y) loop (
       btdelete{mary[salary(Y)->_]@mod2},
	delete{rr(Y)}
    ).
%% Should have salaries for 1995, 1999, 2001-2003
?- writeln('After query6:')@prolog(), mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- writeln('Query 7 begins')@prolog().

?- abolish_all_tables.
%% Should leave only two facts about mary's salary
%% Note: we use don't care variables so that the do-until loop will 
%% execute exactly once.
%% Otherwise, it will execute multiple times (because of the all-answers
%% semantics), and the result would be that all tuples will be deleted.
%% This latter result is shown in Query 8
?- do btdelete{mary[salary(_Y)->_S]@mod2}
    	until (abolish_all_tables, 3 > count{_YY| mary[salary(_YY)->_]@mod2}).

%% Should have only two facts of the form mary[salary(...)->...]
?- abolish_all_tables.
?- writeln('After query7:')@prolog(), mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- writeln('Query 8 begins')@prolog().
%% Add some more facts
?- insert{mary[salary(1999)->99]@mod2,mary[salary(1998)->88]@mod2},
	writeln(yes)@prolog().


/*
%% This is like Query 7, but we don't use don't care vars
%% and thus execute the loop several times. The result is that all facts 
%% about mary's salary are deleted
  %% XSB is broken with respect to backtracking over the updates.
  %% do-until uses failure loop, so it can crash XSB. Use loop-until instead
?- do btdelete{mary[salary(Y)->S]@mod2}
    	until (abolish_all_tables, 3 > count{YY| mary[salary(YY)->_]@mod2}).
*/
?- loop btdelete{mary[salary(Y)->S]@mod2}
    	until (abolish_all_tables, 1 > count{YY| mary[salary(YY)->_]@mod2}).

%% Should have no facts of the form mary[salary(...)->...]
?- abolish_all_tables.
?- writeln('After query8:')@prolog(), 
	unless mary[salary(Y)->V]@mod2 do
	    writeln('No facts of the form mary[salary(...)->...]')@prolog().



?- writeln('Query 9 begins')@prolog().
?- abolish_all_tables.
qq(2022,333).
qq(2023,222).
qq(2024,222).
qq(2025,222).
qq(2026,222).
qq(2027,222).
qq(2028,222).

?- while qq(Y,S) do
       btinsert{mary[salary(Y)->S]@mod2}.

?- abolish_all_tables.
%% Should have salaries for 2022, 2023, ..., 2028
?- writeln('After query9:')@prolog(), mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- writeln('Query 10 begins')@prolog().
?- abolish_all_tables.
rrr(2022) :- true.
rrr(3000) :- true.
rrr(2023) :- true.
%% Here deletion for Y=3000 should fail so the entire query should fail
%% BUT: for 2022 it committed, so only the 2023 salary wasn't removed
?- while rrr(Y) do
       btdelete{mary[salary(Y)->_]@mod2}.

%% Should have salaries for up to 2003 and 2022, 2023
?- writeln('After query10:')@prolog(), mary[salary(Y)->V]@mod2,
	fmt_write('mary[salary(%S)->%S]\n', arg(Y,V))@flora(io).


?- writeln('Query 11 begins')@prolog().
?- abolish_all_tables.

%% Here we don't use don't care vars, so
%% execute the loop several times. The result is that all facts 
%% about mary's salary are deleted
?- do btdelete{mary[salary(Y)->S]@mod2}
    	until (abolish_all_tables, 3 > count{YY| mary[salary(YY)->_]@mod2}).


%% Should have no facts of the form mary[salary(...)->...]
?- abolish_all_tables.
?- writeln('After query11:')@prolog(), 
	unless mary[salary(Y)->V]@mod2 do
	    writeln('Removed all Mary''s salary info')@prolog().
