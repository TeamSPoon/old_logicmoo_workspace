
%%:- debug.

?- expand_filename('../datafiles', _X)@prolog(machine),
	assert(library_directory(_X)@prolog())@prolog().

john:employee.

john[salary(1990) -> 20].
john[salary(1991) -> 40].
john[salary(1992) -> 60].
john[salary(1993) -> 70].
john[salary(1994) -> 70].
john[salary(1995) -> 80].
john[salary(1996) -> 70].
john[salary(1997) -> 50].
john[salary(1998) -> 80].


tst1 :- Z = max{X|john[salary(_Year)->X]},
	writeln(Z)@prolog().

tst2 :- Z = max{X|john[salary(Year) ->X], Year < 1996},
	writeln(Z)@prolog().

tst3 :- Z = max{X|mary[salary(_Year)->X] @ marymodule}, writeln(Z)@prolog().

tst4 :- Z=count{Year|john.salary(Year) < max{X|john[salary(Y2)->X], Y2<Year} },
    	writeln(Z)@prolog().

tst5 :- Z=count{Year|john.salary(Year) < mary.salary(Year) @ marymodule},
	writeln(Z)@prolog().

tst6 :- Z= avg{X[Who]|Who[salary(Year)->X]; Who[salary(Year)->X] @ marymodule},
	write(Z)@prolog(), write('   ')@prolog(), writeln(Who)@flora(io), fail.
tst6 :- true.

tst7 :- (write('Module: '), writeln(_@))@prolog().

pretest :- tst1, tst2, tst3, tst4, tst5, tst6, tst7.

test :- tell(temp)@prolog(),
	[marymodule >> marymodule],
	debug[#check_undefined(on)]@flora(sys),
	pretest,
	debug[#check_undefined(off)]@flora(sys),
	pretest,
	told@prolog().

