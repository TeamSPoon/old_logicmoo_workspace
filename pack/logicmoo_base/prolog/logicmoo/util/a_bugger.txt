:- dynamic(mpred_arity/2). 
:- call_provider(lmhook:mpred_user_kb(KB)),KB:dynamic((prop_mpred/3, mpred_isa/2, mpred_arity/2, isa_mpred_isa/1)).
:- call_provider(lmhook:mpred_user_kb(KB)),KB:multifile((prop_mpred/3, mpred_isa/2, mpred_arity/2, isa_mpred_isa/1)).








Placce to store unused predicate right now


	      HOW TO GET THE MOST OUT OF AQUARIUS PROLOG
	      ------------------------------------------

			    Peter Van Roy
       Digital Equipment Corporation Paris Research Laboratory
			85, avenue Victor Hugo
			92500 Rueil Malmaison
				France
			  vanroy@prl.dec.com


Aquarius Prolog has been designed to perform well on Prolog programs
written for WAM-based systems (typical systems being Quintus, BIM,
Sicstus, and SEPIA).  For such programs it will generally run somewhat
faster than these systems.  You can expect performance ratios similar
to those reported in the Jan. 1992 issue of IEEE Computer, that is, a
factor of two or so over Quintus Prolog for realistic programs,
depending on how often built-in predicates are used.

But this is not the end of the story regarding performance.  Aquarius
has a trump up its sleeve that the other systems do not have: global
analysis.  The great advantage of analysis is its long-range vision.
It can simultaneously allow important optimization of parts of the
program that are very far apart.  This means that you will often be
able to greatly improve performance by writing your programs in a
certain style.

In this section I explain some of the rules of this style.  The rules
that hold for WAM-based systems continue to hold here, e.g., first
argument selection, last call optimization, and the importance of
making programs deterministic.  Richard O'Keefe's book ``The Craft of
Prolog'' is a good source of these rules.

Additional rules particular to Aquarius are explained below.  The
general principle is to write code that nudges the compiler in the
right direction, that is, to let it compile deterministic predicates
in a deterministic way and to let global analysis derive the largest
number of modes.


Rule 1: Use global analysis
------

Global analysis is always a good idea for compiled programs.  To use
it your program should contain the directive:

        :- option(analysis).

as well as the correct entry declarations.  The entry declarations must
be given with care.  If you omit them or give incorrect ones, then the
program will go off into never-never land.  Read section 2-2-5 "Global
Dataflow Analysis and Mode Declarations" of the user manual.


Rule 2: Use mode declarations
------

The system combines your modes with the modes it derives by global
analysis to get even better results.  For example, consider the
following predicate (which is part of the inner loop of the sorting
built-ins in the Aquarius run-time system):

        sense(>,  >, 1).
        sense(>,  <, 2).
        sense(>,  =, 0).
        sense(<,  >, 2).
        sense(<,  <, 1).
        sense(<,  =, 0).
        sense(>=, >, 1).
        sense(>=, <, 2).
        sense(>=, =, 1).
        sense(=<, >, 2).
        sense(=<, <, 1).
        sense(=<, =, 1).

Analysis is able to deduce that the first argument is ground, but it
is not able to say anything about the second argument.  As a result,
execution of the predicate is not deterministic, in other words, a
choice point is created when it is called.  This is very inefficient.
Inspection of the program shows that the second argument is always
ground.  Therefore it is useful to add the following mode declaration:

        :- mode((sense(A,B,C) :- ground(B))).

With this declaration, execution is completely deterministic.  In this
particular case, inspection of the program allows an even more precise
mode declaration to be given:

        :- mode(sense(A,B,C),true,
                ((A== >;A== <;A== >=;A== =<),(B== >;B== <;B== =)),
                ((C=:=0;C=:=1;C=:=2),deref(C)),n).

Usually such a precise declaration is not necessary; a simple
declaration such as the first one is enough to get most of the
performance gain.


Rule 3: Make determinism visible
------


Rule 3a: Unfold definitions
-------

The call/1 built-in of Aquarius was formerly written in the following
style:

        call((G ; H)) :- !, call_disjunction(G, H).
        call(G) :- builtin(G), !, call_builtin(G).
        call(G) :- predicate_property(G, (dynamic)), !, call_dynamic(G).
        call(G) :- predicate_property(G, (compiled)), !, call_compiled(G).
        ...

        builtin(A<B).
        builtin(A=<B).
        ...
        
        call_builtin(A<B) :- A<B.
        call_builtin(A=<B) :- A=<B.
        ...

This creates a temporary choice point for each call of a built-in
predicate.  The choice point is avoided by rewriting call/1 as
follows:

        call((G ; H)) :- !, call_disjunction(G, H).
        call(A<B) :- !, A<B.
        call(A=<B) :- !, A=<B.
        ...
        call(G) :- predicate_property(G, (dynamic)), !, call_dynamic(G).
        call(G) :- predicate_property(G, (compiled)), !, call_compiled(G).
        ...

In other words, the predicates builtin(G) and call_builtin(G) are
unfolded into the definition of call/1.  Now the compiler will execute
built-ins completely deterministically.  Despite being written in
Prolog, the implementation of call/1 in Aquarius is almost as fast as
C-Prolog - measurements show a typical speed ratio between one and
two.


Rule 3b: Use unifications, comparisons, and type checks
-------

Using the following built-ins (called 'tests' in what follows) makes
it easier for the compiler to generate deterministic code:

        1. Unifications with nonvariable arguments
           (for example, X=a, P=pair(B,C)).
        2. Arithmetic comparisons (for example, A<B, X>10).
        3. Type checks (for example, var(X), compound(S), atomic(A)).

The compiler knows all about these three classes of built-ins and will
generate fast deterministic code for them.


Rule 3c: Make the clauses mutually exclusive
-------

Make sure that the clauses of a predicate are mutually exclusive, in
other words that there are no values of the arguments for which more
than one clause succeeds.  For example, the predicate

        max(A,B,C) :- A=<B, C=B.
        max(A,B,C) :- A>=B, C=A.

is elegantly symmetrical, but it will create a choice point when A and
B are equal, since both clauses succeed in that case.  The following
modification:

        max(A,B,C) :- A=<B, C=B.
        max(A,B,C) :- A>B, C=A.

will generate completely deterministic code.  In fact, as well as
being completely logical, it generates slightly faster code than the
obvious solution

        max(A,B,C) :- A=<B, !, C=B.
        max(A,B,C) :- C=A.

In general, putting more tests in a predicate will not slow it down.  On
the contrary, it allows the compiler to do a better job of selection, so
usually the predicate will run faster.


Rule 3d: Delay output unifications
-------

Unifications of output arguments should be put after unifications of
input arguments.  The compiler will try to delay the output
unifications even if you do not, but this is not always successful.


Rule 4: Use ground terms
------

A term is ground if it does not contain any unbound variables.  The
compiler knows all about ground terms and will do a better job if your
program uses them.


Rule 5: Multiple specialization
------

Make separate copies of predicates that are called several times with
different types.  This transformation is called 'multiple
specialization' and it can be a huge win.  For example, in the
chat_parser benchmark the inner loop is a two-clause predicate,
terminal/5, that is called 22 times.  Making 22 copies of this and
recompiling results in a 14% performance improvement.

A more detailed example is the following solution to the
SEND+MORE=MONEY puzzle.  This solution is from Andre Marien and is
optimized for BIM Prolog:

        solve :-
                solve(SEND,MORE,MONEY),
                write(SEND+MORE=MONEY), nl, fail.
        solve .
        
        solve([S,E,N,D],[1,O,R,E],[1,O,N,E,Y]) :-
                add(S,1,C3,O,1),
                add(E,O,C2,N,C3),
                E =\= S, E =\= 1, N =\= S, N =\= 1,
                add(N,R,C1,E,C2),
                R =\= S, R =\= O, R =\= 1,
                add(D,E, 0,Y,C1),
                D =\= S, D =\= O, D =\= N, D =\= R, D =\= 1,
                Y =\= S, Y =\= O, Y =\= N, Y =\= R, Y =\= 1.
        
        % The following table of add(A,B,Ci,C,Co) represents
        % A+B+Ci = 10*Co+C, with conditions A=\=B, B=\=C, C=\=A.
        % It contains 144 clauses and was generated automatically.
        add(1,2,0,3,0).
        add(1,3,0,4,0).
        add(1,4,0,5,0).
        ...
        add(8,3,1,2,1).
        add(8,4,1,3,1).
        add(8,5,1,4,1).
        add(8,6,1,5,1).
        add(8,7,1,6,1).

This solution runs in 2.3 ms under BIM Prolog version 3.1 on a
SPARCstation 1+.  Unmodified, it runs in the same time under Aquarius
Prolog on the same machine (with analysis).  This time can be reduced
by making multiple copies of the add/5 predicate, one for each call.
This is easily done in an editor.

Compiling and running the program again (with analysis) results in an
execution time of 0.21 ms, more than a tenfold improvement.  This is
because each call of add/5 is now compiled exactly as it is used
(namely, as a generator or as a tester), and because of uninitialized
register modes.  Surprisingly, the object code size is almost
unchanged, because each of the four add predicates is compiled more
compactly.

By the way, it would be nice to have a preprocessor that does this
transformation automatically given a directive like:

         :- multiple(add/5).

Eventually, an improved global analyzer should do the transformation
itself.  Building such an analyzer would be an interesting research
project.


Rule 6: Encapsulation
------

Frequently used utilities can be encapsulated, that is, surrounded by
type checks so that their arguments are either ground or unbound.  For
example, let's say you have a sort routine fast_sort/2 that compiles
into very fast code if the first argument is ground and the second is
unbound.  Then you can encapsulate it as follows:

	my_sort(A, B) :-
		ground(A), !,
		fast_sort_1(A, C),
		C=B.
	my_sort(A, B) :-
		fast_sort_2(A, B).

Make two copies of the source of fast_sort/2 and call them
fast_sort_1/2 and fast_sort_2/2.  Always call fast_sort_1/2 and
fast_sort_2/2 through my_sort/2.  Then all calls to fast_sort_1/2 are
guaranteed to be with a ground first argument and an unbound
(actually, an uninitialized) second argument.  The analyzer will do a
good job with these modes.


Rule 7: Entry specialization
------

For a predicate that needs to run fast, define several versions that
work for different patterns of input modes.  These versions are entry
points for the predicate.  They are declared in a modal_entry
directive.  At each call of the predicate, the compiler will replace
it by the most precise entry point that it can find by looking in the
modal_entry tree.  The compiler will replace the predicate's call by
the call to this entry point.  This technique is used in the compiler
to increase the speed of built-in predicates.  See my Ph.D.
dissertation (section 5.4.1 of chapter 4 and section 3.4 of chapter 5)
for more information.

Entry specialization can be combined with encapsulation: the compiler
attempts to replace a call with a more specialized entry point.  In
the cases where this does not succeed, another attempt is made at
run-time to execute the more specialized entry point.















































































































%:-expects_dialect(ifprolog).

% :-ifprolog_term_expansion(assign_alias(debug,user_error),Call),Call.

clause_asserted(C):- as_clause(C,H,B),!,clause_asserted(H,B).
clause_asserted(H,B):- predicate_property(H,number_of_clauses(N)),N>0,copy_term(H:B,HH:BB),!, clause(HH, BB, Ref),clause(Head, Body, Ref),H=@=Head,Body=@=B,!.
as_clause( ((H :- B)),H,B):-!.
as_clause( H,  H,  true).

ain(C):-cnotrace(clause_asserted(C)->true;assert(C)).
:- dynamic((time_taken/1,sum/1,soln_size/1)).
:- ain(time_taken(0)).
:- ain(sum(0)).
:- ain(soln_size(0)).



% failOnError(Call):-catch(Call,_,fail).

fresh_line:-current_output(Strm),fresh_line(Strm),!.
fresh_line(Strm):-failOnError((stream_property(Strm,position('$stream_position'(_,_,POS,_))),(POS>0 ->nl(Strm);true))),!.
fresh_line(Strm):-failOnError(nl(Strm)),!.
fresh_line(_).

% ===================================================================
% Substitution based on ==
% ===================================================================

% Usage: subst(+Fml,+X,+Sk,?FmlSk)


nd_subst(  Var, VarS,SUB,SUB ) :- Var==VarS,!.
nd_subst(  Var, _,_,Var ) :- var(Var),!.
nd_subst(  P, X,Sk, P1 ) :- functor(P,_,N),nd_subst1( X, Sk, P, N, P1 ).

nd_subst1( _,  _, P, 0, P  ).
nd_subst1( X, Sk, P, N, P1 ) :- N > 0,
            P =.. [F|Args], 
            nd_subst2( X, Sk, Args, ArgS ),
            nd_subst2( X, Sk, [F], [FS] ),  
            P1 =.. [FS|ArgS].

nd_subst2( _,  _, [], [] ).
nd_subst2( X, Sk, [A|As], [Sk|AS] ) :- X == A, !, nd_subst2( X, Sk, As, AS).
nd_subst2( X, Sk, [A|As], [A|AS]  ) :- var(A), !, nd_subst2( X, Sk, As, AS).
nd_subst2( X, Sk, [A|As], [Ap|AS] ) :- nd_subst( A,X,Sk,Ap ),nd_subst2( X, Sk, As, AS).
nd_subst2( _X, _Sk, L, L ).

:- meta_predicate(w_tl(+,0)).
w_tl( [],Call):- !,Call.
w_tl( [With|MORE],Call):- !,w_tl(With,w_tl(MORE,Call)).
w_tl( (With,MORE),Call):- !,w_tl(With,w_tl(MORE,Call)).
w_tl( (With;MORE),Call):- !,w_tl(With,Call);w_tl(MORE,Call).
w_tl( -TL:With,Call):- !,wno_tl(TL:With,Call).
w_tl( +TL:With,Call):- !,w_tl(TL:With,Call).
w_tl( not(With),Call):- !,wno_tl(With,Call).
w_tl( -With,Call):- !,wno_tl(With,Call).
w_tl( +With,Call):- !,w_tl(With,Call).

% w_tl(THead,Call):- functor(THead,F,_),b_setval(F,THead).
w_tl(THead,Call):- 
 must(to_thread_head(THead,M,_Head,H)),
   copy_term(H,  WithA), !,
   ( M:WithA -> Call ; setup_call_cleanup(M:asserta(WithA),Call,must(M:retract(WithA)))).

w_tl(THead,Call):- 
 must(to_thread_head(THead,M,_Head,H)),
   copy_term(H,  WithA), !,
   w_tl(M,WithA,Call).
   
:- meta_predicate(w_tl(+,+,0)).
w_tl(M,WithA,Call):- M:WithA,!,Call.
w_tl(M,WithA,Call):-
   setup_call_cleanup(M:asserta(WithA),Call,must(M:retract(WithA))).

:- meta_predicate(wno_tl(+,0)).
wno_tl(THead,Call):-
 must(to_thread_head((THead:-!,fail),M,_Head,H)),
   copy_term(H,  WithA), !, setup_call_cleanup(M:asserta(WithA),Call,must(M:retract(WithA))).


to_thread_head((H:-B),TL,(HO:-B),(HH:-B)):-!,to_thread_head(H,TL,HO,HH),!.
to_thread_head(thglobal:Head,thglobal,thglobal:Head,Head):- slow_sanity((predicate_property(thglobal:Head,(dynamic)),not(predicate_property(thglobal:Head,(thread_local))))).
to_thread_head(TL:Head,TL,TL:Head,Head):-!, slow_sanity(( predicate_property(TL:Head,(dynamic)),must(predicate_property(TL:Head,(thread_local))))).
to_thread_head(Head,t_l,t_l:Head,Head):-!, slow_sanity(( predicate_property(t_l:Head,(dynamic)),must(predicate_property(t_l:Head,(thread_local))))).
to_thread_head(Head,tlbugger,tlbugger:Head,Head):- slow_sanity(( predicate_property(tlbugger:Head,(dynamic)),predicate_property(tlbugger:Head,(thread_local)))).

slow_sanity(X):-must(X).


%se/cond == se. state == ss. trans == sc. dif == ne.  operator == operator
term_expansion_hyhtn(In,Out):-nonvar(In),term_expansion_alias(In,Out).


/*
:- use_module(library(pce)).
:- use_module(library(gui_tracer)).
*/

:- thread_local tlbugger:inside_loop_check/1.
:- module_transparent(tlbugger:inside_loop_check/1).

:- thread_local tlbugger:inside_loop_check_local/2.
:- module_transparent(tlbugger:inside_loop_check_local/2).


make_key(CC,KeyA):- cnotrace(ground(CC)->KeyA=CC ;(copy_term(CC,Key,_),numbervars(Key,0,_))),!,KeyA=Key. % ,term_to_atom(Key,KeyA).
loop_check(B):- loop_check(B,fail).
:- trace.
loop_check(B, TODO):- make_key(B,BC),!, loop_check_term(B,BC,TODO).

loop_check_term(B,BC,TODO):-  ( \+(tlbugger:inside_loop_check(BC)) 
   -> setup_call_cleanup(asserta(tlbugger:inside_loop_check(BC)),B, retract((tlbugger:inside_loop_check(BC)))) ;call(TODO) ).


must(E):-E *-> true ; (trace,E).

functor_h(P,F,A):-var(P),!,(number(A)->functor(P,F,A);((mpred_arity(F,A);throw(var_functor_h(P,F,A))))).
functor_h(F/A,F,A):-number(A),!,( atom(F) ->  true ; mpred_arity(F,A)).
functor_h(':'(_,P),F,A):-nonvar(P),!,functor_h(P,F,A).
functor_h(':-'(P),F,A):-!,functor_h(P,F,A).
functor_h(':-'(P,_),F,A):-!,functor_h(P,F,A).
functor_h(kb(P),F,A):- atom(P),!, ( P=F -> mpred_arity(F,A) ; prop_mpred(P,F,A)).
functor_h(P,F,A):-functor(P,F,A).

decl_mepred(ENV,Var):- (var(ENV);var(Var)),!, trace,throw(var_env_learn_pred(ENV,Var)).
decl_mepred(ENV,(A,B)):-!, decl_mepred(ENV,A), decl_mepred(ENV,B).
decl_mepred(ENV,[A|B]):-!, decl_mepred(ENV,A), decl_mepred(ENV,B).
decl_mepred([],_):- !.
decl_mepred(_,[]):- !.
decl_mepred([H|T],P):- !, decl_mepred(H,P),decl_mepred(T,P).
decl_mepred((H,T),P):- !, decl_mepred(H,P),decl_mepred(T,P).
decl_mepred(call(ENV),P):- functor_h(P,F,A),call(ENV,F/A),!.
decl_mepred(ENV,P):- functor_h(P,F,A),!,decl_mepred_fa(ENV,F,A).

decl_mepred_fa(ENV,F,A):- prop_mpred(ENV,F,A),!.
decl_mepred_fa(ENV,F,A):- ain(mpred_arity(F,A)),ain(lmhook:mpred_user_kb(ENV)),assert(prop_mpred(ENV,F,A)), doall(decl_mepred_fa_hooks(ENV,F,A)).



 
count(1_000_000).
 
my_asserta(N) :- asserta(asserted_a(N)).
my_assertz(N) :- assertz(asserted_z(N)).
my_recorda(N) :- recorda(recorded_a, N).
my_recordz(N) :- recordz(recorded_z, N).
my_flag(N) :- flag(some_flag, _, N).
 
my_setval(N) :-
    b_getval(global_variable, Old),
    b_setval(global_variable, [N|Old]).
 
bench :-
    count(Count),
    ns_op(many(Count, my_asserta)),
    ns_op(many(Count, my_assertz)),
    ns_op(many(Count, my_recorda)),
    ns_op(many(Count, my_recordz)),
    ns_op(many(Count, my_flag)),
    ns_op(many(Count, my_setval)),
    clear.
 
ns_op(Goal) :-
    get_time(Start),
    call(Goal),
    get_time(Done),
    count(Count),
    Ns is (Done - Start) / Count * 1_000_000_000,
    'format'("~w: ~1f ns/op~n", [Goal, Ns]).
 
many(N, Goal) :-
    ( N > 0 ->
        call(Goal, N),
        succ(N0, N),
        many(N0, Goal)
    ; true
    ).
 
clear :-
    ns_op(retractall(asserted_a(_))),
    ns_op(retractall(asserted_z(_))),
    ns_op(eraseall(recorded_a)),
    ns_op(eraseall(recorded_z)),
    ns_op(b_setval(global_variable, [])).
 
eraseall(Key) :-
    foreach( recorded(Key,A,Ref), erase_Safe(recorded(Key,A,Ref),Ref) ).


dmsg(Term):-dmsg(debug,Term).
dmsg(Color,Term):-   tell(user),fresh_line, sformat(S,Term,[],[]),print_message_lines(user_output,kind(Color),[S-[]]),fresh_line,told,!.
/*
dmsg(Color,Term):- current_prolog_flag(tty_control, true),!,  tell(user),fresh_line,to_petty_color(Color,Type),
   call_cleanup(((sformat(S,Term,[],[]),print_message(Type,if_tty([S-[]])))),told).
*/

sformat(O,T,_Vs,_Opts):- (true;functor(T,':-',_)),with_output_to(chars(Codes),portray_clause(':-'(T))),
  append([_,_,_],PrintCodes,Codes),'sformat'(O,'~s',[PrintCodes]),!.
sformat(O,T,Vs,Opts):- with_output_to(chars(Codes),(current_output(CO),pp_termclause(CO,':-'(T),Vs,Opts))),
  append([_,_,_],PrintCodes,Codes),'sformat'(O,'~s',[PrintCodes]),!.

pp_termclause(O,T,Vs,Options):- prolog_listing:do_portray_clause(O,T,[variable_names(Vs),numbervars(true),character_escapes(true),quoted(true)|Options]),!.

to_petty_clause(V,('VARIABLE':-V)):-var(V),!.
to_petty_clause((H:-B),(H:-B)):-!.
to_petty_clause((':-'(B)),(':-'(B))):-!.
to_petty_clause(((B)),(':-'(B))):-!.
to_petty_color(X,X).

nop(_P).
doall(G):-ignore((G,fail)).
one_must(Call,Else):- trye(Call)*->true;Else.

:- call_provider(lmhook:mpred_user_kb(KB)),KB:dynamic((prop_mpred/3, mpred_isa/2, mpred_arity/2, isa_mpred_isa/1)).
:- call_provider(lmhook:mpred_user_kb(KB)),KB:multifile((prop_mpred/3, mpred_isa/2, mpred_arity/2, isa_mpred_isa/1)).




