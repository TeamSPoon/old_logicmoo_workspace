
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu May 26 21:18:53 BST 2005
//----------------------------------------------------

package jplan.ocl;

import java.util.regex.*;
import java_cup.runtime.*;
import java.io.PrintWriter;
import java.util.List;
import java.util.ArrayList;
import java.util.ListIterator;
import jplan.general.Utility;
import jplan.general.OCLException;

/** CUP v0.10j generated parser.
  * @version Thu May 26 21:18:53 BST 2005
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\316\000\002\002\004\000\002\003\004\000\002\003" +
    "\003\000\002\057\004\000\002\057\003\000\002\055\007" +
    "\000\002\100\002\000\002\056\005\000\002\056\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\101\002\000\002\011\010\000\002\102" +
    "\002\000\002\005\010\000\002\103\002\000\002\006\014" +
    "\000\002\104\002\000\002\007\014\000\002\105\002\000" +
    "\002\012\012\000\002\106\002\000\002\013\012\000\002" +
    "\107\002\000\002\016\014\000\002\026\004\000\002\026" +
    "\005\000\002\025\005\000\002\025\003\000\002\110\002" +
    "\000\002\024\006\000\002\027\010\000\002\111\002\000" +
    "\002\027\012\000\002\112\002\000\002\017\014\000\002" +
    "\113\002\000\002\114\002\000\002\017\017\000\002\030" +
    "\010\000\002\115\002\000\002\030\012\000\002\116\002" +
    "\000\002\117\002\000\002\120\002\000\002\121\002\000" +
    "\002\122\002\000\002\031\022\000\002\123\002\000\002" +
    "\124\002\000\002\125\002\000\002\126\002\000\002\076" +
    "\017\000\002\127\002\000\002\130\002\000\002\131\002" +
    "\000\002\132\002\000\002\133\002\000\002\077\022\000" +
    "\002\134\002\000\002\135\002\000\002\136\002\000\002" +
    "\137\002\000\002\140\002\000\002\141\002\000\002\032" +
    "\027\000\002\040\004\000\002\040\005\000\002\037\005" +
    "\000\002\037\003\000\002\142\002\000\002\036\013\000" +
    "\002\044\004\000\002\044\005\000\002\043\005\000\002" +
    "\043\003\000\002\143\002\000\002\041\013\000\002\144" +
    "\002\000\002\042\006\000\002\145\002\000\002\042\006" +
    "\000\002\047\005\000\002\047\003\000\002\146\002\000" +
    "\002\046\013\000\002\045\003\000\002\045\003\000\002" +
    "\147\002\000\002\150\002\000\002\050\021\000\002\151" +
    "\002\000\002\152\002\000\002\050\021\000\002\153\002" +
    "\000\002\154\002\000\002\155\002\000\002\156\002\000" +
    "\002\054\032\000\002\061\004\000\002\061\005\000\002" +
    "\051\005\000\002\051\003\000\002\052\003\000\002\052" +
    "\003\000\002\157\002\000\002\053\007\000\002\022\004" +
    "\000\002\022\005\000\002\066\004\000\002\066\005\000" +
    "\002\064\005\000\002\064\003\000\002\064\005\000\002" +
    "\064\003\000\002\160\002\000\002\065\011\000\002\020" +
    "\005\000\002\020\003\000\002\161\002\000\002\021\007" +
    "\000\002\162\002\000\002\021\007\000\002\163\002\000" +
    "\002\164\002\000\002\021\012\000\002\165\002\000\002" +
    "\166\002\000\002\021\012\000\002\167\002\000\002\170" +
    "\002\000\002\021\012\000\002\171\002\000\002\172\002" +
    "\000\002\021\012\000\002\173\002\000\002\174\002\000" +
    "\002\021\012\000\002\175\002\000\002\023\006\000\002" +
    "\176\002\000\002\023\006\000\002\023\003\000\002\023" +
    "\003\000\002\062\005\000\002\062\005\000\002\062\003" +
    "\000\002\062\003\000\002\177\002\000\002\063\011\000" +
    "\002\015\005\000\002\015\003\000\002\200\002\000\002" +
    "\014\007\000\002\201\002\000\002\010\006\000\002\010" +
    "\003\000\002\033\004\000\002\033\005\000\002\034\005" +
    "\000\002\034\003\000\002\202\002\000\002\035\011\000" +
    "\002\203\002\000\002\060\005\000\002\060\003\000\002" +
    "\070\003\000\002\070\005\000\002\070\005\000\002\071" +
    "\003\000\002\071\005\000\002\071\005\000\002\075\004" +
    "\000\002\075\005\000\002\075\003\000\002\075\003\000" +
    "\002\075\003\000\002\075\003\000\002\075\003\000\002" +
    "\072\003\000\002\072\005\000\002\073\003\000\002\073" +
    "\005\000\002\074\003\000\002\074\004\000\002\074\005" +
    "\000\002\067\005\000\002\067\005\000\002\067\005\000" +
    "\002\067\005\000\002\067\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01f4\000\050\014\033\015\014\016\052\017\021\020" +
    "\005\021\025\022\035\023\016\024\012\025\046\031\034" +
    "\034\007\036\044\042\023\043\027\044\020\046\024\073" +
    "\030\074\010\001\002\000\050\002\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\025\ufff3\031\ufff3\034\ufff3\042\ufff3\043\ufff3\044\ufff3" +
    "\046\ufff3\073\ufff3\074\ufff3\001\002\000\004\006\u01f0\001" +
    "\002\000\050\002\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031" +
    "\ufff1\034\ufff1\042\ufff1\043\ufff1\044\ufff1\046\ufff1\073\ufff1" +
    "\074\ufff1\001\002\000\004\006\u01d5\001\002\000\004\006" +
    "\uffbd\001\002\000\046\014\033\015\014\016\052\017\021" +
    "\020\005\021\025\022\035\023\016\024\012\025\046\031" +
    "\034\034\007\042\023\043\027\044\020\046\024\073\030" +
    "\074\010\001\002\000\004\006\u01bb\001\002\000\050\002" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\021\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\025\ufff2\031\ufff2\034\ufff2\042" +
    "\ufff2\043\ufff2\044\ufff2\046\ufff2\073\ufff2\074\ufff2\001\002" +
    "\000\004\006\u01a8\001\002\000\050\002\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\031\uffea\034\uffea\042\uffea\043\uffea\044" +
    "\uffea\046\uffea\073\uffea\074\uffea\001\002\000\004\006\u0191" +
    "\001\002\000\004\002\u0190\001\002\000\004\006\u0176\001" +
    "\002\000\004\006\u016d\001\002\000\050\002\ufff4\014\ufff4" +
    "\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\031\ufff4\034\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\046\ufff4\073\ufff4\074\ufff4\001\002\000\006\042" +
    "\uff4f\043\uff4f\001\002\000\004\006\uffe7\001\002\000\004" +
    "\006\u015c\001\002\000\050\002\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb" +
    "\025\uffeb\031\uffeb\034\uffeb\042\uffeb\043\uffeb\044\uffeb\046" +
    "\uffeb\073\uffeb\074\uffeb\001\002\000\050\002\uff4d\014\uff4d" +
    "\015\uff4d\016\uff4d\017\uff4d\020\uff4d\021\uff4d\022\uff4d\023" +
    "\uff4d\024\uff4d\025\uff4d\031\uff4d\034\uff4d\042\uff4d\043\uff4d" +
    "\044\uff4d\046\uff4d\073\uff4d\074\uff4d\001\002\000\004\006" +
    "\uffc2\001\002\000\004\002\uffff\001\002\000\050\002\ufffd" +
    "\014\033\015\014\016\052\017\021\020\005\021\025\022" +
    "\035\023\016\024\012\025\046\031\034\034\007\042\023" +
    "\043\027\044\020\046\024\073\030\074\010\001\002\000" +
    "\004\006\uffe5\001\002\000\004\006\uffb7\001\002\000\004" +
    "\006\347\001\002\000\050\002\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\031\ufff0\034\ufff0\042\ufff0\043\ufff0\044\ufff0\046" +
    "\ufff0\073\ufff0\074\ufff0\001\002\000\050\002\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\024\ufff5\025\ufff5\031\ufff5\034\ufff5\042\ufff5\043\ufff5" +
    "\044\ufff5\046\ufff5\073\ufff5\074\ufff5\001\002\000\050\002" +
    "\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee" +
    "\022\uffee\023\uffee\024\uffee\025\uffee\031\uffee\034\uffee\042" +
    "\uffee\043\uffee\044\uffee\046\uffee\073\uffee\074\uffee\001\002" +
    "\000\050\002\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\024\uffec\025\uffec\031\uffec" +
    "\034\uffec\042\uffec\043\uffec\044\uffec\046\uffec\073\uffec\074" +
    "\uffec\001\002\000\050\002\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\025" +
    "\ufff6\031\ufff6\034\ufff6\042\ufff6\043\ufff6\044\ufff6\046\ufff6" +
    "\073\ufff6\074\ufff6\001\002\000\050\002\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\031\uffed\034\uffed\042\uffed\043\uffed\044" +
    "\uffed\046\uffed\073\uffed\074\uffed\001\002\000\004\037\337" +
    "\001\002\000\050\002\ufff8\014\ufff8\015\ufff8\016\ufff8\017" +
    "\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8" +
    "\031\ufff8\034\ufff8\042\ufff8\043\ufff8\044\ufff8\046\ufff8\073" +
    "\ufff8\074\ufff8\001\002\000\004\006\uffc8\001\002\000\050" +
    "\002\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\022\uffef\023\uffef\024\uffef\025\uffef\031\uffef\034\uffef" +
    "\042\uffef\043\uffef\044\uffef\046\uffef\073\uffef\074\uffef\001" +
    "\002\000\050\002\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7" +
    "\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025\ufff7\031" +
    "\ufff7\034\ufff7\042\ufff7\043\ufff7\044\ufff7\046\ufff7\073\ufff7" +
    "\074\ufff7\001\002\000\050\002\uffe9\014\uffe9\015\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9" +
    "\025\uffe9\031\uffe9\034\uffe9\042\uffe9\043\uffe9\044\uffe9\046" +
    "\uffe9\073\uffe9\074\uffe9\001\002\000\004\006\054\001\002" +
    "\000\050\002\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020" +
    "\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\031\uffe8" +
    "\034\uffe8\042\uffe8\043\uffe8\044\uffe8\046\uffe8\073\uffe8\074" +
    "\uffe8\001\002\000\004\012\055\001\002\000\004\005\uffe3" +
    "\001\002\000\004\005\057\001\002\000\004\010\060\001" +
    "\002\000\004\012\061\001\002\000\010\005\uff58\007\uff56" +
    "\011\uff56\001\002\000\004\011\063\001\002\000\004\007" +
    "\064\001\002\000\004\004\065\001\002\000\050\002\uffe2" +
    "\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\034\uffe2\042\uffe2" +
    "\043\uffe2\044\uffe2\046\uffe2\073\uffe2\074\uffe2\001\002\000" +
    "\004\005\067\001\002\000\004\012\061\001\002\000\006" +
    "\007\uff57\011\uff57\001\002\000\004\006\072\001\002\000" +
    "\020\012\100\050\075\051\102\052\073\053\076\054\077" +
    "\055\074\001\002\000\004\006\330\001\002\000\004\006" +
    "\321\001\002\000\004\006\265\001\002\000\004\006\256" +
    "\001\002\000\004\006\247\001\002\000\004\006\233\001" +
    "\002\000\004\005\136\001\002\000\004\006\103\001\002" +
    "\000\020\012\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\055\uff77\001\002\000\020\012\100\050\075\051\102" +
    "\052\073\053\076\054\077\055\074\001\002\000\004\005" +
    "\uff76\001\002\000\004\005\107\001\002\000\034\006\115" +
    "\012\100\013\113\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\057\110\072\111\075\112\076\114\001\002" +
    "\000\034\006\115\012\100\013\113\050\075\051\102\052" +
    "\073\053\076\054\077\055\074\057\110\072\111\075\112" +
    "\076\114\001\002\000\032\007\uff41\056\uff41\057\uff41\060" +
    "\uff41\061\uff41\062\uff41\063\uff41\065\uff41\066\uff41\067\uff41" +
    "\070\uff41\071\uff41\001\002\000\032\007\uff43\056\uff43\057" +
    "\uff43\060\uff43\061\uff43\062\uff43\063\uff43\065\uff43\066\uff43" +
    "\067\uff43\070\uff43\071\uff43\001\002\000\032\007\uff42\056" +
    "\uff42\057\uff42\060\uff42\061\uff42\062\uff42\063\uff42\065\uff42" +
    "\066\uff42\067\uff42\070\uff42\071\uff42\001\002\000\032\007" +
    "\uff44\056\uff44\057\uff44\060\uff44\061\uff44\062\uff44\063\uff44" +
    "\065\uff44\066\uff44\067\uff44\070\uff44\071\uff44\001\002\000" +
    "\034\006\115\012\100\013\113\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\057\110\072\111\075\112\076" +
    "\114\001\002\000\032\007\uff40\056\uff40\057\uff40\060\uff40" +
    "\061\uff40\062\uff40\063\uff40\065\uff40\066\uff40\067\uff40\070" +
    "\uff40\071\uff40\001\002\000\032\007\uff49\056\uff49\057\uff49" +
    "\060\uff49\061\uff49\062\uff49\063\uff49\065\uff49\066\uff49\067" +
    "\uff49\070\uff49\071\uff49\001\002\000\032\007\uff4c\056\uff4c" +
    "\057\uff4c\060\126\061\127\062\uff4c\063\uff4c\065\uff4c\066" +
    "\uff4c\067\uff4c\070\uff4c\071\uff4c\001\002\000\010\007\122" +
    "\056\123\057\124\001\002\000\036\005\uff75\007\uff75\011" +
    "\uff75\056\uff75\057\uff75\060\uff75\061\uff75\062\uff75\063\uff75" +
    "\065\uff75\066\uff75\067\uff75\070\uff75\071\uff75\001\002\000" +
    "\034\006\115\012\100\013\113\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\057\110\072\111\075\112\076" +
    "\114\001\002\000\034\006\115\012\100\013\113\050\075" +
    "\051\102\052\073\053\076\054\077\055\074\057\110\072" +
    "\111\075\112\076\114\001\002\000\032\007\uff4a\056\uff4a" +
    "\057\uff4a\060\126\061\127\062\uff4a\063\uff4a\065\uff4a\066" +
    "\uff4a\067\uff4a\070\uff4a\071\uff4a\001\002\000\034\006\115" +
    "\012\100\013\113\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\057\110\072\111\075\112\076\114\001\002" +
    "\000\034\006\115\012\100\013\113\050\075\051\102\052" +
    "\073\053\076\054\077\055\074\057\110\072\111\075\112" +
    "\076\114\001\002\000\032\007\uff47\056\uff47\057\uff47\060" +
    "\uff47\061\uff47\062\uff47\063\uff47\065\uff47\066\uff47\067\uff47" +
    "\070\uff47\071\uff47\001\002\000\032\007\uff48\056\uff48\057" +
    "\uff48\060\uff48\061\uff48\062\uff48\063\uff48\065\uff48\066\uff48" +
    "\067\uff48\070\uff48\071\uff48\001\002\000\032\007\uff4b\056" +
    "\uff4b\057\uff4b\060\126\061\127\062\uff4b\063\uff4b\065\uff4b" +
    "\066\uff4b\067\uff4b\070\uff4b\071\uff4b\001\002\000\010\007" +
    "\134\056\123\057\124\001\002\000\032\007\uff45\056\uff45" +
    "\057\uff45\060\uff45\061\uff45\062\uff45\063\uff45\065\uff45\066" +
    "\uff45\067\uff45\070\uff45\071\uff45\001\002\000\032\007\uff46" +
    "\056\uff46\057\uff46\060\uff46\061\uff46\062\uff46\063\uff46\065" +
    "\uff46\066\uff46\067\uff46\070\uff46\071\uff46\001\002\000\004" +
    "\010\uffc7\001\002\000\004\010\140\001\002\000\006\011" +
    "\217\026\216\001\002\000\004\005\142\001\002\000\004" +
    "\010\uffc6\001\002\000\004\010\144\001\002\000\006\011" +
    "\157\027\156\001\002\000\004\005\146\001\002\000\004" +
    "\010\uffc5\001\002\000\004\010\144\001\002\000\004\007" +
    "\151\001\002\000\004\004\uffc4\001\002\000\004\004\153" +
    "\001\002\000\050\002\uffc3\014\uffc3\015\uffc3\016\uffc3\017" +
    "\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\031\uffc3\034\uffc3\042\uffc3\043\uffc3\044\uffc3\046\uffc3\073" +
    "\uffc3\074\uffc3\001\002\000\004\011\213\001\002\000\006" +
    "\005\211\011\uffa7\001\002\000\004\006\160\001\002\000" +
    "\006\005\uffaa\007\uffaa\001\002\000\004\012\161\001\002" +
    "\000\004\005\162\001\002\000\006\012\165\013\163\001" +
    "\002\000\004\005\uff9c\001\002\000\004\005\166\001\002" +
    "\000\004\005\uff9b\001\002\000\004\010\uffa6\001\002\000" +
    "\004\010\170\001\002\000\022\011\205\012\100\050\075" +
    "\051\102\052\073\053\076\054\077\055\074\001\002\000" +
    "\006\005\172\035\173\001\002\000\004\010\uffa4\001\002" +
    "\000\004\010\uffa2\001\002\000\006\005\uffa5\011\uffa5\001" +
    "\002\000\004\010\170\001\002\000\004\007\177\001\002" +
    "\000\006\005\uffa1\011\uffa1\001\002\000\004\010\170\001" +
    "\002\000\004\007\202\001\002\000\006\005\uffa3\011\uffa3" +
    "\001\002\000\006\005\207\011\uff7c\001\002\000\004\011" +
    "\206\001\002\000\010\005\uff87\007\uff87\035\uff87\001\002" +
    "\000\010\005\uff86\007\uff86\035\uff86\001\002\000\020\012" +
    "\100\050\075\051\102\052\073\053\076\054\077\055\074" +
    "\001\002\000\004\011\uff7d\001\002\000\004\027\156\001" +
    "\002\000\004\011\uffa8\001\002\000\006\005\uffa9\007\uffa9" +
    "\001\002\000\004\011\232\001\002\000\006\005\230\011" +
    "\uffad\001\002\000\004\006\220\001\002\000\004\005\uffb0" +
    "\001\002\000\004\012\221\001\002\000\004\005\222\001" +
    "\002\000\006\012\165\013\163\001\002\000\004\005\224" +
    "\001\002\000\004\010\uffac\001\002\000\004\010\170\001" +
    "\002\000\004\007\227\001\002\000\006\005\uffab\011\uffab" +
    "\001\002\000\004\026\216\001\002\000\004\011\uffae\001" +
    "\002\000\004\005\uffaf\001\002\000\006\012\uff7b\013\uff7b" +
    "\001\002\000\006\012\237\013\235\001\002\000\006\005" +
    "\uff66\007\uff63\001\002\000\004\007\243\001\002\000\006" +
    "\005\uff68\007\uff64\001\002\000\004\005\241\001\002\000" +
    "\006\012\237\013\235\001\002\000\004\007\uff67\001\002" +
    "\000\036\005\uff7a\007\uff7a\011\uff7a\056\uff7a\057\uff7a\060" +
    "\uff7a\061\uff7a\062\uff7a\063\uff7a\065\uff7a\066\uff7a\067\uff7a" +
    "\070\uff7a\071\uff7a\001\002\000\004\005\245\001\002\000" +
    "\006\012\237\013\235\001\002\000\004\007\uff65\001\002" +
    "\000\020\012\uff74\050\uff74\051\uff74\052\uff74\053\uff74\054" +
    "\uff74\055\uff74\001\002\000\020\012\100\050\075\051\102" +
    "\052\073\053\076\054\077\055\074\001\002\000\004\005" +
    "\uff73\001\002\000\004\005\253\001\002\000\034\006\115" +
    "\012\100\013\113\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\057\110\072\111\075\112\076\114\001\002" +
    "\000\010\007\255\056\123\057\124\001\002\000\036\005" +
    "\uff72\007\uff72\011\uff72\056\uff72\057\uff72\060\uff72\061\uff72" +
    "\062\uff72\063\uff72\065\uff72\066\uff72\067\uff72\070\uff72\071" +
    "\uff72\001\002\000\020\012\uff6b\050\uff6b\051\uff6b\052\uff6b" +
    "\053\uff6b\054\uff6b\055\uff6b\001\002\000\020\012\100\050" +
    "\075\051\102\052\073\053\076\054\077\055\074\001\002" +
    "\000\004\005\uff6a\001\002\000\004\005\262\001\002\000" +
    "\034\006\115\012\100\013\113\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\057\110\072\111\075\112\076" +
    "\114\001\002\000\010\007\264\056\123\057\124\001\002" +
    "\000\036\005\uff69\007\uff69\011\uff69\056\uff69\057\uff69\060" +
    "\uff69\061\uff69\062\uff69\063\uff69\065\uff69\066\uff69\067\uff69" +
    "\070\uff69\071\uff69\001\002\000\036\006\uff79\012\uff79\013" +
    "\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\057\uff79\064\uff79\072\uff79\075\uff79\076\uff79\001\002\000" +
    "\036\006\270\012\100\013\113\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\057\110\064\271\072\111\075" +
    "\112\076\114\001\002\000\020\056\123\057\124\065\311" +
    "\066\312\067\313\070\307\071\310\001\002\000\036\006" +
    "\270\012\100\013\113\050\075\051\102\052\073\053\076" +
    "\054\077\055\074\057\110\064\271\072\111\075\112\076" +
    "\114\001\002\000\034\006\115\012\100\013\113\050\075" +
    "\051\102\052\073\053\076\054\077\055\074\057\110\072" +
    "\111\075\112\076\114\001\002\000\010\007\uff3d\062\uff3d" +
    "\063\uff3d\001\002\000\006\007\300\063\301\001\002\000" +
    "\010\007\uff3b\062\uff3b\063\uff3b\001\002\000\010\007\uff3f" +
    "\062\276\063\uff3f\001\002\000\036\006\270\012\100\013" +
    "\113\050\075\051\102\052\073\053\076\054\077\055\074" +
    "\057\110\064\271\072\111\075\112\076\114\001\002\000" +
    "\010\007\uff3c\062\uff3c\063\uff3c\001\002\000\036\005\uff78" +
    "\007\uff78\011\uff78\056\uff78\057\uff78\060\uff78\061\uff78\062" +
    "\uff78\063\uff78\065\uff78\066\uff78\067\uff78\070\uff78\071\uff78" +
    "\001\002\000\036\006\270\012\100\013\113\050\075\051" +
    "\102\052\073\053\076\054\077\055\074\057\110\064\271" +
    "\072\111\075\112\076\114\001\002\000\010\007\uff3e\062" +
    "\276\063\uff3e\001\002\000\010\007\uff3a\062\uff3a\063\uff3a" +
    "\001\002\000\022\007\134\056\123\057\124\065\311\066" +
    "\312\067\313\070\307\071\310\001\002\000\006\007\306" +
    "\063\301\001\002\000\010\007\uff39\062\uff39\063\uff39\001" +
    "\002\000\034\006\115\012\100\013\113\050\075\051\102" +
    "\052\073\053\076\054\077\055\074\057\110\072\111\075" +
    "\112\076\114\001\002\000\034\006\115\012\100\013\113" +
    "\050\075\051\102\052\073\053\076\054\077\055\074\057" +
    "\110\072\111\075\112\076\114\001\002\000\034\006\115" +
    "\012\100\013\113\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\057\110\072\111\075\112\076\114\001\002" +
    "\000\034\006\115\012\100\013\113\050\075\051\102\052" +
    "\073\053\076\054\077\055\074\057\110\072\111\075\112" +
    "\076\114\001\002\000\034\006\115\012\100\013\113\050" +
    "\075\051\102\052\073\053\076\054\077\055\074\057\110" +
    "\072\111\075\112\076\114\001\002\000\014\007\uff37\056" +
    "\123\057\124\062\uff37\063\uff37\001\002\000\014\007\uff36" +
    "\056\123\057\124\062\uff36\063\uff36\001\002\000\014\007" +
    "\uff38\056\123\057\124\062\uff38\063\uff38\001\002\000\014" +
    "\007\uff35\056\123\057\124\062\uff35\063\uff35\001\002\000" +
    "\014\007\uff34\056\123\057\124\062\uff34\063\uff34\001\002" +
    "\000\020\012\uff71\050\uff71\051\uff71\052\uff71\053\uff71\054" +
    "\uff71\055\uff71\001\002\000\020\012\100\050\075\051\102" +
    "\052\073\053\076\054\077\055\074\001\002\000\004\005" +
    "\uff70\001\002\000\004\005\325\001\002\000\034\006\115" +
    "\012\100\013\113\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\057\110\072\111\075\112\076\114\001\002" +
    "\000\010\007\327\056\123\057\124\001\002\000\036\005" +
    "\uff6f\007\uff6f\011\uff6f\056\uff6f\057\uff6f\060\uff6f\061\uff6f" +
    "\062\uff6f\063\uff6f\065\uff6f\066\uff6f\067\uff6f\070\uff6f\071" +
    "\uff6f\001\002\000\020\012\uff6e\050\uff6e\051\uff6e\052\uff6e" +
    "\053\uff6e\054\uff6e\055\uff6e\001\002\000\020\012\100\050" +
    "\075\051\102\052\073\053\076\054\077\055\074\001\002" +
    "\000\004\005\uff6d\001\002\000\004\005\334\001\002\000" +
    "\034\006\115\012\100\013\113\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\057\110\072\111\075\112\076" +
    "\114\001\002\000\010\007\336\056\123\057\124\001\002" +
    "\000\036\005\uff6c\007\uff6c\011\uff6c\056\uff6c\057\uff6c\060" +
    "\uff6c\061\uff6c\062\uff6c\063\uff6c\065\uff6c\066\uff6c\067\uff6c" +
    "\070\uff6c\071\uff6c\001\002\000\004\040\340\001\002\000" +
    "\004\041\341\001\002\000\006\042\343\043\342\001\002" +
    "\000\046\014\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\021" +
    "\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\031\ufff9\034\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\046\ufff9\073\ufff9\074\ufff9\001" +
    "\002\000\006\042\ufffb\043\ufffb\001\002\000\046\014\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\031\ufffc\034\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\046\ufffc\073\ufffc\074\ufffc\001\002\000\006\042" +
    "\343\043\342\001\002\000\046\014\ufffa\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\031\ufffa\034\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa" +
    "\073\ufffa\074\ufffa\001\002\000\004\012\350\001\002\000" +
    "\004\005\351\001\002\000\004\013\352\001\002\000\004" +
    "\005\353\001\002\000\004\010\uffdb\001\002\000\004\010" +
    "\356\001\002\000\004\007\371\001\002\000\006\010\357" +
    "\011\361\001\002\000\020\012\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\054\uffd5\055\uffd5\001\002\000\004\011\365" +
    "\001\002\000\004\007\uffd9\001\002\000\006\005\363\011" +
    "\uffd6\001\002\000\004\010\357\001\002\000\004\011\uffd7" +
    "\001\002\000\004\007\uffd8\001\002\000\020\012\100\050" +
    "\075\051\102\052\073\053\076\054\077\055\074\001\002" +
    "\000\004\011\370\001\002\000\006\005\uffd4\011\uffd4\001" +
    "\002\000\004\004\372\001\002\000\050\002\uffda\014\uffda" +
    "\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\031\uffda\034\uffda\042\uffda\043\uffda" +
    "\044\uffda\046\uffda\073\uffda\074\uffda\001\002\000\004\006" +
    "\374\001\002\000\020\012\100\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\001\002\000\004\005\376\001" +
    "\002\000\004\010\uffb6\001\002\000\004\010\140\001\002" +
    "\000\004\005\u0101\001\002\000\004\010\uffb5\001\002\000" +
    "\004\010\144\001\002\000\004\005\u0104\001\002\000\004" +
    "\010\uffb4\001\002\000\004\010\170\001\002\000\004\005" +
    "\u0107\001\002\000\004\010\uffb3\001\002\000\004\010\u0109" +
    "\001\002\000\006\011\u0140\033\u013e\001\002\000\004\005" +
    "\u010b\001\002\000\004\010\uffb2\001\002\000\004\010\u010d" +
    "\001\002\000\024\011\u0116\012\100\032\u0112\050\075\051" +
    "\102\052\073\053\076\054\077\055\074\001\002\000\004" +
    "\007\u010f\001\002\000\004\004\u0110\001\002\000\050\002" +
    "\uffb1\014\uffb1\015\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1" +
    "\022\uffb1\023\uffb1\024\uffb1\025\uffb1\031\uffb1\034\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\046\uffb1\073\uffb1\074\uffb1\001\002" +
    "\000\006\005\u013b\011\uff8c\001\002\000\004\006\uff89\001" +
    "\002\000\006\005\uff8b\011\uff8b\001\002\000\006\005\uff8a" +
    "\011\uff8a\001\002\000\004\011\u0117\001\002\000\004\007" +
    "\uff8f\001\002\000\004\007\uff8e\001\002\000\004\006\u0119" +
    "\001\002\000\004\030\u011b\001\002\000\004\007\u013a\001" +
    "\002\000\004\006\u011c\001\002\000\004\012\u011d\001\002" +
    "\000\004\005\u011e\001\002\000\006\012\165\013\163\001" +
    "\002\000\004\005\u0120\001\002\000\004\010\uff9e\001\002" +
    "\000\004\010\u0122\001\002\000\024\011\u0128\012\100\047" +
    "\u0126\050\075\051\102\052\073\053\076\054\077\055\074" +
    "\001\002\000\004\007\u0124\001\002\000\010\005\uff9d\007" +
    "\uff9d\011\uff9d\001\002\000\004\011\u0139\001\002\000\004" +
    "\006\u012e\001\002\000\006\005\u012c\011\uff82\001\002\000" +
    "\004\007\uff85\001\002\000\006\005\u012a\011\uff80\001\002" +
    "\000\022\012\100\047\u0126\050\075\051\102\052\073\053" +
    "\076\054\077\055\074\001\002\000\004\011\uff81\001\002" +
    "\000\022\012\100\047\u0126\050\075\051\102\052\073\053" +
    "\076\054\077\055\074\001\002\000\004\011\uff83\001\002" +
    "\000\004\012\uff7f\001\002\000\004\012\u0131\001\002\000" +
    "\004\005\u0136\001\002\000\004\006\u0132\001\002\000\004" +
    "\012\uff5a\001\002\000\004\012\061\001\002\000\004\007" +
    "\u0135\001\002\000\006\005\uff59\011\uff59\001\002\000\004" +
    "\076\u0137\001\002\000\004\007\u0138\001\002\000\006\005" +
    "\uff7e\011\uff7e\001\002\000\004\007\uff84\001\002\000\006" +
    "\005\uff88\011\uff88\001\002\000\022\012\100\032\u0112\050" +
    "\075\051\102\052\073\053\076\054\077\055\074\001\002" +
    "\000\004\011\uff8d\001\002\000\006\005\u0148\011\uff52\001" +
    "\002\000\004\006\u0142\001\002\000\004\011\u0141\001\002" +
    "\000\004\005\uff55\001\002\000\004\005\uff54\001\002\000" +
    "\004\075\uff51\001\002\000\004\075\u0144\001\002\000\004" +
    "\005\u0145\001\002\000\004\075\u0146\001\002\000\004\007" +
    "\u0147\001\002\000\006\005\uff50\011\uff50\001\002\000\004" +
    "\033\u013e\001\002\000\004\011\uff53\001\002\000\004\006" +
    "\u014b\001\002\000\004\012\u014c\001\002\000\004\007\u014d" +
    "\001\002\000\004\004\u014e\001\002\000\050\002\uffe4\014" +
    "\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4\022\uffe4" +
    "\023\uffe4\024\uffe4\025\uffe4\031\uffe4\034\uffe4\042\uffe4\043" +
    "\uffe4\044\uffe4\046\uffe4\073\uffe4\074\uffe4\001\002\000\004" +
    "\002\ufffe\001\002\000\004\006\u0151\001\002\000\020\012" +
    "\100\050\075\051\102\052\073\053\076\054\077\055\074" +
    "\001\002\000\004\005\u0153\001\002\000\004\010\uffc1\001" +
    "\002\000\004\010\140\001\002\000\004\005\u0156\001\002" +
    "\000\004\010\uffc0\001\002\000\004\010\144\001\002\000" +
    "\004\007\u0159\001\002\000\004\004\uffbf\001\002\000\004" +
    "\004\u015b\001\002\000\050\002\uffbe\014\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\031\uffbe\034\uffbe\042\uffbe\043\uffbe\044\uffbe\046" +
    "\uffbe\073\uffbe\074\uffbe\001\002\000\004\010\uffdd\001\002" +
    "\000\004\010\u015e\001\002\000\004\012\u0131\001\002\000" +
    "\006\005\u0164\011\uff5b\001\002\000\004\011\u0161\001\002" +
    "\000\004\007\u0162\001\002\000\004\004\u0163\001\002\000" +
    "\050\002\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\031\uffdc\034" +
    "\uffdc\042\uffdc\043\uffdc\044\uffdc\046\uffdc\073\uffdc\074\uffdc" +
    "\001\002\000\004\012\u0131\001\002\000\004\011\uff5c\001" +
    "\002\000\004\006\u0167\001\002\000\004\012\u0168\001\002" +
    "\000\004\007\u0169\001\002\000\004\004\u016a\001\002\000" +
    "\050\002\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\031\uffe6\034" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\073\uffe6\074\uffe6" +
    "\001\002\000\006\042\023\043\027\001\002\000\050\002" +
    "\uff4e\014\uff4e\015\uff4e\016\uff4e\017\uff4e\020\uff4e\021\uff4e" +
    "\022\uff4e\023\uff4e\024\uff4e\025\uff4e\031\uff4e\034\uff4e\042" +
    "\uff4e\043\uff4e\044\uff4e\046\uff4e\073\uff4e\074\uff4e\001\002" +
    "\000\004\012\u016e\001\002\000\004\005\u016f\001\002\000" +
    "\004\010\uffe1\001\002\000\004\010\u0171\001\002\000\004" +
    "\012\061\001\002\000\004\011\u0173\001\002\000\004\007" +
    "\u0174\001\002\000\004\004\u0175\001\002\000\050\002\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022" +
    "\uffe0\023\uffe0\024\uffe0\025\uffe0\031\uffe0\034\uffe0\042\uffe0" +
    "\043\uffe0\044\uffe0\046\uffe0\073\uffe0\074\uffe0\001\002\000" +
    "\004\075\u0177\001\002\000\004\005\uff94\001\002\000\004" +
    "\005\u0179\001\002\000\004\045\u017a\001\002\000\004\006" +
    "\u017b\001\002\000\004\010\u017c\001\002\000\022\012\100" +
    "\032\u0112\050\075\051\102\052\073\053\076\054\077\055" +
    "\074\001\002\000\004\011\u017e\001\002\000\004\005\uff93" +
    "\001\002\000\004\005\u0180\001\002\000\004\010\u0109\001" +
    "\002\000\004\005\uff92\001\002\000\004\005\u0183\001\002" +
    "\000\004\010\170\001\002\000\004\007\u0185\001\002\000" +
    "\004\005\uff91\001\002\000\004\005\u0187\001\002\000\004" +
    "\010\u0188\001\002\000\004\030\u011b\001\002\000\006\005" +
    "\u018e\011\uff9f\001\002\000\004\011\u018b\001\002\000\004" +
    "\007\u018c\001\002\000\004\004\u018d\001\002\000\050\002" +
    "\uff90\014\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021\uff90" +
    "\022\uff90\023\uff90\024\uff90\025\uff90\031\uff90\034\uff90\042" +
    "\uff90\043\uff90\044\uff90\046\uff90\073\uff90\074\uff90\001\002" +
    "\000\004\030\u011b\001\002\000\004\011\uffa0\001\002\000" +
    "\004\002\001\001\002\000\004\010\u0192\001\002\000\010" +
    "\011\u0194\012\uffd2\047\uffd2\001\002\000\006\012\u0131\047" +
    "\u019a\001\002\000\004\007\u0195\001\002\000\004\004\u0196" +
    "\001\002\000\050\002\uffd3\014\uffd3\015\uffd3\016\uffd3\017" +
    "\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\031\uffd3\034\uffd3\042\uffd3\043\uffd3\044\uffd3\046\uffd3\073" +
    "\uffd3\074\uffd3\001\002\000\004\011\u01a5\001\002\000\006" +
    "\005\u01a3\011\uff60\001\002\000\006\005\u01a1\011\uff5f\001" +
    "\002\000\004\006\u019b\001\002\000\004\012\uff5e\001\002" +
    "\000\004\012\u0131\001\002\000\004\005\u019e\001\002\000" +
    "\004\076\u019f\001\002\000\004\007\u01a0\001\002\000\006" +
    "\005\uff5d\011\uff5d\001\002\000\006\012\u0131\047\u019a\001" +
    "\002\000\004\011\uff61\001\002\000\006\012\u0131\047\u019a" +
    "\001\002\000\004\011\uff62\001\002\000\004\007\u01a6\001" +
    "\002\000\004\004\u01a7\001\002\000\050\002\uffd1\014\uffd1" +
    "\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\031\uffd1\034\uffd1\042\uffd1\043\uffd1" +
    "\044\uffd1\046\uffd1\073\uffd1\074\uffd1\001\002\000\004\010" +
    "\u01a9\001\002\000\022\011\uffd0\012\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\001\002\000\004\011" +
    "\u01b5\001\002\000\020\012\100\050\075\051\102\052\073" +
    "\053\076\054\077\055\074\001\002\000\004\011\u01ad\001" +
    "\002\000\004\005\u01ae\001\002\000\004\010\u01af\001\002" +
    "\000\020\012\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054" +
    "\uffcd\055\uffcd\001\002\000\020\012\100\050\075\051\102" +
    "\052\073\053\076\054\077\055\074\001\002\000\004\011" +
    "\u01b2\001\002\000\004\007\u01b3\001\002\000\004\004\u01b4" +
    "\001\002\000\050\002\uffcc\014\uffcc\015\uffcc\016\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc" +
    "\031\uffcc\034\uffcc\042\uffcc\043\uffcc\044\uffcc\046\uffcc\073" +
    "\uffcc\074\uffcc\001\002\000\004\005\u01b6\001\002\000\004" +
    "\010\u01b7\001\002\000\004\011\u01b8\001\002\000\004\007" +
    "\u01b9\001\002\000\004\004\u01ba\001\002\000\050\002\uffcf" +
    "\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\025\uffcf\031\uffcf\034\uffcf\042\uffcf" +
    "\043\uffcf\044\uffcf\046\uffcf\073\uffcf\074\uffcf\001\002\000" +
    "\004\010\u01bc\001\002\000\022\011\u01be\012\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\001\002\000" +
    "\020\012\100\050\075\051\102\052\073\053\076\054\077" +
    "\055\074\001\002\000\004\007\u01bf\001\002\000\004\004" +
    "\u01c0\001\002\000\050\002\uffcb\014\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025" +
    "\uffcb\031\uffcb\034\uffcb\042\uffcb\043\uffcb\044\uffcb\046\uffcb" +
    "\073\uffcb\074\uffcb\001\002\000\004\011\u01c2\001\002\000" +
    "\004\007\u01c3\001\002\000\004\004\u01c4\001\002\000\050" +
    "\002\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021" +
    "\uffc9\022\uffc9\023\uffc9\024\uffc9\025\uffc9\031\uffc9\034\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\046\uffc9\073\uffc9\074\uffc9\001" +
    "\002\000\004\002\000\001\002\000\004\006\u01c7\001\002" +
    "\000\020\012\100\050\075\051\102\052\073\053\076\054" +
    "\077\055\074\001\002\000\004\005\u01c9\001\002\000\004" +
    "\010\uffbc\001\002\000\004\010\140\001\002\000\004\005" +
    "\u01cc\001\002\000\004\010\uffbb\001\002\000\004\010\144" +
    "\001\002\000\004\005\u01cf\001\002\000\004\010\uffba\001" +
    "\002\000\004\010\144\001\002\000\004\007\u01d2\001\002" +
    "\000\004\004\uffb9\001\002\000\004\004\u01d4\001\002\000" +
    "\050\002\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\031\uffb8\034" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\046\uffb8\073\uffb8\074\uffb8" +
    "\001\002\000\006\012\u01d7\075\u01d6\001\002\000\004\005" +
    "\uff97\001\002\000\004\005\uff9a\001\002\000\004\005\u01d9" +
    "\001\002\000\004\010\u01da\001\002\000\004\026\216\001" +
    "\002\000\004\011\u01dc\001\002\000\004\005\uff99\001\002" +
    "\000\004\005\u01de\001\002\000\004\010\u01df\001\002\000" +
    "\004\030\u011b\001\002\000\004\011\u01e1\001\002\000\004" +
    "\007\u01e2\001\002\000\004\004\u01e3\001\002\000\050\002" +
    "\uff98\014\uff98\015\uff98\016\uff98\017\uff98\020\uff98\021\uff98" +
    "\022\uff98\023\uff98\024\uff98\025\uff98\031\uff98\034\uff98\042" +
    "\uff98\043\uff98\044\uff98\046\uff98\073\uff98\074\uff98\001\002" +
    "\000\004\005\u01e5\001\002\000\004\010\u01e6\001\002\000" +
    "\004\026\216\001\002\000\004\011\u01e8\001\002\000\004" +
    "\005\uff96\001\002\000\004\005\u01ea\001\002\000\004\010" +
    "\u01eb\001\002\000\004\030\u011b\001\002\000\004\011\u01ed" +
    "\001\002\000\004\007\u01ee\001\002\000\004\004\u01ef\001" +
    "\002\000\050\002\uff95\014\uff95\015\uff95\016\uff95\017\uff95" +
    "\020\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\031" +
    "\uff95\034\uff95\042\uff95\043\uff95\044\uff95\046\uff95\073\uff95" +
    "\074\uff95\001\002\000\004\010\uffdf\001\002\000\004\010" +
    "\u01f2\001\002\000\004\012\u0131\001\002\000\004\011\u01f4" +
    "\001\002\000\004\007\u01f5\001\002\000\004\004\u01f6\001" +
    "\002\000\050\002\uffde\014\uffde\015\uffde\016\uffde\017\uffde" +
    "\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\031" +
    "\uffde\034\uffde\042\uffde\043\uffde\044\uffde\046\uffde\073\uffde" +
    "\074\uffde\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01f4\000\054\003\016\004\031\005\044\006\047\007" +
    "\041\011\025\012\036\013\014\016\021\017\012\027\003" +
    "\030\005\031\035\032\046\050\037\054\042\055\010\057" +
    "\030\060\040\076\050\077\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\127\u01c5\001\001\000\050\004\031\005\044\006\047" +
    "\007\041\011\025\012\036\013\014\016\021\017\012\027" +
    "\003\030\005\031\035\032\046\050\037\054\042\057\u01c4" +
    "\060\040\076\050\077\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\203\u016a\001\001\000\004" +
    "\101\u0165\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\123\u014f\001\001\000\002\001\001" +
    "\000\050\004\031\005\044\006\047\007\041\011\025\012" +
    "\036\013\014\016\021\017\012\027\003\030\005\031\035" +
    "\032\046\050\037\054\042\057\u014e\060\040\076\050\077" +
    "\052\001\001\000\004\102\u0149\001\001\000\004\134\372" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\116\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\103\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\061\001\001\000\004\201" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\163" +
    "\103\001\001\000\004\021\104\001\001\000\004\164\105" +
    "\001\001\000\002\001\001\000\012\021\115\070\120\071" +
    "\117\075\116\001\001\000\006\021\115\075\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\115\070\132\071\117\075\116" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\115" +
    "\071\131\075\116\001\001\000\010\021\115\071\124\075" +
    "\116\001\001\000\002\001\001\000\006\021\115\075\130" +
    "\001\001\000\006\021\115\075\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\136\001" +
    "\001\000\004\040\140\001\001\000\006\036\214\037\213" +
    "\001\001\000\002\001\001\000\004\120\142\001\001\000" +
    "\004\044\144\001\001\000\006\041\154\043\153\001\001" +
    "\000\002\001\001\000\004\121\146\001\001\000\004\044" +
    "\147\001\001\000\002\001\001\000\004\122\151\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\143\166\001\001\000\004\022\170\001\001\000\006\020" +
    "\203\021\202\001\001\000\004\042\173\001\001\000\004" +
    "\144\177\001\001\000\004\145\174\001\001\000\002\001" +
    "\001\000\004\022\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\020\207\021\202\001" +
    "\001\000\002\001\001\000\006\041\154\043\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\222\001\001\000" +
    "\002\001\001\000\004\142\224\001\001\000\004\022\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\214\037\230\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\161\233\001\001\000\004\023\235\001\001\000" +
    "\004\176\243\001\001\000\002\001\001\000\004\175\237" +
    "\001\001\000\002\001\001\000\004\023\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\245\001\001\000\002\001\001\000\004\165\247\001" +
    "\001\000\004\021\250\001\001\000\004\166\251\001\001" +
    "\000\002\001\001\000\012\021\115\070\253\071\117\075" +
    "\116\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\173\256\001\001\000\004\021\257\001\001\000\004\174" +
    "\260\001\001\000\002\001\001\000\012\021\115\070\262" +
    "\071\117\075\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\162\265\001\001\000\022\021\115\067\273" +
    "\070\266\071\117\072\272\073\274\074\271\075\116\001" +
    "\001\000\002\001\001\000\022\021\115\067\273\070\303" +
    "\071\117\072\304\073\274\074\271\075\116\001\001\000" +
    "\014\021\115\067\302\070\266\071\117\075\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\021\115\067\273\070\266\071\117" +
    "\074\276\075\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\115\067\273\070\266\071\117\073\301" +
    "\074\271\075\116\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\021\115\070\317\071\117\075\116\001\001\000" +
    "\012\021\115\070\316\071\117\075\116\001\001\000\012" +
    "\021\115\070\315\071\117\075\116\001\001\000\012\021" +
    "\115\070\314\071\117\075\116\001\001\000\012\021\115" +
    "\070\313\071\117\075\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\167\321\001\001\000\004\021\322\001" +
    "\001\000\004\170\323\001\001\000\002\001\001\000\012" +
    "\021\115\070\325\071\117\075\116\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\171\330\001\001\000\004" +
    "\021\331\001\001\000\004\172\332\001\001\000\002\001" +
    "\001\000\012\021\115\070\334\071\117\075\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\056\343\001\001\000\002\001\001" +
    "\000\004\100\344\001\001\000\002\001\001\000\004\056" +
    "\345\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\353\001\001\000\004\026\354\001\001\000\002\001\001" +
    "\000\006\024\361\025\357\001\001\000\004\110\365\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\024\361\025\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\366\021\202\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\374\001\001\000\002" +
    "\001\001\000\004\135\376\001\001\000\004\040\377\001" +
    "\001\000\002\001\001\000\004\136\u0101\001\001\000\004" +
    "\044\u0102\001\001\000\002\001\001\000\004\137\u0104\001" +
    "\001\000\004\022\u0105\001\001\000\002\001\001\000\004" +
    "\140\u0107\001\001\000\004\033\u0109\001\001\000\006\034" +
    "\u013e\035\u013c\001\001\000\002\001\001\000\004\141\u010b" +
    "\001\001\000\004\061\u010d\001\001\000\012\021\u0113\051" +
    "\u0114\052\u0110\053\u0112\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\157" +
    "\u0117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0119\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\u011e\001\001\000\002\001\001\000\004\146\u0120\001\001" +
    "\000\004\066\u0122\001\001\000\010\021\u0126\064\u0124\065" +
    "\u0128\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\021\u0126\064\u012a\065\u0128" +
    "\001\001\000\002\001\001\000\010\021\u0126\064\u012c\065" +
    "\u0128\001\001\000\002\001\001\000\004\160\u012e\001\001" +
    "\000\004\014\u012f\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\200\u0132\001\001\000\004\010\u0133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\021\u0113\051\u013b\052\u0110\053\u0112\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\202\u0142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\034\u0148\035\u013c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u0151\001\001\000\002\001\001\000\004\124" +
    "\u0153\001\001\000\004\040\u0154\001\001\000\002\001\001" +
    "\000\004\125\u0156\001\001\000\004\044\u0157\001\001\000" +
    "\002\001\001\000\004\126\u0159\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\106\u015c\001\001\000\002\001" +
    "\001\000\006\014\u015e\015\u015f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\014\u015e\015\u0164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\060\u016b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\104\u016f\001\001\000\002\001\001\000\004" +
    "\010\u0171\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\153\u0177\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\021\u0113\051\u017c" +
    "\052\u0110\053\u0112\001\001\000\002\001\001\000\004\154" +
    "\u017e\001\001\000\002\001\001\000\004\033\u0180\001\001" +
    "\000\004\155\u0181\001\001\000\002\001\001\000\004\022" +
    "\u0183\001\001\000\002\001\001\000\004\156\u0185\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\u0188\047" +
    "\u0189\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\046" +
    "\u0188\047\u018e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\111\u0192\001\001\000\010\014" +
    "\u0197\062\u0196\063\u0198\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\177\u019b" +
    "\001\001\000\004\014\u019c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\u0197\062\u01a1\063\u0198\001\001\000\002\001\001\000" +
    "\010\014\u0197\062\u01a3\063\u0198\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\112\u01a9\113\u01aa\001\001\000\002" +
    "\001\001\000\006\020\u01ab\021\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\114\u01af" +
    "\001\001\000\006\020\u01b0\021\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\115\u01bc\001\001\000\006\020\u01c0\021" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\u01c7\001\001\000\002\001\001\000\004\130" +
    "\u01c9\001\001\000\004\040\u01ca\001\001\000\002\001\001" +
    "\000\004\131\u01cc\001\001\000\004\044\u01cd\001\001\000" +
    "\002\001\001\000\004\132\u01cf\001\001\000\004\044\u01d0" +
    "\001\001\000\002\001\001\000\004\133\u01d2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\u01e3\001\001\000\004\147\u01d7\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\036\214\037\u01da\001\001" +
    "\000\002\001\001\000\004\150\u01dc\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\u0188\047\u01df\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\214\037\u01e6\001\001\000\002\001\001\000\004\152" +
    "\u01e8\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\046\u0188\047\u01eb\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\105\u01f0" +
    "\001\001\000\002\001\001\000\006\014\u015e\015\u01f2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	CUP$parser$actions.mssgs = new ArrayList();
	CUP$parser$actions.position = NONE;
	CUP$parser$actions.lastpos = NONE;

    }


	// NOTE MUST MATCH ACTION DECLARATIONS
        static final int NONE = -1;
	static final int DNAMEEL = 0;
	static final int SORTEL = 1;
	static final int OBJEL = 2;
	static final int PREDICATES = 3;
	static final int CLASSDEF = 4;
	static final int ATOMINVAR = 5;
	static final int INCONCONST = 6;
	static final int OP = 7;
	static final int SEPREV = 8;
	static final int SCNEC = 9;
	static final int SCCOND = 10;
	static final int SCPOST = 11;
	static final int TASK = 12;
	static final int GOAL = 13;
	static final int SINIT = 14;
	static final int METHODEL = 15;
	static final int SEPRE = 16;
	static final int SCINDEX = 17;
	static final int STATIC = 18;
	static final int TEMPS = 19;
	static final int DECOMPS = 20;
	static final int ACHIEVECL = 21;
	static final int IINVARLEFT = 22;
	static final int IINVARRIGHT = 23;	
	static final int HTNTASK = 24;
	static final int HTNGOAL = 25;
	static final int ACHIEVEGL = 26;
	static final int HTNTEMP = 27;
	static final int HTNSTATICS = 28;
	static final int HTNINIT = 29;
	static final int OPTIONEL = 30;
	static final int FUNCTORS = 31;
	static final int VALUE = 32;
	static final int TEST = 33;
	static final int ASSIGN = 34;
	static final int INCREASE = 35;
	static final int DECREASE = 36;
	static final int SCALEUP = 37;
	static final int SCALEDOWN = 38;
	static final int PLUS = 39;
	static final int MINUS = 40;
	static final int MULT = 41;
	static final int DIV = 42;
	static final int EQUALS = 43;
	static final int LESS = 44;
	static final int GREATER = 45;
	static final int LESSEQ = 46;
	static final int GREATEREQ = 47;
	static final int AND = 48;
	static final int OR = 49;
	static final int NOT = 50;
	static final int UPDATE = 51;
	static final int TIME = 52;
	static final int PROCESS = 53;
	static final int EVENT = 54;

	static Symbol res;
	static List wmssgs;
	static oclDomain pTree;

	/*
	public static void main(String args[]) throws Exception {
	    try {
		res = new parser(new Yylex(System.in)).parse();
                pTree = (oclDomain)(res.value);
		pTree.oclPrintComponent
		    (new PrintWriter(System.out,true)
			,0,false);
		System.out.println("%% End of " + pTree.getName());
	    }catch(Exception e){
		System.out.println("Cannot recover Goodbye.");
		wmssgs = getWarnMssgs();
		ListIterator li = wmssgs.listIterator();
		while( li.hasNext()) {
			System.out.println((String)li.next());
		}
	    }
	}
	*/

	public void syntax_error(Symbol cur_symbol) {
		CUP$parser$actions.mssgs.add(
			new String("OCL Syntax error :: "));
	}
	

	public void report_error(String message,Object info) {
	    String mOut = new String(message +
	    		"Trying to complete " + 
			decodePosition(CUP$parser$actions.position) +
			" specification\n");
	    if (info instanceof Symbol)
		if (((Symbol)info).left != -1)
		    mOut = mOut + "At symbol " 
				       + ((Symbol)info).value
				       + " line " 
                                       + ((Symbol)info).right 
				       + " character position " 
				       + ((Symbol)info).left 
				       + " of input.";
		else mOut = "";
	    else if (info instanceof Integer)
		mOut = new String(message + " On line " + info);
	    else
		mOut = "";
	    CUP$parser$actions.mssgs.add(mOut);
	}

	public static List getWarnMssgs() {
		return CUP$parser$actions.getWarnMssgs();
	}

	public String decodePosition(int position) {
		String m;
		switch (position) {
			case NONE:
				m = "Any OCL component";break;
			case DNAMEEL:
				m = "Domain name";break;
			case SORTEL:
				m = "Sort";break;
			case OBJEL:
				m = "Object";break;
			case PREDICATES:
				m = "Predicate list";break;
			case CLASSDEF:
				m = "Object Class";break;
			case ATOMINVAR:
				m = "Atomic invarients";break;
			case INCONCONST:
				m = "Inconsistent constraints";break;
			case OP:
				m = "Operator";break;
			case SEPREV:
				m = "Operator Prevail section";break;
			case SCNEC:
				m = "Operator Necessary section";break;
			case SCCOND:
				m = "Operator conditional section";break;
			case SCPOST:
				m = "Operator Transition post condition";break;
			case TASK:
				m = "Domain task";break;
			case GOAL:
				m = "Object Task Goal";break;
			case SINIT:
				m = "Object Task Initial state";break;
			case METHODEL:
				m = "Method";break;
			case SEPRE:
                                m = "Method Pre-Condition section";break;
			case SCINDEX:
                                m = "Method Index Transition section";break;
			case STATIC:
				m = "Method static requirements section";break;
			case TEMPS:
				m = "Method temporal requirements";break;
			case DECOMPS:
				m = "Method Decompositions";break;
			case ACHIEVECL:
				m = "Method Decomposition Achieve Clause";
			case IINVARLEFT:
			case IINVARRIGHT:
				m = "Implied invariant";break;
			case HTNTASK:
				m = "HTN Domain task";break;
			case HTNGOAL:
				m = "HTN Domain goal task";break;					case ACHIEVEGL:
				m = "HTN TASK Decomposition Achieve Clause";break;
			case HTNTEMP:
				m = "HTN TASK Temporal constraints";break;
			case HTNSTATICS:
				m = "HTN TASK Statics constraints";break;
			case HTNINIT:
				m = "HTN TASK Initial state";break;
			case OPTIONEL:
				m = "GIPO Domain option";break;
			case FUNCTORS:
				m = "GIPO Domain functors";break;
			case VALUE:
				m = "GIPO Domain Invariant functor";break;
			case PROCESS:
				m = "GIPO Domain Process";break;
			case EVENT:
				m = "GIPO Domain Event";break;
			default:
				m = "Unknown";break;
		}
		return m;
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	// NOTE MUST MATCH PARSER DECLARATIONS
        static final int NONE = -1;
	static final int DNAMEEL = 0;
	static final int SORTEL = 1;
	static final int OBJEL = 2;
	static final int PREDICATES = 3;
	static final int CLASSDEF = 4;
	static final int ATOMINVAR = 5;
	static final int INCONCONST = 6;
	static final int OP = 7;
	static final int SEPREV = 8;
	static final int SCNEC = 9;
	static final int SCCOND = 10;
	static final int SCPOST = 11;
	static final int TASK = 12;
	static final int GOAL = 13;
	static final int SINIT = 14;
	static final int METHODEL = 15;
	static final int SEPRE = 16;
	static final int SCINDEX = 17;
	static final int STATIC = 18;	
	static final int TEMPS = 19;
	static final int DECOMPS = 20;
	static final int ACHIEVECL = 21;
	static final int IINVARLEFT = 22;
	static final int IINVARRIGHT = 23;
	static final int HTNTASK = 24;
	static final int HTNGOAL = 25;
	static final int ACHIEVEGL = 26;
	static final int HTNTEMP = 27;
	static final int HTNSTATICS = 28;
	static final int HTNINIT = 29;
	static final int OPTIONEL = 30;
	static final int FUNCTORS = 31;
	static final int VALUE = 32;
	static final int TEST = 33;
	static final int ASSIGN = 34;
	static final int INCREASE = 35;
	static final int DECREASE = 36;
	static final int SCALEUP = 37;
	static final int SCALEDOWN = 38;
	static final int PLUS = 39;
	static final int MINUS = 40;
	static final int MULT = 41;
	static final int DIV = 42;
	static final int EQUALS = 43;
	static final int LESS = 44;
	static final int GREATER = 45;
	static final int LESSEQ = 46;
	static final int GREATEREQ = 47;
	static final int AND = 48;
	static final int OR = 49;
	static final int NOT = 50;
	static final int UPDATE = 51;
	static final int TIME = 52;
	static final int PROCESS = 53;
	static final int EVENT = 54;



	static final String SERROR[] = {
	    "Only one domain name allowed per spec",
	    "Only one predicate List allowed per spec",
	    "Only one Atomic Invarients section allowed per spec"
	};

	static final String WARN [] = {
	    "Sort specifications not contigous in file",
	    "Object specifications not contigous in file",
	    "Object Class Definitions not contigous in file",
	    "Inconsistent Constraint definitions not contigous in file",
            "Operator definitions not contigous in file",
            "Task definitions not contigous in file",
            "Method definitions not contigous in file"
	};

	oclDomain curDomain = new oclDomain(false);
	oclSort curSort;
	oclObject curObj;
	oclPredicate curPred;
	oclSSClassDef curCDef;
	oclStateList curState;
	oclInconsistentConst curIConst;
	oclOperator curOP;
	oclSE curSE;
	oclSEPlus curSEPlus;
	oclExpression topExp;
	oclSC curSC;
	oclSCPlus curSCPlus;
	oclTask curTask;
	oclHTNTask curHTNTask;
	oclSS curSS;
	oclMethod curMethod;
	oclImpliedInvar curIInvar;
        // Patterns removed
        String strLifeHistory = "none";

	public static int	position = NONE;
	public static int       lastpos;

	public static List mssgs = new ArrayList();

	private static void displayWarning(int inx) {
	    mssgs.add("WARNING " + WARN[inx] + ".");
	}

	public static List getWarnMssgs () {
		return mssgs;
	}

	public static List docmText = new ArrayList();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // bexpr ::= fexpr GREATEREQ fexpr 
            {
              oclExpression RESULT = null;
		int lhs5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.GREATEREQ);
			expr.addLHS(lhs5);
			expr.addRHS(rhs5);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(53/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // bexpr ::= fexpr LESSEQ fexpr 
            {
              oclExpression RESULT = null;
		int lhs4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.LESSEQ);
			expr.addLHS(lhs4);
			expr.addRHS(rhs4);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(53/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // bexpr ::= fexpr GREATER fexpr 
            {
              oclExpression RESULT = null;
		int lhs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.GREATER);
			expr.addLHS(lhs3);
			expr.addRHS(rhs3);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(53/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // bexpr ::= fexpr LESS fexpr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.LESS);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(53/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // bexpr ::= fexpr EQUALS fexpr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.EQUAL);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(53/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // neg_expr ::= RBRA comp_expr RKET 
            {
              oclExpression RESULT = null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = exp2;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(58/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // neg_expr ::= NOT bexpr 
            {
              oclExpression RESULT = null;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.NOT);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(58/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // neg_expr ::= bexpr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(58/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // and_expr ::= and_expr AND neg_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.AND);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(57/*and_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // and_expr ::= neg_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(57/*and_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // comp_expr ::= comp_expr OR and_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.OR);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(56/*comp_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // comp_expr ::= and_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(56/*comp_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // unary_expr ::= clause 
            {
              oclExpression RESULT = null;
		
			oclExpression expr = new oclExpression(oclExpression.FLUENT_EXPR);
			expr.addFluent(curPred);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // unary_expr ::= TIME 
            {
              oclExpression RESULT = null;
		
			oclExpression expr = new oclExpression(oclExpression.TIME_EXPR);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // unary_expr ::= VAR 
            {
              oclExpression RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Utility.debugPrintln("Found Variable expression" + v1.toString());
			oclExpression expr = new oclExpression(oclExpression.VAR_EXPR);
			expr.addVariable(v1.toString());
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // unary_expr ::= NUMBER 
            {
              oclExpression RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.DOUBLE_EXPR);
			expr.addDouble(new Double(n1.toString()));
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // unary_expr ::= DOUBLE 
            {
              oclExpression RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Utility.debugPrintln("Found double expression" + d1.toString());
			oclExpression expr = new oclExpression(oclExpression.DOUBLE_EXPR);
			expr.addDouble(new Double(d1.toString()));
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // unary_expr ::= RBRA fexpr RKET 
            {
              oclExpression RESULT = null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			oclExpression expr = new oclExpression(oclExpression.UNARY_EXPR);
			expr.addRHS(exp2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // unary_expr ::= MINUS unary_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.UMINUS);
			expr.addRHS(exp1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(59/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // mult_expr ::= mult_expr DIV unary_expr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.DIV);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(55/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // mult_expr ::= mult_expr MULT unary_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.TIMES);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(55/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // mult_expr ::= unary_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(55/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // fexpr ::= fexpr MINUS mult_expr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.MINUS);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(54/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // fexpr ::= fexpr PLUS mult_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.PLUS);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(54/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // fexpr ::= mult_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(54/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // docm ::= DESCEND 
            {
              Object RESULT = null;
		
			Utility.debugPrintln("patterns","End of Documentation");
                  
              CUP$parser$result = new java_cup.runtime.Symbol(46/*docm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // docm ::= DESCDET NT$67 docm 
            {
              Object RESULT = null;
              // propagate RESULT from NT$67
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlineleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlineright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(46/*docm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // NT$67 ::= 
            {
              Object RESULT = null;
		int dlineleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dlineright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object dline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

	          String desc = dline.toString();
		  if (desc.trim().charAt(0) == '*') {
	                String content = desc.substring(desc.indexOf('*') + 1);
			docmText.add(content.trim());
                  } else {
		        docmText.add(desc.trim());
                  }
                
              CUP$parser$result = new java_cup.runtime.Symbol(129/*NT$67*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // temp ::= BEFORE RBRA NT$66 NUMBER COMMA NUMBER RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$66
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer n2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		   curPred.addIntArgument(n1.toString());
		   curPred.addIntArgument(n2.toString());
		
              CUP$parser$result = new java_cup.runtime.Symbol(27/*temp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // NT$66 ::= 
            {
              Object RESULT = null;
 
		  if (position == HTNTEMP)
			curPred = curHTNTask.addTempClause(new String("before"));
		  else
		        curPred = curMethod.addTempClause(new String("before"));
		
              CUP$parser$result = new java_cup.runtime.Symbol(128/*NT$66*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // tempList ::= temp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*tempList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // tempList ::= temp COMMA tempList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*tempList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // eTempList ::= SBRA tempList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*eTempList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // eTempList ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*eTempList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // nameList ::= NAME 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
		   switch (position) {
	     	      case  SORTEL:
			curSort.addSubType(n2.toString());
                        break;
		      case OBJEL:
			curObj.addObjID(n2.toString());
                        break;
		      case PREDICATES:
		      case ATOMINVAR:
		      case VALUE:
		      case ASSIGN:
		      case FUNCTORS:
			curPred.addConstArgument(n2.toString());
			break;
	            }
	         
              CUP$parser$result = new java_cup.runtime.Symbol(6/*nameList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // nameList ::= NAME NT$65 COMMA nameList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$65
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*nameList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // NT$65 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
                   switch (position) {
	     	      case  SORTEL:
			curSort.addSubType(n1.toString());
                        break;
		      case OBJEL:
			curObj.addObjID(n1.toString());
                        break;
		      case PREDICATES:
		      case ATOMINVAR:
		      case VALUE:
		      case ASSIGN:
		      case FUNCTORS:
			curPred.addConstArgument(n1.toString());
			break;
		    }
                  
              CUP$parser$result = new java_cup.runtime.Symbol(127/*NT$65*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // pred ::= NAME RBRA NT$64 nameList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$64
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int predNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int predNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object predName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*pred*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // NT$64 ::= 
            {
              Object RESULT = null;
		int predNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int predNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object predName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 switch (position) {
		      case PREDICATES:
			curPred = curDomain.addPredicate(predName.toString());
			break;
		      case ATOMINVAR:
			curPred = curDomain.addAtomicInvar(predName.toString());
			break;
			  case VALUE:
			curPred = curDomain.addAtomicFunInvar(predName.toString());
			break;
		      case ASSIGN:
			curPred = new oclPredicate(predName.toString());
			break;
		      case FUNCTORS:
			curPred = curDomain.addFunctor(predName.toString());
			break;
		   }
		
              CUP$parser$result = new java_cup.runtime.Symbol(126/*NT$64*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // predList ::= pred 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*predList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // predList ::= pred COMMA predList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*predList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // valueFun ::= VALUE RBRA NT$63 pred COMMA DOUBLE RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$63
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 curPred.setFluentValue(n1.doubleValue()); 
		   curPred.setFluent(true);
		   lastpos = position;
		   position = ATOMINVAR;
		
              CUP$parser$result = new java_cup.runtime.Symbol(49/*valueFun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // NT$63 ::= 
            {
              Object RESULT = null;
 lastpos = position; position = VALUE; 
              CUP$parser$result = new java_cup.runtime.Symbol(125/*NT$63*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // invarList ::= valueFun 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*invarList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // invarList ::= pred 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*invarList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // invarList ::= valueFun COMMA invarList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*invarList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // invarList ::= pred COMMA invarList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(48/*invarList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // argList ::= VAR 
            {
              Object RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 switch(position) {
		      case CLASSDEF:
	          case INCONCONST:
		      case OP:
              case SEPREV:
		      case SEPRE:
              case SCNEC:
		      case SCCOND:
		      case SCINDEX:
              case SCPOST:
		      case SINIT:
		      case GOAL:
		      case METHODEL:
              case STATIC:
              case DECOMPS:
              case ACHIEVECL:
		      case ACHIEVEGL:
              case IINVARLEFT:
		      case IINVARRIGHT:
              case HTNGOAL:
              case HTNSTATICS:
              case HTNINIT:
              case TEST:
		      case UPDATE:
			  curPred.addVarArgument(v2.toString());
                          break;
                   }
                 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // argList ::= NAME 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		switch(position) {
		      case CLASSDEF:
		      case INCONCONST:
		      case OP:
	              case SEPREV:
                      case SEPRE:
                      case SCNEC:
		      case SCCOND:
		      case SCINDEX:
                      case SCPOST:
		      case SINIT:
                      case GOAL:
		      case METHODEL:
                      case STATIC:
		      case DECOMPS:
                      case ACHIEVECL:
                      case ACHIEVEGL:
                      case IINVARLEFT:
		      case IINVARRIGHT:
                      case HTNGOAL:
                      case HTNSTATICS:
                      case HTNINIT:
                      case ASSIGN:
              case TEST:
		      case UPDATE:
			  curPred.addConstArgument(n2.toString());
                          break;
                   } 
                
              CUP$parser$result = new java_cup.runtime.Symbol(17/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // argList ::= VAR NT$62 COMMA argList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$62
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // NT$62 ::= 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 switch(position) {
		      case CLASSDEF:
		      case INCONCONST:
		      case OP:
                      case SEPREV:
		      case SEPRE:
                      case SCNEC:
		      case SCCOND:
		      case SCINDEX:
                      case SCPOST:
		      case SINIT:
                      case GOAL:
		      case METHODEL:
		      case STATIC:
		      case DECOMPS:
		      case ACHIEVECL:
		      case ACHIEVEGL:
		      case IINVARLEFT:
		      case IINVARRIGHT:
                      case HTNGOAL:
                      case HTNSTATICS:
                      case HTNINIT:
                      case TEST:
		      case UPDATE:
			  curPred.addVarArgument(v1.toString());
                          break;
                   }
                
              CUP$parser$result = new java_cup.runtime.Symbol(124/*NT$62*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // argList ::= NAME NT$61 COMMA argList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$61
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // NT$61 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 switch(position) {
		      case CLASSDEF:
		      case INCONCONST:
		      case OP:
		      case SEPREV:
		      case SEPRE:
		      case SCNEC:
		      case SCCOND:
		      case SCINDEX:
		      case SCPOST:
		      case GOAL:
		      case SINIT:
		      case METHODEL:
		      case STATIC:
		      case DECOMPS:
		      case ACHIEVECL:
		      case ACHIEVEGL:
		      case IINVARLEFT:
		      case IINVARRIGHT:
		      case HTNGOAL:
		      case HTNSTATICS:
		      case HTNINIT:
		       case ASSIGN:
		      case TEST:
		      case UPDATE:
			  curPred.addConstArgument(n1.toString());
                          break;
                   }
                
              CUP$parser$result = new java_cup.runtime.Symbol(123/*NT$61*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // clause ::= SCALEDOWN RBRA NT$59 clause NT$60 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$59
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$60
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp6 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp6);
			curSCPlus.addUpdate(topExp);
			position = lastpos;
			lastpos = UPDATE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NT$60 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.SCALEDOWN);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(122/*NT$60*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NT$59 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(121/*NT$59*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // clause ::= SCALEUP RBRA NT$57 clause NT$58 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$57
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$58
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp5);
			curSCPlus.addUpdate(topExp);
			position = lastpos;
			lastpos = UPDATE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NT$58 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.SCALEUP);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(120/*NT$58*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // NT$57 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(119/*NT$57*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // clause ::= DECREASE RBRA NT$55 clause NT$56 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$55
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$56
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp4);
			curSCPlus.addUpdate(topExp);
			position = lastpos;
			lastpos = UPDATE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // NT$56 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.DECREASE);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(118/*NT$56*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // NT$55 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(117/*NT$55*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // clause ::= INCREASE RBRA NT$53 clause NT$54 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$53
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$54
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp3);
			curSCPlus.addUpdate(topExp);
			position = lastpos;
			lastpos = UPDATE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NT$54 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.INCREASE);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(116/*NT$54*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NT$53 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(115/*NT$53*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // clause ::= ASSIGN RBRA NT$51 clause NT$52 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$51
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$52
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp2);
			curSCPlus.addUpdate(topExp);
			position = lastpos;
			lastpos = UPDATE;
			Utility.debugPrintln("Done ASSIGN position = " + position);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NT$52 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.ASSIGN);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(114/*NT$52*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NT$51 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;
			Utility.debugPrintln("Started assign clause");	
		
              CUP$parser$result = new java_cup.runtime.Symbol(113/*NT$51*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // clause ::= TEST RBRA NT$50 comp_expr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$50
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			oclExpression topExp = new oclExpression(oclExpression.TEST);
			topExp.addRHS(exp1);
			if (lastpos == SCNEC) {
				curSCPlus.addCondition(topExp);
			} else {
				curSEPlus.addExpression(topExp);
			}
			position = lastpos;
			lastpos = TEST;
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // NT$50 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = TEST;
		        Utility.debugPrintln("StarteD TEST clause");	
		
              CUP$parser$result = new java_cup.runtime.Symbol(112/*NT$50*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // clause ::= NAME RBRA NT$49 argList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$49
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // NT$49 ::= 
            {
              Object RESULT = null;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 switch(position) {
		    case CLASSDEF:
			curPred = curState.addClause(funcName.toString());
			break;
		    case INCONCONST:
			curPred = curIConst.addClause(funcName.toString());
			break;
		    case OP:
		 	curPred = curOP.addName(funcName.toString());
			break;
		    case METHODEL:
		 	curPred = curMethod.addName(funcName.toString());
			break;
		    case SEPREV:
			if (curDomain.oclPlus) {
				curPred = curSEPlus.addClause(funcName.toString());
			} else {
				curPred = curSE.addClause(funcName.toString());	
			}
			break;
		    case SEPRE:
			curPred = curSE.addClause(funcName.toString());
			break;
		    case SCNEC:
		    if (curDomain.oclPlus) {
				curPred = curSCPlus.addPreClause(funcName.toString());
			} else {
				curPred = curSC.addPreClause(funcName.toString());
			}
			break;
		    case SCCOND:
		    if (curDomain.oclPlus) {
				curPred = curSCPlus.addPreClause(funcName.toString());
			} else {
				curPred = curSC.addPreClause(funcName.toString());
			}
			break;
		    case SCINDEX:
			curPred = curSC.addPreClause(funcName.toString());
			break;
		    case SCPOST:
		    if (curDomain.oclPlus) {
			    curPred = curSCPlus.addPostClause(funcName.toString());
			} else {
		            curPred = curSC.addPostClause(funcName.toString());
			}
			break;
		    case STATIC:
			curPred = curMethod.addStaticClause(
						funcName.toString());
			break;
		    case DECOMPS:
			curPred = curMethod.addDecompClause(
						funcName.toString());
			break;
		    case GOAL:
			curPred = curSE.addClause(funcName.toString());
			break;
		    case SINIT:
		    case ACHIEVECL:
		    case ACHIEVEGL:
		    case HTNINIT:
			curPred = curSS.addClause(funcName.toString());
			break;
		     case IINVARLEFT:
			curPred = curIInvar.addLeftClause(funcName.toString());
			break;
		     case IINVARRIGHT:
			curPred = curIInvar.addRightClause(
							funcName.toString());
			break;
		     case HTNGOAL:
			curPred = curHTNTask.addGoalClause(funcName.toString());
			break;
		     case HTNSTATICS:
			curPred = curHTNTask.addStaticClause(funcName.toString());
			break;
			case TEST:
		     case UPDATE:
			Utility.debugPrintln("UPdate fluent " + funcName.toString());
			curPred = new oclPredicate(funcName.toString());
			break;
	             }
                
              CUP$parser$result = new java_cup.runtime.Symbol(111/*NT$49*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // clauseList ::= clause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*clauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // clauseList ::= clause COMMA clauseList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*clauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // assign ::= VALUE RBRA NT$48 pred COMMA DOUBLE RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$48
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 curPred.setFluentValue(n1.doubleValue()); 
		   curPred.setFluent(true);
		   switch(lastpos) {
			case SINIT:
			    curSS.addPredicate(curPred);
		            position = SINIT;
			    break;
		    }
		
              CUP$parser$result = new java_cup.runtime.Symbol(51/*assign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // NT$48 ::= 
            {
              Object RESULT = null;
 lastpos = position; position = ASSIGN; 
              CUP$parser$result = new java_cup.runtime.Symbol(110/*NT$48*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignClauseList ::= assign 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*assignClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // assignClauseList ::= assign COMMA assignClauseList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*assignClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // assignClauseList ::= clause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*assignClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assignClauseList ::= clause COMMA assignClauseList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(50/*assignClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // eAssignList ::= SBRA assignClauseList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*eAssignList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // eAssignList ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(52/*eAssignList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // eClauseList ::= SBRA clauseList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*eClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // eClauseList ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*eClauseList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // achieveClause ::= ACHIEVE NT$47 RBRA ss RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$47
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastpos = position;
		   if (position == ACHIEVEGL)
		   	position = HTNGOAL;
		   else
		   	position = DECOMPS;
		
              CUP$parser$result = new java_cup.runtime.Symbol(41/*achieveClause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$47 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   if (position == HTNGOAL)
			position = ACHIEVEGL;
		   else
		    	position = ACHIEVECL;
		
              CUP$parser$result = new java_cup.runtime.Symbol(109/*NT$47*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // decomp ::= clause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*decomp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // decomp ::= achieveClause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*decomp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // decompList ::= decomp 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*decompList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // decompList ::= decomp COMMA decompList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*decompList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // decomposition ::= SBRA decompList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*decomposition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // decomposition ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*decomposition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // htntask ::= HTNTASK RBRA NUMBER NT$43 COMMA HTNGOAL RBRA SBRA decompList SKET NT$44 COMMA eTempList NT$45 COMMA eClauseList RKET NT$46 COMMA SBRA ssList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$43
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-20)).value;
              // propagate RESULT from NT$44
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
              // propagate RESULT from NT$45
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
              // propagate RESULT from NT$46
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		 lastpos = HTNTASK;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(42/*htntask*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$46 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
 lastpos = position;
                   position = HTNINIT;
		
              CUP$parser$result = new java_cup.runtime.Symbol(108/*NT$46*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NT$45 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
 lastpos = position;
                   position = HTNSTATICS;
		
              CUP$parser$result = new java_cup.runtime.Symbol(107/*NT$45*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // NT$44 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
 lastpos = position;
                   position = HTNTEMP;
		
              CUP$parser$result = new java_cup.runtime.Symbol(106/*NT$44*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$43 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if (! ((position == NONE && 
                           curDomain.htntasks.isEmpty())
				|| (lastpos == HTNTASK))) {
			displayWarning(5);
		   }
                   lastpos = position;
                   position = HTNTASK;
		   curHTNTask = curDomain.addHTNTask(n1.toString());
		   position = HTNGOAL;
		
              CUP$parser$result = new java_cup.runtime.Symbol(105/*NT$43*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // task ::= TASK RBRA NUMBER NT$41 COMMA SBRA seList SKET NT$42 COMMA SBRA ssList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$41
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
              // propagate RESULT from NT$42
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		 lastpos = TASK;
                   position = NONE;
                
              CUP$parser$result = new java_cup.runtime.Symbol(38/*task*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$42 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 lastpos = position;
                   position = SINIT;
		
              CUP$parser$result = new java_cup.runtime.Symbol(104/*NT$42*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$41 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if (! ((position == NONE && 
                           curDomain.tasks.isEmpty())
				|| (lastpos == TASK))) {
			displayWarning(5);
		   }
                   lastpos = position;
                   position = TASK;
		   curTask = curDomain.addTask(n1.toString());
		   lastpos = position;
                   position = GOAL;
		
              CUP$parser$result = new java_cup.runtime.Symbol(103/*NT$41*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // task ::= TASK RBRA NAME NT$39 COMMA SBRA seList SKET NT$40 COMMA SBRA ssList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$39
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
              // propagate RESULT from NT$40
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		 lastpos = TASK;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(38/*task*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$40 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 lastpos = position;
                   position = SINIT;
		
              CUP$parser$result = new java_cup.runtime.Symbol(102/*NT$40*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$39 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if (! ((position == NONE && 
                           curDomain.tasks.isEmpty())
				|| (lastpos == TASK))) {
			displayWarning(5);
		   }
                   lastpos = position;
                   position = TASK;
		   curTask = curDomain.addTask(n1.toString());
		   position = GOAL;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(101/*NT$39*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // varname ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n1; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*varname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // varname ::= VAR 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v1; 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*varname*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ss ::= SS RBRA NAME COMMA varname COMMA NT$38 eAssignList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$38
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(36/*ss*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // NT$38 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 switch(position) {
		       case SINIT:
			    curSS = curTask.addInitSS(n1.toString(),
							n2.toString());
			    break;
			case ACHIEVECL:
			    curSS = curMethod.addDecompSS(n1.toString(),
							n2.toString());
			    break;
			case ACHIEVEGL:
			    curSS = curHTNTask.addAchieveSS(n1.toString(),
							n2.toString());
			    break;
			case HTNINIT:
			    curSS = curHTNTask.addInitSS(n1.toString(),
							n2.toString());
			    break;	
		     }
		
              CUP$parser$result = new java_cup.runtime.Symbol(100/*NT$38*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ssList ::= ss 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*ssList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ssList ::= ss COMMA ssList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*ssList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // scPost ::= STATETRANS NT$37 eClauseList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$37
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 position = lastpos;
		
              CUP$parser$result = new java_cup.runtime.Symbol(32/*scPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$37 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCPOST;
		
              CUP$parser$result = new java_cup.runtime.Symbol(99/*NT$37*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // scPost ::= COMMA NT$36 eClauseList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$36
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*scPost*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$36 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCPOST;
		
              CUP$parser$result = new java_cup.runtime.Symbol(98/*NT$36*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // sc ::= SC RBRA NAME COMMA varname COMMA NT$35 eClauseList scPost 
            {
              Object RESULT = null;
              // propagate RESULT from NT$35
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*sc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$35 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 switch(position) {
		      case SCNEC:
			if (curDomain.oclPlus) {
			   curSCPlus = curOP.addNecSCPlus(n1.toString(),n2.toString());
			} else {
				curSC = curOP.addNecSC(n1.toString(),n2.toString());
			}
			break;			
		      case SCINDEX:
			curSC = curMethod.addIndexSC(n1.toString(),
						     n2.toString());
			break;
		      case SCCOND:
		      if (curDomain.oclPlus) {
		        curSCPlus = curOP.addCondSCPlus(n1.toString(),n2.toString());
		      } else {
				curSC = curOP.addCondSC(n1.toString(),n2.toString());
			  }
			break;
		    }
		
              CUP$parser$result = new java_cup.runtime.Symbol(97/*NT$35*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // scList ::= sc 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*scList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // scList ::= sc COMMA scList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*scList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // eScList ::= SBRA scList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*eScList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // eScList ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*eScList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // se ::= SE RBRA NAME COMMA varname COMMA NT$34 eClauseList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$34
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*se*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$34 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 switch (position) {
		     case SEPREV:
			if (curDomain.oclPlus) {
			   curSEPlus = curOP.addPrevSEPlus(n1.toString(),n2.toString());
			} else {
		   	   curSE = curOP.addPrevSE(n1.toString(),n2.toString());
			}
			break;		   	
		     case SEPRE:
		   	curSE = curMethod.addPreSE(n1.toString(),
                                                   n2.toString());
			break;
		     case GOAL:
			curSE = curTask.addGoalSE(n1.toString(),n2.toString());
			break;
		   }
		
              CUP$parser$result = new java_cup.runtime.Symbol(96/*NT$34*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // seList ::= se 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*seList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // seList ::= se COMMA seList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*seList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // eSeList ::= SBRA seList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*eSeList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // eSeList ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*eSeList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // method ::= METHOD NT$28 RBRA clause COMMA NT$29 eSeList COMMA NT$30 eScList COMMA NT$31 eClauseList COMMA NT$32 eTempList COMMA NT$33 decomposition RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
              // propagate RESULT from NT$29
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
              // propagate RESULT from NT$30
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
              // propagate RESULT from NT$31
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
              // propagate RESULT from NT$32
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
              // propagate RESULT from NT$33
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 lastpos = METHODEL;
		   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(24/*method*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-20)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$33 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		   position = DECOMPS;
		
              CUP$parser$result = new java_cup.runtime.Symbol(95/*NT$33*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$32 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		   position = TEMPS;
		
              CUP$parser$result = new java_cup.runtime.Symbol(94/*NT$32*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$31 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = STATIC;
		
              CUP$parser$result = new java_cup.runtime.Symbol(93/*NT$31*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$30 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCINDEX;
		
              CUP$parser$result = new java_cup.runtime.Symbol(92/*NT$30*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$29 ::= 
            {
              Object RESULT = null;
 
		   lastpos = position;
                   position = SEPRE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(91/*NT$29*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NT$28 ::= 
            {
              Object RESULT = null;
 if (! ((position == NONE && 
                           curDomain.methods.isEmpty())
				|| (lastpos == METHODEL))) {
			displayWarning(6);
		   }
                   lastpos = position;
                   position = METHODEL;
		   curMethod = curDomain.addMethod();
		   if (docmText.size() > 0) {
			ListIterator liDocm = docmText.listIterator();
			while (liDocm.hasNext()) {
			    curMethod.addDocmLine((String)liDocm.next());
			}
			docmText.clear();
                    }
                
              CUP$parser$result = new java_cup.runtime.Symbol(90/*NT$28*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // event ::= EVENT NT$23 RBRA clause COMMA NT$24 eSeList COMMA NT$25 eScList COMMA NT$26 eScList RKET NT$27 STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*event*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$27 ::= 
            {
              Object RESULT = null;
 lastpos = OP;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(89/*NT$27*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$26 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCCOND;
		
              CUP$parser$result = new java_cup.runtime.Symbol(88/*NT$26*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$25 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCNEC;
		
              CUP$parser$result = new java_cup.runtime.Symbol(87/*NT$25*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$24 ::= 
            {
              Object RESULT = null;
 
		   lastpos = position;
                   position = SEPREV;
		
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$24*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$23 ::= 
            {
              Object RESULT = null;
 if (! ((position == NONE && 
                           curDomain.operators.isEmpty())
				|| (lastpos == OP))) {
			//displayWarning(4);
		   }
                   lastpos = position;
                   position = OP;
		   curOP = (oclOperator)curDomain.addEvent();
		   if (docmText.size() > 0) {
			ListIterator liDocm = docmText.listIterator();
			while (liDocm.hasNext()) {
			    curOP.addDocmLine((String)liDocm.next());
			}
			docmText.clear();
                    }

                
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$23*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // process ::= PROCESS NT$19 RBRA clause COMMA NT$20 eSeList COMMA NT$21 eScList RKET NT$22 STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(60/*process*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NT$22 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$22*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$21 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCNEC;
		
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$21*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$20 ::= 
            {
              Object RESULT = null;
 
		   lastpos = position;
                   position = SEPREV;
		
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$20*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$19 ::= 
            {
              Object RESULT = null;
 if (! ((position == NONE && 
                           curDomain.processes.isEmpty())
				|| (lastpos == OP))) {
			//displayWarning(4);
		   }
                   lastpos = position;
                   position = OP;
		   curOP = (oclOperator)curDomain.addProc();
		   if (docmText.size() > 0) {
			ListIterator liDocm = docmText.listIterator();
			while (liDocm.hasNext()) {
			    curOP.addDocmLine((String)liDocm.next());
			}
			docmText.clear();
                    }

                
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$19*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op ::= OPERATOR NT$14 RBRA clause COMMA NT$15 eSeList COMMA NT$16 eScList COMMA NT$17 eScList RKET NT$18 STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-14)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*op*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$18 ::= 
            {
              Object RESULT = null;
 lastpos = OP;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$18*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$17 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCCOND;
		
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$17*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$16 ::= 
            {
              Object RESULT = null;
 lastpos = position;
                   position = SCNEC;
		
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$16*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NT$15 ::= 
            {
              Object RESULT = null;
 
		   lastpos = position;
                   position = SEPREV;
		
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$15*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$14 ::= 
            {
              Object RESULT = null;
 if (! ((position == NONE && 
                           curDomain.operators.isEmpty())
				|| (lastpos == OP))) {
			displayWarning(4);
		   }
                   lastpos = position;
                   position = OP;
		   curOP = curDomain.addOP();
		   if (docmText.size() > 0) {
			ListIterator liDocm = docmText.listIterator();
			while (liDocm.hasNext()) {
			    curOP.addDocmLine((String)liDocm.next());
			}
			docmText.clear();
                    }

                
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$14*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // inconsist ::= INCONCONST RBRA SBRA NT$13 clauseList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 lastpos = position;
                   position = NONE; 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*inconsist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$13 ::= 
            {
              Object RESULT = null;
 if (! ((position == NONE && 
                           curDomain.inconsistentConst.isEmpty())
				|| (lastpos == INCONCONST))) {
			displayWarning(3);
		   }
                   lastpos = position;
                   position = INCONCONST;
		   curIConst = curDomain.addInconsistentConst();
	        
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // inconsist ::= INCONCONST RBRA SBRA SKET RKET STOP 
            {
              Object RESULT = null;
		 if (! (position == NONE && 
                           curDomain.inconsistentConst.isEmpty())) {
			displayWarning(3);
		    }
                    lastpos = INCONCONST;
		    position = NONE;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(22/*inconsist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // impliedInvar ::= IMPINVAR RBRA SBRA NT$11 clauseList SKET COMMA SBRA NT$12 clauseList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 lastpos = position;
		     position = NONE;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*impliedInvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$12 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		     position = IINVARRIGHT;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NT$11 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		     position = IINVARLEFT;
		     curIInvar = curDomain.addImpliedInvar();
		  
              CUP$parser$result = new java_cup.runtime.Symbol(73/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // impliedInvar ::= IMPINVAR RBRA SBRA NT$10 SKET COMMA SBRA SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		 lastpos = position;
		     position = NONE;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*impliedInvar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$10 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		     position = IINVARLEFT;
	          
              CUP$parser$result = new java_cup.runtime.Symbol(72/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // atomicInVar ::= ATOMINVAR RBRA SBRA NT$9 invarList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int at2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int at2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object at2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 lastpos = position;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*atomicInVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NT$9 ::= 
            {
              Object RESULT = null;
		int at2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int at2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object at2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 if (! (position == NONE && 
                          curDomain.atomicInvars.isEmpty() &&
			  lastpos != ATOMINVAR)) {
			parser.report_fatal_error(SERROR[2],
				new Integer(at2right + 1));
		   }
                   lastpos = position;
                   position = ATOMINVAR; 
                
              CUP$parser$result = new java_cup.runtime.Symbol(71/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // atomicInVar ::= ATOMINVAR RBRA SBRA SKET RKET STOP 
            {
              Object RESULT = null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object at = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 if (! (position == NONE && 
                          curDomain.atomicInvars.isEmpty() &&
			  lastpos != ATOMINVAR)) {
			parser.report_fatal_error(SERROR[2],
				new Integer(atright + 1));
		   }
                   lastpos = ATOMINVAR;
                   position = NONE;
                
              CUP$parser$result = new java_cup.runtime.Symbol(21/*atomicInVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sState ::= SBRA NT$8 clauseList SKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*sState*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NT$8 ::= 
            {
              Object RESULT = null;
 curState = curCDef.addState();
		
              CUP$parser$result = new java_cup.runtime.Symbol(70/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // sStateList ::= sState 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*sStateList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // sStateList ::= sState COMMA sStateList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*sStateList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // sStateDef ::= SBRA sStateList SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*sStateDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // sStateDef ::= SBRA SKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*sStateDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ssClassDef ::= SSCLASSES RBRA NAME COMMA VAR COMMA NT$7 sStateDef RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object sName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object sVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 lastpos = position;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*ssClassDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$7 ::= 
            {
              Object RESULT = null;
		int sNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object sName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sVarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sVarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sVar = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if (! ((position == NONE && curDomain.classDefs.isEmpty())
				|| (lastpos == CLASSDEF))) {
			displayWarning(2);
		   }
                   lastpos = position;
                   position = CLASSDEF;
		   curCDef = curDomain.addClassDef(sName.toString(),sVar.toString());
                 
              CUP$parser$result = new java_cup.runtime.Symbol(69/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // functorClause ::= FUNCTORS RBRA NT$6 SBRA predList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 lastpos = position;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(9/*functorClause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$6 ::= 
            {
              Object RESULT = null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if (! (position == NONE && curDomain.functors.isEmpty())) {
			parser.report_fatal_error(SERROR[1],
				new Integer(prright + 1));
		   }
                   lastpos = position;
                   position = FUNCTORS;
                
              CUP$parser$result = new java_cup.runtime.Symbol(68/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // predClause ::= PREDICATES RBRA NT$5 SBRA predList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 lastpos = position;
                   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(8/*predClause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$5 ::= 
            {
              Object RESULT = null;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if (! (position == NONE && curDomain.predicates.isEmpty())) {
			parser.report_fatal_error(SERROR[1],
				new Integer(prright + 1));
		   }
                   lastpos = position;
                   position = PREDICATES;
                
              CUP$parser$result = new java_cup.runtime.Symbol(67/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // object ::= OBJECTS RBRA NAME COMMA NT$4 SBRA nameList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sortNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int sortNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object sortName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 lastpos = position;
                   position = NONE; 
                
              CUP$parser$result = new java_cup.runtime.Symbol(5/*object*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$4 ::= 
            {
              Object RESULT = null;
		int sortNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sortNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sortName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 if (! ((position == NONE && curDomain.objects.isEmpty())
				|| (lastpos == OBJEL))) {
			displayWarning(1);
		   }
		   lastpos = position;
		   position = OBJEL;
		   curObj = curDomain.addObject(sortName.toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(66/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sort ::= SORTS RBRA NAME NT$3 COMMA SBRA nameList SKET RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		 lastpos = position;
		   position = NONE;
		
              CUP$parser$result = new java_cup.runtime.Symbol(4/*sort*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$3 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 if ((position == NONE && curDomain.sorts.isEmpty())
				|| (lastpos == SORTEL)) {
			lastpos = position;
                   	position = SORTEL;
		   	curSort = curDomain.addSort(n1.toString());
		   } else { 
			displayWarning(0);
			lastpos = position;
			position = SORTEL;
			curSort = curDomain.addSort(n1.toString());
		   }
                
              CUP$parser$result = new java_cup.runtime.Symbol(65/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // dName ::= DOMNAME NT$2 RBRA NAME RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dn = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
		 if (! curDomain.getName().equals("oclDefault")) {
		    parser.report_fatal_error(SERROR[0],
			new Integer(dnright + 1));
		 } else { 
		   lastpos = position;
		   position = NONE;
                   curDomain.setName(dn.toString()); 
		 }
		
              CUP$parser$result = new java_cup.runtime.Symbol(3/*dName*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$2 ::= 
            {
              Object RESULT = null;
 position = DNAMEEL; 
              CUP$parser$result = new java_cup.runtime.Symbol(64/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // gipoOption ::= OPTION NT$1 RBRA NAME RKET STOP 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 lastpos = position;
                  position = NONE;
		  curDomain.addOption(opt.toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(7/*gipoOption*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$1 ::= 
            {
              Object RESULT = null;
 position = OPTIONEL; 
              CUP$parser$result = new java_cup.runtime.Symbol(63/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // pclause ::= event 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // pclause ::= process 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // pclause ::= functorClause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // pclause ::= gipoOption 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // pclause ::= docm 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // pclause ::= htntask 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // pclause ::= task 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // pclause ::= method 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // pclause ::= op 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // pclause ::= inconsist 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // pclause ::= impliedInvar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // pclause ::= atomicInVar 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // pclause ::= ssClassDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // pclause ::= predClause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // pclause ::= object 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // pclause ::= sort 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // pclause ::= dName 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*pclause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // description ::= DESCEND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*description*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // description ::= DESCDET NT$0 description 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dlineleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dlineright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object dline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(44/*description*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT = null;
		int dlineleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dlineright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object dline = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

          String desc = dline.toString();
		  if (desc.trim().charAt(0) == '*') {
	      	String content = desc.substring(desc.indexOf('*') + 1);
			java.util.regex.Pattern regLHPat = 
			java.util.regex.Pattern.compile(
                   		"Object Life History : ([a-zA-Z0-9]*\\.gfx)");
			Matcher regLH = regLHPat.matcher(content);
			if (regLH.find()) {
			   	strLifeHistory = regLH.group(1);
			   	curDomain.setLifeHistoryFile(strLifeHistory);
			} else {
				curDomain.addDomDescLine(content.trim());
			}
          } else {
		    curDomain.addDomDescLine(desc.trim());
          }
       
              CUP$parser$result = new java_cup.runtime.Symbol(62/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= AUTHOR INSTITUTION DATEC DATEL description 
            {
              Object RESULT = null;
		int auleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int auright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object au = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object inst = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int creatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int creatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object creat = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mod = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	          curDomain.setAuthor(au.toString().substring(7).trim());
	          curDomain.setInstitution(inst.toString().substring(12).trim());
	          curDomain.setDateCreated(creat.toString().substring(13).trim());
	          curDomain.setDateModified(mod.toString().substring(19).trim());
               
              CUP$parser$result = new java_cup.runtime.Symbol(43/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // body ::= pclause 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= pclause body 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(45/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // spec ::= body 
            {
              oclDomain RESULT = null;
		 RESULT = curDomain; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*spec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // spec ::= header body 
            {
              oclDomain RESULT = null;
		 RESULT = curDomain; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*spec*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= spec EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclDomain start_val = (oclDomain)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

