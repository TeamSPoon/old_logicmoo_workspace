
//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Thu May 26 21:23:42 BST 2005
//----------------------------------------------------

package jplan.tools.lifeHist;

import java.util.regex.*;
import java_cup.runtime.*;
import java.io.PrintWriter;
import java.util.List;
import java.util.ArrayList;
import java.util.ListIterator;
import jplan.ocl.*;
import jplan.general.Utility;
import jplan.general.OCLException;

/** CUP v0.10j generated parser.
  * @version Thu May 26 21:23:42 BST 2005
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\014\002\000\002\004" +
    "\007\000\002\015\002\000\002\004\007\000\002\016\002" +
    "\000\002\017\002\000\002\004\012\000\002\020\002\000" +
    "\002\021\002\000\002\004\012\000\002\022\002\000\002" +
    "\023\002\000\002\004\012\000\002\024\002\000\002\025" +
    "\002\000\002\004\012\000\002\026\002\000\002\027\002" +
    "\000\002\004\012\000\002\030\002\000\002\003\006\000" +
    "\002\031\002\000\002\003\006\000\002\003\003\000\002" +
    "\003\003\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\007\003\000\002\007\005\000\002\007\005" +
    "\000\002\013\004\000\002\013\005\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\010\003\000\002\010\005\000\002\011" +
    "\003\000\002\011\005\000\002\012\003\000\002\012\004" +
    "\000\002\012\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\020\007\012\011\005\012\013\013\004\014" +
    "\007\015\010\016\006\001\002\000\004\005\145\001\002" +
    "\000\004\005\111\001\002\000\004\005\102\001\002\000" +
    "\004\005\073\001\002\000\004\005\064\001\002\000\004" +
    "\002\063\001\002\000\004\005\047\001\002\000\004\005" +
    "\014\001\002\000\020\007\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\016\ufffc\001\002\000\020\007\012\011" +
    "\005\012\013\013\004\014\007\015\010\016\006\001\002" +
    "\000\004\004\ufffb\001\002\000\004\004\020\001\002\000" +
    "\034\005\026\007\012\010\024\011\005\012\013\013\004" +
    "\014\007\015\010\016\006\020\021\033\022\034\023\035" +
    "\025\001\002\000\034\005\026\007\012\010\024\011\005" +
    "\012\013\013\004\014\007\015\010\016\006\020\021\033" +
    "\022\034\023\035\025\001\002\000\032\006\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\001\002\000\032\006\uffde" +
    "\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\026" +
    "\uffde\027\uffde\030\uffde\031\uffde\032\uffde\001\002\000\032" +
    "\006\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024" +
    "\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd\032\uffdd\001\002" +
    "\000\032\006\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\001\002\000\034\005\026\007\012\010\024\011\005\012" +
    "\013\013\004\014\007\015\010\016\006\020\021\033\022" +
    "\034\023\035\025\001\002\000\032\006\uffdb\017\uffdb\020" +
    "\uffdb\021\uffdb\022\uffdb\023\uffdb\024\uffdb\026\uffdb\027\uffdb" +
    "\030\uffdb\031\uffdb\032\uffdb\001\002\000\032\006\uffe4\017" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\001\002\000\032\006" +
    "\uffe7\017\uffe7\020\uffe7\021\037\022\040\023\uffe7\024\uffe7" +
    "\026\uffe7\027\uffe7\030\uffe7\031\uffe7\032\uffe7\001\002\000" +
    "\010\006\033\017\034\020\035\001\002\000\036\002\ufffa" +
    "\004\ufffa\006\ufffa\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023" +
    "\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa" +
    "\001\002\000\034\005\026\007\012\010\024\011\005\012" +
    "\013\013\004\014\007\015\010\016\006\020\021\033\022" +
    "\034\023\035\025\001\002\000\034\005\026\007\012\010" +
    "\024\011\005\012\013\013\004\014\007\015\010\016\006" +
    "\020\021\033\022\034\023\035\025\001\002\000\032\006" +
    "\uffe5\017\uffe5\020\uffe5\021\037\022\040\023\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\001\002\000" +
    "\034\005\026\007\012\010\024\011\005\012\013\013\004" +
    "\014\007\015\010\016\006\020\021\033\022\034\023\035" +
    "\025\001\002\000\034\005\026\007\012\010\024\011\005" +
    "\012\013\013\004\014\007\015\010\016\006\020\021\033" +
    "\022\034\023\035\025\001\002\000\032\006\uffe2\017\uffe2" +
    "\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\031\uffe2\032\uffe2\001\002\000\032\006\uffe3" +
    "\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\001\002\000\032" +
    "\006\uffe6\017\uffe6\020\uffe6\021\037\022\040\023\uffe6\024" +
    "\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\032\uffe6\001\002" +
    "\000\010\006\045\017\034\020\035\001\002\000\032\006" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024\uffe0" +
    "\026\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\001\002\000" +
    "\032\006\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\001" +
    "\002\000\006\007\000\010\000\001\002\000\006\007\053" +
    "\010\051\001\002\000\006\004\uffeb\006\uffe8\001\002\000" +
    "\004\006\057\001\002\000\006\004\uffed\006\uffe9\001\002" +
    "\000\004\004\055\001\002\000\006\007\053\010\051\001" +
    "\002\000\004\006\uffec\001\002\000\036\002\uffff\004\uffff" +
    "\006\uffff\017\uffff\020\uffff\021\uffff\022\uffff\023\uffff\024" +
    "\uffff\026\uffff\027\uffff\030\uffff\031\uffff\032\uffff\001\002" +
    "\000\004\004\061\001\002\000\006\007\053\010\051\001" +
    "\002\000\004\006\uffea\001\002\000\004\002\001\001\002" +
    "\000\020\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015" +
    "\ufff9\016\ufff9\001\002\000\020\007\012\011\005\012\013" +
    "\013\004\014\007\015\010\016\006\001\002\000\004\004" +
    "\ufff8\001\002\000\004\004\070\001\002\000\034\005\026" +
    "\007\012\010\024\011\005\012\013\013\004\014\007\015" +
    "\010\016\006\020\021\033\022\034\023\035\025\001\002" +
    "\000\010\006\072\017\034\020\035\001\002\000\036\002" +
    "\ufff7\004\ufff7\006\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032" +
    "\ufff7\001\002\000\020\007\ufff0\011\ufff0\012\ufff0\013\ufff0" +
    "\014\ufff0\015\ufff0\016\ufff0\001\002\000\020\007\012\011" +
    "\005\012\013\013\004\014\007\015\010\016\006\001\002" +
    "\000\004\004\uffef\001\002\000\004\004\077\001\002\000" +
    "\034\005\026\007\012\010\024\011\005\012\013\013\004" +
    "\014\007\015\010\016\006\020\021\033\022\034\023\035" +
    "\025\001\002\000\010\006\101\017\034\020\035\001\002" +
    "\000\036\002\uffee\004\uffee\006\uffee\017\uffee\020\uffee\021" +
    "\uffee\022\uffee\023\uffee\024\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\032\uffee\001\002\000\020\007\ufff6\011\ufff6\012" +
    "\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6\001\002\000\020" +
    "\007\012\011\005\012\013\013\004\014\007\015\010\016" +
    "\006\001\002\000\004\004\ufff5\001\002\000\004\004\106" +
    "\001\002\000\034\005\026\007\012\010\024\011\005\012" +
    "\013\013\004\014\007\015\010\016\006\020\021\033\022" +
    "\034\023\035\025\001\002\000\010\006\110\017\034\020" +
    "\035\001\002\000\036\002\ufff4\004\ufff4\006\ufff4\017\ufff4" +
    "\020\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\027" +
    "\ufff4\030\ufff4\031\ufff4\032\ufff4\001\002\000\036\005\ufffe" +
    "\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe\015" +
    "\ufffe\016\ufffe\020\ufffe\025\ufffe\033\ufffe\034\ufffe\035\ufffe" +
    "\001\002\000\036\005\115\007\012\010\024\011\005\012" +
    "\013\013\004\014\007\015\010\016\006\020\021\025\114" +
    "\033\022\034\023\035\025\001\002\000\020\017\034\020" +
    "\035\026\135\027\134\030\136\031\132\032\133\001\002" +
    "\000\034\005\026\007\012\010\024\011\005\012\013\013" +
    "\004\014\007\015\010\016\006\020\021\033\022\034\023" +
    "\035\025\001\002\000\036\005\115\007\012\010\024\011" +
    "\005\012\013\013\004\014\007\015\010\016\006\020\021" +
    "\025\114\033\022\034\023\035\025\001\002\000\010\006" +
    "\uffd8\023\uffd8\024\uffd8\001\002\000\006\006\124\024\125" +
    "\001\002\000\010\006\uffd6\023\uffd6\024\uffd6\001\002\000" +
    "\010\006\uffda\023\122\024\uffda\001\002\000\036\005\115" +
    "\007\012\010\024\011\005\012\013\013\004\014\007\015" +
    "\010\016\006\020\021\025\114\033\022\034\023\035\025" +
    "\001\002\000\010\006\uffd7\023\uffd7\024\uffd7\001\002\000" +
    "\036\002\ufffd\004\ufffd\006\ufffd\017\ufffd\020\ufffd\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031" +
    "\ufffd\032\ufffd\001\002\000\036\005\115\007\012\010\024" +
    "\011\005\012\013\013\004\014\007\015\010\016\006\020" +
    "\021\025\114\033\022\034\023\035\025\001\002\000\010" +
    "\006\uffd9\023\122\024\uffd9\001\002\000\022\006\045\017" +
    "\034\020\035\026\135\027\134\030\136\031\132\032\133" +
    "\001\002\000\006\006\131\024\125\001\002\000\010\006" +
    "\uffd4\023\uffd4\024\uffd4\001\002\000\034\005\026\007\012" +
    "\010\024\011\005\012\013\013\004\014\007\015\010\016" +
    "\006\020\021\033\022\034\023\035\025\001\002\000\034" +
    "\005\026\007\012\010\024\011\005\012\013\013\004\014" +
    "\007\015\010\016\006\020\021\033\022\034\023\035\025" +
    "\001\002\000\034\005\026\007\012\010\024\011\005\012" +
    "\013\013\004\014\007\015\010\016\006\020\021\033\022" +
    "\034\023\035\025\001\002\000\034\005\026\007\012\010" +
    "\024\011\005\012\013\013\004\014\007\015\010\016\006" +
    "\020\021\033\022\034\023\035\025\001\002\000\034\005" +
    "\026\007\012\010\024\011\005\012\013\013\004\014\007" +
    "\015\010\016\006\020\021\033\022\034\023\035\025\001" +
    "\002\000\014\006\uffd2\017\034\020\035\023\uffd2\024\uffd2" +
    "\001\002\000\014\006\uffd3\017\034\020\035\023\uffd3\024" +
    "\uffd3\001\002\000\014\006\uffd1\017\034\020\035\023\uffd1" +
    "\024\uffd1\001\002\000\014\006\uffd0\017\034\020\035\023" +
    "\uffd0\024\uffd0\001\002\000\014\006\uffcf\017\034\020\035" +
    "\023\uffcf\024\uffcf\001\002\000\010\006\uffd5\023\uffd5\024" +
    "\uffd5\001\002\000\020\007\ufff3\011\ufff3\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\001\002\000\020\007\012\011" +
    "\005\012\013\013\004\014\007\015\010\016\006\001\002" +
    "\000\004\004\ufff2\001\002\000\004\004\151\001\002\000" +
    "\034\005\026\007\012\010\024\011\005\012\013\013\004" +
    "\014\007\015\010\016\006\020\021\033\022\034\023\035" +
    "\025\001\002\000\010\006\153\017\034\020\035\001\002" +
    "\000\036\002\ufff1\004\ufff1\006\ufff1\017\ufff1\020\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\004\004\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\014\001\001\000\004\004\015\001\001" +
    "\000\004\017\016\001\001\000\002\001\001\000\012\004" +
    "\026\006\031\007\030\013\027\001\001\000\006\004\026" +
    "\013\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\026\006\043" +
    "\007\030\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\026\007\042\013\027\001\001\000\010\004" +
    "\026\007\035\013\027\001\001\000\002\001\001\000\006" +
    "\004\026\013\041\001\001\000\006\004\026\013\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\047\001\001\000\004\003\051\001\001\000\004" +
    "\031\057\001\001\000\002\001\001\000\004\030\053\001" +
    "\001\000\002\001\001\000\004\003\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\064\001\001\000\004\004\065\001\001\000\004\021" +
    "\066\001\001\000\002\001\001\000\012\004\026\006\070" +
    "\007\030\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\073\001\001\000\004\004\074\001\001" +
    "\000\004\027\075\001\001\000\002\001\001\000\012\004" +
    "\026\006\077\007\030\013\027\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\102\001\001\000\004\004" +
    "\103\001\001\000\004\023\104\001\001\000\002\001\001" +
    "\000\012\004\026\006\106\007\030\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\111\001\001" +
    "\000\022\004\026\005\117\006\112\007\030\010\116\011" +
    "\120\012\115\013\027\001\001\000\002\001\001\000\014" +
    "\004\026\005\143\006\112\007\030\013\027\001\001\000" +
    "\022\004\026\005\117\006\126\007\030\010\127\011\120" +
    "\012\115\013\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\004\026" +
    "\005\117\006\112\007\030\012\122\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\026\005\117" +
    "\006\112\007\030\011\125\012\115\013\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\026\006\142\007\030\013\027\001" +
    "\001\000\012\004\026\006\141\007\030\013\027\001\001" +
    "\000\012\004\026\006\140\007\030\013\027\001\001\000" +
    "\012\004\026\006\137\007\030\013\027\001\001\000\012" +
    "\004\026\006\136\007\030\013\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\145\001" +
    "\001\000\004\004\146\001\001\000\004\025\147\001\001" +
    "\000\002\001\001\000\012\004\026\006\151\007\030\013" +
    "\027\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	CUP$parser$actions.mssgs = new ArrayList();
	CUP$parser$actions.position = NONE;
	CUP$parser$actions.lastpos = NONE;

    }


	// NOTE MUST MATCH ACTION DECLARATIONS
        static final int NONE = -1;
	static final int DNAMEEL = 0;
	static final int SORTEL = 1;
	static final int OBJEL = 2;
	static final int PREDICATES = 3;
	static final int CLASSDEF = 4;
	static final int ATOMINVAR = 5;
	static final int INCONCONST = 6;
	static final int OP = 7;
	static final int SEPREV = 8;
	static final int SCNEC = 9;
	static final int SCCOND = 10;
	static final int SCPOST = 11;
	static final int TASK = 12;
	static final int GOAL = 13;
	static final int SINIT = 14;
	static final int METHODEL = 15;
	static final int SEPRE = 16;
	static final int SCINDEX = 17;
	static final int STATIC = 18;
	static final int TEMPS = 19;
	static final int DECOMPS = 20;
	static final int ACHIEVECL = 21;
	static final int IINVARLEFT = 22;
	static final int IINVARRIGHT = 23;	
	static final int HTNTASK = 24;
	static final int HTNGOAL = 25;
	static final int ACHIEVEGL = 26;
	static final int HTNTEMP = 27;
	static final int HTNSTATICS = 28;
	static final int HTNINIT = 29;
	static final int OPTIONEL = 30;
	static final int FUNCTORS = 31;
	static final int VALUE = 32;
	static final int TEST = 33;
	static final int ASSIGN = 34;
	static final int INCREASE = 35;
	static final int DECREASE = 36;
	static final int SCALEUP = 37;
	static final int SCALEDOWN = 38;
	static final int PLUS = 39;
	static final int MINUS = 40;
	static final int MULT = 41;
	static final int DIV = 42;
	static final int EQUALS = 43;
	static final int LESS = 44;
	static final int GREATER = 45;
	static final int LESSEQ = 46;
	static final int GREATEREQ = 47;
	static final int AND = 48;
	static final int OR = 49;
	static final int NOT = 50;
	static final int UPDATE = 51;
	static final int TIME = 52;
	static final int PROCESS = 53;
	static final int EVENT = 54;

	static Symbol res;
	static List wmssgs;

	/*
	public static void main(String args[]) throws Exception {
	    try {
		res = new parser(new Yylex(System.in)).parse();
                pTree = (oclPredicate)(res.value);
		pTree.oclPrintComponent
		    (new PrintWriter(System.out,true)
			,0,false);
		System.out.println("%% End of " + pTree.getName());
	    }catch(Exception e){
		System.out.println("Cannot recover Goodbye.");
		wmssgs = getWarnMssgs();
		ListIterator li = wmssgs.listIterator();
		while( li.hasNext()) {
			System.out.println((String)li.next());
		}
	    }
	}
	*/

	public void syntax_error(Symbol cur_symbol) {
		//CUP$parser$actions.mssgs.add(
		//	new String("OCL Syntax error :: "));
	}
	

	public void report_error(String message,Object info) {
	    String mOut = new String("");
	    if (info instanceof Symbol)
		    if (((Symbol)info).left != -1) {
		    	String symb = (String)(((Symbol)info).value);
		    	if (symb == null || symb.length() == 0) {
		    		mOut = mOut + "At character position " 
				           + ((Symbol)info).left 
				           + " of input.";
				} else {
		        	mOut = mOut + "At symbol " 
				           + ((Symbol)info).value
				           + " character position " 
				           + ((Symbol)info).left 
				           + " of input.";
				}
		    } else 
		    	mOut = "Syntax Error";
	    else if (info instanceof Integer)
		    mOut = new String(message + " On line " + info);
		else 
			mOut = "Syntax Error";
	    CUP$parser$actions.mssgs.add(mOut);
	}

	public static List getWarnMssgs() {
		return CUP$parser$actions.getWarnMssgs();
	}

	


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	// NOTE MUST MATCH PARSER DECLARATIONS
        static final int NONE = -1;
	static final int DNAMEEL = 0;
	static final int SORTEL = 1;
	static final int OBJEL = 2;
	static final int PREDICATES = 3;
	static final int CLASSDEF = 4;
	static final int ATOMINVAR = 5;
	static final int INCONCONST = 6;
	static final int OP = 7;
	static final int SEPREV = 8;
	static final int SCNEC = 9;
	static final int SCCOND = 10;
	static final int SCPOST = 11;
	static final int TASK = 12;
	static final int GOAL = 13;
	static final int SINIT = 14;
	static final int METHODEL = 15;
	static final int SEPRE = 16;
	static final int SCINDEX = 17;
	static final int STATIC = 18;	
	static final int TEMPS = 19;
	static final int DECOMPS = 20;
	static final int ACHIEVECL = 21;
	static final int IINVARLEFT = 22;
	static final int IINVARRIGHT = 23;
	static final int HTNTASK = 24;
	static final int HTNGOAL = 25;
	static final int ACHIEVEGL = 26;
	static final int HTNTEMP = 27;
	static final int HTNSTATICS = 28;
	static final int HTNINIT = 29;
	static final int OPTIONEL = 30;
	static final int FUNCTORS = 31;
	static final int VALUE = 32;
	static final int TEST = 33;
	static final int ASSIGN = 34;
	static final int INCREASE = 35;
	static final int DECREASE = 36;
	static final int SCALEUP = 37;
	static final int SCALEDOWN = 38;
	static final int PLUS = 39;
	static final int MINUS = 40;
	static final int MULT = 41;
	static final int DIV = 42;
	static final int EQUALS = 43;
	static final int LESS = 44;
	static final int GREATER = 45;
	static final int LESSEQ = 46;
	static final int GREATEREQ = 47;
	static final int AND = 48;
	static final int OR = 49;
	static final int NOT = 50;
	static final int UPDATE = 51;
	static final int TIME = 52;
	static final int PROCESS = 53;
	static final int EVENT = 54;



	static final String SERROR[] = {
	    "Only one domain name allowed per spec",
	    "Only one predicate List allowed per spec",
	    "Only one Atomic Invarients section allowed per spec"
	};

	static final String WARN [] = {
	    "Sort specifications not contigous in file",
	    "Object specifications not contigous in file",
	    "Object Class Definitions not contigous in file",
	    "Inconsistent Constraint definitions not contigous in file",
            "Operator definitions not contigous in file",
            "Task definitions not contigous in file",
            "Method definitions not contigous in file"
	};

	
	oclPredicate curPred;
	oclInconsistentConst curIConst;
	oclExpression topExp;

	public static int	position = NONE;
	public static int       lastpos;

	public static List mssgs = new ArrayList();

	private static void displayWarning(int inx) {
	    mssgs.add("WARNING " + WARN[inx] + ".");
	}

	public static List getWarnMssgs () {
		return mssgs;
	}

	public static List docmText = new ArrayList();

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bexpr ::= fexpr GREATEREQ fexpr 
            {
              oclExpression RESULT = null;
		int lhs5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.GREATEREQ);
			expr.addLHS(lhs5);
			expr.addRHS(rhs5);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bexpr ::= fexpr LESSEQ fexpr 
            {
              oclExpression RESULT = null;
		int lhs4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.LESSEQ);
			expr.addLHS(lhs4);
			expr.addRHS(rhs4);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bexpr ::= fexpr GREATER fexpr 
            {
              oclExpression RESULT = null;
		int lhs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.GREATER);
			expr.addLHS(lhs3);
			expr.addRHS(rhs3);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bexpr ::= fexpr LESS fexpr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.LESS);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // bexpr ::= fexpr EQUALS fexpr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.EQUAL);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(3/*bexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // neg_expr ::= RBRA comp_expr RKET 
            {
              oclExpression RESULT = null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = exp2;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // neg_expr ::= NOT bexpr 
            {
              oclExpression RESULT = null;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.NOT);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // neg_expr ::= bexpr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(8/*neg_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // and_expr ::= and_expr AND neg_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.AND);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(7/*and_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // and_expr ::= neg_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(7/*and_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comp_expr ::= comp_expr OR and_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.OR);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comp_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comp_expr ::= and_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*comp_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unary_expr ::= clause 
            {
              oclExpression RESULT = null;
		
			oclExpression expr = new oclExpression(oclExpression.FLUENT_EXPR);
			expr.addFluent(curPred);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unary_expr ::= TIME 
            {
              oclExpression RESULT = null;
		
			oclExpression expr = new oclExpression(oclExpression.TIME_EXPR);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unary_expr ::= VAR 
            {
              oclExpression RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Utility.debugPrintln("life","Found Variable expression" + v1.toString());
			oclExpression expr = new oclExpression(oclExpression.VAR_EXPR);
			expr.addVariable(v1.toString());
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unary_expr ::= NUMBER 
            {
              oclExpression RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer n1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.DOUBLE_EXPR);
			expr.addDouble(new Double(n1.toString()));
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // unary_expr ::= DOUBLE 
            {
              oclExpression RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			Utility.debugPrintln("life","Found double expression" + d1.toString());
			oclExpression expr = new oclExpression(oclExpression.DOUBLE_EXPR);
			expr.addDouble(new Double(d1.toString()));
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // unary_expr ::= RBRA fexpr RKET 
            {
              oclExpression RESULT = null;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			oclExpression expr = new oclExpression(oclExpression.UNARY_EXPR);
			expr.addRHS(exp2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // unary_expr ::= MINUS unary_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.UMINUS);
			expr.addRHS(exp1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*unary_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // mult_expr ::= mult_expr DIV unary_expr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.DIV);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // mult_expr ::= mult_expr MULT unary_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.TIMES);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // mult_expr ::= unary_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*mult_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fexpr ::= fexpr MINUS mult_expr 
            {
              oclExpression RESULT = null;
		int lhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.MINUS);
			expr.addLHS(lhs2);
			expr.addRHS(rhs2);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fexpr ::= fexpr PLUS mult_expr 
            {
              oclExpression RESULT = null;
		int lhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		oclExpression lhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rhs1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rhs1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression rhs1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			oclExpression expr = new oclExpression(oclExpression.PLUS);
			expr.addLHS(lhs1);
			expr.addRHS(rhs1);
			RESULT = expr;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fexpr ::= mult_expr 
            {
              oclExpression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = exp1;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(4/*fexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // argList ::= VAR 
            {
              Object RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 
			  curPred.addVarArgument(v2.toString());
                 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // argList ::= NAME 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			  curPred.addConstArgument(n2.toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(1/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // argList ::= VAR NT$13 COMMA argList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$13 ::= 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object v1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
			  	curPred.addVarArgument(v1.toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NT$13*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // argList ::= NAME NT$12 COMMA argList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*argList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$12 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
 
			  curPred.addConstArgument(n1.toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(22/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // clause ::= SCALEDOWN RBRA NT$10 clause NT$11 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp6 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp6);
			position = lastpos;
			lastpos = UPDATE;
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$11 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.SCALEDOWN);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(21/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$10 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(20/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // clause ::= SCALEUP RBRA NT$8 clause NT$9 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp5 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp5);
			position = lastpos;
			lastpos = UPDATE;
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$9 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.SCALEUP);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(19/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$8 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(18/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // clause ::= DECREASE RBRA NT$6 clause NT$7 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp4 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp4);
			position = lastpos;
			lastpos = UPDATE;
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$7 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.DECREASE);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(17/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$6 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // clause ::= INCREASE RBRA NT$4 clause NT$5 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp3 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp3);
			position = lastpos;
			lastpos = UPDATE;
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$5 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.INCREASE);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(15/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$4 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;	
		
              CUP$parser$result = new java_cup.runtime.Symbol(14/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // clause ::= ASSIGN RBRA NT$2 clause NT$3 COMMA fexpr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp2 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			topExp.addRHS(exp2);
			position = lastpos;
			lastpos = UPDATE;
			Utility.debugPrintln("life","Done ASSIGN position = " + position);
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$3 ::= 
            {
              Object RESULT = null;
	
			topExp = new oclExpression(oclExpression.ASSIGN);
		  	oclExpression topLHS = new oclExpression(oclExpression.FLUENT_EXPR);
			topLHS.addFluent(curPred);
			topExp.addLHS(topLHS);
		
              CUP$parser$result = new java_cup.runtime.Symbol(13/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$2 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = UPDATE;
			Utility.debugPrintln("life","Started assign clause");	
		
              CUP$parser$result = new java_cup.runtime.Symbol(12/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // clause ::= TEST RBRA NT$1 comp_expr RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		oclExpression exp1 = (oclExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			oclExpression topExp = new oclExpression(oclExpression.TEST);
			topExp.addRHS(exp1);
			position = lastpos;
			lastpos = TEST;
			RESULT=topExp;
		
              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$1 ::= 
            {
              Object RESULT = null;

			lastpos = position;
			position = TEST;
		        Utility.debugPrintln("life","StarteD TEST clause");	
		
              CUP$parser$result = new java_cup.runtime.Symbol(11/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // clause ::= NAME RBRA NT$0 argList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*clause*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // NT$0 ::= 
            {
              Object RESULT = null;
		int funcNameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funcNameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object funcName = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 
			Utility.debugPrintln("life","UPdate fluent " + funcName.toString());
			curPred = new oclPredicate(funcName.toString());
         
              CUP$parser$result = new java_cup.runtime.Symbol(10/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= clause EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

