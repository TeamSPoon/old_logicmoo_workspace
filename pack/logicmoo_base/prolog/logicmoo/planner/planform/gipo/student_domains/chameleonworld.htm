<html>
<body>

<p align="center">
<img src="gipo_gear.gif"
width="200" height="150">
</p>

<p>
<h1 align="center">GIPO Domain Model</h1>
</p>

<p>
<h2 align="center">Domain Details</h2>
</p>

<table width="83%">
<tr>
  <td align="center"><b>Author:</b> Mr. Darren Jackson
                     </td>
  <td align="center"><b>Name:</b> Chameleon World
                     </td>
  <td align="right"><b>Favourite:</b> no
                     </td>
</tr>
</table>

<p>
<h2 align="center">Index</h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="#C1">
		     Life History</a></td>
  <td align="center"><a href="#C2">
		     Diagram Nodes' Properties and Constraints</a></td>
  <td align="center"><a href="#C3">
                     OCL Domain Plain Text</a></td>
  <td align="center"><a href="#C4">
		     PDDL Domain Plain Text</a></td>
  <td align="center"><a href="#C5">
		     Files Download Links</a></td>
</tr>
</table>

<p>
<h2 align="center"><a name="C1">Life History</a></h2>
</p>

<p align="center">
<img src="chameleonworldlh.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C2">Diagram Nodes' Properties and Constraints</a></h2>
<h2 align="center">(alphabetical order)</a></h2>
</p>

<p align="center">
<img src="chameleonworldp&c.jpg"
width="640" height="480">
</p>

<p align="center">
<img src="chameleonworldp&c2.jpg"
width="640" height="480">
</p>

<p align="center">
<img src="chameleonworldp&c3.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C3">OCL Domain Plain Text</a></h2>
</p>

<p>
<pre>
/**
 *  All rights reserved. Use of this software is permitted for non-commercial
 *  research purposes, and it may be copied only for that use.  All copies must
 *  include this copyright message.  This software is made available AS IS, and
 *  neither the GIPO team nor the University of Huddersfield make any warranty
 *  about the software or its performance.
 *
 *  Automatically generated OCL Domain from  GIPO Version 3.0
 *
 *  Author: Darren
 *  Institution: University of Huddersfield
 *  Date created: Tue Nov 14 16:25:00 GMT 2006
 *  Date last modified: 2006/12/03 at 05:41:15 PM GMT
 *  Description:
 *    
 * Object Life History : chameleonWorld.gfx
 */

domain_name(chameleonWorld).

% Sorts
sorts(primitive_sorts,[door,flexarium,chameleon,box,substrate]).

% Objects
objects(door,[door1]).
objects(flexarium,[flexarium1]).
objects(chameleon,[veiledChameleon]).
objects(box,[box1,box2]).
objects(substrate,[newsPaper1,newsPaper2]).

% Predicates
predicates([
    doorOpen(door),
    doorClosed(door),
    dirty(flexarium),
    clean(flexarium),
    inBox(chameleon,box),
    inHands(chameleon),
    inFlexarium(chameleon),
    boxOpen(box),
    boxClosed(box),
    insideFlexarium(substrate),
    outsideFlexarium(substrate)]).

% Object Class Definitions
substate_classes(door,Door,[
    [doorOpen(Door)],
    [doorClosed(Door)]]).
substate_classes(flexarium,Flexarium,[
    [dirty(Flexarium)],
    [clean(Flexarium)]]).
substate_classes(chameleon,Chameleon,[
    [inBox(Chameleon,Box)],
    [inHands(Chameleon)],
    [inFlexarium(Chameleon)]]).
substate_classes(box,Box,[
    [boxOpen(Box)],
    [boxClosed(Box)]]).
substate_classes(substrate,Substrate,[
    [insideFlexarium(Substrate)],
    [outsideFlexarium(Substrate)]]).

% Atomic Invariants

% Implied Invariants

% Inconsistent Constraints

% Operators
operator(takeOutFlex(Door,Chameleon),
    % prevail
    [     se(door,Door,[doorOpen(Door)])],
    % necessary
    [     sc(chameleon,Chameleon,[inFlexarium(Chameleon)]=>[inHands(Chameleon)])],
    % conditional
    []).
operator(putInBox(Box,Chameleon),
    % prevail
    [     se(box,Box,[boxOpen(Box)])],
    % necessary
    [     sc(chameleon,Chameleon,[inHands(Chameleon)]=>[inBox(Chameleon,Box)])],
    % conditional
    []).
operator(takeOutBox(Box,Chameleon),
    % prevail
    [     se(box,Box,[boxOpen(Box)])],
    % necessary
    [     sc(chameleon,Chameleon,[inBox(Chameleon,Box)]=>[inHands(Chameleon)])],
    % conditional
    []).
operator(putInFlex(Door,Substrate,Flexarium,Chameleon),
    % prevail
    [     se(door,Door,[doorOpen(Door)]),
     se(substrate,Substrate,[insideFlexarium(Substrate)]),
     se(flexarium,Flexarium,[clean(Flexarium)])],
    % necessary
    [     sc(chameleon,Chameleon,[inHands(Chameleon)]=>[inFlexarium(Chameleon)])],
    % conditional
    []).
operator(openDoor(Door),
    % prevail
    [],
    % necessary
    [     sc(door,Door,[doorClosed(Door)]=>[doorOpen(Door)])],
    % conditional
    []).
operator(closeDoor(Door),
    % prevail
    [],
    % necessary
    [     sc(door,Door,[doorOpen(Door)]=>[doorClosed(Door)])],
    % conditional
    []).
operator(time(Flexarium),
    % prevail
    [],
    % necessary
    [     sc(flexarium,Flexarium,[clean(Flexarium)]=>[dirty(Flexarium)])],
    % conditional
    []).
operator(wash(Chameleon,Box,Door,Substrate,Flexarium),
    % prevail
    [     se(chameleon,Chameleon,[inBox(Chameleon,Box)]),
     se(door,Door,[doorOpen(Door)]),
     se(substrate,Substrate,[outsideFlexarium(Substrate)])],
    % necessary
    [     sc(flexarium,Flexarium,[dirty(Flexarium)]=>[clean(Flexarium)])],
    % conditional
    []).
operator(addCleanNewspaper(Flexarium,Door,Chameleon,Box,Substrate),
    % prevail
    [     se(flexarium,Flexarium,[clean(Flexarium)]),
     se(door,Door,[doorOpen(Door)]),
     se(chameleon,Chameleon,[inBox(Chameleon,Box)])],
    % necessary
    [     sc(substrate,Substrate,[outsideFlexarium(Substrate)]=>[insideFlexarium(Substrate)])],
    % conditional
    []).
operator(removeDirtyNewspaper(Flexarium,Door,Chameleon,Box,Substrate),
    % prevail
    [     se(flexarium,Flexarium,[dirty(Flexarium)]),
     se(door,Door,[doorOpen(Door)]),
     se(chameleon,Chameleon,[inBox(Chameleon,Box)])],
    % necessary
    [     sc(substrate,Substrate,[insideFlexarium(Substrate)]=>[outsideFlexarium(Substrate)])],
    % conditional
    []).
operator(openBox(Box),
    % prevail
    [],
    % necessary
    [     sc(box,Box,[boxClosed(Box)]=>[boxOpen(Box)])],
    % conditional
    []).
operator(closeBox(Box),
    % prevail
    [],
    % necessary
    [     sc(box,Box,[boxOpen(Box)]=>[boxClosed(Box)])],
    % conditional
    []).

% Methods

% Domain Tasks
planner_task(1,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(flexarium,flexarium1,[clean(flexarium1)]),
     se(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     se(box,box1,[boxClosed(box1)]),
     se(substrate,newsPaper1,[outsideFlexarium(newsPaper1)]),
     se(substrate,newsPaper2,[insideFlexarium(newsPaper2)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(flexarium,flexarium1,[dirty(flexarium1)]),
     ss(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     ss(box,box1,[boxClosed(box1)]),
     ss(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     ss(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])]).
planner_task(2,
    % Goals
    [
     se(door,door1,[doorOpen(door1)]),
     se(chameleon,veiledChameleon,[inBox(veiledChameleon,box1)]),
     se(box,box1,[boxClosed(box1)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     ss(box,box1,[boxClosed(box1)])]).
planner_task(3,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(flexarium,flexarium1,[clean(flexarium1)]),
     se(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     se(box,box1,[boxClosed(box1)]),
     se(box,box2,[boxClosed(box2)]),
     se(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     se(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(flexarium,flexarium1,[clean(flexarium1)]),
     ss(chameleon,veiledChameleon,[inBox(veiledChameleon,box1)]),
     ss(box,box1,[boxClosed(box1)]),
     ss(box,box2,[boxClosed(box2)]),
     ss(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     ss(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])]).
planner_task(4,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(flexarium,flexarium1,[dirty(flexarium1)]),
     se(chameleon,veiledChameleon,[inBox(veiledChameleon,box2)]),
     se(box,box1,[boxClosed(box1)]),
     se(box,box2,[boxClosed(box2)]),
     se(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     se(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(flexarium,flexarium1,[dirty(flexarium1)]),
     ss(chameleon,veiledChameleon,[inBox(veiledChameleon,box1)]),
     ss(box,box1,[boxClosed(box1)]),
     ss(box,box2,[boxClosed(box2)]),
     ss(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     ss(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])]).
planner_task(5,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(box,box1,[boxClosed(box1)]),
     se(box,box2,[boxClosed(box2)])],
    % INIT States
    [
     ss(door,door1,[doorOpen(door1)]),
     ss(box,box1,[boxOpen(box1)]),
     ss(box,box2,[boxOpen(box2)])]).
planner_task(6,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(flexarium,flexarium1,[clean(flexarium1)]),
     se(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     se(box,box1,[boxClosed(box1)]),
     se(box,box2,[boxClosed(box2)]),
     se(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     se(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(flexarium,flexarium1,[dirty(flexarium1)]),
     ss(chameleon,veiledChameleon,[inBox(veiledChameleon,box2)]),
     ss(box,box1,[boxClosed(box1)]),
     ss(box,box2,[boxClosed(box2)]),
     ss(substrate,newsPaper1,[outsideFlexarium(newsPaper1)]),
     ss(substrate,newsPaper2,[insideFlexarium(newsPaper2)])]).
planner_task(7,
    % Goals
    [
     se(door,door1,[doorClosed(door1)]),
     se(flexarium,flexarium1,[clean(flexarium1)]),
     se(chameleon,veiledChameleon,[inHands(veiledChameleon)]),
     se(box,box1,[boxClosed(box1)]),
     se(box,box2,[boxClosed(box2)]),
     se(substrate,newsPaper1,[outsideFlexarium(newsPaper1)]),
     se(substrate,newsPaper2,[insideFlexarium(newsPaper2)])],
    % INIT States
    [
     ss(door,door1,[doorClosed(door1)]),
     ss(flexarium,flexarium1,[dirty(flexarium1)]),
     ss(chameleon,veiledChameleon,[inFlexarium(veiledChameleon)]),
     ss(box,box1,[boxOpen(box1)]),
     ss(box,box2,[boxOpen(box2)]),
     ss(substrate,newsPaper1,[insideFlexarium(newsPaper1)]),
     ss(substrate,newsPaper2,[outsideFlexarium(newsPaper2)])]).
</pre>
</p>

<p>
<h2 align="center"><a name="C4">PDDL Domain Plain Text</a></h2>
</p>

<p>
<pre>
; ***************************************************************************
; *  All rights reserved. Use of this software is permitted for non-commercial
; *  research purposes, and it may be copied only for that use.  All copies must
; *  include this copyright message.  This software is made available AS IS, and
; *  neither the GIPO team nor the University of Huddersfield make any warranty
; *  about the software or its performance.
; *
; *  Automatically generated PDDL Domain from  GIPO Version 3.0
; *
; *  Author: Darren
; *  Institution: University of Huddersfield
; *  Date created: Tue Nov 14 16:25:00 GMT 2006
; *  Date last modified: 2006/12/03 at 05:41:15 PM GMT
; *  Description:
; *    
; * OCL File name : chameleonWorld.ocl
; * Object Life History : chameleonWorld.gfx
; *************************************************************************

(define (domain chameleonWorld)
  (:requirements :strips :equality :typing)

  (:types  door flexarium chameleon box substrate)


  (:predicates
    (doorOpen ?door1 - door)
    (doorClosed ?door1 - door)
    (dirty ?flexarium1 - flexarium)
    (clean ?flexarium1 - flexarium)
    (inBox ?chameleon1 - chameleon ?box1 - box)
    (inHands ?chameleon1 - chameleon)
    (inFlexarium ?chameleon1 - chameleon)
    (boxOpen ?box1 - box)
    (boxClosed ?box1 - box)
    (insideFlexarium ?substrate1 - substrate)
    (outsideFlexarium ?substrate1 - substrate)
  )
  (:action takeOutFlex
       :parameters ( ?Door - door ?Chameleon - chameleon)
       :precondition (and 
            (doorOpen ?Door)
            (inFlexarium ?Chameleon)
       )
       :effect (and 
            (not (inFlexarium ?Chameleon))
            (inHands ?Chameleon)
        )
    )
  (:action putInBox
       :parameters ( ?Box - box ?Chameleon - chameleon)
       :precondition (and 
            (boxOpen ?Box)
            (inHands ?Chameleon)
       )
       :effect (and 
            (not (inHands ?Chameleon))
            (inBox ?Chameleon ?Box)
        )
    )
  (:action takeOutBox
       :parameters ( ?Box - box ?Chameleon - chameleon)
       :precondition (and 
            (boxOpen ?Box)
            (inBox ?Chameleon ?Box)
       )
       :effect (and 
            (not (inBox ?Chameleon ?Box))
            (inHands ?Chameleon)
        )
    )
  (:action putInFlex
       :parameters ( ?Door - door ?Substrate - substrate ?Flexarium - flexarium ?Chameleon - chameleon)
       :precondition (and 
            (doorOpen ?Door)
            (insideFlexarium ?Substrate)
            (clean ?Flexarium)
            (inHands ?Chameleon)
       )
       :effect (and 
            (not (inHands ?Chameleon))
            (inFlexarium ?Chameleon)
        )
    )
  (:action openDoor
       :parameters ( ?Door - door)
       :precondition 
            (doorClosed ?Door)
       :effect (and 
            (not (doorClosed ?Door))
            (doorOpen ?Door)
        )
    )
  (:action closeDoor
       :parameters ( ?Door - door)
       :precondition 
            (doorOpen ?Door)
       :effect (and 
            (not (doorOpen ?Door))
            (doorClosed ?Door)
        )
    )
  (:action time
       :parameters ( ?Flexarium - flexarium)
       :precondition 
            (clean ?Flexarium)
       :effect (and 
            (not (clean ?Flexarium))
            (dirty ?Flexarium)
        )
    )
  (:action wash
       :parameters ( ?Chameleon - chameleon ?Box - box ?Door - door ?Substrate - substrate ?Flexarium - flexarium)
       :precondition (and 
            (inBox ?Chameleon ?Box)
            (doorOpen ?Door)
            (outsideFlexarium ?Substrate)
            (dirty ?Flexarium)
       )
       :effect (and 
            (not (dirty ?Flexarium))
            (clean ?Flexarium)
        )
    )
  (:action addCleanNewspaper
       :parameters ( ?Flexarium - flexarium ?Door - door ?Chameleon - chameleon ?Box - box ?Substrate - substrate)
       :precondition (and 
            (clean ?Flexarium)
            (doorOpen ?Door)
            (inBox ?Chameleon ?Box)
            (outsideFlexarium ?Substrate)
       )
       :effect (and 
            (not (outsideFlexarium ?Substrate))
            (insideFlexarium ?Substrate)
        )
    )
  (:action removeDirtyNewspaper
       :parameters ( ?Flexarium - flexarium ?Door - door ?Chameleon - chameleon ?Box - box ?Substrate - substrate)
       :precondition (and 
            (dirty ?Flexarium)
            (doorOpen ?Door)
            (inBox ?Chameleon ?Box)
            (insideFlexarium ?Substrate)
       )
       :effect (and 
            (not (insideFlexarium ?Substrate))
            (outsideFlexarium ?Substrate)
        )
    )
  (:action openBox
       :parameters ( ?Box - box)
       :precondition 
            (boxClosed ?Box)
       :effect (and 
            (not (boxClosed ?Box))
            (boxOpen ?Box)
        )
    )
  (:action closeBox
       :parameters ( ?Box - box)
       :precondition 
            (boxOpen ?Box)
       :effect (and 
            (not (boxOpen ?Box))
            (boxClosed ?Box)
        )
    )
  )
(define (problem task1)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (dirty flexarium1)
        (inFlexarium veiledChameleon)
        (boxClosed box1)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
        )
    (:goal
      (and
        (doorClosed door1)
        (clean flexarium1)
        (inFlexarium veiledChameleon)
        (boxClosed box1)
        (outsideFlexarium newsPaper1)
        (insideFlexarium newsPaper2)
       ))
)
(define (problem task2)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (inFlexarium veiledChameleon)
        (boxClosed box1)
        )
    (:goal
      (and
        (doorOpen door1)
        (inBox veiledChameleon box1)
        (boxClosed box1)
       ))
)
(define (problem task3)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (clean flexarium1)
        (inBox veiledChameleon box1)
        (boxClosed box1)
        (boxClosed box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
        )
    (:goal
      (and
        (doorClosed door1)
        (clean flexarium1)
        (inFlexarium veiledChameleon)
        (boxClosed box1)
        (boxClosed box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
       ))
)
(define (problem task4)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (dirty flexarium1)
        (inBox veiledChameleon box1)
        (boxClosed box1)
        (boxClosed box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
        )
    (:goal
      (and
        (doorClosed door1)
        (dirty flexarium1)
        (inBox veiledChameleon box2)
        (boxClosed box1)
        (boxClosed box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
       ))
)
(define (problem task5)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorOpen door1)
        (boxOpen box1)
        (boxOpen box2)
        )
    (:goal
      (and
        (doorClosed door1)
        (boxClosed box1)
        (boxClosed box2)
       ))
)
(define (problem task6)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (dirty flexarium1)
        (inBox veiledChameleon box2)
        (boxClosed box1)
        (boxClosed box2)
        (outsideFlexarium newsPaper1)
        (insideFlexarium newsPaper2)
        )
    (:goal
      (and
        (doorClosed door1)
        (clean flexarium1)
        (inFlexarium veiledChameleon)
        (boxClosed box1)
        (boxClosed box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
       ))
)
(define (problem task7)
   (:domain chameleonWorld)
   (:objects
         door1 - door
         flexarium1 - flexarium
         veiledChameleon - chameleon
         box1 box2 - box
         newsPaper1 newsPaper2 - substrate
        )
    (:init
        (doorClosed door1)
        (dirty flexarium1)
        (inFlexarium veiledChameleon)
        (boxOpen box1)
        (boxOpen box2)
        (insideFlexarium newsPaper1)
        (outsideFlexarium newsPaper2)
        )
    (:goal
      (and
        (doorClosed door1)
        (clean flexarium1)
        (inHands veiledChameleon)
        (boxClosed box1)
        (boxClosed box2)
        (outsideFlexarium newsPaper1)
        (insideFlexarium newsPaper2)
       ))
)
</pre>
<p>

<p>
<h2 align="center"><a name="C5">Files Download Links</a></h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="chameleonWorld.ocl">
                     OCL file</a></td>
  <td align="center"><a href="chameleonWorld.gfx">
                     GFX file</a></td>
</tr>
</table>

</body>
</html>