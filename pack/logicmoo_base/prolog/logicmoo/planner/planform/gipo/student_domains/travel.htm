<html>
<body>

<p align="center">
<img src="gipo_gear.gif"
width="200" height="150">
</p>

<p>
<h1 align="center">GIPO Domain Model</h1>
</p>

<p>
<h2 align="center">Domain Details</h2>
</p>

<table width="81%">
<tr>
  <td align="center"><b>Author:</b> Mr. Filipe Governa
                     </td>
  <td align="center"><b>Name:</b> Travel
                     </td>
  <td align="right"><b>Favourite:</b> no
                     </td>
</tr>
</table>

<p>
<h2 align="center">Index</h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="#C1">
		     Life History</a></td>
  <td align="center"><a href="#C2">
		     Diagram Nodes' Properties and Constraints</a></td>
  <td align="center"><a href="#C3">
                     OCL Domain Plain Text</a></td>
  <td align="center"><a href="#C4">
		     PDDL Domain Plain Text</a></td>
  <td align="center"><a href="#C5">
		     Files Download Links</a></td>
</tr>
</table>

<p>
<h2 align="center"><a name="C1">Life History</a></h2>
</p>

<p align="center">
<img src="travellh.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C2">Diagram Nodes' Properties and Constraints</a></h2>
<h2 align="center">(alphabetical order)</a></h2>
</p>

<p align="center">
<img src="travelp&c.jpg"
width="640" height="480">
</p>

<p align="center">
<img src="travelp&c2.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C3">OCL Domain Plain Text</a></h2>
</p>

<p>
<pre>
/**
 *  All rights reserved. Use of this software is permitted for non-commercial
 *  research purposes, and it may be copied only for that use.  All copies must
 *  include this copyright message.  This software is made available AS IS, and
 *  neither the GIPO team nor the University of Huddersfield make any warranty
 *  about the software or its performance.
 *
 *  Automatically generated OCL Domain from  GIPO Version 3.0
 *
 *  Author: Filipe Governa
 *  Institution: University of Huddersfield
 *  Date created: Fri Nov 17 00:26:54 GMT 2006
 *  Date last modified: 2006/12/07 at 06:17:37 AM GMT
 *  Description:
 *    
 * Object Life History : travel.gfx
 */

domain_name(coursework).

% Sorts
sorts(primitive_sorts,[plane,loc,person,thing]).

% Objects
objects(plane,[airBerlin,ryanAir]).
objects(loc,[porto,lisbon,liverpool,stansted,linz,salzburg,palmaDeMaiorca]).
objects(person,[fil,elli]).
objects(thing,[clothes,toothbrush,laptop,dvds,camera]).

% Predicates
predicates([
    atPlace(plane),
    planelocation(plane,loc),
    personOutAt(person),
    personlocation(person,loc),
    personInPlane(person,plane),
    thingInPlane(thing,plane),
    thinglocation(thing,loc),
    thingOutAt(thing),
    loc(loc,loc)]).

% Object Class Definitions
substate_classes(plane,Plane,[
    [atPlace(Plane),planelocation(Plane,Loc)]]).
substate_classes(person,Person,[
    [personOutAt(Person),personlocation(Person,Loc)],
    [personInPlane(Person,Plane),personlocation(Person,Loc)]]).
substate_classes(thing,Thing,[
    [thingInPlane(Thing,Plane),thinglocation(Thing,Loc)],
    [thingOutAt(Thing),thinglocation(Thing,Loc)]]).

% Atomic Invariants
atomic_invariants([
    loc(porto,lisbon),
    loc(porto,liverpool),
    loc(porto,palmaDeMaiorca),
    loc(lisbon,porto),
    loc(lisbon,palmaDeMaiorca),
    loc(lisbon,stansted),
    loc(liverpool,porto),
    loc(liverpool,stansted),
    loc(stansted,liverpool),
    loc(stansted,lisbon),
    loc(stansted,linz),
    loc(linz,salzburg),
    loc(linz,stansted),
    loc(salzburg,linz),
    loc(salzburg,palmaDeMaiorca),
    loc(palmaDeMaiorca,porto),
    loc(palmaDeMaiorca,lisbon),
    loc(palmaDeMaiorca,salzburg)]).

% Implied Invariants

% Inconsistent Constraints

% Operators
operator(putIn(Person,Loc,Plane,Thing),
    % prevail
    [     se(person,Person,[personOutAt(Person),personlocation(Person,Loc)]),
     se(plane,Plane,[atPlace(Plane),planelocation(Plane,Loc)])],
    % necessary
    [     sc(thing,Thing,[thingOutAt(Thing),thinglocation(Thing,Loc)]=>[thingInPlane(Thing,Plane),thinglocation(Thing,Loc)])],
    % conditional
    []).
operator(takeOut(Person,Loc,Plane,Thing),
    % prevail
    [     se(person,Person,[personOutAt(Person),personlocation(Person,Loc)]),
     se(plane,Plane,[atPlace(Plane),planelocation(Plane,Loc)])],
    % necessary
    [     sc(thing,Thing,[thingInPlane(Thing,Plane),thinglocation(Thing,Loc)]=>[thingOutAt(Thing),thinglocation(Thing,Loc)])],
    % conditional
    []).
operator(getOut(Plane,Loc,Person),
    % prevail
    [     se(plane,Plane,[atPlace(Plane),planelocation(Plane,Loc)])],
    % necessary
    [     sc(person,Person,[personInPlane(Person,Plane),personlocation(Person,Loc)]=>[personOutAt(Person),personlocation(Person,Loc)])],
    % conditional
    []).
operator(getIn(Plane,Loc,Person),
    % prevail
    [     se(plane,Plane,[atPlace(Plane),planelocation(Plane,Loc)])],
    % necessary
    [     sc(person,Person,[personOutAt(Person),personlocation(Person,Loc)]=>[personInPlane(Person,Plane),personlocation(Person,Loc)])],
    % conditional
    []).
operator(move(Plane,LocA,LocB),
    % prevail
    [],
    % necessary
    [     sc(plane,Plane,[atPlace(Plane),planelocation(Plane,LocA),loc(LocA,LocB)]=>[atPlace(Plane),planelocation(Plane,LocB)])],
    % conditional
    [     sc(thing,Thing,[thingInPlane(Thing,Plane),thinglocation(Thing,LocA),loc(LocA,LocB)]=>[thingInPlane(Thing,Plane),thinglocation(Thing,LocB)]),
     sc(person,Person,[personInPlane(Person,Plane),personlocation(Person,LocA),loc(LocA,LocB)]=>[personInPlane(Person,Plane),personlocation(Person,LocB)])]).

% Methods

% Domain Tasks
planner_task(1,
    % Goals
    [
     se(person,fil,[personOutAt(fil),personlocation(fil,salzburg)]),
     se(thing,dvds,[thingOutAt(dvds),thinglocation(dvds,salzburg)]),
     se(thing,laptop,[thingOutAt(laptop),thinglocation(laptop,salzburg)])],
    % INIT States
    [
     ss(plane,airBerlin,[atPlace(airBerlin),planelocation(airBerlin,salzburg)]),
     ss(plane,ryanAir,[atPlace(ryanAir),planelocation(ryanAir,stansted)]),
     ss(person,fil,[personOutAt(fil),personlocation(fil,liverpool)]),
     ss(person,elli,[personOutAt(elli),personlocation(elli,salzburg)]),
     ss(thing,clothes,[thingOutAt(clothes),thinglocation(clothes,liverpool)]),
     ss(thing,toothbrush,[thingOutAt(toothbrush),thinglocation(toothbrush,liverpool)]),
     ss(thing,laptop,[thingOutAt(laptop),thinglocation(laptop,liverpool)]),
     ss(thing,dvds,[thingOutAt(dvds),thinglocation(dvds,porto)]),
     ss(thing,camera,[thingOutAt(camera),thinglocation(camera,salzburg)])]).
planner_task(2,
    % Goals
    [
     se(person,elli,[personOutAt(elli),personlocation(elli,porto)]),
     se(thing,camera,[thingOutAt(camera),thinglocation(camera,porto)])],
    % INIT States
    [
     ss(plane,airBerlin,[atPlace(airBerlin),planelocation(airBerlin,salzburg)]),
     ss(plane,ryanAir,[atPlace(ryanAir),planelocation(ryanAir,stansted)]),
     ss(person,fil,[personOutAt(fil),personlocation(fil,porto)]),
     ss(person,elli,[personOutAt(elli),personlocation(elli,salzburg)]),
     ss(thing,clothes,[thingOutAt(clothes),thinglocation(clothes,porto)]),
     ss(thing,toothbrush,[thingOutAt(toothbrush),thinglocation(toothbrush,porto)]),
     ss(thing,laptop,[thingOutAt(laptop),thinglocation(laptop,porto)]),
     ss(thing,dvds,[thingOutAt(dvds),thinglocation(dvds,porto)]),
     ss(thing,camera,[thingOutAt(camera),thinglocation(camera,salzburg)])]).
planner_task(3,
    % Goals
    [
     se(person,fil,[personOutAt(fil),personlocation(fil,linz)]),
     se(person,elli,[personOutAt(elli),personlocation(elli,linz)])],
    % INIT States
    [
     ss(plane,airBerlin,[atPlace(airBerlin),planelocation(airBerlin,salzburg)]),
     ss(plane,ryanAir,[atPlace(ryanAir),planelocation(ryanAir,stansted)]),
     ss(person,fil,[personOutAt(fil),personlocation(fil,porto)]),
     ss(person,elli,[personOutAt(elli),personlocation(elli,salzburg)]),
     ss(thing,clothes,[thingOutAt(clothes),thinglocation(clothes,porto)]),
     ss(thing,toothbrush,[thingOutAt(toothbrush),thinglocation(toothbrush,porto)]),
     ss(thing,laptop,[thingOutAt(laptop),thinglocation(laptop,porto)]),
     ss(thing,dvds,[thingOutAt(dvds),thinglocation(dvds,porto)]),
     ss(thing,camera,[thingOutAt(camera),thinglocation(camera,salzburg)])]).
</pre>
</p>

<p>
<h2 align="center"><a name="C4">PDDL Domain Plain Text</a></h2>
</p>

<p>
<pre>
; ***************************************************************************
; *  All rights reserved. Use of this software is permitted for non-commercial
; *  research purposes, and it may be copied only for that use.  All copies must
; *  include this copyright message.  This software is made available AS IS, and
; *  neither the GIPO team nor the University of Huddersfield make any warranty
; *  about the software or its performance.
; *
; *  Automatically generated PDDL Domain from  GIPO Version 3.0
; *
; *  Author: Filipe Governa
; *  Institution: University of Huddersfield
; *  Date created: Fri Nov 17 00:26:54 GMT 2006
; *  Date last modified: 2006/12/07 at 06:17:37 AM GMT
; *  Description:
; *    
; * OCL File name : travel.ocl
; * Object Life History : travel.gfx
; *************************************************************************

(define (domain coursework)
  (:requirements :strips :equality :typing :conditional-effects)

  (:types  plane loc person thing)


  (:predicates
    (atPlace ?plane1 - plane)
    (planelocation ?plane1 - plane ?loc1 - loc)
    (personOutAt ?person1 - person)
    (personlocation ?person1 - person ?loc1 - loc)
    (personInPlane ?person1 - person ?plane1 - plane)
    (thingInPlane ?thing1 - thing ?plane1 - plane)
    (thinglocation ?thing1 - thing ?loc1 - loc)
    (thingOutAt ?thing1 - thing)
    (loc ?loc1 - loc ?loc2 - loc)
  )
  (:action putIn
       :parameters ( ?Person - person ?Loc - loc ?Plane - plane ?Thing - thing)
       :precondition (and 
            (personOutAt ?Person)
            (personlocation ?Person ?Loc)
            (atPlace ?Plane)
            (planelocation ?Plane ?Loc)
            (thingOutAt ?Thing)
            (thinglocation ?Thing ?Loc)
       )
       :effect (and 
            (not (thingOutAt ?Thing))
            (thingInPlane ?Thing ?Plane)
        )
    )
  (:action takeOut
       :parameters ( ?Person - person ?Loc - loc ?Plane - plane ?Thing - thing)
       :precondition (and 
            (personOutAt ?Person)
            (personlocation ?Person ?Loc)
            (atPlace ?Plane)
            (planelocation ?Plane ?Loc)
            (thingInPlane ?Thing ?Plane)
            (thinglocation ?Thing ?Loc)
       )
       :effect (and 
            (not (thingInPlane ?Thing ?Plane))
            (thingOutAt ?Thing)
        )
    )
  (:action getOut
       :parameters ( ?Plane - plane ?Loc - loc ?Person - person)
       :precondition (and 
            (atPlace ?Plane)
            (planelocation ?Plane ?Loc)
            (personInPlane ?Person ?Plane)
            (personlocation ?Person ?Loc)
       )
       :effect (and 
            (not (personInPlane ?Person ?Plane))
            (personOutAt ?Person)
        )
    )
  (:action getIn
       :parameters ( ?Plane - plane ?Loc - loc ?Person - person)
       :precondition (and 
            (atPlace ?Plane)
            (planelocation ?Plane ?Loc)
            (personOutAt ?Person)
            (personlocation ?Person ?Loc)
       )
       :effect (and 
            (not (personOutAt ?Person))
            (personInPlane ?Person ?Plane)
        )
    )
  (:action move
       :parameters ( ?Plane - plane ?LocA - loc ?LocB - loc)
       :precondition (and 
            (atPlace ?Plane)
            (planelocation ?Plane ?LocA)
            (loc ?LocA ?LocB)
       )
       :effect (and 
            (not (planelocation ?Plane ?LocA))
            (planelocation ?Plane ?LocB)
            (forall (?Thing - thing)
              (when (and
                (thingInPlane ?Thing ?Plane)
                (thinglocation ?Thing ?LocA)
                (loc ?LocA ?LocB)
               )
              (and
                (not (thinglocation ?Thing ?LocA))
                (thinglocation ?Thing ?LocB)
               )))
            (forall (?Person - person)
              (when (and
                (personInPlane ?Person ?Plane)
                (personlocation ?Person ?LocA)
                (loc ?LocA ?LocB)
               )
              (and
                (not (personlocation ?Person ?LocA))
                (personlocation ?Person ?LocB)
               )))
        )
    )
  )
(define (problem task1)
   (:domain coursework)
   (:objects
         airBerlin ryanAir - plane
         porto lisbon liverpool stansted linz salzburg palmaDeMaiorca - loc
         fil elli - person
         clothes toothbrush laptop dvds camera - thing
        )
    (:init
        (atPlace airBerlin)
        (planelocation airBerlin salzburg)
        (atPlace ryanAir)
        (planelocation ryanAir stansted)
        (personOutAt fil)
        (personlocation fil liverpool)
        (personOutAt elli)
        (personlocation elli salzburg)
        (thingOutAt clothes)
        (thinglocation clothes liverpool)
        (thingOutAt toothbrush)
        (thinglocation toothbrush liverpool)
        (thingOutAt laptop)
        (thinglocation laptop liverpool)
        (thingOutAt dvds)
        (thinglocation dvds porto)
        (thingOutAt camera)
        (thinglocation camera salzburg)
        (loc porto lisbon)
        (loc porto liverpool)
        (loc porto palmaDeMaiorca)
        (loc lisbon porto)
        (loc lisbon palmaDeMaiorca)
        (loc lisbon stansted)
        (loc liverpool porto)
        (loc liverpool stansted)
        (loc stansted liverpool)
        (loc stansted lisbon)
        (loc stansted linz)
        (loc linz salzburg)
        (loc linz stansted)
        (loc salzburg linz)
        (loc salzburg palmaDeMaiorca)
        (loc palmaDeMaiorca porto)
        (loc palmaDeMaiorca lisbon)
        (loc palmaDeMaiorca salzburg)
        )
    (:goal
      (and
        (personOutAt fil)
        (personlocation fil salzburg)
        (thingOutAt dvds)
        (thinglocation dvds salzburg)
        (thingOutAt laptop)
        (thinglocation laptop salzburg)
       ))
)
(define (problem task2)
   (:domain coursework)
   (:objects
         airBerlin ryanAir - plane
         porto lisbon liverpool stansted linz salzburg palmaDeMaiorca - loc
         fil elli - person
         clothes toothbrush laptop dvds camera - thing
        )
    (:init
        (atPlace airBerlin)
        (planelocation airBerlin salzburg)
        (atPlace ryanAir)
        (planelocation ryanAir stansted)
        (personOutAt fil)
        (personlocation fil porto)
        (personOutAt elli)
        (personlocation elli salzburg)
        (thingOutAt clothes)
        (thinglocation clothes porto)
        (thingOutAt toothbrush)
        (thinglocation toothbrush porto)
        (thingOutAt laptop)
        (thinglocation laptop porto)
        (thingOutAt dvds)
        (thinglocation dvds porto)
        (thingOutAt camera)
        (thinglocation camera salzburg)
        (loc porto lisbon)
        (loc porto liverpool)
        (loc porto palmaDeMaiorca)
        (loc lisbon porto)
        (loc lisbon palmaDeMaiorca)
        (loc lisbon stansted)
        (loc liverpool porto)
        (loc liverpool stansted)
        (loc stansted liverpool)
        (loc stansted lisbon)
        (loc stansted linz)
        (loc linz salzburg)
        (loc linz stansted)
        (loc salzburg linz)
        (loc salzburg palmaDeMaiorca)
        (loc palmaDeMaiorca porto)
        (loc palmaDeMaiorca lisbon)
        (loc palmaDeMaiorca salzburg)
        )
    (:goal
      (and
        (personOutAt elli)
        (personlocation elli porto)
        (thingOutAt camera)
        (thinglocation camera porto)
       ))
)
(define (problem task3)
   (:domain coursework)
   (:objects
         airBerlin ryanAir - plane
         porto lisbon liverpool stansted linz salzburg palmaDeMaiorca - loc
         fil elli - person
         clothes toothbrush laptop dvds camera - thing
        )
    (:init
        (atPlace airBerlin)
        (planelocation airBerlin salzburg)
        (atPlace ryanAir)
        (planelocation ryanAir stansted)
        (personOutAt fil)
        (personlocation fil porto)
        (personOutAt elli)
        (personlocation elli salzburg)
        (thingOutAt clothes)
        (thinglocation clothes porto)
        (thingOutAt toothbrush)
        (thinglocation toothbrush porto)
        (thingOutAt laptop)
        (thinglocation laptop porto)
        (thingOutAt dvds)
        (thinglocation dvds porto)
        (thingOutAt camera)
        (thinglocation camera salzburg)
        (loc porto lisbon)
        (loc porto liverpool)
        (loc porto palmaDeMaiorca)
        (loc lisbon porto)
        (loc lisbon palmaDeMaiorca)
        (loc lisbon stansted)
        (loc liverpool porto)
        (loc liverpool stansted)
        (loc stansted liverpool)
        (loc stansted lisbon)
        (loc stansted linz)
        (loc linz salzburg)
        (loc linz stansted)
        (loc salzburg linz)
        (loc salzburg palmaDeMaiorca)
        (loc palmaDeMaiorca porto)
        (loc palmaDeMaiorca lisbon)
        (loc palmaDeMaiorca salzburg)
        )
    (:goal
      (and
        (personOutAt fil)
        (personlocation fil linz)
        (personOutAt elli)
        (personlocation elli linz)
       ))
)
</pre>
<p>

<p>
<h2 align="center"><a name="C5">Files Download Links</a></h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="travel.ocl">
                     OCL file</a></td>
  <td align="center"><a href="travel.gfx">
                     GFX file</a></td>
</tr>
</table>

</body>
</html>