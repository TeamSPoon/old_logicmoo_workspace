(define (init1)
  (aircraft plane1) (aircraft plane2) (aircraft plane3) (person person1)
  (person person2) (person person3) (person person4) (person person5) (person person6)
  (city city0) (city city1) (city city2) (city city3) (city city4)
  (flevel fl0) (flevel fl1) (flevel fl2) (flevel fl3) (flevel fl4) (flevel fl5) (flevel fl6)
  (at plane1 city0)  (fuel-level plane1 fl6)
  (at plane2 city3)  (fuel-level plane2 fl0)
  (at plane3 city0)  (fuel-level plane3 fl3)
  (at person1 city1)  (at person2 city0)
  (at person3 city2)  (at person4 city0)
  (at person5 city3)  (at person6 city4)
  (thenext fl0 fl1)  (thenext fl1 fl2)
  (thenext fl2 fl3)  (thenext fl3 fl4)
  (thenext fl4 fl5)  (thenext fl5 fl6)
  )


(set-goal-type extended)


(define (control-useplane)
  (always (forall (?t) (aircraft ?t)
		  (implies (and (empty ?t)
				(exists (?l) (at ?t ?l)
					(next (exists (?l1) 
						      (at ?t ?l1) 
						      (not (= ?l ?l1))))))
			   (next (next (not (empty ?t))))))))

  

(define (control-fuel) 
  (always (forall (?a) (aircraft ?a)
		  (?l1) (flevel ?l1) 
		  (?l2) (flevel ?l2) 
		  (implies (and (thenext ?l1 ?l2) (fuel-level ?a ?l1) (next (fuel-level ?a ?l2)))
			   (= ?l1 fl0))))) ; you can only refuel if you don't have fuel!
			      

(define (control-only1)
 (always
  (forall (?x ?y) (in ?x ?y) (= ?x person1))))

(define (control-only2)
 (always
  (forall (?x ?y) (in ?x ?y) (= ?x person2))))


(define (control-only12)
 (always
  (forall (?x ?y) (in ?x ?y) (or (= ?x person1) (= ?x person2)))))

(define (control-only13)
 (always
  (forall (?x ?y) (in ?x ?y) (or (= ?x person1) (= ?x person3)))))

(define (control-only123)
 (always
  (forall (?x ?y) (in ?x ?y) (or (= ?x person1) (= ?x person2) (= ?x person3)))))



; touring of person 1

(define (goal1)
  (eventually (always (at person1 city3))))

(define (goal2)
  (eventually (and (at person1 city2)
		   (next (eventually (at person1 city3))))))

(define (goal3)
  (eventually (and (at person1 city2)
		   (next (eventually (and (at person1 city3)
					  (next (eventually (at person1 city4)))))))))
(define (goal4)
  (eventually (and (at person1 city2)
		   (next (eventually (and (at person1 city3)
					  (next (eventually (and (at person1 city4)
								 (next (eventually (at person1 city0))))))))))))
		   
  
; touring of person 1 & person 2

(define (goal5)
  (and 
   (eventually (always (at person1 city3)))
   (eventually (always (at person2 city3)))))
   
  

(define (goal6)
  (and 
   (eventually (and (at person1 city2)
		    (next (eventually (at person1 city3)))))
   (eventually (and (at person2 city3)
		    (next (eventually (at person2 city2)))))))
   

(define (goal7)
  (and
   (eventually (and (at person1 city2)
		    (next (eventually (and (at person1 city3)
					   (next (eventually (at person1 city4))))))))
   (eventually (and (at person2 city4)
		    (next (eventually (and (at person2 city3)
					   (next (eventually (at person2 city2))))))))))


;; the touring of the planes
; plane 1 must travel to city 2 and then city 3


(define (goal8)
  (until (at plane1 city0) 
	 (and (at plane1 city2) 
	      (until (at plane1 city2) 
		     (and (at plane1 city3)
			  (until (at plane1 city3)
				 (at plane1 city0)))))))


(define (goal9)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 3 does 0->2->0
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city0))))
   )
  )

(define (goal10)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 3 does 0->2->0
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city0))))

   (until (at plane3 city0)    ; plane 5 does 0->4->0
	  (and (at plane3 city4) 
	       (until (at plane3 city4) 
		      (at plane3 city0)))))
  )



;; the touring of the planes + touring of people
; plane 1 must travel to city 2 and then city 3


(define (goal11)
  (and 
   (until (at plane1 city0)    ; plane 1 0->2->3
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city3))))
   (eventually (always (at person1 city3)))))

(define (goal11a)
  (and 
   (until (at plane1 city0)    ; plane 1 0->2->3
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city3))))
   (eventually (always (at person1 city3)))
   (eventually (always (at person3 city3)))
   )
  )


(define (goal12)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 1 does 0->2->0
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city0))))
   (eventually (always (at person1 city3)))
   )
  )


(define (goal12a)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 3 does 0->2->0
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city0))))
   (eventually (always (at person1 city3)))
   (eventually (always (at person3 city3)))
   )
  )



(define (goal13)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 3 does 0->2->0
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city0))))

   (until (at plane3 city0)    ; plane 5 does 0->4->0
	  (and (at plane3 city4) 
	       (until (at plane3 city4) 
		      (at plane3 city0))))
   (eventually (always (at person1 city3)))
   )
  
  )

(define (goal13a)
  (and
   (until (at plane2 city3)    ; plane 2 does 3->2->3
	  (and (at plane2 city2) 
	       (until (at plane2 city2) 
		      (at plane2 city3))))

   (until (at plane1 city0)    ; plane 3 does 0->2->0
	  (and (at plane1 city2) 
	       (until (at plane1 city2) 
		      (at plane1 city0))))

   (until (at plane3 city0)    ; plane 5 does 0->4->0
	  (and (at plane3 city4) 
	       (until (at plane3 city4) 
		      (at plane3 city0))))
   (eventually (always (at person1 city3)))
   (eventually (always (at person3 city3)))
   )
  )



; some first-order goals

(define (goal14)    ; all planes must be in city 4 and then return
  (and
   (forall (?p) (aircraft ?p)
	   (eventually (at ?p city4)))
   (forall (?p) (aircraft ?p)
	   (?y) (city ?y)
	   (implies (at ?p ?y) 
		    (eventually (always (at ?p ?y)))))))

	   

(define (goal14a)    ; all planes must be in city 4 and then return
  (and

   (forall (?p) (aircraft ?p)
	   (eventually (at ?p city4)))
   (forall (?p) (aircraft ?p)
	   (?y) (city ?y)
	   (implies (at ?p ?y) 
		    (eventually (always (at ?p ?y)))))
   (eventually (always (at person1 city3)))))


(define (goal14b)    ; all planes must be in city 4 and then return
  (and
   (forall (?p) (aircraft ?p)
	   (eventually (at ?p city4)))
   (forall (?p) (aircraft ?p)
	   (?y) (city ?y)
	   (implies (at ?p ?y) 
		    (eventually (always (at ?p ?y)))))
   (eventually (always (at person1 city3)))))


(define (goal14c)    ; all planes must be in city 4 and then return
  (and
   (forall (?p) (aircraft ?p)
	   (eventually (at ?p city4)))
   (forall (?p) (aircraft ?p)
	   (?y) (city ?y)
	   (implies (at ?p ?y) 
		    (eventually (always (at ?p ?y)))))
   (eventually (always (at person1 city3)))
   (eventually (always (at person3 city4)))
   )
)


(define (goal15)  ; persons1 & person2 meet somewhere and then go to city4& city5
  (exists (?c) (city ?c)
	  (and
	   (eventually (and (at person1 ?c) 
			    (at person2 ?c)
			    (eventually (always (and (at person1 city4)
						      (at person2 city3)))))))))

(define (goal15a)
    (exists (?c) (city ?c)
	  (and
	   (eventually (and (at person1 ?c) 
			    (at person2 ?c)
			    (at person3 ?c)
			    (eventually (always (and (at person1 city4)
						     (at person2 city3)))))))))

(define (goal15b)
    (exists (?c) (city ?c)
	  (and
	   (eventually (and (at person1 ?c) 
			    (at person2 ?c)
			    (at person3 ?c)
			    (eventually (always (and (at person1 city4)
						     (at person2 city3)
						     (at person1 city1)))))))))



(define (goal16)
  (and 
   (eventually (and (at person1 city1) 
		    (at person2 city1)
		    (next (eventually (and 
				       (at person1 city2)
				       (at person2 city2))))))
   (forall (?c) 
	   (at person1 ?c)      ; person 1 returns home
	   (and
	    (eventually (always (at person1 ?c)))))


   (forall (?c) 
	   (at person1 ?c)      ; person 2 returns home
	   (and
	    (eventually (always (at person1 ?c)))))
   )
  )



(define (goal17)
  (forall (?c) (city ?c) 
	  (eventually (at person1 ?c)))) ; person1 visits all cities



(define (goal18)
  (and 
   (forall (?c) (city ?c) 
	   (eventually (at person1 ?c))) ; person1 visits all cities
   (forall (?c) (city ?c) 
	   (eventually (at person2 ?c)))) ; person2 visits all cities
)


(define (goal18a)
  (and 
   (forall (?c) (city ?c) 
	   (eventually (at person1 ?c))) ; person1 visits all cities
   (forall (?c) (city ?c) 
	   (eventually (at person2 ?c))) ; person2 visits all cities

   
   (next (next (next (always (forall (?c) (at person1 ?c) (at person2 ?c))))))) ; since time step 3, they're always together

  )

(define (goal19)
  (and
   (eventually (forall (?p) (person ?p) (at ?p city3)))
   (forall (?p) (person ?p)
	   (?y) (city ?y)
	   (implies (at ?p ?y) 
		    (eventually (always (at ?p ?y)))))))

   

