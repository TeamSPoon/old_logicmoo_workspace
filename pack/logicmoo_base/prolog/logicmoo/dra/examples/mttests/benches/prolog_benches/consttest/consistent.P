:- compiler_options([xpp_on]).

%#include "maxint.h"

:- import member/2,append/3,flatten/2,length/2 from basics.
:- ensure_loaded(allentable).
:- dynamic interval_length/2.
:- ensure_loaded(arcs).
:- ensure_loaded(prototype3).
:- ensure_loaded(timeconsttest).


%:- index(arc/3,[1,2]).
:- index(arc/3,trie).

check_consistency:- 
	get_nodes(Nodes),length(Nodes,N),
%	writeln(nodes_in_system(N)),
	setof((I,J),(member(I,Nodes),member(J,Nodes),
	             \+(I = J)),Edges),
	check_consistency(Edges,Nodes).

check_consistency([],_Nodes).
check_consistency([(I,J)|Rest],Nodes):- 
%	writeln(checking((I,J))),
	setof(K,(member(K,Nodes),
	             \+(I = K),\+(J = K)),IJNodes),
	check_consistency_k(IJNodes,(I,J),Rest,RestOut),
	check_consistency(RestOut,Nodes).

check_consistency_k([],_,Rest,Rest).
check_consistency_k([K|Krest],(I,J),Rest,RestOut):- 
%	writeqln('   check_triple'(I,J,K)),
	check_triple(I,J,K,Rest,RestMid1),
%	writeqln('   check_triple'(K,I,J)),
	check_triple(K,I,J,RestMid1,RestMid),
	check_consistency_k(Krest,(I,J),RestMid,RestOut).

check_triple(I,J,K,Rest,RestMid):- 
%        ((I = 'day 15',J = 'cycle 5',K = 'event x') -> trace ; true),
	meta_arc(I,K,Const_IK),
	revise(I,J,K,RevConst),
	(RevConst = Const_IK -> 
	  RestMid = Rest
	; RevConst \== [],
	  append(Rest,[(I,K)],RestMid),
	  retract_the_arc(I,K),
%	  writeln('         asserting'(I,K,RevConst)),
	  assert(arc(I,K,RevConst))).

retract_the_arc(I,K):- 
	arc(I,K,_) -> retractall(arc(I,K,_)) ; retractall(arc(K,I,_)).

revise(I,J,K,RevConst):- 
	meta_arc(I,J,Const_IJ),
	meta_arc(I,K,Const_IK),
	meta_arc(J,K,Const_JK),
%	nl,writeln(pcompose([I,J,K],Const_IJ,Const_JK,CompConst_IK)),
	compose(Const_IJ,Const_JK,CompConst_IK,J),
%	writeln('  acompose'(Const_IJ,Const_JK,CompConst_IK)),
%	writeln(callingord_intersection(Const_IK,CompConst_IK,RevConst)),
	ord_intersection(Const_IK,CompConst_IK,RevConst).
%	check_interval_length(I,J,K,RevConst1,RevConst).

% Compose operator is changed from typical use for allen constraints.
% If compose produces a list with, say
% ...before([3,5]),before([4,6])... we need to widen to before([3,5])
% since at the return of compise, the list has a disjunctive meaning.
compose(Const_IJ,Const_JK,CompIK,J):- 
	findall(CIK,(member(CIJ,Const_IJ),
	             member(CJK,Const_JK),
		     meta_cons_tri(CIJ,CJK,CIK,J)),CompIK_1),
        flatten(CompIK_1,CompIK2),
        sort(CompIK2,CompIK3),
	qwiden(CompIK3,CompIK).

meta_cons_tri(CIJ,CJK,CIK,J):- cons_tri(CIJ,CJK,J,CIK),!.
meta_cons_tri(CIJ,CJK,CIK,_J):- cons_tri(CIJ,CJK,CIK).

qwiden([],[]).
qwiden([before(Narrow)|T],[before(Wide)|T1]):- !,
	qwiden_before(T,Narrow,Tnew,Wide),
	qwiden(Tnew,T1).
qwiden([after(Narrow)|T],[after(Wide)|T1]):- !,
	qwiden_after(T,Narrow,Tnew,Wide),
	qwiden(Tnew,T1).
qwiden([H|T],[H|T1]):- 
	qwiden(T,T1).

qwiden_before([],Narrow,[],Narrow).
qwiden_before([before([F,T])|Tail],[F1,T1],Tail1,NarrowOut):- !,
	Fnew is min(F,F1),
	Tnew is max(T,T1),
	qwiden_before(Tail,[Fnew,Tnew],Tail1,NarrowOut).
qwiden_before([H|Tail],Narrow,[H|Tail],Narrow).

qwiden_after([],Narrow,[],Narrow).
qwiden_after([after([F,T])|Tail],[F1,T1],Tail1,NarrowOut):- !,
	Fnew is min(F,F1),
	Tnew is max(T,T1),
	qwiden_after(Tail,[Fnew,Tnew],Tail1,NarrowOut).
qwiden_after([H|Tail],Narrow,[H|Tail],Narrow).

%------------------------------------

% ord_intersection assumes 2 sorted lists, in which quantitative
% constraints have been widened, so that there is at most 1 before()
% and after() in each list.  When quantative constraints are compared,
% the interval is narrowed, as the intersection has a conjunctive
% interpretation of the lists.

ord_intersection(F,F,F):-!.
ord_intersection(One,Two,Three):- 
	ord_intersection_sub(One,Two,Three).

ord_intersection_sub([], _, []).
ord_intersection_sub([Head1|Tail1], Set2, Intersection) :-
	ord_intersection3(Set2, Head1, Tail1, Intersection).

ord_intersection3(<, _, Set1, Head2, Tail2, Intersection) :-
	ord_intersection3(Set1, Head2, Tail2, Intersection).
ord_intersection3(=, Head, Tail1, _, Tail2, [Head|Intersection]) :-
	ord_intersection_sub(Tail1, Tail2, Intersection).
ord_intersection3(>, Head1, Tail1, _, Set2, Intersection) :-
	ord_intersection3(Set2, Head1, Tail1, Intersection).

% could be a disjunction, but is used in three places
ord_intersection3([], _, _, []).
ord_intersection3([Head2|Tail2], Head1, Tail1, Intersection) :-
	qcompare(Head1,Head2,Tail1,Tail2,Intersection).

qcompare(after(I1),after(I2),Tail1,Tail2,[after(I3)|Intersection]):-!,
    compare_intervals(I1,I2,I3),
    ord_intersection_sub(Tail1, Tail2, Intersection).
qcompare(before(I1),before(I2),Tail1,Tail2,[before(I3)|Intersection]):-!,
    compare_intervals(I1,I2,I3),
    ord_intersection_sub(Tail1, Tail2, Intersection).
qcompare(H1,H2,Tail1,Tail2,Intersection):-
	compare(Order, H1, H2),
	ord_intersection3(Order, H1, Tail1, H2, Tail2, Intersection).

compare_intervals([F1,T1],[F2,T2],[F3,T3]):- 
	F3 is max(F1,F2),
	T3 is min(T1,T2),
	F3 =< T3.


add(T,T1,T2):- 
	(T1 == 100000 -> 
	    T2 = 100000
	  ; (T == 100000 -> 
	       T2 = 100000 
	     ; T2 is T + T1) ).

subtract(T,T1,T2):- 
	(T == 100000 -> 
	    T2 = 100000
	  ; (T1 == 100000 -> 
	       writeln('Subtracting 100000')
	     ; T2 is T - T1) ).

%------------------------------------

%check_interval_length(I,J,K,RevConst1,RevConst).

%------------------------------------

get_nodes(Nodes):- 
	findall(X,(arc(X,Y,_) ; arc(Y,X,_)),NodesIn),
	sort(NodesIn,Nodes).

meta_arc(X,Y,Constraint):- 
	arc(X,Y,Constraint),!.
meta_arc(X,Y,Constraint):- 
	arc(Y,X,Const_Inv),inverse_list(Const_Inv,Cons_Inv1),sort(Cons_Inv1,Constraint),!.
%meta_arc(_X,_Y,[contains,during,equals,finished_by,
%	        finishes,meets,	met_by,	overlapped_by, overlaps,
%		started_by,starts,after([1,100000]),before([1,100000])]).
meta_arc(_X,_Y,[contains,during,equals,finished_by,
	        finishes,overlapped_by, overlaps,
		started_by,starts,after([0,100000]),before([0,100000])]).

take_inverse(In,Out):- 
	In = [_H|_T] -> 
	  inverse_list(In,Mid),sort(Mid,Out)
        ; inverse(In,Out).

inverse_list([],[]).
inverse_list([Const|R],[Inv|InvR]):- 
	inverse(Const,Inv),
	inverse_list(R,InvR).

%inverse(after,before).
%inverse(before,after).
inverse(after(I),before(I)).
inverse(before(I),after(I)).
inverse(contains,during).
inverse(during,contains).
inverse(equals,equals).
inverse(overlaps,overlapped_by).
inverse(overlapped_by,overlaps).
%inverse(meets,met_by).
%inverse(met_by,meets).
inverse(starts,started_by).
inverse(started_by,starts).
inverse(finishes,finished_by).
inverse(finished_by,finishes).

%--------------------------------------------------------------------------
% For testing.

cc(Z):- cputime(X),check_consistency,cputime(Y),Z is Y - X.

writeqln(X):- writeq(X),nl.

compare:- 
	setof(Z,old_cons_tri(X,Y,Z),Zold),
	setof(Z,cons_tri(X,Y,Z),Znew1),
	flatten(Znew1,Znew2),
	atomize(Znew2,Znew3),
	sort(Znew3,Znew),
	(Zold = Znew -> 
	    true
	  ; writeln(diff(X,Y,Zold,Znew))),
	fail.

atomize([],[]).
atomize([before(_)|T],[before|T1]):- !,
	atomize(T,T1).
atomize([after(_)|T],[after|T1]):- !,
	atomize(T,T1).
atomize([H|T],[H|T1]):- !,
	atomize(T,T1).


% test to make sure there is a cons_tri for every pair of interval relations.
tabletest1:- 
	List = [contains,during,equals,finished_by,
	        finishes,overlapped_by, overlaps,
		started_by,starts,after([1,100000]),before([1,100000]),
		after([0,0]),before([0,0])],
	member(X,List),
	member(Y,List),
	(cons_tri(X,Y,_) -> 
	    true
	  ; writeln(no(cons_tri(X,Y,_))) ),
	fail.
tabletest1.

% test to make sure any cons_tri third-argument list is sorted (this is important
% for comparison.
tabletest2:- 
	List = [contains,during,equals,finished_by,
	        finishes,overlapped_by, overlaps,
		started_by,starts,after([1,100000]),before([1,100000]),
		after([0,0]),before([0,0])],
	member(X,List),
	member(Y,List),
	cons_tri(X,Y,L),
	(L = [_|_] -> sort(L,L2Sort) ; L2Sort = L),
	(L2Sort = L -> 
	    true
	  ; writeln(no(cons_tri(X,Y,L))) ),
	fail.
tabletest2.

% test to make sure we don't have extra-redundant cons_tri's
tabletest3:- 
	List = [contains,during,equals,finished_by,
	        finishes,overlapped_by, overlaps,
		started_by,starts,after([1,100000]),before([1,100000]),
		after([0,0]),before([0,0])],
	member(X,List),
	member(Y,List),
	(cons_tri(X,Y,L),cons_tri(X,Y,L1),\+ (L1 = L) -> 
	    writeln(double(cons_tri(X,Y,L,L1)))
	  ; true),
	fail.
tabletest3.

% test to make sure inverse relations give inverse results.
tabletest4:- 
	List = [contains,during,equals,finished_by,
	        finishes,overlapped_by, overlaps,
		started_by,starts,after([1,100000]),before([1,100000]),
		after([0,0]),before([0,0])],
	member(X,List),
	member(Y,List),
	inverse(X,Xinv),	inverse(Y,Yinv),
	cons_tri(X,Y,L1),
	cons_tri(Yinv,Xinv,L2),
	take_inverse(L1,Linv),
	(L2 = [_|_] -> sort(L2,L2Sort) ; L2Sort = L2),
	(L2Sort = Linv -> 
	    true
	 ;  writeln(cons_tri(X,Y,L1,Xinv,Yinv,L2Sort,Linv))),
	fail.
tabletest4.
