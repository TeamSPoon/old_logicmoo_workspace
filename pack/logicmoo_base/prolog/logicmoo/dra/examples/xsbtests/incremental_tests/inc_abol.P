
:- import trie_create/2, trie_intern/2, incr_trie_intern/2, 
	trie_interned/2 from intern.

:- import incr_assert/1,incr_retractall/1,incr_assert_inval/1,
	  incr_table_update/0,incr_retract_inval/1 from increval.

test:- 
	(xsb_configuration(engine_mode,'multi-threading') -> 
	    load_dync(inc_abol_old),
	    (incr(X),write(incr(X)),writeln('.'),fail ; true)
	 ;  test_seq).

%-----------

:- table pt/3 as incremental.
pt(T,X,Y) :- 
%	writeln(executing(pt(T,X,Y))),
	trie_interned(qt(X,Y),T),Y =< 5.

%-----------

:- table n/2 as incremental.
n(X,Y) :- p(X,Y),Y < 5.

:- table p/2 as incremental.
p(X,Y) :- q(X,Y),Y =< 5.

:- dynamic q/2 as incremental.
q(a,1).
q(b,3).
q(c,5).
q(d,7).

%-----------

:- dynamic qat/2 as incremental.
:- index(qat/2,trie).

:- table pat/2 as incremental.
pat(X,Y) :- qat(X,Y),Y =< 5.

%-----------

test_seq:- test_trie_abol,fail.
test_seq:- test_dyn_abol,fail.
test_seq:- test_tdyn_abol,fail.
test_seq.

incr_writeln(Term):- write(incr(Term)),writeln('.').

test_trie_abol:- 
	trie_create(T,[incremental]),
	trie_intern(qt(a,1),T),	trie_intern(qt(b,3),T),
	trie_intern(qt(c,5),T),trie_intern(qt(d,7),T),
	pt(T,X,Y),incr_writeln(first_pt(T,X,Y)),
	fail.
test_trie_abol:- abolish_all_tables,fail.
test_trie_abol:- incr_trie_intern(1,qt(d,4)),fail.
test_trie_abol:- pt(1,X,Y),incr_writeln(second_pt(1,X,Y)),fail.
test_trie_abol.

%-----------

% test abolish_all + regular asserts.
test_dyn_abol:- p(X,Y),incr_writeln(first_p(X,Y)),fail.
test_dyn_abol:- abolish_all_tables,fail.
test_dyn_abol:- incr_assert(q(d,4)),fail.
test_dyn_abol:- p(X,Y),incr_writeln(second_p(X,Y)),fail.
test_dyn_abol.

%-----------

test_tdyn_abol:- assert(qat(a,1)),assert(qat(b,2)),assert(qat(c,5)),assert(qat(d,7)),fail.
test_tdyn_abol:- pat(X,Y),incr_writeln(first_pat(X,Y)),fail.
test_tdyn_abol:- abolish_all_tables,fail.
test_tdyn_abol:- incr_assert(qat(d,4)),fail.
test_tdyn_abol:- pat(X,Y),incr_writeln(second_pat(X,Y)),fail.
test_tdyn_abol.

%-----------


end_of_file.

