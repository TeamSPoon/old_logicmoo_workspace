
/* Not a test of incremental tabling, but put here so its not tested by mt engine */

:- import timed_call/2,abort_level/1 from standard.
:- import conset/2, conget/2 from machine.
:- import xsb_backtrace/1 from machine.
:- import get_backtrace_list/2 from error_handler.

test:- catch(tc_1,error(E,context(M,_)),writeln(caught(E,M))),fail.
test:- catch(tc_2,error(E,context(M,_)),writeln(caught(E,M))),fail.
test:- catch(tc_3,error(E,context(M,_)),writeln(caught(E,M))),fail.
test:- catch(tc_nest,error(E,context(M,_)),writeln(caught(E,M))),fail.
test:-  catch(timed_call(true,[]),error(E,context(M,_)),writeln(caught_dummy(E,M))),fail.
test.

tc_1:- 
       timed_call(loop,[max(200,mycall_1)]).

mycall_1:- writeln('tc_1: mycall!!!'),abort.

tc_2:- conset(mycall_number,0),
	timed_call(loop,[repeating(200,mycall2)]).

mycall2:- update_mycall_number(N),
	  (N >= 5 -> 
	   abort(tc_2:enough_of_this)
	  ; 
	    writeln('tc_2 interrupt'(N)) ).

update_mycall_number(N1):-
	conget(mycall_number,N),
	N1 is N + 1,
	conset(mycall_number,N1).
	
tc_3:- timed_call(loop,[repeating(200,myrep_3),max(1000,mymax_3)]).

myrep_3:- writeln('tc_3 heres an interrupt').
mymax_3:- abort('tc_3 phew!').

tc_nest:- timed_call(
	            timed_call(writeln(nested_call),1000,writeln(nested_handler)),
		    1000,
		    writeln(outer_call)).

tc_4:- 
       timed_call(loop,200,backtrace).

:- import xsb_backtrace/1 from machine.
:- import get_backtrace_list/2 from error_handler.
backtrace:- xsb_backtrace(Bt),writeln(Bt),Bt = [Bt1],writeln(Bt1),get_backtrace_list(Bt1,Print),writeln(Print),abort.

tc_5:- conset(mycall_number,0),
       timed_call(loop(40000000),[repeating(200,mycall_5)]).

mycall_5:- update_mycall_number(N),
           writeln('tc_5 interrupt'(N)),
	   (N >= 5 -> abort(tc_5:enough_of_this)
 	    ; N = 3 -> break
	    ; true  ).

tc_5_2:- conset(mycall_number_5_2,0),
	timed_call(loop,[repeating(200,mycall_5_2)]).

mycall_5_2:- update_mycall_number_5_2(N),
	  (N >= 5 -> abort_level(tc_5_2:enough_of_this)
	  ; 
	    writeln('tc_5_2 interrupt'(N)) ).

update_mycall_number_5_2(N1):-
	conget(mycall_number_5_2,N),
	N1 is N + 1,
	conset(mycall_number_5_2,N1).

loop:- loop.

loop(0):- !.
loop(N) :- N1 is N - 1,loop(N1).
