:- import numbervars/1 from num_vars.
:- import member/2 from basics.

:- import get_incr_sccs/2 from increval.
:- import get_incr_sccs/1 from increval.

test:- test1,fail.
test:- test1a,fail.
test:- test1d,fail.
test:- test2,fail.
test:- test3,fail.
test:- test4,fail.
test:- test5,fail.
test:- test6,fail.
test:- test7,fail.
test:- test8,fail.
test:- test8a,fail.
test:- test9,fail.
test.

check_graph(S,G,Label):- 
	sort(S,Ssort),
	numbervars(S),
%	write_canonical(Ssort),nl,
	(Ssort = G -> writeln(succeeded(Label)) ; writeln(failed(Label))). 

:- dynamic p/1 as incremental.
:- dynamic q/1 as incremental.

% Tree, starting from bottom
test1:- t1_5(_),fail.
test1:- get_incr_sccs([t1_1(_X)],S),
	check_graph(S,[ret(t1_1('$VAR'(3)),4),ret(t1_2(1),6),
		       ret(t1_2(2),5),ret(t1_3('$VAR'(2)),3),
		       ret(t1_4('$VAR'(1)),2),ret(t1_5('$VAR'(0)),1)],test1),fail.
test1:- abolish_all_tables.

% No call
test1a:- get_incr_sccs([t1_1(_X)],_S),write(failed(test1a)),fail.
%	check_graph(S,[ret(t1_1('$VAR'(3)),4),ret(t1_3('$VAR'(2)),3),
%			ret(t1_4('$VAR'(1)),2),ret(t1_5('$VAR'(0)),1)],test1),fail.
test1a:- abolish_all_tables.

% Tree, starting from top
test1d:- t1_5(_),fail.
test1d:- get_incr_sccs([t1_5(_X)],S),
	 check_graph(S,[ret(t1_1('$VAR'(3)),4),ret(t1_2(1),6),ret(t1_2(2),5),
	                 ret(t1_3('$VAR'(2)),3),ret(t1_4('$VAR'(1)),2),
			 ret(t1_5('$VAR'(0)),1)],test1d),fail.
test1d:- abolish_all_tables.

% 2-cycle
test2:- t2_1(_),fail.
test2:- get_incr_sccs([t2_1(_X)],S),
	check_graph(S,[ret(t2_1('$VAR'(0)),1),ret(t2_2('$VAR'(1)),1)],
	test2),fail.
test2:- abolish_all_tables.

% 2-cycle plus dependency
test3:- t3_1(_),fail.
test3:- get_incr_sccs([t3_3(_X)],S),
	check_graph(S,[ret(t3_1('$VAR'(0)),1),ret(t3_2('$VAR'(1)),1),
		       ret(t3_3('$VAR'(2)),2)],test3),fail.
test3:- abolish_all_tables.

% 2-cycle plus dependency (failing dependency)
test4:- t4_1(_),fail.
test4:- get_incr_sccs([t4_3(_X)],S),
	check_graph(S,[ret(t4_1('$VAR'(0)),1),ret(t4_2('$VAR'(1)),1),
			ret(t4_3('$VAR'(2)),2)],test4),fail.
test4:- abolish_all_tables.

% 3-cycle
test5:- t5_1(_),fail.
test5:- get_incr_sccs([t5_1(_X)],S),
	check_graph(S,[ret(t5_1('$VAR'(0)),1),ret(t5_2('$VAR'(1)),1),
	               ret(t5_3('$VAR'(2)),1)],test5),fail.
test5:- abolish_all_tables.

% dag
test6:- t6_1(_),fail.
test6:- get_incr_sccs([t6_1(_X)],S),
	check_graph(S,[ret(t6_1('$VAR'(0)),1),ret(t6_2('$VAR'(1)),2),
		       ret(t6_3('$VAR'(4)),4),ret(t6_4('$VAR'(2)),3),
		       ret(t6_5('$VAR'(3)),5)],test6),fail.
test6:- abolish_all_tables.

% trivial
test7:- t7_1(_),fail.
test7:- get_incr_sccs([t7_1(_X)],S),
	check_graph(S,[ret(t7_1('$VAR'(0)),1)],test7),fail.
test7:- abolish_all_tables.

% non-connected
test8:- t8(_),fail.
test8:- get_incr_sccs([t8_1(_),t8_11(_)],S),
	check_graph(S,[ret(t8_1('$VAR'(0)),1),ret(t8_11('$VAR'(3)),4),
	               ret(t8_12('$VAR'(4)),5),ret(t8_13('$VAR'(5)),6),
		       ret(t8_2('$VAR'(1)),2),ret(t8_3('$VAR'(2)),3)],test8),fail.
test8:- abolish_all_tables.

test8a:- t8(_),fail.
test8a:- get_incr_sccs(S),
	check_graph(S,[ret(t8_1('$VAR'(0)),1),ret(t8_11('$VAR'(3)),4),
	               ret(t8_12('$VAR'(4)),5),ret(t8_13('$VAR'(5)),6),
		       ret(t8_2('$VAR'(1)),2),ret(t8_3('$VAR'(2)),3)],test8a),fail.
test8a:- abolish_all_tables.

test9:- t9_1(_),fail.
test9:- abolish_all_tables.

p(1). p(2).

q(1). q(2). q(3).

:- table t1_1/1, t1_2/1,t1_3/1,t1_4/1,t1_5/1 as incremental.
t1_1(X):- p(X).
t1_2(X):- q(X). 
t1_3(X):- t1_1(X). 
t1_4(X):- t1_3(X). 
t1_5(X):- t1_4(X),t1_2(X).

:- table t2_1/1, t2_2/1 as incremental.
t2_1(X):- p(X).
t2_1(X):- t2_2(X).
t2_2(X):- p(X).
t2_2(X):- t2_1(X).

:- table t3_1/1, t3_2/1, t3_3/1 as incremental.
t3_1(X):- p(X).
t3_1(X):- t3_2(X).
t3_2(X):- p(X).
t3_2(X):- t3_3(X).
t3_2(X):- t3_1(X).
t3_3(X):- p(X).

:- table t4_1/1, t4_2/1, t4_3/1 as incremental.
t4_1(X):- p(X).
t4_1(X):- t4_2(X).
t4_2(X):- p(X).
t4_2(X):- t4_3(X).
t4_2(X):- t4_1(X).
t4_3(_X):- fail.

:- table t5_1/1, t5_2/1, t5_3/1 as incremental.
t5_1(X):- p(X).
t5_1(X):- t5_2(X).
t5_2(X):- p(X).
t5_2(X):- t5_3(X).
t5_3(X):- t5_1(X).

:- table t6_1/1, t6_2/1, t6_3/1, t6_4/1, t6_5/1 as incremental.
t6_1(X):- t6_2(X).
t6_1(X):- t6_3(X).
t6_2(X):- t6_4(X).
t6_3(X):- t6_5(X).
t6_2(X):- t6_4(X).
t6_2(X):- t6_5(X).
t6_4(_):- fail.
t6_5(_):- fail.

:- table t7_1/1 as incremental.
t7_1(_):- fail.

:- table t8_1/1, t8_2/1, t8_3/1, t8_11/1, t8_12/1, t8_13/1 as incremental.
t8(_):- t8_1(_),t8_11(_).
t8_1(_):- t8_2(_).
t8_1(_):- t8_3(_).
t8_11(_):- t8_12(_).
t8_11(_):- t8_13(_).
t8_2(_).
t8_3(_).
t8_12(_).
t8_13(_).

:- table t9_1/1, t9_2/1 as incremental.
t9_1(X):- p(X).
t9_1(X):- t9_2(X).
t9_2(X):- t9_1(X).
t9_2(_X):- get_incr_sccs(S),write_test9(S).

write_test9(S):- 
	sort(S,Ssort),numbervars(Ssort),
	member(Call,Ssort),
	Call = ret(Term,_),
	\+ functor(Term,trans_connected_ptr,2),
	write_canonical(Call),nl.
