/************************************************************************/
/*									*/
/* SEMANTICA System							*/
/* Copyright (C) SUNY at Stony Brook, 1994				*/
/*									*/
/************************************************************************/

/*======================================================================
  File                  :  sem_pretty.P
  Author(s)             :  Kostis F. Sagonas
  Last modification     :  May 8, 1995
========================================================================*/


:- export sem_pretty/2.

:- import append/3 from basics.
:- import str_cat/3 from string.
:- import term_type/2 from machine.
:- import numbervars/1 from num_vars.
:- import name/2, atom_codes/2 from standard.

/*======================================================================*/
/*  sem_pretty(+UglyTerm, -PrettyAtom)					*/
/*======================================================================*/

sem_pretty(UglyTerm, PrettyAtom) :-
	numbervars(UglyTerm),
	pretty_string(UglyTerm, '', PrettyAtom).

/*----------------------------------------------------------------------*/
/*----------------------------------------------------------------------*/

pretty_string((Term1,Term2), StrIn, Strout) :-
	!,
	str_cat(StrIn, '(', StrP),
	pretty_string(Term1, StrP, StrT1),
	str_cat(StrT1, ' & ', StrAnd),
	pretty_string(Term2, StrAnd, StrT2),
	str_cat(StrT2, ')', Strout).
pretty_string((Term1;Term2), StrIn, Strout) :-
	!,
	str_cat(StrIn, '(', StrP),
	pretty_string(Term1, StrP, StrT1),
	str_cat(StrT1, ' \/ ', StrOr),
	pretty_string(Term2, StrOr, StrT2),
	str_cat(StrT2, ')', Strout).
pretty_string(not(Term), StrIn, StrOut) :-
	!,
	str_cat(StrIn, '-(', StrNeg),
	pretty_string(Term, StrNeg, StrMid),
	str_cat(StrMid, ')', StrOut).
pretty_string({SetThing}, StrIn, StrOut) :-
	!,
	str_cat(StrIn, '{', StrS),
	( SetThing = ElemForm:Pred ->
		pretty_string(ElemForm, StrS, StrCond),
		str_cat(StrCond, ' : ', StrMid),
		pretty_string(Pred, StrMid, StrSet)
	; pretty_set(SetThing, StrS, StrSet)
	),
	str_cat(StrSet, '}', StrOut).
pretty_string('term equal'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' = ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('set equal'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' = ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('card eq'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' = ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('card le'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' =< ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('card lt'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' < ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('card gt'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' > ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('card ge'(X, Y), StrIn, StrOut) :-
	!,
	pretty_string(X, StrIn, StrX),
	str_cat(StrX, ' >= ', StrEq),
	pretty_string(Y, StrEq, StrOut).
pretty_string('size of'(X), StrIn, StrOut) :-
	!,
	str_cat(StrIn, '|', StrCard),
	pretty_string(X, StrCard, StrX),
	str_cat(StrX,  '|', StrOut).
pretty_string('set union'(X,Y), StrIn, StrOut) :-
	!,
	str_cat(StrIn, '(', StrP),
	pretty_string(X, StrP, StrX),
	str_cat(StrX, ' \/ ', StrEq),
	pretty_string(Y, StrEq, StrMid),
	str_cat(StrMid, ')', StrOut).
pretty_string('set difference'(X,Y), StrIn, StrOut) :-
	!,
	str_cat(StrIn, '(', StrP),
	pretty_string(X, StrP, StrX),
	str_cat(StrX, ' - ', StrEq),
	pretty_string(Y, StrEq, StrMid),
	str_cat(StrMid, ')', StrOut).
pretty_string('set intersection'(X,Y), StrIn, StrOut) :-
	!,
	str_cat(StrIn, '(', StrP),
	pretty_string(X, StrP, StrX),
	str_cat(StrX, ' /\ ', StrEq),
	pretty_string(Y, StrEq, StrMid),
	str_cat(StrMid, ')', StrOut).
pretty_string('$VAR'(N), StrIn, StrOut) :-
	!,
	LetterNumber is N mod 6,	% Number of Vars
	is_variable(LetterNumber, LetterVar),
	str_cat(StrIn, LetterVar, StrMid),
	Remainder is N // 6,
	( Remainder =:= 0 -> StrOut = StrMid
	; pretty_string(Remainder, StrMid, StrOut)
	).
pretty_string(Term, StrIn, StrOut) :-
	term_type(Term, Type),
	( Type =:= 5 ->	/* atom(Term) */
		str_cat(StrIn, Term, StrOut)
	; Type =:= 1 -> /* structure(Term) */
		Term =.. [F|Args],
		str_cat(StrIn, F, StrF),
		str_cat(StrF, '(', StrMid),
		pretty_args(Args, StrMid, StrArgs),
		str_cat(StrArgs, ')', StrOut)
	; Type =:= 3 -> /* list(Term) */
		/* It denotes a tuple <...> */
		str_cat(StrIn, '<', StrMid),
		pretty_args(Term, StrMid, StrTuple),
		str_cat(StrTuple, '>', StrOut)
	; Type =:= 2 ->	/* integer(Term) */
		name(StrIn, StrName), name(Term, TermName),
		append(StrName, TermName, StrOutName),
		atom_codes(StrOut, StrOutName)	% Do NOT use name/2 here!!
	).

pretty_args([], Str, Str).
pretty_args([Arg|Args], StrIn, StrOut) :- 
	pretty_string(Arg, StrIn, StrTmp),
	( Args == [] -> StrArg = StrTmp ; str_cat(StrTmp, ', ', StrArg) ),
	pretty_args(Args, StrArg, StrOut).

pretty_set((Elem,Elems), StrIn, StrOut) :-
	!,
	pretty_string(Elem, StrIn, StrTmp),
	str_cat(StrTmp, ', ', StrElem),
	pretty_set(Elems, StrElem, StrOut).
pretty_set(Elem, StrIn, StrOut) :-
	pretty_string(Elem, StrIn, StrOut).

%------------------------------------------------------------
% The following should be integrated somehow with the parser.
%------------------------------------------------------------

is_variable(0,x).
is_variable(1,y).
is_variable(2,z).
is_variable(3,w).
is_variable(4,u).
is_variable(5,v).

end_of_file.

/* -------------------- end of file sem_pe.P -------------------------- */

/*----------------------------------------------------------------------*/
/*  This works perfectly in Prolog, but they do not want it!		*/
/*----------------------------------------------------------------------*/

:- op(1000, xfy, (&)).
:- op(1100, xfy, (\/)).

make_pretty((Ain;Bin), (Aout\/Bout)) :-
	!,
	make_pretty(Ain, Aout), make_pretty(Bin, Bout).
make_pretty((Ain,Bin), (Aout&Bout)) :-
	!,
	make_pretty(Ain, Aout), make_pretty(Bin, Bout).
make_pretty(not(Ain), -(Aout)) :-
	!,
	make_pretty(Ain, Aout).
make_pretty(X, X).

