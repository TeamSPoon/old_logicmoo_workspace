val(A,'John') :- 'term equal'(A,'John').
val(A,'Mary') :- 'term equal'(A,'Mary').
val(A,'N'('John')) :- val(A,'John').
val(A,'N'('Mary')) :- val(A,'Mary').
val(A,'N'(cake)) :- val(A,cake).
val(A,'N'(man)) :- val(A,man).
val(A,'NP'(B)) :- (functor(B,'N',C),val(A,B)).
val(A,'NP'(B,C)) :- ((functor(B,'Det',D),functor(C,'N',E)),val(A,B),val(A,C)).
val(A,'PP'(B,C)) :- ((functor(B,'P',D),functor(C,'NP',E)),val(A,B),val(A,C)).
val(A,'S'(B,(','),(not))) :- (functor(B,'S',C),not val(A,B)).
val(A,'S'(it_is_not_the_case_that,B)) :- (functor(B,'S',C),not not not val(A,B)).
val(A,'V'(arrived)) :- val(A,arrived).
val(A,'V'(bakes)) :- val(A,bakes).
val(A,'V'(walks)) :- 'set equal'(A,{B : walks(B)}).
val(A,'V'(walks)) :- val(A,walks).
val(A,'VP'(B)) :- (functor(B,'V',C),val(A,B)).
val(A,'VP'(B,C)) :- ((functor(B,'V',D),functor(C,'NP',E)),('term equal'(A,some_property(F,G)),val(F,B)),val(G,C)).
val(A,'VP'(B,C)) :- ((functor(B,'V',D),functor(C,'NP',E)),('term equal'(A,the_prop_of_standing_in_to(F,G)),val(F,B)),val(G,C)).
val(A,'VP'(B,C)) :- ((functor(B,'V',D),functor(C,'NP',E)),val(A,B),val(A,C)).
val(A,'VP'(B,C)) :- ((functor(B,'V',D),functor(C,'PP',E)),val(A,B),val(A,C)).
val(A,'VP'(B,C,D)) :- ((functor(B,'V',E),functor(C,'NP',F),functor(D,'PP',G)),(val(A,B),val(A,C)),val(A,D)).
val(A,arrived) :- arrived(A).
val(A,walks) :- walks(A).
val([A,B,C],bakes) :- bakes_for(A,B,C).
val([A,B],bakes) :- bakes_for(A,B,C).
val(t,'NP'(A,or,B)) :- ((functor(A,'NP',C),functor(B,'NP',D)),(val(E,A);val(E,B))).
val(t,'S'('Phil_ponders')) :- 'Phil_ponders'.
val(t,'S'('Phil_ponders')) :- ponders('Phil').
val(t,'S'(A,B)) :- ((functor(A,'NP',C),functor(B,'VP',D)),val(E,A),val(E,B)).
val(t,'S'(A,and,B)) :- ((functor(A,'S',C),functor(B,'S',D)),val(E,A),val(E,B)).
val(t,'S'(it_is_false_that,A)) :- (functor(A,'S',B),'It_is_false_that'(val(t,A))).
val(t,'S'(it_is_false_that,A)) :- (functor(A,'S',B),not val(t,A)).
val(t,'S'(it_is_not_the_case_that,A)) :- (functor(A,'S',B),not val(t,A)).
val(t,A) :- (A =.. [B,C,and,D],val(E,C),val(E,D)).
