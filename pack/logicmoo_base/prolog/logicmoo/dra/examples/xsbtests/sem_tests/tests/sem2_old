val(A,'N'(cake),B) :- val(A,cake,B).
val(A,'N'(man),B) :- val(A,man,B).
val(A,'NP'(B),C) :- (functor(B,'N',D),val(A,B,C)).
val(A,'NP'(B,C),D) :- ((functor(B,'Det',E),functor(C,'N''',F)),val([A,G],B,D),'set equal'(G,{H : val(H,C,D)})).
val(A,'V'(arrived),B) :- val(A,arrived,B).
val(A,'VP'(B),C) :- (functor(B,'V',D),val(A,B,C)).
val(A,'VP'(B,C),D) :- ((functor(B,'NP',E),functor(C,'VP',F)),val(G,H,D),'set equal'(G,{ith(1,I,J) : (val(A,C,I),'SeqV'(I,1,D))})).
val(A,'VP'(B,aur,C)) :- ((functor(B,'VP',D),functor(C,'VP',E)),'set equal'(A,{F : (((member(F,G),val(G,B)),member(F,H)),val(H,C))})).
val(A,'VP'(B,aur,C)) :- ((functor(B,'VP',D),functor(C,'VP',E)),('set equal'(A,'set intersection'(F,G)),val(F,B)),val(G,C)).
val(A,'VP'(B,ya,C)) :- ((functor(B,'VP',D),functor(C,'VP',E)),'set equal'(A,{F : (member(F,G),val(G,B);member(F,H),val(H,C))})).
val(A,'VP'(B,ya,C)) :- ((functor(B,'VP',D),functor(C,'VP',E)),('set equal'(A,'set union'(F,G)),val(F,B)),val(G,C)).
val(A,B,C) :- ((B =.. [D,E,F],functor(E,'NP',G)),val(H,I,C),'set equal'(H,{ith(1,J,K) : (val(A,F,J),'SeqV'(J,1,C))})).
val(A,arrived,B) :- arrived(A).
val(A,he1,B) :- 'term equal'(ith(1,B,C),A).
val(A,man,B) :- man(A).
val(A,t1,B) :- 'term equal'(ith(1,B,C),A).
val(A,z) :- z.
val([A,B,C],'D'(every_except),D) :- 'card eq'('size of'('set difference'('set difference'(B,{C}),A)),0).
val([A,B,C],'D'(every_except),D) :- 'set equal'('set difference'(B,A),{C}).
val([A,B,C],'D'(no_except),D) :- 'card eq'('size of'('set union'('set difference'(B,{C}),A)),0).
val([A,B,C],'D'(no_except),D) :- 'set equal'('set intersection'(B,A),{C}).
val([A,B,C],baked,D) :- bake_for(A,C,B).
val([A,B],'D'(every),C) :- 'card eq'('size of'('set difference'(B,A)),0).
val([A,B],'D'(not_every),C) :- not 'card eq'('size of'('set difference'(B,A)),0).
val([A,B],baked,C) :- 'term equal'(A,B).
val([A,B],every,C) :- 'card eq'('size of'('set difference'(B,A)),0).
val([A,B],foo,C) :- 'set equal'('set union'(A,B),A).
val([A,B],foo,C) :- 'set equal'(B,A).
val([A,B],foo,C) :- 'set equal'(B,A).
val([A,B],har,C) :- 'set equal'('set intersection'(A,B),A).
val([A,B],har,C) :- 'set equal'('set intersection'({(a,b)},B),A).
val([A,B],most,C) :- 'card gt'('size of'('set intersection'(B,A)),'size of'('set difference'(B,A))).
val([A,B],some,C) :- 'card ge'(1,'size of'('set intersection'(B,A))).
val([A,B],some,C) :- 'card gt'('size of'('set intersection'(B,A)),0).
val([A,B],the,C) :- ('card eq'('size of'('set difference'(B,A)),0),'card eq'('size of'(B),1)).
val(t,'S'(A,B)) :- ((functor(A,'NP',C),functor(B,'VP',D)),(val(E,A),val(F,B)),'set member'(E,F)).
val(t,'S'(A,B)) :- ((functor(A,'NP',C),functor(B,'VP',D)),val(E,A),val(E,B)).
val(t,'S'(A,B)) :- ((functor(A,'NP',C),functor(B,'VP',D)),val(E,A),val(E,B)).
val(t,'S'(A,B),C) :- ((functor(A,'NP',D),functor(B,'S',E)),('SeqV'(F,1,C),'Val'(ith(1,F,G),'NP',C)),val(t,B,F)).
val(t,'S'(A,B),C) :- ((functor(A,'NP',D),functor(B,'S',E)),val(F,G,C),'set equal'(F,{ith(1,H,I) : (val(t,B,H),'SeqV'(H,1,C))})).
val(t,'S'(A,B),C) :- ((functor(A,'NP',D),functor(B,'S',E)),val(F,G,C),'set equal'(F,{ith(1,H,I) : (val(t,B,H),'SeqV'(H,1,C))})).
