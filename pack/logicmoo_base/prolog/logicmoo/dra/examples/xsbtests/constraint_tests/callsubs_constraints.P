
:- import {}/1 from clpr.
:- import when/2 from constraintLib.

test:- p(_X),writeln('p(X) succeeded'),fail.
test:- p(1),writeln('p(1) succeeded'),fail.  % shd fail.
test:- p(2),writeln('p(2) succeeded'),fail.
%
test:- pf(_X),writeln('pf(X) succeeded'),fail.
test:- pf(f(a,b)),writeln('pf(f(a,b)) succeeded'),fail.  % shd. fail
test:- pf(f(a,c)),writeln('pf(f(a,c)) succeeded'),fail.  
test:- pf(f(a,_)),writeln('pf(f(a,_) succeeded'),fail.  % shd. fail
%
test:- p(_X,_Y),writeln('p(X,Y) succeeded'),fail.
test:- p(1,_Y),writeln('p(1,Y) succeeded'),fail.
test:- p(3,_Y),writeln('p(3,Y) succeeded'),fail.
test:- p(_X,1),writeln('p(X,1) succeeded'),fail.
test:- p(_X,3),writeln('p(X,3) succeeded'),fail.
%
test:- when(nonvar(X),X \= 2),r(X),X = 3,writeln('when(nonvar(X),X \= 2),r(X),X = 3 succeeded'),fail.
test:- when(nonvar(X),X \= 2),r(X),X = 2,writeln('when(nonvar(X),X \= 2),r(X),X = 1 succeeded'),fail.
test:- when(nonvar(X),X \= 2),r(X),X = 1,writeln('when(nonvar(X),X \= 2),r(X),X = 1 succeeded'),fail.
%
test:- palt(_X),writeln('palt(X) succeeded'),fail.
test:- palt(1),writeln('palt(1) succeeded'),fail.  % shd fail.
test:- palt(2),writeln('palt(2) succeeded'),fail.

:- table palt/1 as subsumptive.
palt(X):- palt(1).
palt(X):- palt(2).
palt(X):- when((nonvar(X)),X\=1).



:- table p/2 as subsumptive.
p(X,X):- 
        when((nonvar(X)),X\=1).

:- table p/1.
:- use_subsumptive_tabling p/1.
p(X) :-
        when((nonvar(X)),X\=1).

:- table pf/1 as subsumptive.
pf(X) :-
        when((nonvar(X)),X\=f(a,b)).


:- table r/1.
r(X) :-
        when((nonvar(X)),X\=1).

s(X) :-
        when((nonvar(X)),X\=1).

:- table t/1.
t(_).

:- table u/1.
u(X):-  when((nonvar(X)),X\=2).



end_of_file.

test:- p(X),q.

q.
 
------------------------------------------------------------


| ?- [wbug].
[wbug loaded]

yes
| ?- p(X).

X = _h166 { when : ...unknown portray_attributes for this module}

yes
| ?- p(X),X = 1.

no
| ?- p(X),X = 2.

X = 2

yes
| ?- p(1).

yes     <<<<<<<<  wrong!!!
| ?- p(2).

yes
| ?- 
halt.
.
