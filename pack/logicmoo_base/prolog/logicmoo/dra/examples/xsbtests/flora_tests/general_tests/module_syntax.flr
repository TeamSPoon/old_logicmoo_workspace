
?- equality basic in foo.
?- insert{f, g@foo, p(abc), q(def)@foo, f(a)@ _@}.

r(_@) :- f(a).

%% Tests where X@foo, X@ _@, or X@Y occur at the top level
tst1 :- f, g@foo, f(X)@ _@, r(_@), writeln(tst1=X+ _@)@prolog().

tst2 :- X = q(Z), X@foo, Y=g, Y@foo, writeln(tst2=Z)@prolog().
tst3 :- X = q(Z), M=foo, X@M, Y=g, Y@M, writeln(tst3=Z)@prolog().

tst4 :- X=p(Z), Y=f, X@ _@, Y@ _@, writeln(tst4=Z)@prolog().
tst5 :- X=p(Z), Y=f, M= _@, X@M, Y@M, writeln(tst5=Z)@prolog().


?- insert{pr(a@foo), pr(a(b)@foo), pr(c@ _@), pr(e(f)@ _@)}.

tst6 :- pr(X), (X ~ Y@foo; X ~ Y@ _@), writeln(tst6=X)@prologall(), fail.
tst6 :- true.


%% Tests where X@foo, X@ _@, or X@Y occur in the argument position
tst7 :- pr(a@foo), pr(a(b)@foo), pr(c@ _@), pr(e(f)@ _@),
	writeln(tst7=done)@prologall().

tst8 :- X=a, Y=foo, pr(X@foo), pr(X@Y), pr(a@Y),
	writeln(tst8=done)@prologall().

tst9 :- X=a(b), Y=foo, pr(X@foo), pr(X@Y), pr(a@Y),
	writeln(tst9=done)@prologall().

tst10 :- X=c, Y= _@,  pr(X@ _@), pr(X@Y), pr(c@Y),
	writeln(tst10=done)@prologall().

tst11 :- X=e(f), Y= _@,  pr(X@ _@), pr(X@Y), pr(c@Y),
	writeln(tst11=done)@prologall().

%% Tests X@Y where X is bound to a hilog predicate or F-logic molecule
tst12 :- X~f(XX), Y= ${q(YY)@foo}, X@foo, Y@bar, Z= ${f}, Z@ _@, ZZ~f, ZZ@foo,
	(write('test12: '), write(xx=XX), writeln(yy=YY))@prologall().

tst13 :- X~a@foo, pr(X@bar), Y= ${a(b)@foo}, pr(Y@bar), pr(Y@ _@),
	 writeln(tst13=done)@prolog().

test :- tell(temp)@prolog(), 
	tst1, tst2, tst3, tst4, tst5, tst6, tst7, tst8, tst9, tst10, tst11,
	tst12, tst13,
	debug[#check_undefined(on)]@flora(sys),
	tst1, tst2, tst3, tst4, tst5, tst6, tst7, tst8, tst9, tst10, tst11,
	told@prolog().
