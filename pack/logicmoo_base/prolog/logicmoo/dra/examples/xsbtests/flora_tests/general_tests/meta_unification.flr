
tst1 :- unless a(b) ~ X@foo
        do writeln('tst1 failed as expected')@prolog().
tst2 :- a(b)@foo ~ X@foo, Y = foo, a(b)@Y ~ X@foo, Z=a(b), Z@Y ~ X@foo,
	a(b)@foo ~ XX@YY,
	writeln('tst2 succeeded, as expected'=ans(X,XX,YY))@prolog().
tst3 :- X ~ Y@foo, Z@foo ~ V, Z=a, Y=a(b),
	writeln('tst3 succeeded, as expected'=ans(X,V))@prolog().
tst4 :- unless a(b)@foo ~ X@bar do writeln('tst4 failed as expected')@prolog().
tst5 :- a(b)@M ~ X@bar, Y@bar ~ a(b)@MM,
	writeln('tst5 succeeded, as expected'=ans(X,M,Y,MM))@prolog().
tst6 :- X ~ Y@foo, Y=a(b), X~a(b)@foo,
	writeln('tst6 succeeded, as expected'=ans(X,Y))@prolog().
tst7 :- X ~ Y@foo, Y=a(b), Y@Z ~a(b)@W, W=bar,
	writeln('tst7 succeeded, as expected'=ans(X,Y,Z,W))@prolog().
tst8 :- a(b)@X ~ Y@foo, Y@Z ~a(b)@W, Z=pp,
	writeln('tst8 succeeded, as expected'=ans(X,Y,W))@prolog().
tst9 :- unless (a(b)@X ~ Y@foo, Y@Z ~a(b)@pp) 
	 do writeln('tst9 failed as expected')@prolog().
tst10 :- a[b->C]@foo ~ X@Z, X= ${A[B->cc]@foo},
	writeln('tst10 succeeded, as expected'=ans(X,Z,A,B,C))@prolog().
tst11 :- a[b->C]@M ~ X@Z, X~ A[B->cc]@foo,
	writeln('tst11 succeeded, as expected'=ans(X,Z,M,A,B,C))@prolog().

tst12 :- a(X)@M ~ Y@Z, X=dd, Z = ff, XX@YY ~ a[b->cc]@foo,
	writeln('tst12 succeeded, as expected'=ans(X,Y,Z,XX,YY))@prolog().

tst13 :- insert{p(${a[b->c]})}, p(X), X@Y ~ a[b->c]@Z, Y=pp,
	writeln('tst13 succeeded, as expected'=ans(X,Y,Z))@prolog().

tst14 :- X ~ a[b->c,e->d]@foo, M=foo, X@M ~ a[b->c,e->d]@foo,
	writeln('tst14 succeeded, as expected'=ans(X,M))@prolog().

tst15 :- X ~ a[b->c,e->d]@foo, M=foo, X@M ~ a[b->c,e->d]@M,
	writeln('tst15 succeeded, as expected'=ans(X,M))@prolog().

tst16 :- X ~ a[b->c;e->d]@foo, M=foo, X@M ~ a[b->c;e->d]@M,
	writeln('tst16 succeeded, as expected'=ans(X,M))@prolog().

pretest :- tst1,tst2,tst3,tst4,tst5,tst6,tst7,tst8,tst9,tst10,tst11,tst12,
	tst13,tst14,tst15,tst16.

test :- tell(temp)@prolog(), 
	pretest,
	debug[#check_undefined(on)]@flora(sys),
	pretest,
	told@prolog().

