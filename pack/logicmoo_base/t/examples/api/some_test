:- '$set_source_module'(_G1772261,basePFC).
:- style_check(-singleton).
mpred_load_restore_file(A) :-
	absolute_file_name(A, B),
	B\=A, !,
	mpred_load_restore_file(B).
mpred_load_restore_file(A) :-
	\+ exists_file(A),
	lh:with_ukb_snark(baseKB, baseKB:ensure_mpred_file_loaded(baseKB:logicmoo(pfc/'autoexec.pfc'))), !,
	mpred_save_restore_file(some_test), !.
mpred_load_restore_file(A) :-
	must_det_l(( time_file(A, C),
		     qcompile(A),
		     ensure_loaded(A),
		     (   \+ ( lmconf:loaded_file_world_time(D, _, B),
			      B>=C
			    )
		     ->  true
		     ;   ignore(( lmconf:loaded_file_world_time(D, _, B),
				  B>C,
				  lh:with_ukb_snark(baseKB, baseKB:ensure_mpred_file_loaded(baseKB:D)),
				  fail
				)),
			 mpred_save_restore_file(A)
		     )
		   )), !.

mpred_save_resore_predicate(B:A, F) :-
	functor(A, C, D),
	format('~N:- multifile(~q:(~q)/~q).~n', [B, C, D]),
	(   prolog_listing:list_declarations(B:A, B)
	->  true
	),
	clause(B:A, G, E),
	(   (   clause_property(E, file(F))
	    ;   \+ clause_property(E, file(_))
	    )
	->  true
	),
	(   (   get_clause_vars((A:-G))
	    ->  true
	    )
	->  true
	;   true
	),
	prolog_listing:portray_clause((A:-G)).

mpred_save_restore_file(A) :-
	must_det_l(( absolute_file_name(A, B),
		     tell(B),
		     format('~N:- ~q.~n', ['$set_source_module'(_, basePFC)]),
		     format('~N:- style_check(-singleton).'),
		     listing(_),
		     flush_output,
		     format('~N:- style_check(-singleton).'),
		     format('~N:- ~q.~n', ['$set_source_module'(_, baseKB)]),
		     ignore(( cur_predicate(_, baseKB:C),
			      mpred_save_resore_predicate(baseKB:C,
							  B),
			      flush_output,
			      fail
			    )), !,
		     format('~N:- ~q.~n', ['$set_source_module'(_, lmconf)]),
		     format('~N:- style_check(-singleton).~n'),
		     listing(lmconf:loaded_file_world_time/3),
		     flush_output,
		     told
		   )), !.
:- style_check(-singleton).
:- '$set_source_module'(_G1772291,baseKB).
:- multifile(baseKB:(prologBuiltin)/1).
:- dynamic prologBuiltin/1.
:- multifile prologBuiltin/1.
:- module_transparent prologBuiltin/1.
:- discontiguous prologBuiltin/1.

prologBuiltin(mpred_select).
prologBuiltin(resolveConflict).
prologBuiltin(agent_text_command).
prologBuiltin(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	prologBuiltin(B).
prologBuiltin(A) :-
	cwc,
	is_ftCompound(A), !,
	get_functor(A, B, C),
	functor(D, B, C),
	predicate_property(D, built_in).
prologBuiltin(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologBuiltin, B).
:- multifile(baseKB:(pddlSomethingIsa)/2).
:- dynamic pddlSomethingIsa/2.
:- multifile pddlSomethingIsa/2.
:- module_transparent pddlSomethingIsa/2.
:- discontiguous pddlSomethingIsa/2.

:- multifile(baseKB:(defnSufficient)/2).
:- dynamic defnSufficient/2.
:- module_transparent defnSufficient/2.

:- multifile(baseKB:(ftVar)/1).
:- dynamic ftVar/1.
:- multifile ftVar/1.
:- module_transparent ftVar/1.
:- discontiguous ftVar/1.

:- multifile(baseKB:(tried_guess_types_from_name)/1).
:- dynamic tried_guess_types_from_name/1.
:- module_transparent tried_guess_types_from_name/1.

tried_guess_types_from_name(ttValueType).
tried_guess_types_from_name(tNotForUnboundPredicates).
tried_guess_types_from_name(completelyAssertedCollection).
tried_guess_types_from_name(prologNegByFailure).
tried_guess_types_from_name(tCol).
tried_guess_types_from_name(tSpec).
tried_guess_types_from_name(ttFormatType).
tried_guess_types_from_name(tSet).
tried_guess_types_from_name(tRelation).
tried_guess_types_from_name(tPred).
tried_guess_types_from_name(tFunction).
tried_guess_types_from_name(prologMacroHead).
tried_guess_types_from_name(ttPredType).
tried_guess_types_from_name(functorDeclares).
tried_guess_types_from_name(prologMultiValued).
tried_guess_types_from_name(prologOrdered).
tried_guess_types_from_name(predIsFlag).
tried_guess_types_from_name(ttNonGenled).
tried_guess_types_from_name(meta_argtypes).
tried_guess_types_from_name(prologHybrid).
tried_guess_types_from_name(prologPTTP).
tried_guess_types_from_name(prologDynamic).
tried_guess_types_from_name(prologKIF).
tried_guess_types_from_name(prologBuiltin).
tried_guess_types_from_name(prologListValued).
tried_guess_types_from_name(prologSingleValued).
tried_guess_types_from_name(ftTerm).
tried_guess_types_from_name(pfcControlled).
tried_guess_types_from_name(predCanHaveSingletons).
tried_guess_types_from_name(tTemporalThing).
tried_guess_types_from_name(prologSideEffects).
tried_guess_types_from_name(tInferInstanceFromArgType).
tried_guess_types_from_name(ttNotTemporalType).
tried_guess_types_from_name(ttSpatialType).
tried_guess_types_from_name(ttTemporalType).
tried_guess_types_from_name(ttTypeType).
tried_guess_types_from_name(ttUnverifiableType).
tried_guess_types_from_name(pfcDatabaseTerm).
tried_guess_types_from_name(pfcWatched).
tried_guess_types_from_name(pfcCreates).
tried_guess_types_from_name(pfcNegTrigger).
tried_guess_types_from_name(pfcPosTrigger).
tried_guess_types_from_name(pfcBcTrigger).
tried_guess_types_from_name(pfcRHS).
tried_guess_types_from_name(pfcMustFC).
tried_guess_types_from_name(notAssertable).
tried_guess_types_from_name(prologEquality).
tried_guess_types_from_name(ftInt).
tried_guess_types_from_name(vtDirection).
tried_guess_types_from_name(completeIsaAsserted).
tried_guess_types_from_name(tFormatType).
tried_guess_types_from_name(tSpatialThing).
tried_guess_types_from_name(completeExtentAsserted).
tried_guess_types_from_name(vtValue).
tried_guess_types_from_name(vtColor).
tried_guess_types_from_name(tAvoidForwardChain).
tried_guess_types_from_name('SententialOperator').
tried_guess_types_from_name(tNewlyCreated).
tried_guess_types_from_name(ttTypeFacet).
tried_guess_types_from_name(ptBinaryPredicate).
tried_guess_types_from_name(ptUnaryPredicate).
:- multifile(baseKB:(vtColor)/1).
:- dynamic vtColor/1.
:- multifile vtColor/1.
:- module_transparent vtColor/1.
:- discontiguous vtColor/1.

vtColor(vRed).
:- multifile(baseKB:(predCanHaveSingletons)/1).
:- dynamic predCanHaveSingletons/1.
:- multifile predCanHaveSingletons/1.
:- module_transparent predCanHaveSingletons/1.
:- discontiguous predCanHaveSingletons/1.

predCanHaveSingletons(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(predCanHaveSingletons, B).
:- multifile(baseKB:(functorDeclares)/1).
:- dynamic functorDeclares/1.
:- multifile functorDeclares/1.
:- module_transparent functorDeclares/1.
:- discontiguous functorDeclares/1.

functorDeclares(ttFormatType).
functorDeclares(pfcDatabaseTerm).
functorDeclares(pfcControlled).
functorDeclares(prologSingleValued).
functorDeclares(pfcWatched).
functorDeclares(pfcCreates).
functorDeclares(pfcNegTrigger).
functorDeclares(pfcPosTrigger).
functorDeclares(pfcBcTrigger).
functorDeclares(pfcRHS).
functorDeclares(pfcMustFC).
functorDeclares(predCanHaveSingletons).
functorDeclares(prologSideEffects).
functorDeclares(meta_argtypes).
functorDeclares(predIsFlag).
functorDeclares(tPred).
functorDeclares(prologMultiValued).
functorDeclares(prologMacroHead).
functorDeclares(notAssertable).
functorDeclares(prologBuiltin).
functorDeclares(prologDynamic).
functorDeclares(prologOrdered).
functorDeclares(prologNegByFailure).
functorDeclares(prologPTTP).
functorDeclares(prologKIF).
functorDeclares(prologEquality).
functorDeclares(prologHybrid).
functorDeclares(prologListValued).
functorDeclares(tSet).
functorDeclares(ptBinaryPredicate).
:- multifile(baseKB:(mpred_f)/2).
:- dynamic mpred_f/2.
:- module_transparent mpred_f/2.

:- multifile(baseKB:(tSet)/1).
:- dynamic tSet/1.
:- multifile tSet/1.
:- module_transparent tSet/1.
:- discontiguous tSet/1.

tSet(ttFormatType).
tSet(pfcDatabaseTerm).
tSet(pfcControlled).
tSet(prologSingleValued).
tSet(pfcWatched).
tSet(pfcCreates).
tSet(pfcNegTrigger).
tSet(pfcPosTrigger).
tSet(pfcBcTrigger).
tSet(pfcRHS).
tSet(pfcMustFC).
tSet(predCanHaveSingletons).
tSet(prologSideEffects).
tSet(meta_argtypes).
tSet(predIsFlag).
tSet(tPred).
tSet(prologMultiValued).
tSet(prologMacroHead).
tSet(notAssertable).
tSet(prologBuiltin).
tSet(prologDynamic).
tSet(prologOrdered).
tSet(prologNegByFailure).
tSet(prologPTTP).
tSet(prologKIF).
tSet(prologEquality).
tSet(prologHybrid).
tSet(prologListValued).
tSet(tSet).
tSet(ptBinaryPredicate).
:- multifile(baseKB:(vtValue)/1).
:- dynamic vtValue/1.
:- multifile vtValue/1.
:- module_transparent vtValue/1.
:- discontiguous vtValue/1.

vtValue(A) :-
	loop_check(vtColor(A)).
:- multifile(baseKB:(isa)/2).
:- dynamic isa/2.
:- multifile isa/2.
:- module_transparent isa/2.
:- discontiguous isa/2.

isa(ttValueType, ttTypeType).
isa(tNotForUnboundPredicates, tCol).
isa(prologNegByFailure, ttPredType).
isa(tCol, tFunction).
isa(tSpec, tCol).
isa(ttFormatType, ttTypeType).
isa(tSet, tCol).
isa(tRelation, tCol).
isa(tPred, tCol).
isa(tFunction, tCol).
isa(prologMacroHead, ttPredType).
isa(ttPredType, ttTypeType).
isa(prologMultiValued, ttPredType).
isa(prologOrdered, ttPredType).
isa(predIsFlag, tPred).
isa(ttNonGenled, ttTypeType).
isa(prologHybrid, ttPredType).
isa(prologPTTP, ttPredType).
isa(prologDynamic, ttPredType).
isa(prologKIF, ttPredType).
isa(prologBuiltin, ttPredType).
isa(prologListValued, ttPredType).
isa(prologSingleValued, ttPredType).
isa(predCanHaveSingletons, tPred).
isa(tTemporalThing, tCol).
isa(prologSideEffects, ttPredType).
isa(tInferInstanceFromArgType, ttTypeType).
isa(ttNotTemporalType, ttTypeType).
isa(ttSpatialType, ttTypeType).
isa(ttTemporalType, ttTypeType).
isa(ttUnverifiableType, ttTypeType).
isa(prologEquality, ttPredType).
isa(ftInt, ttFormatType).
isa(vtDirection, ttValueType).
isa(tFormatType, ttTypeType).
isa(B, A) :-
	cwc,
	mpred_univ(A, B, C),
	atom(A),
	current_predicate(A, D:C),
	\+ predicate_property(D:C, imported_form(_)),
	call_u(call(D:C)).
isa(A, B) :-
	isa_backchaing(A, B).
isa(B, A) :-
	cwc,
	is_asserted(ttFormatType(A)), !,
	quotedIsa(B, A).
isa(tSpatialThing, tCol).
isa(vtValue, ttValueType).
isa(vtColor, ttValueType).
isa(tAvoidForwardChain, tCol).
isa(tNewlyCreated, tCol).
isa(ttTypeFacet, ttTypeType).
:- multifile(baseKB:(pfcRHS)/1).
:- dynamic pfcRHS/1.
:- multifile pfcRHS/1.
:- module_transparent pfcRHS/1.
:- discontiguous pfcRHS/1.

pfcRHS(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcRHS, B).
:- multifile(baseKB:(wid)/3).
:- dynamic wid/3.
:- module_transparent wid/3.

:- multifile(baseKB:(typeProps)/2).
:- dynamic typeProps/2.
:- multifile typeProps/2.
:- module_transparent typeProps/2.
:- discontiguous typeProps/2.

:- multifile(baseKB:(dividesBetween)/3).
:- dynamic dividesBetween/3.
:- multifile dividesBetween/3.
:- module_transparent dividesBetween/3.
:- discontiguous dividesBetween/3.

:- multifile(baseKB:(asserted_mpred_f)/7).
:- dynamic asserted_mpred_f/7.
:- module_transparent asserted_mpred_f/7.

:- multifile(baseKB:(ttFormatType)/1).
:- dynamic ttFormatType/1.
:- multifile ttFormatType/1.
:- module_transparent ttFormatType/1.
:- discontiguous ttFormatType/1.

ttFormatType(ftString).
ttFormatType(ftVar).
ttFormatType(ftSpec).
ttFormatType(ftCallable).
ttFormatType(ftPercent).
ttFormatType(ftInt).
ttFormatType(ftNumber).
ttFormatType(ftVoprop).
ttFormatType(ftFloat).
ttFormatType(ftAtom).
ttFormatType(ftCompound).
ttFormatType(ftGround).
ttFormatType(ftID).
ttFormatType(ftTerm).
ttFormatType(ftNonvar).
ttFormatType(ftList).
ttFormatType(ftRest).
ttFormatType(ftBoolean).
ttFormatType(ftText).
:- multifile(baseKB:(ftCallable)/1).
:- dynamic ftCallable/1.
:- multifile ftCallable/1.
:- module_transparent ftCallable/1.
:- discontiguous ftCallable/1.

:- multifile(baseKB:(pfcControlled)/1).
:- dynamic pfcControlled/1.
:- multifile pfcControlled/1.
:- module_transparent pfcControlled/1.
:- discontiguous pfcControlled/1.

pfcControlled(pfcDatabaseTerm).
pfcControlled(pfcControlled).
pfcControlled(prologSingleValued).
pfcControlled(pfcWatched).
pfcControlled(pfcCreates).
pfcControlled(pfcNegTrigger).
pfcControlled(pfcPosTrigger).
pfcControlled(pfcBcTrigger).
pfcControlled(pfcRHS).
pfcControlled(pfcMustFC).
pfcControlled(predCanHaveSingletons).
pfcControlled(prologSideEffects).
pfcControlled(meta_argtypes).
pfcControlled(predIsFlag).
pfcControlled(tPred).
pfcControlled(prologMultiValued).
pfcControlled(prologMacroHead).
pfcControlled(notAssertable).
pfcControlled(prologBuiltin).
pfcControlled(prologDynamic).
pfcControlled(prologOrdered).
pfcControlled(prologNegByFailure).
pfcControlled(prologPTTP).
pfcControlled(prologKIF).
pfcControlled(prologEquality).
pfcControlled(prologHybrid).
pfcControlled(prologListValued).
pfcControlled(genlPreds).
pfcControlled(isa).
pfcControlled(argIsa).
pfcControlled(ttFormatType).
pfcControlled(tSet).
pfcControlled(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcControlled, B).
pfcControlled(ptBinaryPredicate).
pfcControlled(if_missing(ftAskable, ftAssertable)).
pfcControlled(mdefault/1).
pfcControlled(clif/1).
:- multifile(baseKB:(addTiny_added)/1).
:- dynamic addTiny_added/1.
:- module_transparent addTiny_added/1.

:- multifile(baseKB:(genlPreds)/2).
:- dynamic genlPreds/2.
:- multifile genlPreds/2.
:- module_transparent genlPreds/2.
:- discontiguous genlPreds/2.

:- multifile(baseKB:(actn)/1).
:- dynamic actn/1.
:- multifile actn/1.

:- multifile(baseKB:(pt)/2).
:- dynamic pt/2.
:- multifile pt/2.

pt(prologBuiltin(A), pt(arity(A, B), rhs([{make_builtin(A/B)}]))).
pt(arity(mpred_select, A), rhs([{make_builtin(mpred_select/A)}])).
pt(conflict(A), rhs([{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}])).
pt(mpred_undo_sys(A, B, C), rhs([(A==>{B}), mpred_do_and_undo_method(B, C)])).
pt(~A,  (mpred_non_neg_literal(A)->rhs([\+A]))).
pt(tPred(A), pt(arity(A, B),  (integer(B), B>1->pt(~prologBuiltin(A), rhs([~tCol(A), support_hilog(A, B)]))))).
pt(arity(arity, A),  (integer(A), A>1->pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, A)])))).
pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, 2)])).
pt(arity(mpred_select, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_select), rhs([~tCol(mpred_select), support_hilog(mpred_select, A)])))).
pt(~prologBuiltin(mpred_select), rhs([~tCol(mpred_select), support_hilog(mpred_select, 2)])).
pt(arity(genls, A),  (integer(A), A>1->pt(~prologBuiltin(genls), rhs([~tCol(genls), support_hilog(genls, A)])))).
pt(~prologBuiltin(genls), rhs([~tCol(genls), support_hilog(genls, 2)])).
pt(~tCol(A),  (completelyAssertedCollection(A)->rhs([\+completelyAssertedCollection(A)]))).
pt(support_hilog(A, B),  (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A)->rhs([hybrid_support(A, B), {C=arity(A, B)}, C]))).
pt(hybrid_support(A, B),  (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B)->rhs([{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)]))).
pt(prologHybrid(A), pt(arity(A, B), rhs([hybrid_support(A, B)]))).
pt(arity(arity, A), rhs([hybrid_support(arity, A)])).
pt(arity(genls, A), rhs([hybrid_support(genls, A)])).
pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)])).
pt(mpred_mark(pfcPosTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{trace_or_throw(warn(pfcPosTrigger, C, static))}]))).
pt(mpred_mark(pfcNegTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{dmsg(warn(pfcNegTrigger, C, static))}]))).
pt(mpred_mark(pfcBcTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{dmsg(warn(pfcNegTrigger, C, static))}]))).
pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)]))).
pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))).
pt(mpred_mark(pfcNegTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))).
pt(mpred_mark(pfcBcTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))).
pt(mpred_mark(pfcRHS, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))).
pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([{functor(D, B, C), make_dynamic(D)}]))).
pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))).
pt(mpred_mark(pfcCallCode, A, B, C),  (ground(A:B:C), predicate_is_undefined_fa(B, C)->rhs([marker_supported(B, C)]))).
pt(marker_supported(A, B), rhs([hybrid_support(A, B)])).
pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)])).
pt(arity(conflict, A), rhs([hybrid_support(conflict, A)])).
pt(arity(mpred_undo_sys, A), rhs([hybrid_support(mpred_undo_sys, A)])).
pt(arity(tPred, A), rhs([hybrid_support(tPred, A)])).
pt(arity(tCol, A), rhs([hybrid_support(tCol, A)])).
pt(arity(support_hilog, A), rhs([hybrid_support(support_hilog, A)])).
pt(arity(hybrid_support, A), rhs([hybrid_support(hybrid_support, A)])).
pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)])).
pt(arity(mpred_do_and_undo_method, A), rhs([hybrid_support(mpred_do_and_undo_method, A)])).
pt(arity(completelyAssertedCollection, A), rhs([hybrid_support(completelyAssertedCollection, A)])).
pt(arity(marker_supported, A), rhs([hybrid_support(marker_supported, A)])).
pt(arity(map_mpred_mark_C, A), rhs([hybrid_support(map_mpred_mark_C, A)])).
pt(arity(mpred_mark_C, A), rhs([hybrid_support(mpred_mark_C, A)])).
pt(mpred_mark_C(A), rhs([{map_mpred_mark_C(A)}])).
pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)])).
pt(mpred_mark(pfcRHS, _, A, B),  (atom(A), integer(B), A\==arity->rhs([tPred(A), arity(A, B), pfcControlled(A/B)]))).
pt(arity(resolveConflict, A), rhs([{make_builtin(resolveConflict/A)}])).
pt(arity(resolveConflict, A),  (integer(A), A>1->pt(~prologBuiltin(resolveConflict), rhs([~tCol(resolveConflict), support_hilog(resolveConflict, A)])))).
pt(arity(agent_text_command, A), rhs([{make_builtin(agent_text_command/A)}])).
pt(arity(agent_text_command, A),  (integer(A), A>1->pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, A)])))).
pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, 4)])).
pt(completelyAssertedCollection(A), rhs([tCol(A)])).
pt(pfcControlled(A), pt(arity(A, B), rhs([hybrid_support(A, B)]))).
pt(arity(ttPredType, A), rhs([hybrid_support(ttPredType, A)])).
pt(ttPredType(A), rhs([tCol(A)])).
pt(ttPredType(A),  (atom(A)->rhs([arity(A, 1), pfcControlled(A)]))).
pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)])).
pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)])).
pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)])).
pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)])).
pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)])).
pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)])).
pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)])).
pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)])).
pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)])).
pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)]))).
pt(arity(tSet, A), rhs([hybrid_support(tSet, A)])).
pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)])).
pt(arity(ttTypeType, A), rhs([hybrid_support(ttTypeType, A)])).
pt(ttTypeType(A), rhs([completelyAssertedCollection(A)])).
pt(tSet(A), rhs([completelyAssertedCollection(A)])).
pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)])).
pt(ttFormatType(A), rhs([~completelyAssertedCollection(A)])).
pt(arity(mpred_univ, A), rhs([hybrid_support(mpred_univ, A)])).
pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)]))).
pt(tCol(A),  (atom(A), \+static_predicate(A/1)->rhs([{kb_dynamic(A/1)}]))).
pt(tCol(A),  (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A)->rhs([(B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))]))).
pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)])).
pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)])).
pt(arity(write, A),  (integer(A), A>1->pt(~prologBuiltin(write), rhs([~tCol(write), support_hilog(write, A)])))).
pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)])).
pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)])).
pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)])).
pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)])).
pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)])).
pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)])).
pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)])).
pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)])).
pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)])).
pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)])).
pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)])).
pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)])).
pt(ttPredType(A), rhs([completelyAssertedCollection(A)])).
pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)])).
pt(arity(isa, A), rhs([hybrid_support(isa, A)])).
pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)])).
pt(arity(functorDeclares, A), rhs([hybrid_support(functorDeclares, A)])).
pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)])).
pt(ttFormatType(A), rhs([{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})])).
pt(ttPredType(A), rhs([functorDeclares(A)])).
pt(functorDeclares(A), rhs([tSet(A)])).
pt(functorDeclares(A), rhs([tCol(A)])).
pt(arity(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa(ftTerm, ftListFn(tCol))), rhs([~tCol(pddlSomethingIsa(ftTerm, ftListFn(tCol))), support_hilog(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A)])))).
pt(ttPredType(A), rhs([{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D))])).
pt(arity(pddlSomethingIsa, A), rhs([hybrid_support(pddlSomethingIsa, A)])).
pt(arity(pddlSomethingIsa, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, A)])))).
pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, 2)])).
pt(arity(tFunction, A), rhs([hybrid_support(tFunction, A)])).
pt(tFunction(A),  (is_declarations(A)->rhs([meta_argtypes(A)]))).
pt(ttFormatType(A),  (is_declarations(A)->rhs([meta_argtypes(A)]))).
pt(meta_argtypes(A),  (is_ftCompound(A)->rhs([{get_functor(A, B, C)}, arity(B, C)]))).
pt(arity(completeExtentAsserted, A), rhs([hybrid_support(completeExtentAsserted, A)])).
pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)])).
pt(arity(ttNotTemporalType, A), rhs([hybrid_support(ttNotTemporalType, A)])).
pt(ttNotTemporalType(A), rhs([tCol(A)])).
pt(arity(ttTemporalType, A), rhs([hybrid_support(ttTemporalType, A)])).
pt(ttTemporalType(A), rhs([tCol(A)])).
pt(ttTemporalType(A), pt(tCol(A), rhs([genls(A, tTemporalThing)]))).
pt(tCol(tTemporalThing), rhs([genls(tTemporalThing, tTemporalThing)])).
pt(ttFormatType(A),  (is_ftCompound(A)->rhs([meta_argtypes(A)]))).
pt(arity(disjointWith, A), rhs([hybrid_support(disjointWith, A)])).
pt(disjointWith(B, A), rhs([disjointWith(A, B)])).
pt(arity(ptSymmetric, A), rhs([hybrid_support(ptSymmetric, A)])).
pt(ptSymmetric(A), rhs([{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E)])).
pt(arity(tNotForUnboundPredicates, A), rhs([hybrid_support(tNotForUnboundPredicates, A)])).
pt(prologSideEffects(A), rhs([tNotForUnboundPredicates(A)])).
pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)]))).
pt(genls(B, A), pt(genls(A, B),  (B\==A->rhs([{mpred_withdraw(genls(B, A))}])))).
pt(genls(tCol, completelyAssertedCollection),  (completelyAssertedCollection\==tCol->rhs([{mpred_withdraw(genls(completelyAssertedCollection, tCol))}]))).
pt(arity(nearestGenls, A), rhs([hybrid_support(nearestGenls, A)])).
pt(genls(A, B), pt(arity(A, 1), pt(arity(B, 1),  (\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A->rhs([{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)]))))).
pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)])))).
pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)]))).
pt(nearestGenls(A, B), rhs([{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}])).
pt(arity(completeIsaAsserted, A), rhs([hybrid_support(completeIsaAsserted, A)])).
pt(completeIsaAsserted(A), pt(isa(A, B), pt(genls(B, C),  (ground(B:C)->rhs([{dif:dif(B, C)}, isa(A, C)]))))).
pt(arity(formatted_resultIsa, A), rhs([hybrid_support(formatted_resultIsa, A)])).
pt(meta_argtypes(A),  (dif:dif(A, B)->pt(genls(A, B), pt(tCol(B),  (~isa(B, ttFormatType)->rhs([formatted_resultIsa(A, B)])))))).
pt(genls(support_hilog(tRelation, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(support_hilog(tRelation, ftInt), A)])))).
pt(genls(ttTemporalType, ttSpatialType),  (ttSpatialType\==ttTemporalType->rhs([{mpred_withdraw(genls(ttSpatialType, ttTemporalType))}]))).
pt(arity(ttSpatialType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))).
pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)]))).
pt(genls(tTemporalThing, tSpatialThing),  (tSpatialThing\==tTemporalThing->rhs([{mpred_withdraw(genls(tSpatialThing, tTemporalThing))}]))).
pt(arity(tSpatialThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)])))).
pt(genls(quotedIsa(ftTerm, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedIsa(ftTerm, ttFormatType), A)])))).
pt(arity(quotedIsa, A), rhs([hybrid_support(quotedIsa, A)])).
pt(arity(quotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, A)])))).
pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, 2)])).
pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)]))).
pt(A,  (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1->rhs([{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}]))).
pt(arity(typeGenls, A), rhs([hybrid_support(typeGenls, A)])).
pt(arity(typeGenls, A),  (integer(A), A>1->pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, A)])))).
pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, 2)])).
pt(genls(typeGenls(ttTypeType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(typeGenls(ttTypeType, tCol), A)])))).
pt(arity(argIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, A)])))).
pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, 3)])).
pt(genls(mpred_module(tPred, tPrologModule), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tPred, tPrologModule), A)])))).
pt(arity(mpred_module, A), rhs([hybrid_support(mpred_module, A)])).
pt(arity(mpred_module, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, A)])))).
pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, 2)])).
pt(genls(mpred_module(tRelation, ftAtom), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tRelation, ftAtom), A)])))).
pt(tCol(A), rhs([arity(A, 1)])).
pt(arity(<==>, A), rhs([hybrid_support(<==>, A)])).
pt(arity(either, A), rhs([hybrid_support(either, A)])).
pt(either(A, B), rhs([(~A<==>B),  (~B<==>A)])).
pt(prologHybrid(A),  (get_functor(A, B, C), A\=B->rhs([arity(B, C)]))).
pt(arity(typeProps, A), rhs([hybrid_support(typeProps, A)])).
pt(arity(typeProps, A),  (integer(A), A>1->pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, A)])))).
pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, 2)])).
pt(arity(tCol, A),  (integer(A), A>1->pt(~prologBuiltin(tCol), rhs([~tCol(tCol), support_hilog(tCol, A)])))).
pt(arity(disjointWith, A),  (integer(A), A>1->pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, A)])))).
pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, 2)])).
pt(arity(genlPreds, A),  (integer(A), A>1->pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, A)])))).
pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, 2)])).
pt(arity(meta_argtypes, A),  (integer(A), A>1->pt(~prologBuiltin(meta_argtypes), rhs([~tCol(meta_argtypes), support_hilog(meta_argtypes, A)])))).
pt(genls(tPred, prologMultiValued),  (prologMultiValued\==tPred->rhs([{mpred_withdraw(genls(prologMultiValued, tPred))}]))).
pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologOrdered),  (prologOrdered\==tPred->rhs([{mpred_withdraw(genls(prologOrdered, tPred))}]))).
pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologNegByFailure),  (prologNegByFailure\==tPred->rhs([{mpred_withdraw(genls(prologNegByFailure, tPred))}]))).
pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologHybrid),  (prologHybrid\==tPred->rhs([{mpred_withdraw(genls(prologHybrid, tPred))}]))).
pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologPTTP),  (prologPTTP\==tPred->rhs([{mpred_withdraw(genls(prologPTTP, tPred))}]))).
pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologDynamic),  (prologDynamic\==tPred->rhs([{mpred_withdraw(genls(prologDynamic, tPred))}]))).
pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologBuiltin),  (prologBuiltin\==tPred->rhs([{mpred_withdraw(genls(prologBuiltin, tPred))}]))).
pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologKIF),  (prologKIF\==tPred->rhs([{mpred_withdraw(genls(prologKIF, tPred))}]))).
pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologMacroHead),  (prologMacroHead\==tPred->rhs([{mpred_withdraw(genls(prologMacroHead, tPred))}]))).
pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologListValued),  (prologListValued\==tPred->rhs([{mpred_withdraw(genls(prologListValued, tPred))}]))).
pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologSingleValued),  (prologSingleValued\==tPred->rhs([{mpred_withdraw(genls(prologSingleValued, tPred))}]))).
pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)]))).
pt(arity(ttNotTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttNotTemporalType), rhs([~tCol(ttNotTemporalType), support_hilog(ttNotTemporalType, A)])))).
pt(arity(ttTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttTemporalType), rhs([~tCol(ttTemporalType), support_hilog(ttTemporalType, A)])))).
pt(arity(genlInverse, A), rhs([hybrid_support(genlInverse, A)])).
pt(arity(genlInverse, A),  (integer(A), A>1->pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, A)])))).
pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, 2)])).
pt(arity(instTypeProps, A), rhs([hybrid_support(instTypeProps, A)])).
pt(arity(instTypeProps, A),  (integer(A), A>1->pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, A)])))).
pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, 3)])).
pt(arity(predProxyAssert, A), rhs([hybrid_support(predProxyAssert, A)])).
pt(arity(predProxyAssert, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, A)])))).
pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, 2)])).
pt(arity(predProxyQuery, A), rhs([hybrid_support(predProxyQuery, A)])).
pt(arity(predProxyQuery, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, A)])))).
pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, 2)])).
pt(arity(predProxyRetract, A), rhs([hybrid_support(predProxyRetract, A)])).
pt(arity(predProxyRetract, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, A)])))).
pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, 2)])).
pt(arity(predTypeMax, A), rhs([hybrid_support(predTypeMax, A)])).
pt(arity(predTypeMax, A),  (integer(A), A>1->pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, A)])))).
pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, 3)])).
pt(arity(prologSingleValued, A),  (integer(A), A>1->pt(~prologBuiltin(prologSingleValued), rhs([~tCol(prologSingleValued), support_hilog(prologSingleValued, A)])))).
pt(arity(resultIsa, A), rhs([hybrid_support(resultIsa, A)])).
pt(arity(resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, A)])))).
pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, 2)])).
pt(arity(isa, A),  (integer(A), A>1->pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, A)])))).
pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, 2)])).
pt(arity(arg, A),  (integer(A), A>1->pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, A)])))).
pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, 3)])).
pt(arity(ftString, A), rhs([hybrid_support(ftString, A)])).
pt(ftString(A),  (predicate_property(ftString(A), dynamic)->rhs([{ignore(retract(ftString(A)))}]))).
pt(isa(A, ftString), rhs([{ignore(retract(isa(A, ftString)))}])).
pt(arity(ftVar, A), rhs([hybrid_support(ftVar, A)])).
pt(ftVar(A),  (predicate_property(ftVar(A), dynamic)->rhs([{ignore(retract(ftVar(A)))}]))).
pt(isa(A, ftVar), rhs([{ignore(retract(isa(A, ftVar)))}])).
pt(arity(ftSpec, A), rhs([hybrid_support(ftSpec, A)])).
pt(ftSpec(A),  (predicate_property(ftSpec(A), dynamic)->rhs([{ignore(retract(ftSpec(A)))}]))).
pt(isa(A, ftSpec), rhs([{ignore(retract(isa(A, ftSpec)))}])).
pt(arity(ftCallable, A), rhs([hybrid_support(ftCallable, A)])).
pt(ftCallable(A),  (predicate_property(ftCallable(A), dynamic)->rhs([{ignore(retract(ftCallable(A)))}]))).
pt(isa(A, ftCallable), rhs([{ignore(retract(isa(A, ftCallable)))}])).
pt(arity(ftPercent, A), rhs([hybrid_support(ftPercent, A)])).
pt(ftPercent(A),  (predicate_property(ftPercent(A), dynamic)->rhs([{ignore(retract(ftPercent(A)))}]))).
pt(isa(A, ftPercent), rhs([{ignore(retract(isa(A, ftPercent)))}])).
pt(arity(ttValueType, A), rhs([hybrid_support(ttValueType, A)])).
pt(ttValueType(A), rhs([genls(A, vtValue)])).
pt(genls(vtValue, vtColor),  (vtColor\==vtValue->rhs([{mpred_withdraw(genls(vtColor, vtValue))}]))).
pt(arity(vtColor, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))).
pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)]))).
pt(ttValueType(A), rhs([completelyAssertedCollection(A)])).
pt(genls(vtValue, vtValue),  (vtValue\==vtValue->rhs([{mpred_withdraw(genls(vtValue, vtValue))}]))).
pt(arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)])))).
pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)]))).
pt(arity(argQuotedIsa, A), rhs([hybrid_support(argQuotedIsa, A)])).
pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)])))).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMultiValued, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologOrdered, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologNegByFailure, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologHybrid, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologPTTP, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(predCanHaveSingletons, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologDynamic, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMacroHead, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologListValued, 1, tPred)])).
pt(ttFormatType(tPred), rhs([argQuotedIsa(prologSingleValued, 1, tPred)])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(tPred, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMultiValued, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologOrdered, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologNegByFailure, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(meta_argtypes, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologHybrid, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologPTTP, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologDynamic, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMacroHead, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologListValued, 2, ftListFn(ftVoprop))])).
pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologSingleValued, 2, ftListFn(ftVoprop))])).
pt(genls(tPred, pfcDatabaseTerm),  (pfcDatabaseTerm\==tPred->rhs([{mpred_withdraw(genls(pfcDatabaseTerm, tPred))}]))).
pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcControlled),  (pfcControlled\==tPred->rhs([{mpred_withdraw(genls(pfcControlled, tPred))}]))).
pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcWatched),  (pfcWatched\==tPred->rhs([{mpred_withdraw(genls(pfcWatched, tPred))}]))).
pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcCreates),  (pfcCreates\==tPred->rhs([{mpred_withdraw(genls(pfcCreates, tPred))}]))).
pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcNegTrigger),  (pfcNegTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcNegTrigger, tPred))}]))).
pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcPosTrigger),  (pfcPosTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcPosTrigger, tPred))}]))).
pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcBcTrigger),  (pfcBcTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcBcTrigger, tPred))}]))).
pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcRHS),  (pfcRHS\==tPred->rhs([{mpred_withdraw(genls(pfcRHS, tPred))}]))).
pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, pfcMustFC),  (pfcMustFC\==tPred->rhs([{mpred_withdraw(genls(pfcMustFC, tPred))}]))).
pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, predCanHaveSingletons),  (predCanHaveSingletons\==tPred->rhs([{mpred_withdraw(genls(predCanHaveSingletons, tPred))}]))).
pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologSideEffects),  (prologSideEffects\==tPred->rhs([{mpred_withdraw(genls(prologSideEffects, tPred))}]))).
pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, meta_argtypes),  (meta_argtypes\==tPred->rhs([{mpred_withdraw(genls(meta_argtypes, tPred))}]))).
pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, predIsFlag),  (predIsFlag\==tPred->rhs([{mpred_withdraw(genls(predIsFlag, tPred))}]))).
pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, tPred),  (tPred\==tPred->rhs([{mpred_withdraw(genls(tPred, tPred))}]))).
pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, notAssertable),  (notAssertable\==tPred->rhs([{mpred_withdraw(genls(notAssertable, tPred))}]))).
pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)]))).
pt(genls(tPred, prologEquality),  (prologEquality\==tPred->rhs([{mpred_withdraw(genls(prologEquality, tPred))}]))).
pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)]))).
pt(arity(formatted_resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, A)])))).
pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, 2)])).
pt(arity(localityOfObject, A), rhs([hybrid_support(localityOfObject, A)])).
pt(arity(localityOfObject, A),  (integer(A), A>1->pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, A)])))).
pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, 2)])).
pt(arity(subFormat, A), rhs([hybrid_support(subFormat, A)])).
pt(arity(subFormat, A),  (integer(A), A>1->pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, A)])))).
pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, 2)])).
pt(arity(tRegion, A), rhs([hybrid_support(tRegion, A)])).
pt(arity(tRegion, A),  (integer(A), A>1->pt(~prologBuiltin(tRegion), rhs([~tCol(tRegion), support_hilog(tRegion, A)])))).
pt(arity(completelyAssertedCollection, A),  (integer(A), A>1->pt(~prologBuiltin(completelyAssertedCollection), rhs([~tCol(completelyAssertedCollection), support_hilog(completelyAssertedCollection, A)])))).
pt(arity(ttFormatType, A),  (integer(A), A>1->pt(~prologBuiltin(ttFormatType), rhs([~tCol(ttFormatType), support_hilog(ttFormatType, A)])))).
pt(genls(ftRest(ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftRest(ftTerm), A)])))).
pt(genls(isRandom(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(isRandom(tCol), A)])))).
pt(resultIsa(A, B), rhs([tFunction(A), ftSpec(B)])).
pt(arity(ftInt, A), rhs([hybrid_support(ftInt, A)])).
pt(ftInt(A),  (predicate_property(ftInt(A), dynamic)->rhs([{ignore(retract(ftInt(A)))}]))).
pt(isa(A, ftInt), rhs([{ignore(retract(isa(A, ftInt)))}])).
pt(arity(ftNumber, A), rhs([hybrid_support(ftNumber, A)])).
pt(ftNumber(A),  (predicate_property(ftNumber(A), dynamic)->rhs([{ignore(retract(ftNumber(A)))}]))).
pt(isa(A, ftNumber), rhs([{ignore(retract(isa(A, ftNumber)))}])).
pt(genls(ftDice(ftInt, ftInt, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDice(ftInt, ftInt, ftInt), A)])))).
pt(genls(ftDeplictsFn(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDeplictsFn(tCol), A)])))).
pt(genls('SententialOperator', 'SententialRelation'),  ('SententialRelation'\=='SententialOperator'->rhs([{mpred_withdraw(genls('SententialRelation', 'SententialOperator'))}]))).
pt(arity('SententialRelation', 1), pt(arity('SententialOperator', 1),  (\+ (genls('SententialRelation', A), A\='SententialRelation', genls(A, 'SententialOperator'), A\='SententialOperator'), 'SententialOperator'\='SententialRelation'->rhs([{get_functor('SententialRelation', B), get_functor('SententialOperator', C), nop(dmsg(wishing_to_add(('SententialRelation'==>'SententialOperator'))))}, nearestGenls(B, C)])))).
pt(genls(tAvoidForwardChain, 'SententialOperator'),  ('SententialOperator'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('SententialOperator', tAvoidForwardChain))}]))).
pt(arity('SententialOperator', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)]))).
pt(genls(tAvoidForwardChain, 'VariableArityRelation'),  ('VariableArityRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('VariableArityRelation', tAvoidForwardChain))}]))).
pt(arity('VariableArityRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('VariableArityRelation', A), A\='VariableArityRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='VariableArityRelation'->rhs([{get_functor('VariableArityRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('VariableArityRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
pt(genls(tAvoidForwardChain, 'CommutativeRelation'),  ('CommutativeRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('CommutativeRelation', tAvoidForwardChain))}]))).
pt(arity('CommutativeRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('CommutativeRelation', A), A\='CommutativeRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='CommutativeRelation'->rhs([{get_functor('CommutativeRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('CommutativeRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
pt(genls(tAvoidForwardChain, tFunction),  (tFunction\==tAvoidForwardChain->rhs([{mpred_withdraw(genls(tFunction, tAvoidForwardChain))}]))).
pt(arity(tFunction, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)]))).
pt(genls(tAvoidForwardChain, 'EvaluatableRelation'),  ('EvaluatableRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('EvaluatableRelation', tAvoidForwardChain))}]))).
pt(arity('EvaluatableRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('EvaluatableRelation', A), A\='EvaluatableRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='EvaluatableRelation'->rhs([{get_functor('EvaluatableRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('EvaluatableRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
pt(arity(ftVoprop, A), rhs([hybrid_support(ftVoprop, A)])).
pt(ftVoprop(A),  (predicate_property(ftVoprop(A), dynamic)->rhs([{ignore(retract(ftVoprop(A)))}]))).
pt(isa(A, ftVoprop), rhs([{ignore(retract(isa(A, ftVoprop)))}])).
pt(genls(argQuotedIsa(tRelation, ftInt, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argQuotedIsa(tRelation, ftInt, ttFormatType), A)])))).
pt(arity(argQuotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, A)])))).
pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, 3)])).
pt(genls(argIsa(tRelation, ftInt, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argIsa(tRelation, ftInt, tCol), A)])))).
pt(genls(formatted_resultIsa(ttFormatType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(formatted_resultIsa(ttFormatType, tCol), A)])))).
pt(genls(quotedDefnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedDefnIff(ttFormatType, ftTerm), A)])))).
pt(arity(quotedDefnIff, A), rhs([hybrid_support(quotedDefnIff, A)])).
pt(arity(quotedDefnIff, A),  (integer(A), A>1->pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, A)])))).
pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, 2)])).
pt(genls(defnNecessary(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnNecessary(ttFormatType, ftTerm), A)])))).
pt(arity(defnNecessary, A), rhs([hybrid_support(defnNecessary, A)])).
pt(arity(defnNecessary, A),  (integer(A), A>1->pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, A)])))).
pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, 2)])).
pt(genls(defnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnIff(ttFormatType, ftTerm), A)])))).
pt(arity(defnIff, A), rhs([hybrid_support(defnIff, A)])).
pt(arity(defnIff, A),  (integer(A), A>1->pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, A)])))).
pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, 2)])).
pt(genls(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A)])))).
pt(genls(subFormat(ttFormatType, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(subFormat(ttFormatType, ttFormatType), A)])))).
pt(genls(macroSomethingDescription(ftTerm, ftListFn(ftString)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(macroSomethingDescription(ftTerm, ftListFn(ftString)), A)])))).
pt(genls(pddlObjects(tCol, ftListFn(ftID)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlObjects(tCol, ftListFn(ftID)), A)])))).
pt(genls(pddlPredicates(ftListFn(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlPredicates(ftListFn(ftVoprop)), A)])))).
pt(genls(pddlSorts(tCol, ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlSorts(tCol, ftListFn(tCol)), A)])))).
pt(genls(pddlTypes(ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlTypes(ftListFn(tCol)), A)])))).
pt(genls(comment(ftTerm, ftString), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(comment(ftTerm, ftString), A)])))).
pt(arity(comment, A),  (integer(A), A>1->pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, A)])))).
pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, 2)])).
pt(genls(genlInverse(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlInverse(tPred, tPred), A)])))).
pt(genls(genlPreds(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlPreds(tPred, tPred), A)])))).
pt(genls(predProxyAssert(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyAssert(prologMultiValued, ftTerm), A)])))).
pt(genls(predProxyQuery(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyQuery(prologMultiValued, ftTerm), A)])))).
pt(genls((ftAssertable<-ftAskable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAssertable<-ftAskable), A)])))).
pt(arity(<-, A),  (integer(A), A>1->pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, A)])))).
pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, 2)])).
pt(genls((ftAskable==>ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAskable==>ftAssertable), A)])))).
pt(arity(==>, A),  (integer(A), A>1->pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, A)])))).
pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, 2)])).
pt(genls(predArgMulti(prologMultiValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predArgMulti(prologMultiValued, ftInt), A)])))).
pt(arity(predArgMulti, A),  (integer(A), A>1->pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, A)])))).
pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, 2)])).
pt(genls(tDeleted(ftID), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(tDeleted(ftID), A)])))).
pt(arity(tDeleted, A),  (integer(A), A>1->pt(~prologBuiltin(tDeleted), rhs([~tCol(tDeleted), support_hilog(tDeleted, A)])))).
pt(genls(predInstMax(ftID, prologSingleValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predInstMax(ftID, prologSingleValued, ftInt), A)])))).
pt(arity(predInstMax, A),  (integer(A), A>1->pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, A)])))).
pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, 3)])).
pt(arity(predInstMax, A), rhs([hybrid_support(predInstMax, A)])).
pt(genls(predTypeMax(prologSingleValued, tCol, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predTypeMax(prologSingleValued, tCol, ftInt), A)])))).
pt(tCol(A), rhs([{guess_supertypes(A)}])).
pt(arity(tNewlyCreated, A), rhs([hybrid_support(tNewlyCreated, A)])).
pt(tNewlyCreated(A), rhs([{guess_types(A)}])).
pt(genls(dividesBetween(tCol, tCol, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(dividesBetween(tCol, tCol, tCol), A)])))).
pt(arity(dividesBetween, A), rhs([hybrid_support(dividesBetween, A)])).
pt(arity(dividesBetween, A),  (integer(A), A>1->pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, A)])))).
pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, 3)])).
pt(quotedDefnIff(A, _), rhs([ttFormatType(A)])).
pt(arity(ftFloat, A), rhs([hybrid_support(ftFloat, A)])).
pt(ftFloat(A),  (predicate_property(ftFloat(A), dynamic)->rhs([{ignore(retract(ftFloat(A)))}]))).
pt(isa(A, ftFloat), rhs([{ignore(retract(isa(A, ftFloat)))}])).
pt(arity(ftAtom, A), rhs([hybrid_support(ftAtom, A)])).
pt(ftAtom(A),  (predicate_property(ftAtom(A), dynamic)->rhs([{ignore(retract(ftAtom(A)))}]))).
pt(isa(A, ftAtom), rhs([{ignore(retract(isa(A, ftAtom)))}])).
pt(arity(ftCompound, A), rhs([hybrid_support(ftCompound, A)])).
pt(ftCompound(A),  (predicate_property(ftCompound(A), dynamic)->rhs([{ignore(retract(ftCompound(A)))}]))).
pt(isa(A, ftCompound), rhs([{ignore(retract(isa(A, ftCompound)))}])).
pt(arity(ftGround, A), rhs([hybrid_support(ftGround, A)])).
pt(ftGround(A),  (predicate_property(ftGround(A), dynamic)->rhs([{ignore(retract(ftGround(A)))}]))).
pt(isa(A, ftGround), rhs([{ignore(retract(isa(A, ftGround)))}])).
pt(arity(ftID, A), rhs([hybrid_support(ftID, A)])).
pt(ftID(A),  (predicate_property(ftID(A), dynamic)->rhs([{ignore(retract(ftID(A)))}]))).
pt(isa(A, ftID), rhs([{ignore(retract(isa(A, ftID)))}])).
pt(arity(ftTerm, A), rhs([hybrid_support(ftTerm, A)])).
pt(ftTerm(A),  (predicate_property(ftTerm(A), dynamic)->rhs([{ignore(retract(ftTerm(A)))}]))).
pt(isa(A, ftTerm), rhs([{ignore(retract(isa(A, ftTerm)))}])).
pt(arity(ftNonvar, A), rhs([hybrid_support(ftNonvar, A)])).
pt(ftNonvar(A),  (predicate_property(ftNonvar(A), dynamic)->rhs([{ignore(retract(ftNonvar(A)))}]))).
pt(isa(A, ftNonvar), rhs([{ignore(retract(isa(A, ftNonvar)))}])).
pt(arity(ftList, A), rhs([hybrid_support(ftList, A)])).
pt(ftList(A),  (predicate_property(ftList(A), dynamic)->rhs([{ignore(retract(ftList(A)))}]))).
pt(isa(A, ftList), rhs([{ignore(retract(isa(A, ftList)))}])).
pt(arity(ftRest, A), rhs([hybrid_support(ftRest, A)])).
pt(ftRest(A),  (predicate_property(ftRest(A), dynamic)->rhs([{ignore(retract(ftRest(A)))}]))).
pt(isa(A, ftRest), rhs([{ignore(retract(isa(A, ftRest)))}])).
pt(arity(ftBoolean, A), rhs([hybrid_support(ftBoolean, A)])).
pt(ftBoolean(A),  (predicate_property(ftBoolean(A), dynamic)->rhs([{ignore(retract(ftBoolean(A)))}]))).
pt(isa(A, ftBoolean), rhs([{ignore(retract(isa(A, ftBoolean)))}])).
pt(arity(ftText, A), rhs([hybrid_support(ftText, A)])).
pt(ftText(A),  (predicate_property(ftText(A), dynamic)->rhs([{ignore(retract(ftText(A)))}]))).
pt(isa(A, ftText), rhs([{ignore(retract(isa(A, ftText)))}])).
pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)])).
pt(pfcControlled(A),  (get_arity(A, B, C), arity(B, C)->rhs([support_hilog(B, C)]))).
pt(pfcControlled(A),  (has_functor(A)->rhs([{kb_dynamic(A), get_functor(A, B, C)}, arity(B, C), pfcControlled(B)]))).
pt(pfcMustFC(A), rhs([pfcControlled(A)])).
pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)]))).
pt(~ttFormatType(ttValueType), rhs([tSet(ttValueType)])).
pt(~ttFormatType(tNotForUnboundPredicates), rhs([tSet(tNotForUnboundPredicates)])).
pt(~ttFormatType(completelyAssertedCollection), rhs([tSet(completelyAssertedCollection)])).
pt(~ttFormatType(prologNegByFailure), rhs([tSet(prologNegByFailure)])).
pt(~ttFormatType(tCol), rhs([tSet(tCol)])).
pt(~ttFormatType(tSpec), rhs([tSet(tSpec)])).
pt(~ttFormatType(ttFormatType), rhs([tSet(ttFormatType)])).
pt(~ttFormatType(tSet), rhs([tSet(tSet)])).
pt(~ttFormatType(tRelation), rhs([tSet(tRelation)])).
pt(~ttFormatType(tPred), rhs([tSet(tPred)])).
pt(~ttFormatType(tFunction), rhs([tSet(tFunction)])).
pt(~ttFormatType(prologMacroHead), rhs([tSet(prologMacroHead)])).
pt(~ttFormatType(ttPredType), rhs([tSet(ttPredType)])).
pt(~ttFormatType(functorDeclares), rhs([tSet(functorDeclares)])).
pt(~ttFormatType(prologMultiValued), rhs([tSet(prologMultiValued)])).
pt(~ttFormatType(prologOrdered), rhs([tSet(prologOrdered)])).
pt(~ttFormatType(predIsFlag), rhs([tSet(predIsFlag)])).
pt(~ttFormatType(ttNonGenled), rhs([tSet(ttNonGenled)])).
pt(~ttFormatType(meta_argtypes), rhs([tSet(meta_argtypes)])).
pt(~ttFormatType(prologHybrid), rhs([tSet(prologHybrid)])).
pt(~ttFormatType(prologPTTP), rhs([tSet(prologPTTP)])).
pt(~ttFormatType(prologDynamic), rhs([tSet(prologDynamic)])).
pt(~ttFormatType(prologKIF), rhs([tSet(prologKIF)])).
pt(~ttFormatType(prologBuiltin), rhs([tSet(prologBuiltin)])).
pt(~ttFormatType(prologListValued), rhs([tSet(prologListValued)])).
pt(~ttFormatType(prologSingleValued), rhs([tSet(prologSingleValued)])).
pt(~ttFormatType(pfcControlled), rhs([tSet(pfcControlled)])).
pt(~ttFormatType(predCanHaveSingletons), rhs([tSet(predCanHaveSingletons)])).
pt(~ttFormatType(tTemporalThing), rhs([tSet(tTemporalThing)])).
pt(~ttFormatType(prologSideEffects), rhs([tSet(prologSideEffects)])).
pt(~ttFormatType(tInferInstanceFromArgType), rhs([tSet(tInferInstanceFromArgType)])).
pt(~ttFormatType(ttNotTemporalType), rhs([tSet(ttNotTemporalType)])).
pt(~ttFormatType(ttSpatialType), rhs([tSet(ttSpatialType)])).
pt(~ttFormatType(ttTemporalType), rhs([tSet(ttTemporalType)])).
pt(~ttFormatType(ttTypeType), rhs([tSet(ttTypeType)])).
pt(~ttFormatType(ttUnverifiableType), rhs([tSet(ttUnverifiableType)])).
pt(~ttFormatType(pfcDatabaseTerm), rhs([tSet(pfcDatabaseTerm)])).
pt(~ttFormatType(pfcWatched), rhs([tSet(pfcWatched)])).
pt(~ttFormatType(pfcCreates), rhs([tSet(pfcCreates)])).
pt(~ttFormatType(pfcNegTrigger), rhs([tSet(pfcNegTrigger)])).
pt(~ttFormatType(pfcPosTrigger), rhs([tSet(pfcPosTrigger)])).
pt(~ttFormatType(pfcBcTrigger), rhs([tSet(pfcBcTrigger)])).
pt(~ttFormatType(pfcRHS), rhs([tSet(pfcRHS)])).
pt(~ttFormatType(pfcMustFC), rhs([tSet(pfcMustFC)])).
pt(~ttFormatType(notAssertable), rhs([tSet(notAssertable)])).
pt(~ttFormatType(prologEquality), rhs([tSet(prologEquality)])).
pt(~ttFormatType(ftInt), rhs([tSet(ftInt)])).
pt(~ttFormatType(vtDirection), rhs([tSet(vtDirection)])).
pt(~ttFormatType(completeIsaAsserted), rhs([tSet(completeIsaAsserted)])).
pt(~ttFormatType(tFormatType), rhs([tSet(tFormatType)])).
pt(~ttFormatType(tSpatialThing), rhs([tSet(tSpatialThing)])).
pt(~ttFormatType(completeExtentAsserted), rhs([tSet(completeExtentAsserted)])).
pt(~ttFormatType(vtValue), rhs([tSet(vtValue)])).
pt(~ttFormatType(vtColor), rhs([tSet(vtColor)])).
pt(~ttFormatType(tAvoidForwardChain), rhs([tSet(tAvoidForwardChain)])).
pt(~ttFormatType('SententialOperator'), rhs([tSet('SententialOperator')])).
pt(~ttFormatType(tNewlyCreated), rhs([tSet(tNewlyCreated)])).
pt(~ttFormatType(ttTypeFacet), rhs([tSet(ttTypeFacet)])).
pt(~ttFormatType(ptBinaryPredicate), rhs([tSet(ptBinaryPredicate)])).
pt(~ttFormatType(ptUnaryPredicate), rhs([tSet(ptUnaryPredicate)])).
pt(prologHybrid(A),  (has_functor(A)->rhs([{kb_dynamic(A)}]))).
pt(prologDynamic(A),  (has_functor(A)->rhs([{decl_mpred_prolog(A)}]))).
pt(prologBuiltin(A),  (has_functor(A)->rhs([{decl_mpred_prolog(A)}]))).
pt(pfcControlled(A),  (is_ftCompound(A)->rhs([{once((A=B/C;get_functor(A, B, C))), kb_dynamic(B/C)}]))).
pt(pfcControlled(A), rhs([prologHybrid(A)])).
pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)]))).
pt(tPred(apathFn), rhs([ptBinaryPredicate(apathFn)])).
pt(tPred(isKappaFn), rhs([ptBinaryPredicate(isKappaFn)])).
pt(tPred(arity), rhs([ptBinaryPredicate(arity)])).
pt(tPred(<=>), rhs([ptBinaryPredicate(<=>)])).
pt(tPred(mpred_select), rhs([ptBinaryPredicate(mpred_select)])).
pt(tPred(pddlObjects), rhs([ptBinaryPredicate(pddlObjects)])).
pt(tPred(genls), rhs([ptBinaryPredicate(genls)])).
pt(tPred(type_prefix), rhs([ptBinaryPredicate(type_prefix)])).
pt(tPred(mpred_do_and_undo_method), rhs([ptBinaryPredicate(mpred_do_and_undo_method)])).
pt(tPred(>), rhs([ptBinaryPredicate(>)])).
pt(tPred(support_hilog), rhs([ptBinaryPredicate(support_hilog)])).
pt(tPred(\=), rhs([ptBinaryPredicate(\=)])).
pt(tPred(hybrid_support), rhs([ptBinaryPredicate(hybrid_support)])).
pt(tPred(=), rhs([ptBinaryPredicate(=)])).
pt(tPred(->), rhs([ptBinaryPredicate(->)])).
pt(tPred(show_failure), rhs([ptBinaryPredicate(show_failure)])).
pt(tPred(predicate_property), rhs([ptBinaryPredicate(predicate_property)])).
pt(tPred(marker_supported), rhs([ptBinaryPredicate(marker_supported)])).
pt(tPred(predicate_is_undefined_fa), rhs([ptBinaryPredicate(predicate_is_undefined_fa)])).
pt(tPred(\==), rhs([ptBinaryPredicate(\==)])).
pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)])).
pt(tPred(=..), rhs([ptBinaryPredicate(=..)])).
pt(tPred(isa_backchaing), rhs([ptBinaryPredicate(isa_backchaing)])).
pt(tPred(get_functor), rhs([ptBinaryPredicate(get_functor)])).
pt(tPred(call), rhs([ptBinaryPredicate(call)])).
pt(tPred(pddlSomethingIsa), rhs([ptBinaryPredicate(pddlSomethingIsa)])).
pt(tPred(disjointWith), rhs([ptBinaryPredicate(disjointWith)])).
pt(tPred(isa_from_morphology), rhs([ptBinaryPredicate(isa_from_morphology)])).
pt(tPred(nearestGenls), rhs([ptBinaryPredicate(nearestGenls)])).
pt(tPred(dif), rhs([ptBinaryPredicate(dif)])).
pt(tPred(formatted_resultIsa), rhs([ptBinaryPredicate(formatted_resultIsa)])).
pt(tPred(quotedIsa), rhs([ptBinaryPredicate(quotedIsa)])).
pt(tPred(typeGenls), rhs([ptBinaryPredicate(typeGenls)])).
pt(tPred(mpred_module), rhs([ptBinaryPredicate(mpred_module)])).
pt(tPred(either), rhs([ptBinaryPredicate(either)])).
pt(tPred(<==>), rhs([ptBinaryPredicate(<==>)])).
pt(tPred(typeProps), rhs([ptBinaryPredicate(typeProps)])).
pt(tPred(genlInverse), rhs([ptBinaryPredicate(genlInverse)])).
pt(tPred(predProxyAssert), rhs([ptBinaryPredicate(predProxyAssert)])).
pt(tPred(predProxyQuery), rhs([ptBinaryPredicate(predProxyQuery)])).
pt(tPred(predProxyRetract), rhs([ptBinaryPredicate(predProxyRetract)])).
pt(tPred(resultIsa), rhs([ptBinaryPredicate(resultIsa)])).
pt(tPred(isa), rhs([ptBinaryPredicate(isa)])).
pt(tPred(localityOfObject), rhs([ptBinaryPredicate(localityOfObject)])).
pt(tPred(subFormat), rhs([ptBinaryPredicate(subFormat)])).
pt(tPred(isLikeFn), rhs([ptBinaryPredicate(isLikeFn)])).
pt(tPred(quotedDefnIff), rhs([ptBinaryPredicate(quotedDefnIff)])).
pt(tPred(defnNecessary), rhs([ptBinaryPredicate(defnNecessary)])).
pt(tPred(defnIff), rhs([ptBinaryPredicate(defnIff)])).
pt(tPred(macroSomethingDescription), rhs([ptBinaryPredicate(macroSomethingDescription)])).
pt(tPred(pddlSorts), rhs([ptBinaryPredicate(pddlSorts)])).
pt(tPred(comment), rhs([ptBinaryPredicate(comment)])).
pt(tPred(<-), rhs([ptBinaryPredicate(<-)])).
pt(tPred(==>), rhs([ptBinaryPredicate(==>)])).
pt(tPred(predArgMulti), rhs([ptBinaryPredicate(predArgMulti)])).
pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)])).
pt(arity(pddlObjects, A),  (integer(A), A>1->pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, A)])))).
pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, 2)])).
pt(arity(mpred_do_and_undo_method, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, A)])))).
pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, 2)])).
pt(arity(support_hilog, A),  (integer(A), A>1->pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, A)])))).
pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, 2)])).
pt(arity(hybrid_support, A),  (integer(A), A>1->pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, A)])))).
pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, 2)])).
pt(arity(=, A),  (integer(A), A>1->pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, A)])))).
pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, 2)])).
pt(arity(marker_supported, A),  (integer(A), A>1->pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, A)])))).
pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, 2)])).
pt(arity(nearestGenls, A),  (integer(A), A>1->pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, A)])))).
pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, 2)])).
pt(arity(either, A),  (integer(A), A>1->pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, A)])))).
pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, 2)])).
pt(arity(<==>, A),  (integer(A), A>1->pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, A)])))).
pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, 2)])).
pt(arity(macroSomethingDescription, A),  (integer(A), A>1->pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, A)])))).
pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, 2)])).
pt(arity(pddlSorts, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, A)])))).
pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, 2)])).
pt(arity(if_missing(ftAskable, ftAssertable), A), rhs([hybrid_support(if_missing(ftAskable, ftAssertable), A)])).
pt(arity(if_missing, A), rhs([hybrid_support(if_missing, A)])).
pt(tPred(if_missing), rhs([ptBinaryPredicate(if_missing)])).
pt(arity(if_missing, A),  (integer(A), A>1->pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, A)])))).
pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, 2)])).
pt(tPred(\=@=), rhs([ptBinaryPredicate(\=@=)])).
pt(if_missing(A, B), rhs([(\+A/ (A\=@=B)==>B)])).
pt(genls(mdefault(ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mdefault(ftAssertable), A)])))).
pt(arity(mdefault, A), rhs([hybrid_support(mdefault, A)])).
pt(mdefault((A<-B)),  (mpred_literal(A)->rhs([(A<-B, \+ ~A)]))).
pt(arity(mdefault, A),  (integer(A), A>1->pt(~prologBuiltin(mdefault), rhs([~tCol(mdefault), support_hilog(mdefault, A)])))).
pt(arity(mdefault/1, A), rhs([hybrid_support(mdefault/1, A)])).
pt(tPred(/), rhs([ptBinaryPredicate(/)])).
pt(mdefault((B==>A)),  (nonvar(A)->rhs([(B==>mdefault(A))]))).
pt(mdefault(~A),  (nonvar(A)->rhs([(\+A==> ~A)]))).
pt(mdefault(A),  (mpred_positive_literal(A)->rhs([(\+ ~A==>A)]))).
pt(arity(\, A), rhs([hybrid_support(\, A)])).
pt(mdefault(A),  (mpred_literal_nv(A), if_missing_mask(A, B, C)->rhs([(\ +B/C==>A)]))).
pt(tPred(mpred_sv), rhs([ptBinaryPredicate(mpred_sv)])).
pt(tPred(singleValuedInArg), rhs([ptBinaryPredicate(singleValuedInArg)])).
pt(arity(singleValuedInArg, A), rhs([hybrid_support(singleValuedInArg, A)])).
pt(arity(mpred_sv, A), rhs([hybrid_support(mpred_sv, A)])).
pt(mpred_sv(A, B), rhs([prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)])).
pt(prologSingleValued(A), pt(arity(A, B), rhs([mdefault(singleValuedInArg(A, B))]))).
pt(arity(predInstMax, A), rhs([mdefault(singleValuedInArg(predInstMax, A))])).
pt(arity(predTypeMax, A), rhs([mdefault(singleValuedInArg(predTypeMax, A))])).
pt(singleValuedInArg(A, _), rhs([prologSingleValued(A)])).
pt(arity(singleValuedInArg, A), rhs([mdefault(singleValuedInArg(singleValuedInArg, A))])).
pt(\ +singleValuedInArg(singleValuedInArg, A),  (dif:dif(2, A)->rhs([singleValuedInArg(singleValuedInArg, 2)]))).
pt(arity(singleValuedInArgDefault, A), rhs([hybrid_support(singleValuedInArgDefault, A)])).
pt(arity(singleValuedInArgDefault, A),  (integer(A), A>1->pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, A)])))).
pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, 3)])).
pt(genls(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A)])))).
pt(arity(relationMostInstance, A), rhs([hybrid_support(relationMostInstance, A)])).
pt(singleValuedInArgDefault(A, 2, C), pt(arity(A, 2), pt(argIsa(A, 1, B), rhs([relationMostInstance(A, B, C)])))).
pt(singleValuedInArgDefault(B, C, A),  (ground(A)->rhs([singleValuedInArg(B, C)]))).
pt(singleValuedInArgDefault(B, E, A),  (is_ftNonvar(A)->pt(arity(B, C),  (functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)->rhs([mdefault((F<-{ground(D)}, ~ (G/nonvar(H))))]))))).
pt(arity(clif, A), rhs([hybrid_support(clif, A)])).
pt(arity(boxlog, A), rhs([hybrid_support(boxlog, A)])).
pt(arity(pfclog, A), rhs([hybrid_support(pfclog, A)])).
pt(clif(A), rhs([{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}])).
pt(boxlog(A),  (delistify_last_arg(A, boxlog_to_pfc, B)->rhs([pfclog(B)]))).
pt(pfclog(A), rhs([A])).
pt(arity(clif, A),  (integer(A), A>1->pt(~prologBuiltin(clif), rhs([~tCol(clif), support_hilog(clif, A)])))).
pt(arity(clif/1, A), rhs([hybrid_support(clif/1, A)])).
pt(tPred(if), rhs([ptBinaryPredicate(if)])).
pt(arity(if, A), rhs([hybrid_support(if, A)])).
pt(if(A, B),  (is_clif(if(A, B))->rhs([clif(if(A, B))]))).
pt(A,  (is_kif_rule(A)->rhs([clif(A)]))).
:- multifile(baseKB:(ttPredType)/1).
:- dynamic ttPredType/1.
:- multifile ttPredType/1.
:- module_transparent ttPredType/1.
:- discontiguous ttPredType/1.

ttPredType(pfcDatabaseTerm).
ttPredType(pfcControlled).
ttPredType(prologSingleValued).
ttPredType(pfcWatched).
ttPredType(pfcCreates).
ttPredType(pfcNegTrigger).
ttPredType(pfcPosTrigger).
ttPredType(pfcBcTrigger).
ttPredType(pfcRHS).
ttPredType(pfcMustFC).
ttPredType(predCanHaveSingletons).
ttPredType(prologSideEffects).
ttPredType(meta_argtypes).
ttPredType(predIsFlag).
ttPredType(tPred).
ttPredType(prologMultiValued).
ttPredType(prologMacroHead).
ttPredType(notAssertable).
ttPredType(prologBuiltin).
ttPredType(prologDynamic).
ttPredType(prologOrdered).
ttPredType(prologNegByFailure).
ttPredType(prologPTTP).
ttPredType(prologKIF).
ttPredType(prologEquality).
ttPredType(prologHybrid).
ttPredType(prologListValued).
ttPredType(ptBinaryPredicate).
:- multifile(baseKB:(ftPercent)/1).
:- dynamic ftPercent/1.
:- multifile ftPercent/1.
:- module_transparent ftPercent/1.
:- discontiguous ftPercent/1.

:- multifile(baseKB:(tSpatialThing)/1).
:- dynamic tSpatialThing/1.
:- multifile tSpatialThing/1.
:- module_transparent tSpatialThing/1.
:- discontiguous tSpatialThing/1.

tSpatialThing(A) :-
	cwc,
	lazy(\+ ~tSpatialThing(A)),
	isa_backchaing(A, tSpatialThing).
:- multifile(baseKB:(argsQuoted)/1).
:- dynamic argsQuoted/1.
:- module_transparent argsQuoted/1.

argsQuoted(loop_check_term).
argsQuoted(loop_check_term_key).
argsQuoted('QuoteFn').
argsQuoted('$VAR').
argsQuoted(ain).
argsQuoted(meta_argtypes).
argsQuoted(ttFormated).
argsQuoted(ruleRewrite).
argsQuoted(bordersOn).
argsQuoted(mpred_action).
argsQuoted(mpred_rem).
argsQuoted(added).
argsQuoted(call).
argsQuoted(call_u).
argsQuoted(member).
argsQuoted(=..).
argsQuoted({}).
argsQuoted(second_order).
:- multifile(baseKB:(disjointWith)/2).
:- dynamic disjointWith/2.
:- multifile disjointWith/2.
:- module_transparent disjointWith/2.
:- discontiguous disjointWith/2.

disjointWith(ttTemporalType, ttAbstractType).
disjointWith(ttAbstractType, ttTemporalType).
:- multifile(baseKB:(mpred_f)/3).
:- dynamic mpred_f/3.
:- module_transparent mpred_f/3.

:- multifile(baseKB:(cycPrepending)/2).
:- dynamic cycPrepending/2.
:- module_transparent cycPrepending/2.

:- multifile(baseKB:(<==>)/2).
:- dynamic (<==>)/2.
:- multifile (<==>)/2.
:- module_transparent (<==>)/2.
:- discontiguous (<==>)/2.

prologHybrid(A), arity(A, B)<==>hybrid_support(A, B).
arity(A, 2), tPred(A)<==>ptBinaryPredicate(A).
:- multifile(baseKB:(mpred_undo_sys)/3).
:- dynamic mpred_undo_sys/3.
:- multifile mpred_undo_sys/3.
:- module_transparent mpred_undo_sys/3.
:- discontiguous mpred_undo_sys/3.

:- multifile(baseKB:(tNewlyCreated)/1).
:- dynamic tNewlyCreated/1.
:- multifile tNewlyCreated/1.
:- module_transparent tNewlyCreated/1.
:- discontiguous tNewlyCreated/1.

tNewlyCreated(A) :-
	cwc,
	lazy(\+ ~tNewlyCreated(A)),
	isa_backchaing(A, tNewlyCreated).
:- multifile(baseKB:(tNotForUnboundPredicates)/1).
:- dynamic tNotForUnboundPredicates/1.
:- multifile tNotForUnboundPredicates/1.
:- module_transparent tNotForUnboundPredicates/1.
:- discontiguous tNotForUnboundPredicates/1.

tNotForUnboundPredicates(member).
tNotForUnboundPredicates(A) :-
	cwc,
	lazy(\+ ~tNotForUnboundPredicates(A)),
	isa_backchaing(A, tNotForUnboundPredicates).
tNotForUnboundPredicates(write).
tNotForUnboundPredicates(resolveConflict).
:- multifile(baseKB:(mpred_is_spying_pred)/2).
:- dynamic mpred_is_spying_pred/2.
:- multifile mpred_is_spying_pred/2.

:- multifile(baseKB:(prologHybrid)/1).
:- dynamic prologHybrid/1.
:- multifile prologHybrid/1.
:- module_transparent prologHybrid/1.
:- discontiguous prologHybrid/1.

prologHybrid(arity).
prologHybrid(genls).
prologHybrid(prologBuiltin).
prologHybrid(conflict).
prologHybrid(mpred_undo_sys).
prologHybrid(tPred).
prologHybrid(tCol).
prologHybrid(support_hilog).
prologHybrid(hybrid_support).
prologHybrid(prologHybrid).
prologHybrid(mpred_do_and_undo_method).
prologHybrid(completelyAssertedCollection).
prologHybrid(marker_supported).
prologHybrid(map_mpred_mark_C).
prologHybrid(mpred_mark_C).
prologHybrid(pfcControlled).
prologHybrid(ttPredType).
prologHybrid(pfcDatabaseTerm).
prologHybrid(prologSingleValued).
prologHybrid(pfcWatched).
prologHybrid(pfcCreates).
prologHybrid(pfcNegTrigger).
prologHybrid(pfcPosTrigger).
prologHybrid(pfcBcTrigger).
prologHybrid(pfcRHS).
prologHybrid(pfcMustFC).
prologHybrid(tSet).
prologHybrid(ttTypeType).
prologHybrid(ttFormatType).
prologHybrid(mpred_univ).
prologHybrid(predCanHaveSingletons).
prologHybrid(prologSideEffects).
prologHybrid(meta_argtypes).
prologHybrid(predIsFlag).
prologHybrid(prologMultiValued).
prologHybrid(prologMacroHead).
prologHybrid(notAssertable).
prologHybrid(prologDynamic).
prologHybrid(prologOrdered).
prologHybrid(prologNegByFailure).
prologHybrid(prologPTTP).
prologHybrid(prologKIF).
prologHybrid(prologEquality).
prologHybrid(prologListValued).
prologHybrid(genlPreds).
prologHybrid(argIsa).
prologHybrid(functorDeclares).
prologHybrid(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologHybrid, B).
prologHybrid(pddlSomethingIsa).
prologHybrid(tFunction).
prologHybrid(completeExtentAsserted).
prologHybrid(ttNotTemporalType).
prologHybrid(ttTemporalType).
prologHybrid(disjointWith).
prologHybrid(ptSymmetric).
prologHybrid(tNotForUnboundPredicates).
prologHybrid(nearestGenls).
prologHybrid(completeIsaAsserted).
prologHybrid(formatted_resultIsa).
prologHybrid(quotedIsa).
prologHybrid(typeGenls).
prologHybrid(mpred_module).
prologHybrid(<==>).
prologHybrid(either).
prologHybrid(typeProps).
prologHybrid(genlInverse).
prologHybrid(instTypeProps).
prologHybrid(predProxyAssert).
prologHybrid(predProxyQuery).
prologHybrid(predProxyRetract).
prologHybrid(predTypeMax).
prologHybrid(resultIsa).
prologHybrid(isa).
prologHybrid(ftString).
prologHybrid(ftVar).
prologHybrid(ftSpec).
prologHybrid(ftCallable).
prologHybrid(ftPercent).
prologHybrid(ttValueType).
prologHybrid(argQuotedIsa).
prologHybrid(localityOfObject).
prologHybrid(subFormat).
prologHybrid(tRegion).
prologHybrid(ftInt).
prologHybrid(ftNumber).
prologHybrid(ftVoprop).
prologHybrid(quotedDefnIff).
prologHybrid(defnNecessary).
prologHybrid(defnIff).
prologHybrid(predInstMax).
prologHybrid(tNewlyCreated).
prologHybrid(dividesBetween).
prologHybrid(ftFloat).
prologHybrid(ftAtom).
prologHybrid(ftCompound).
prologHybrid(ftGround).
prologHybrid(ftID).
prologHybrid(ftTerm).
prologHybrid(ftNonvar).
prologHybrid(ftList).
prologHybrid(ftRest).
prologHybrid(ftBoolean).
prologHybrid(ftText).
prologHybrid(ptBinaryPredicate).
prologHybrid(if_missing).
prologHybrid(if_missing(ftAskable, ftAssertable)).
prologHybrid(mdefault).
prologHybrid(mdefault/1).
prologHybrid(\).
prologHybrid(singleValuedInArg).
prologHybrid(mpred_sv).
prologHybrid(singleValuedInArgDefault).
prologHybrid(relationMostInstance).
prologHybrid(clif).
prologHybrid(boxlog).
prologHybrid(pfclog).
prologHybrid(clif/1).
prologHybrid(if).
:- multifile(baseKB:(decided_not_was_isa)/2).
:- dynamic decided_not_was_isa/2.
:- module_transparent decided_not_was_isa/2.

:- multifile(baseKB:(never_retract_u)/2).
:- dynamic never_retract_u/2.
:- module_transparent never_retract_u/2.

never_retract_u(A, test_sanity(A)) :-
	never_retract_u(A).
never_retract_u(A, is_ftVar(A)) :-
	is_ftVar(A).
never_retract_u(human(trudy), sanity_test).
never_retract_u(tHumanHair(skRelationAllExistsFn(mudSubPart, skRelationAllExistsFn(mudSubPart, skRelationAllExistsFn(mudSubPart, iExplorer1, tHumanBody), tHumanHead), tHumanHair)), sanity_test).
never_retract_u(father(skArg1ofFatherFn(trudy), trudy), sanity_test).
never_retract_u(argQuotedIsa(thereExistAtLeast, 1, ftPositiveInteger), sanity_test).
:- multifile(baseKB:(<==)/2).
:- dynamic<== / 2.
:- module_transparent<== / 2.

:- multifile(baseKB:(mpred_mark)/4).
:- dynamic mpred_mark/4.
:- module_transparent mpred_mark/4.

mpred_mark(pfcLHS, p, prologBuiltin, 1).
mpred_mark(pfcCallCode, p, make_builtin, 1).
mpred_mark(pfcPosTrigger, p, prologBuiltin, 1).
mpred_mark(pfcLHS, p, conflict, 1).
mpred_mark(pfcCallCode, p, must, 1).
mpred_mark(pfcPosTrigger, p, conflict, 1).
mpred_mark(pfcCallCode, p, type_prefix, 2).
mpred_mark(pfcCreates, p, tCol, 1).
mpred_mark(pfcLHS, p, mpred_undo_sys, 3).
mpred_mark(pfcCreates, p, mpred_do_and_undo_method, 2).
mpred_mark(pfcPosTrigger, p, mpred_undo_sys, 3).
mpred_mark(pfcCallCode, p, mpred_non_neg_literal, 1).
mpred_mark(pfcLHS, p, tPred, 1).
mpred_mark(pfcCallCode, p, integer, 1).
mpred_mark(pfcCallCode, p, >, 2).
mpred_mark(pfcLHS, n, prologBuiltin, 1).
mpred_mark(pfcCreates, n, tCol, 1).
mpred_mark(pfcCreates, p, support_hilog, 2).
mpred_mark(pfcPosTrigger, p, tPred, 1).
mpred_mark(pfcPosTrigger, n, prologBuiltin, 1).
mpred_mark(pfcLHS, n, tCol, 1).
mpred_mark(pfcCallCode, p, completelyAssertedCollection, 1).
mpred_mark(pfcCreates, n, completelyAssertedCollection, 1).
mpred_mark(pfcPosTrigger, n, tCol, 1).
mpred_mark(pfcLHS, p, support_hilog, 2).
mpred_mark(pfcCallCode, p, \=, 2).
mpred_mark(pfcCallCode, p, atom, 1).
mpred_mark(pfcCallCode, n, static_predicate, 1).
mpred_mark(pfcCallCode, n, prologDynamic, 1).
mpred_mark(pfcCallCode, p, static_predicate, 1).
mpred_mark(pfcCallCode, p, prologDynamic, 1).
mpred_mark(pfcCreates, p, hybrid_support, 2).
mpred_mark(pfcCallCode, p, =, 2).
mpred_mark(pfcPosTrigger, p, support_hilog, 2).
mpred_mark(pfcLHS, p, hybrid_support, 2).
mpred_mark(pfcCallCode, p, functor, 3).
mpred_mark(pfcCallCode, p, ->, 2).
mpred_mark(pfcCallCode, p, true, 0).
mpred_mark(pfcCallCode, p, kb_dynamic, 1).
mpred_mark(pfcCallCode, p, show_failure, 2).
mpred_mark(pfcCreates, p, prologHybrid, 1).
mpred_mark(pfcPosTrigger, p, hybrid_support, 2).
mpred_mark(pfcLHS, p, prologHybrid, 1).
mpred_mark(pfcPosTrigger, p, prologHybrid, 1).
mpred_mark(pfcCallCode, p, fa_to_p, 3).
mpred_mark(pfcCallCode, p, predicate_property, 2).
mpred_mark(pfcCallCode, p, trace_or_throw, 1).
mpred_mark(pfcCallCode, p, dmsg, 1).
mpred_mark(pfcCallCode, p, ground, 1).
mpred_mark(pfcCreates, p, marker_supported, 2).
mpred_mark(pfcCallCode, p, make_dynamic, 1).
mpred_mark(pfcCallCode, p, predicate_is_undefined_fa, 2).
mpred_mark(pfcLHS, p, marker_supported, 2).
mpred_mark(pfcPosTrigger, p, marker_supported, 2).
mpred_mark(pfcLHS, p, mpred_mark_C, 1).
mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1).
mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1).
mpred_mark(pfcCallCode, p, \==, 2).
mpred_mark(pfcCreates, p, tPred, 1).
mpred_mark(pfcCreates, p, pfcControlled, 1).
mpred_mark(pfcLHS, p, completelyAssertedCollection, 1).
mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1).
mpred_mark(pfcLHS, p, pfcControlled, 1).
mpred_mark(pfcPosTrigger, p, pfcControlled, 1).
mpred_mark(pfcLHS, p, ttPredType, 1).
mpred_mark(pfcPosTrigger, p, ttPredType, 1).
mpred_mark(pfcCreates, p, tSet, 1).
mpred_mark(pfcCreates, p, completelyAssertedCollection, 1).
mpred_mark(pfcLHS, p, ttTypeType, 1).
mpred_mark(pfcPosTrigger, p, ttTypeType, 1).
mpred_mark(pfcLHS, p, tSet, 1).
mpred_mark(pfcPosTrigger, p, tSet, 1).
mpred_mark(pfcLHS, p, ttFormatType, 1).
mpred_mark(pfcPosTrigger, p, ttFormatType, 1).
mpred_mark(pfcLHS, p, tCol, 1).
mpred_mark(pfcCallCode, p, =.., 2).
mpred_mark(pfcCallCode, p, decl_type, 1).
mpred_mark(pfcCreates, p, mpred_univ, 3).
mpred_mark(pfcPosTrigger, p, tCol, 1).
mpred_mark(pfcCallCode, n, completelyAssertedCollection, 1).
mpred_mark(pfcCallCode, p, cwc, 0).
mpred_mark(pfcCallCode, p, lazy, 1).
mpred_mark(pfcCallCode, p, isa_backchaing, 2).
mpred_mark(pfcCallCode, p, nop, 1).
mpred_mark(pfcCallCode, p, show_pred_info, 1).
mpred_mark(pfcCreates, p, functorDeclares, 1).
mpred_mark(pfcCallCode, p, get_functor, 2).
mpred_mark(pfcCreates, n, functorDeclares, 1).
mpred_mark(pfcCallCode, p, ignore, 1).
mpred_mark(pfcLHS, p, functorDeclares, 1).
mpred_mark(pfcPosTrigger, p, functorDeclares, 1).
mpred_mark(pfcCallCode, p, is_ftCompound, 1).
mpred_mark(pfcCallCode, p, call, 2).
mpred_mark(pfcLHS, p, tFunction, 1).
mpred_mark(pfcCallCode, p, is_declarations, 1).
mpred_mark(pfcCreates, p, meta_argtypes, 1).
mpred_mark(pfcPosTrigger, p, tFunction, 1).
mpred_mark(pfcLHS, p, meta_argtypes, 1).
mpred_mark(pfcCallCode, p, get_functor, 3).
mpred_mark(pfcPosTrigger, p, meta_argtypes, 1).
mpred_mark(pfcCreates, p, completeExtentAsserted, 1).
mpred_mark(pfcLHS, p, ttNotTemporalType, 1).
mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1).
mpred_mark(pfcLHS, p, ttTemporalType, 1).
mpred_mark(pfcPosTrigger, p, ttTemporalType, 1).
mpred_mark(pfcCreates, p, genls, 2).
mpred_mark(pfcLHS, p, {}, 1).
mpred_mark(pfcLHS, p, disjointWith, 2).
mpred_mark(pfcCreates, p, disjointWith, 2).
mpred_mark(pfcPosTrigger, p, disjointWith, 2).
mpred_mark(pfcLHS, p, ptSymmetric, 1).
mpred_mark(pfcPosTrigger, p, ptSymmetric, 1).
mpred_mark(pfcLHS, p, prologSideEffects, 1).
mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1).
mpred_mark(pfcPosTrigger, p, prologSideEffects, 1).
mpred_mark(pfcCallCode, p, isa_from_morphology, 2).
mpred_mark(pfcLHS, p, genls, 2).
mpred_mark(pfcCallCode, p, mpred_withdraw, 1).
mpred_mark(pfcPosTrigger, p, genls, 2).
mpred_mark(pfcCallCode, n, genls, 2).
mpred_mark(pfcCallCode, n, \=, 2).
mpred_mark(pfcCreates, p, nearestGenls, 2).
mpred_mark(pfcLHS, p, nearestGenls, 2).
mpred_mark(pfcCallCode, p, asserta_if_new, 1).
mpred_mark(pfcPosTrigger, p, nearestGenls, 2).
mpred_mark(pfcLHS, p, completeIsaAsserted, 1).
mpred_mark(pfcCallCode, p, dif, 2).
mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1).
mpred_mark(pfcCreates, p, formatted_resultIsa, 2).
mpred_mark(pfcCallCode, p, nonvar, 1).
mpred_mark(pfcCallCode, p, is_ftNonvar, 1).
mpred_mark(pfcCallCode, n, mpred_connective, 1).
mpred_mark(pfcCallCode, p, mpred_connective, 1).
mpred_mark(pfcCallCode, p, agenda_slow_op_enqueue, 1).
mpred_mark(pfcLHS, p, either, 2).
mpred_mark(pfcCreates, p, <==>, 2).
mpred_mark(pfcPosTrigger, p, either, 2).
mpred_mark(pfcLHS, p, ftString, 1).
mpred_mark(pfcPosTrigger, p, ftString, 1).
mpred_mark(pfcLHS, p, ftVar, 1).
mpred_mark(pfcPosTrigger, p, ftVar, 1).
mpred_mark(pfcLHS, p, ftSpec, 1).
mpred_mark(pfcPosTrigger, p, ftSpec, 1).
mpred_mark(pfcLHS, p, ftCallable, 1).
mpred_mark(pfcPosTrigger, p, ftCallable, 1).
mpred_mark(pfcLHS, p, ftPercent, 1).
mpred_mark(pfcPosTrigger, p, ftPercent, 1).
mpred_mark(pfcLHS, p, ttValueType, 1).
mpred_mark(pfcPosTrigger, p, ttValueType, 1).
mpred_mark(pfcCallCode, p, number, 1).
mpred_mark(pfcCreates, p, argQuotedIsa, 3).
mpred_mark(pfcLHS, p, resultIsa, 2).
mpred_mark(pfcCreates, p, tFunction, 1).
mpred_mark(pfcCreates, p, ftSpec, 1).
mpred_mark(pfcPosTrigger, p, resultIsa, 2).
mpred_mark(pfcLHS, p, ftInt, 1).
mpred_mark(pfcPosTrigger, p, ftInt, 1).
mpred_mark(pfcLHS, p, ftNumber, 1).
mpred_mark(pfcPosTrigger, p, ftNumber, 1).
mpred_mark(pfcLHS, p, ftVoprop, 1).
mpred_mark(pfcPosTrigger, p, ftVoprop, 1).
mpred_mark(pfcCallCode, p, guess_supertypes, 1).
mpred_mark(pfcLHS, p, tNewlyCreated, 1).
mpred_mark(pfcCallCode, p, guess_types, 1).
mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1).
mpred_mark(pfcLHS, p, quotedDefnIff, 2).
mpred_mark(pfcCreates, p, ttFormatType, 1).
mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2).
mpred_mark(pfcLHS, p, ftFloat, 1).
mpred_mark(pfcPosTrigger, p, ftFloat, 1).
mpred_mark(pfcLHS, p, ftAtom, 1).
mpred_mark(pfcPosTrigger, p, ftAtom, 1).
mpred_mark(pfcLHS, p, ftCompound, 1).
mpred_mark(pfcPosTrigger, p, ftCompound, 1).
mpred_mark(pfcLHS, p, ftGround, 1).
mpred_mark(pfcPosTrigger, p, ftGround, 1).
mpred_mark(pfcLHS, p, ftID, 1).
mpred_mark(pfcPosTrigger, p, ftID, 1).
mpred_mark(pfcLHS, p, ftTerm, 1).
mpred_mark(pfcPosTrigger, p, ftTerm, 1).
mpred_mark(pfcLHS, p, ftNonvar, 1).
mpred_mark(pfcPosTrigger, p, ftNonvar, 1).
mpred_mark(pfcLHS, p, ftList, 1).
mpred_mark(pfcPosTrigger, p, ftList, 1).
mpred_mark(pfcLHS, p, ftRest, 1).
mpred_mark(pfcPosTrigger, p, ftRest, 1).
mpred_mark(pfcLHS, p, ftBoolean, 1).
mpred_mark(pfcPosTrigger, p, ftBoolean, 1).
mpred_mark(pfcLHS, p, ftText, 1).
mpred_mark(pfcPosTrigger, p, ftText, 1).
mpred_mark(pfcCallCode, p, get_arity, 3).
mpred_mark(pfcCallCode, p, has_functor, 1).
mpred_mark(pfcLHS, p, pfcMustFC, 1).
mpred_mark(pfcPosTrigger, p, pfcMustFC, 1).
mpred_mark(pfcLHS, n, ttFormatType, 1).
mpred_mark(pfcPosTrigger, n, ttFormatType, 1).
mpred_mark(pfcLHS, p, prologDynamic, 1).
mpred_mark(pfcCallCode, p, decl_mpred_prolog, 1).
mpred_mark(pfcPosTrigger, p, prologDynamic, 1).
mpred_mark(pfcCallCode, p, once, 1).
mpred_mark(pfcCreates, p, ptBinaryPredicate, 1).
mpred_mark(pfcLHS, p, ptBinaryPredicate, 1).
mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1).
mpred_mark(pfcLHS, p, if_missing, 2).
mpred_mark(pfcCallCode, n, \=@=, 2).
mpred_mark(pfcPosTrigger, p, if_missing, 2).
mpred_mark(pfcLHS, p, mdefault, 1).
mpred_mark(pfcCallCode, p, mpred_literal, 1).
mpred_mark(pfcPosTrigger, p, mdefault, 1).
mpred_mark(pfcRHS, p, mdefault, 1).
mpred_mark(pfcCallCode, p, mpred_positive_literal, 1).
mpred_mark(pfcCallCode, p, mpred_literal_nv, 1).
mpred_mark(pfcCallCode, p, if_missing_mask, 3).
mpred_mark(pfcCreates, p, \, 1).
mpred_mark(pfcLHS, p, mpred_sv, 2).
mpred_mark(pfcCreates, p, prologSingleValued, 1).
mpred_mark(pfcCreates, p, singleValuedInArg, 2).
mpred_mark(pfcPosTrigger, p, mpred_sv, 2).
mpred_mark(pfcLHS, p, prologSingleValued, 1).
mpred_mark(pfcCreates, p, mdefault, 1).
mpred_mark(pfcPosTrigger, p, prologSingleValued, 1).
mpred_mark(pfcLHS, p, singleValuedInArg, 2).
mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2).
mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2).
mpred_mark(pfcLHS, p, \, 1).
mpred_mark(pfcPosTrigger, p, \, 1).
mpred_mark(pfcLHS, p, singleValuedInArgDefault, 3).
mpred_mark(pfcCreates, p, relationMostInstance, 3).
mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3).
mpred_mark(pfcCallCode, p, replace_arg, 4).
mpred_mark(pfcLHS, p, clif, 1).
mpred_mark(pfcCallCode, p, delistify_last_arg, 3).
mpred_mark(pfcCreates, p, boxlog, 1).
mpred_mark(pfcPosTrigger, p, clif, 1).
mpred_mark(pfcLHS, p, boxlog, 1).
mpred_mark(pfcCreates, p, pfclog, 1).
mpred_mark(pfcPosTrigger, p, boxlog, 1).
mpred_mark(pfcLHS, p, pfclog, 1).
mpred_mark(pfcPosTrigger, p, pfclog, 1).
mpred_mark(pfcCallCode, p, is_clif, 1).
mpred_mark(pfcRHS, p, clif, 1).
mpred_mark(pfcLHS, p, if, 2).
mpred_mark(pfcCreates, p, clif, 1).
mpred_mark(pfcPosTrigger, p, if, 2).
mpred_mark(pfcCallCode, p, is_kif_rule, 1).
:- multifile(baseKB:(typeGenls)/2).
:- dynamic typeGenls/2.
:- multifile typeGenls/2.
:- module_transparent typeGenls/2.
:- discontiguous typeGenls/2.

typeGenls(ttPredType, tPred).
typeGenls(ttValueType, vtValue).
typeGenls(ttFormatTypeType, ttFormatType).
typeGenls(ttTemporalType, tTemporalThing).
typeGenls(ttTypeFacet, tCol).
typeGenls(ttTypeType, tCol).
:- multifile(baseKB:(tPred)/1).
:- dynamic tPred/1.
:- multifile tPred/1.
:- module_transparent tPred/1.
:- discontiguous tPred/1.

tPred(A) :-
	loop_check(prologEquality(A)).
tPred(A) :-
	loop_check(notAssertable(A)).
tPred(A) :-
	loop_check(predIsFlag(A)).
tPred(A) :-
	loop_check(meta_argtypes(A)).
tPred(A) :-
	loop_check(prologSideEffects(A)).
tPred(A) :-
	loop_check(predCanHaveSingletons(A)).
tPred(A) :-
	loop_check(pfcMustFC(A)).
tPred(A) :-
	loop_check(pfcRHS(A)).
tPred(A) :-
	loop_check(pfcBcTrigger(A)).
tPred(A) :-
	loop_check(pfcPosTrigger(A)).
tPred(A) :-
	loop_check(pfcNegTrigger(A)).
tPred(A) :-
	loop_check(pfcCreates(A)).
tPred(A) :-
	loop_check(pfcWatched(A)).
tPred(A) :-
	loop_check(pfcControlled(A)).
tPred(A) :-
	loop_check(pfcDatabaseTerm(A)).
tPred(A) :-
	loop_check(prologSingleValued(A)).
tPred(A) :-
	loop_check(prologListValued(A)).
tPred(A) :-
	loop_check(prologMacroHead(A)).
tPred(A) :-
	loop_check(prologKIF(A)).
tPred(A) :-
	loop_check(prologBuiltin(A)).
tPred(A) :-
	loop_check(prologDynamic(A)).
tPred(A) :-
	loop_check(prologPTTP(A)).
tPred(A) :-
	loop_check(prologHybrid(A)).
tPred(A) :-
	loop_check(prologNegByFailure(A)).
tPred(A) :-
	loop_check(prologOrdered(A)).
tPred(A) :-
	loop_check(prologMultiValued(A)).
tPred(arity).
tPred(mpred_select).
tPred(genls).
tPred(resolveConflict).
tPred(agent_text_command).
tPred(write).
tPred(pddlSomethingIsa(ftTerm, ftListFn(tCol))).
tPred(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(tPred, B).
tPred(pddlSomethingIsa).
tPred(quotedIsa).
tPred(typeGenls).
tPred(argIsa).
tPred(mpred_module).
tPred(typeProps).
tPred(tCol).
tPred(disjointWith).
tPred(genlPreds).
tPred(meta_argtypes).
tPred(ttNotTemporalType).
tPred(ttTemporalType).
tPred(genlInverse).
tPred(instTypeProps).
tPred(predProxyAssert).
tPred(predProxyQuery).
tPred(predProxyRetract).
tPred(predTypeMax).
tPred(prologSingleValued).
tPred(resultIsa).
tPred(isa).
tPred(arg).
tPred(formatted_resultIsa).
tPred(localityOfObject).
tPred(subFormat).
tPred(tRegion).
tPred(completelyAssertedCollection).
tPred(ttFormatType).
tPred(argQuotedIsa).
tPred(quotedDefnIff).
tPred(defnNecessary).
tPred(defnIff).
tPred(comment).
tPred(<-).
tPred(==>).
tPred(predArgMulti).
tPred(tDeleted).
tPred(predInstMax).
tPred(dividesBetween).
tPred(pddlObjects).
tPred(mpred_do_and_undo_method).
tPred(support_hilog).
tPred(hybrid_support).
tPred(=).
tPred(marker_supported).
tPred(nearestGenls).
tPred(either).
tPred(<==>).
tPred(macroSomethingDescription).
tPred(pddlSorts).
tPred(if_missing).
tPred(mdefault).
tPred(singleValuedInArgDefault).
tPred(clif).
:- multifile(baseKB:(never_assert_u0)/2).
:- dynamic never_assert_u0/2.
:- module_transparent never_assert_u0/2.

:- multifile(baseKB:(tSpec)/1).
:- dynamic tSpec/1.
:- multifile tSpec/1.
:- module_transparent tSpec/1.
:- discontiguous tSpec/1.

tSpec(tCol).
tSpec(meta_argtypes).
tSpec(prologEquality).
tSpec(vtActionTemplate).
:- multifile(baseKB:(tRegion)/1).
:- dynamic tRegion/1.
:- multifile tRegion/1.
:- module_transparent tRegion/1.
:- discontiguous tRegion/1.

:- multifile(baseKB:(prologDynamic)/1).
:- dynamic prologDynamic/1.
:- multifile prologDynamic/1.
:- module_transparent prologDynamic/1.
:- discontiguous prologDynamic/1.

prologDynamic(agent_text_command).
prologDynamic(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologDynamic, B).
prologDynamic(arg).
:- multifile(baseKB:(grid_key)/1).
:- dynamic grid_key/1.
:- module_transparent grid_key/1.

:- multifile(baseKB:(default_type_props)/3).
:- dynamic default_type_props/3.
:- module_transparent default_type_props/3.

:- multifile(baseKB:(cyc_to_plarkc)/2).
:- dynamic cyc_to_plarkc/2.
:- module_transparent cyc_to_plarkc/2.

:- multifile(baseKB:(never_assert_u)/2).
:- dynamic never_assert_u/2.
:- multifile never_assert_u/2.
:- module_transparent never_assert_u/2.

never_assert_u(vtVerb(A), vtVerbError) :-
	fail,
	A=='[|]'.
never_assert_u(prologSingleValued(A), var_prologSingleValued(A)) :-
	is_ftVar(A).
never_assert_u(A, test_sanity(A)) :-
	never_assert_u(A).
:- multifile(baseKB:(either)/2).
:- dynamic either/2.
:- multifile either/2.
:- module_transparent either/2.
:- discontiguous either/2.

:- multifile(baseKB:(asserted_mpred_f)/6).
:- dynamic asserted_mpred_f/6.
:- module_transparent asserted_mpred_f/6.

:- multifile(baseKB:(tRelation)/1).
:- dynamic tRelation/1.
:- multifile tRelation/1.
:- module_transparent tRelation/1.
:- discontiguous tRelation/1.

tRelation((ftAskable==>ftAssertable)).
tRelation(macroSomethingDescription).
tRelation(pddlObjects).
tRelation(pddlPredicates).
tRelation(pddlSorts).
tRelation(pddlTypes).
:- multifile(baseKB:(t)/3).
:- dynamic t/3.
:- meta_predicate t(?,?,?).
:- module_transparent t/3.

:- multifile(baseKB:(hybrid_support)/2).
:- dynamic hybrid_support/2.
:- multifile hybrid_support/2.
:- module_transparent hybrid_support/2.
:- discontiguous hybrid_support/2.

hybrid_support(arity, 2).
hybrid_support(genls, 2).
hybrid_support(prologBuiltin, 1).
hybrid_support(conflict, 1).
hybrid_support(mpred_undo_sys, 3).
hybrid_support(tPred, 1).
hybrid_support(tCol, 1).
hybrid_support(support_hilog, 2).
hybrid_support(hybrid_support, 2).
hybrid_support(prologHybrid, 1).
hybrid_support(mpred_do_and_undo_method, 2).
hybrid_support(completelyAssertedCollection, 1).
hybrid_support(marker_supported, 2).
hybrid_support(map_mpred_mark_C, 1).
hybrid_support(mpred_mark_C, 1).
hybrid_support(pfcControlled, 1).
hybrid_support(ttPredType, 1).
hybrid_support(pfcDatabaseTerm, 1).
hybrid_support(prologSingleValued, 1).
hybrid_support(pfcWatched, 1).
hybrid_support(pfcCreates, 1).
hybrid_support(pfcNegTrigger, 1).
hybrid_support(pfcPosTrigger, 1).
hybrid_support(pfcBcTrigger, 1).
hybrid_support(pfcRHS, 1).
hybrid_support(pfcMustFC, 1).
hybrid_support(tSet, 1).
hybrid_support(ttTypeType, 1).
hybrid_support(ttFormatType, 1).
hybrid_support(mpred_univ, 3).
hybrid_support(predCanHaveSingletons, 1).
hybrid_support(prologSideEffects, 1).
hybrid_support(meta_argtypes, 1).
hybrid_support(predIsFlag, 1).
hybrid_support(prologMultiValued, 1).
hybrid_support(prologMacroHead, 1).
hybrid_support(notAssertable, 1).
hybrid_support(prologDynamic, 1).
hybrid_support(prologOrdered, 1).
hybrid_support(prologNegByFailure, 1).
hybrid_support(prologPTTP, 1).
hybrid_support(prologKIF, 1).
hybrid_support(prologEquality, 1).
hybrid_support(prologListValued, 1).
hybrid_support(genlPreds, 2).
hybrid_support(argIsa, 3).
hybrid_support(functorDeclares, 1).
hybrid_support(pddlSomethingIsa, 2).
hybrid_support(tFunction, 1).
hybrid_support(completeExtentAsserted, 1).
hybrid_support(ttNotTemporalType, 1).
hybrid_support(ttTemporalType, 1).
hybrid_support(disjointWith, 2).
hybrid_support(ptSymmetric, 1).
hybrid_support(tNotForUnboundPredicates, 1).
hybrid_support(nearestGenls, 2).
hybrid_support(completeIsaAsserted, 1).
hybrid_support(formatted_resultIsa, 2).
hybrid_support(quotedIsa, 2).
hybrid_support(typeGenls, 2).
hybrid_support(mpred_module, 2).
hybrid_support(<==>, 2).
hybrid_support(either, 2).
hybrid_support(typeProps, 2).
hybrid_support(genlInverse, 2).
hybrid_support(instTypeProps, 3).
hybrid_support(predProxyAssert, 2).
hybrid_support(predProxyQuery, 2).
hybrid_support(predProxyRetract, 2).
hybrid_support(predTypeMax, 3).
hybrid_support(resultIsa, 2).
hybrid_support(isa, 2).
hybrid_support(ftString, 1).
hybrid_support(ftVar, 1).
hybrid_support(ftSpec, 1).
hybrid_support(ftCallable, 1).
hybrid_support(ftPercent, 1).
hybrid_support(ttValueType, 1).
hybrid_support(argQuotedIsa, 3).
hybrid_support(localityOfObject, 2).
hybrid_support(subFormat, 2).
hybrid_support(tRegion, 1).
hybrid_support(ftInt, 1).
hybrid_support(ftNumber, 1).
hybrid_support(ftVoprop, 1).
hybrid_support(quotedDefnIff, 2).
hybrid_support(defnNecessary, 2).
hybrid_support(defnIff, 2).
hybrid_support(predInstMax, 3).
hybrid_support(tNewlyCreated, 1).
hybrid_support(dividesBetween, 3).
hybrid_support(ftFloat, 1).
hybrid_support(ftAtom, 1).
hybrid_support(ftCompound, 1).
hybrid_support(ftGround, 1).
hybrid_support(ftID, 1).
hybrid_support(ftTerm, 1).
hybrid_support(ftNonvar, 1).
hybrid_support(ftList, 1).
hybrid_support(ftRest, 1).
hybrid_support(ftBoolean, 1).
hybrid_support(ftText, 1).
hybrid_support(ptBinaryPredicate, 1).
hybrid_support(if_missing, 2).
hybrid_support(mdefault, 1).
hybrid_support(\, 1).
hybrid_support(singleValuedInArg, 2).
hybrid_support(mpred_sv, 2).
hybrid_support(singleValuedInArgDefault, 3).
hybrid_support(relationMostInstance, 3).
hybrid_support(clif, 1).
hybrid_support(boxlog, 1).
hybrid_support(pfclog, 1).
hybrid_support(if, 2).
:- multifile(baseKB:(prologHybrid)/2).
:- dynamic prologHybrid/2.
:- module_transparent prologHybrid/2.

:- multifile(baseKB:(<-)/2).
:- dynamic (<-)/2.
:- multifile (<-)/2.
:- module_transparent (<-)/2.
:- discontiguous (<-)/2.

:- multifile(baseKB:(never_assert_u)/1).
:- dynamic never_assert_u/1.
:- module_transparent never_assert_u/1.

:- multifile(baseKB:(vtUnreifiableFunction)/1).
:- dynamic vtUnreifiableFunction/1.
:- module_transparent vtUnreifiableFunction/1.

:- multifile(baseKB:(asserted_mpred_t)/7).
:- dynamic asserted_mpred_t/7.
:- module_transparent asserted_mpred_t/7.

:- multifile(baseKB:(defined_predicate)/1).
:- module_transparent defined_predicate/1.

:- multifile(baseKB:(ttTypeType)/1).
:- dynamic ttTypeType/1.
:- multifile ttTypeType/1.
:- module_transparent ttTypeType/1.
:- discontiguous ttTypeType/1.

:- multifile(baseKB:(pfcCreates)/1).
:- dynamic pfcCreates/1.
:- multifile pfcCreates/1.
:- module_transparent pfcCreates/1.
:- discontiguous pfcCreates/1.

pfcCreates(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcCreates, B).
:- multifile(baseKB:(ftFloat)/1).
:- dynamic ftFloat/1.
:- multifile ftFloat/1.
:- module_transparent ftFloat/1.
:- discontiguous ftFloat/1.

:- multifile(baseKB:(asserted_mpred_f)/5).
:- dynamic asserted_mpred_f/5.
:- module_transparent asserted_mpred_f/5.

:- multifile(baseKB:(sm)/1).
:- dynamic sm/1.
:- multifile sm/1.

:- multifile(baseKB:(if_missing)/2).
:- dynamic if_missing/2.
:- multifile if_missing/2.
:- module_transparent if_missing/2.
:- discontiguous if_missing/2.

:- multifile(baseKB:(only_if_pttp)/0).
:- dynamic only_if_pttp/0.
:- module_transparent only_if_pttp/0.

:- multifile(baseKB:(was_chain_rule)/1).
:- dynamic was_chain_rule/1.
:- module_transparent was_chain_rule/1.

:- multifile(baseKB:(nt)/3).
:- dynamic nt/3.
:- multifile nt/3.

nt(~singleValuedInArg(singleValuedInArg, 2), call_u(~singleValuedInArg(singleValuedInArg, 2)), rhs([singleValuedInArg(singleValuedInArg, 2)])).
:- multifile(baseKB:(pfcNegTrigger)/1).
:- dynamic pfcNegTrigger/1.
:- multifile pfcNegTrigger/1.
:- module_transparent pfcNegTrigger/1.
:- discontiguous pfcNegTrigger/1.

pfcNegTrigger(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcNegTrigger, B).
:- multifile(baseKB:(tPred)/2).
:- dynamic tPred/2.

tPred(arity/2, prologHybrid).
tPred(is_never_type/1, prologDynamic).
tPred(term_expansion/2, prologDynamic).
tPred(var/1, prologBuiltin).
tPred(quotedDefnIff/2, prologHybrid).
:- multifile(baseKB:(current_op_alias)/2).
:- dynamic current_op_alias/2.

:- multifile(baseKB:(prologDynamic)/2).
:- dynamic prologDynamic/2.
:- module_transparent prologDynamic/2.

:- multifile(baseKB:(genls)/2).
:- dynamic genls/2.
:- multifile genls/2.
:- module_transparent genls/2.
:- discontiguous genls/2.

genls(tTemporalThing, tTemporalThing).
genls(completelyAssertedCollection, tCol).
genls(ttSpatialType, ttTemporalType).
genls(tSpatialThing, tTemporalThing).
genls(prologMultiValued, tPred).
genls(prologOrdered, tPred).
genls(prologNegByFailure, tPred).
genls(prologHybrid, tPred).
genls(prologPTTP, tPred).
genls(prologDynamic, tPred).
genls(prologBuiltin, tPred).
genls(prologKIF, tPred).
genls(prologMacroHead, tPred).
genls(prologListValued, tPred).
genls(prologSingleValued, tPred).
genls(vtColor, vtValue).
genls(vtValue, vtValue).
genls(pfcDatabaseTerm, tPred).
genls(pfcControlled, tPred).
genls(pfcWatched, tPred).
genls(pfcCreates, tPred).
genls(pfcNegTrigger, tPred).
genls(pfcPosTrigger, tPred).
genls(pfcBcTrigger, tPred).
genls(pfcRHS, tPred).
genls(pfcMustFC, tPred).
genls(predCanHaveSingletons, tPred).
genls(prologSideEffects, tPred).
genls(meta_argtypes, tPred).
genls(predIsFlag, tPred).
genls(tPred, tPred).
genls(notAssertable, tPred).
genls(prologEquality, tPred).
genls('SententialRelation', 'SententialOperator').
genls('SententialOperator', tAvoidForwardChain).
genls('VariableArityRelation', tAvoidForwardChain).
genls('CommutativeRelation', tAvoidForwardChain).
genls(tFunction, tAvoidForwardChain).
genls('EvaluatableRelation', tAvoidForwardChain).
:- multifile(baseKB:(argGenl)/3).
:- dynamic argGenl/3.
:- module_transparent argGenl/3.

:- multifile(baseKB:(current_world)/1).
:- dynamic current_world/1.
:- module_transparent current_world/1.

:- multifile(baseKB:(nesc)/1).
:- dynamic nesc/1.
:- module_transparent nesc/1.

:- multifile(baseKB:(t)/7).
:- dynamic t/7.
:- meta_predicate t(6,?,?,?,?,?,?).
:- module_transparent t/7.

:- multifile(baseKB:(~)/1).
:- dynamic (~)/1.
:- multifile (~)/1.
:- meta_predicate~0.
:- module_transparent (~)/1.
:- discontiguous (~)/1.

~A :-
	cwc,
	neg_in_code(A).
~tCol(genlPreds).
~singleValuedInArg(arity, 2).
~prologSingleValued(arity).
~prologSingleValued(support_hilog).
~arity(argIsa, 1).
~ttFormatType(prologEquality).
~prologEquality(',').
~completelyAssertedCollection(ftString).
~functorDeclares(ftString).
~completelyAssertedCollection(ftVar).
~functorDeclares(ftVar).
~completelyAssertedCollection(ftSpec).
~functorDeclares(ftSpec).
~completelyAssertedCollection(ftCallable).
~functorDeclares(ftCallable).
~completelyAssertedCollection(ftPercent).
~functorDeclares(ftPercent).
~completelyAssertedCollection(ftInt).
~functorDeclares(ftInt).
~completelyAssertedCollection(ftNumber).
~functorDeclares(ftNumber).
~completelyAssertedCollection(ftVoprop).
~functorDeclares(ftVoprop).
~completelyAssertedCollection(ftFloat).
~functorDeclares(ftFloat).
~completelyAssertedCollection(ftAtom).
~functorDeclares(ftAtom).
~completelyAssertedCollection(ftCompound).
~functorDeclares(ftCompound).
~completelyAssertedCollection(ftGround).
~functorDeclares(ftGround).
~completelyAssertedCollection(ftID).
~functorDeclares(ftID).
~completelyAssertedCollection(ftTerm).
~functorDeclares(ftTerm).
~completelyAssertedCollection(ftNonvar).
~functorDeclares(ftNonvar).
~completelyAssertedCollection(ftList).
~functorDeclares(ftList).
~completelyAssertedCollection(ftRest).
~functorDeclares(ftRest).
~completelyAssertedCollection(ftBoolean).
~functorDeclares(ftBoolean).
~completelyAssertedCollection(ftText).
~functorDeclares(ftText).
:- multifile(baseKB:(pfcPosTrigger)/1).
:- dynamic pfcPosTrigger/1.
:- multifile pfcPosTrigger/1.
:- module_transparent pfcPosTrigger/1.
:- discontiguous pfcPosTrigger/1.

pfcPosTrigger(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcPosTrigger, B).
:- multifile(baseKB:(mpred_is_tracing_pred)/1).
:- dynamic mpred_is_tracing_pred/1.
:- multifile mpred_is_tracing_pred/1.

:- multifile(baseKB:(hs)/1).
:- dynamic hs/1.
:- multifile hs/1.

:- multifile(baseKB:(asserted_mpred_f)/2).
:- dynamic asserted_mpred_f/2.
:- module_transparent asserted_mpred_f/2.

:- multifile(baseKB:(==>)/1).
:- dynamic (==>)/1.
:- multifile (==>)/1.
:- module_transparent (==>)/1.
:- discontiguous (==>)/1.

:- multifile(baseKB:(prologEquality)/1).
:- dynamic prologEquality/1.
:- multifile prologEquality/1.
:- module_transparent prologEquality/1.
:- discontiguous prologEquality/1.

prologEquality(A) :-
	cwc,
	lazy(\+ ~prologEquality(A)),
	isa_backchaing(A, prologEquality).
prologEquality(mudEquals).
prologEquality(=).
prologEquality(==).
prologEquality(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologEquality, B).
:- multifile(baseKB:(ttTypeFacet)/1).
:- dynamic ttTypeFacet/1.
:- multifile ttTypeFacet/1.
:- module_transparent ttTypeFacet/1.
:- discontiguous ttTypeFacet/1.

ttTypeFacet(A) :-
	cwc,
	lazy(\+ ~ttTypeFacet(A)),
	isa_backchaing(A, ttTypeFacet).
ttTypeFacet(tNewlyCreated).
ttTypeFacet(ttTypeFacet).
ttTypeFacet(ttUnverifiableType).
:- multifile(baseKB:(use_ideep_swi)/0).
:- dynamic use_ideep_swi/0.
:- module_transparent use_ideep_swi/0.

:- multifile(baseKB:(ttValueType)/1).
:- dynamic ttValueType/1.
:- multifile ttValueType/1.
:- module_transparent ttValueType/1.
:- discontiguous ttValueType/1.

ttValueType(A) :-
	cwc,
	lazy(\+ ~ttValueType(A)),
	isa_backchaing(A, ttValueType).
ttValueType(vtColor).
ttValueType(vtValue).
:- multifile(baseKB:(asserted_mpred_t)/4).
:- dynamic asserted_mpred_t/4.
:- module_transparent asserted_mpred_t/4.

:- multifile(baseKB:(que)/1).
:- dynamic que/1.
:- multifile que/1.

:- multifile(baseKB:(argIsa)/3).
:- dynamic argIsa/3.
:- multifile argIsa/3.
:- module_transparent argIsa/3.
:- discontiguous argIsa/3.

argIsa(tPred, 1, tPred).
argIsa(prologMultiValued, 1, tPred).
argIsa(prologOrdered, 1, tPred).
argIsa(prologNegByFailure, 1, tPred).
argIsa(prologHybrid, 1, tPred).
argIsa(prologPTTP, 1, tPred).
argIsa(predCanHaveSingletons, 1, tPred).
argIsa(prologDynamic, 1, tPred).
argIsa(prologMacroHead, 1, tPred).
argIsa(prologListValued, 1, tPred).
argIsa(prologSingleValued, 1, tPred).
argIsa(tPred, 2, ftListFn(ftVoprop)).
argIsa(prologMultiValued, 2, ftListFn(ftVoprop)).
argIsa(prologOrdered, 2, ftListFn(ftVoprop)).
argIsa(prologNegByFailure, 2, ftListFn(ftVoprop)).
argIsa(meta_argtypes, 2, ftListFn(ftVoprop)).
argIsa(prologHybrid, 2, ftListFn(ftVoprop)).
argIsa(prologPTTP, 2, ftListFn(ftVoprop)).
argIsa(prologDynamic, 2, ftListFn(ftVoprop)).
argIsa(prologMacroHead, 2, ftListFn(ftVoprop)).
argIsa(prologListValued, 2, ftListFn(ftVoprop)).
argIsa(prologSingleValued, 2, ftListFn(ftVoprop)).
argIsa(B, A, C) :-
	cwc,
	number(A),
	argIsa_known(B, A, C),
	must(ground(argIsa(B, A, C))).
:- multifile(baseKB:(function_corisponding_predicate)/2).
:- dynamic function_corisponding_predicate/2.
:- module_transparent function_corisponding_predicate/2.

:- multifile(baseKB:('$pldoc')/4).
:- multifile'$pldoc'/4.
:- module_transparent'$pldoc'/4.

:- multifile(baseKB:(ttTemporalType)/1).
:- dynamic ttTemporalType/1.
:- multifile ttTemporalType/1.
:- module_transparent ttTemporalType/1.
:- discontiguous ttTemporalType/1.

ttTemporalType(A) :-
	loop_check(ttSpatialType(A)).
ttTemporalType(tTemporalThing).
:- multifile(baseKB:(spft)/3).
:- dynamic spft/3.
:- multifile spft/3.

spft(arity(apathFn, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 77), ax).
spft(arity(isKappaFn, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 78), ax).
spft(arity(isInstFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 79), ax).
spft(arity(ftListFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 80), ax).
spft(arity(xyzFn, 4), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 81), ax).
spft(arity(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 82), ax).
spft(arity(is_never_type, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 83), ax).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 84), ax).
spft((arity(A, 1):-ttPredType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 85), ax).
spft(arity(meta_argtypes, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 86), ax).
spft(arity(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 87), ax).
spft(arity(is_never_type, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 88), ax).
spft(arity(prologSingleValued, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 89), ax).
spft(arity(<=>, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 90), ax).
spft((arity(A, B):-atom(A), integer(B), current_predicate(A/B), B>1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 91), ax).
spft((arity(A, 1):-atom(A), current_predicate(A/1), \+ (dif(B, 1), arity(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 92), ax).
spft(arity(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 95), ax).
spft(prologHybrid(arity), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 95), ax).
spft(tPred(arity), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 95), ax).
spft(quasiQuote('QuoteFn'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 100), ax).
spft(argsQuoted(loop_check_term), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 102), ax).
spft(argsQuoted(loop_check_term_key), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 103), ax).
spft(argsQuoted('QuoteFn'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 104), ax).
spft(argsQuoted('$VAR'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 105), ax).
spft(arity('$VAR', 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 106), ax).
spft(argsQuoted(ain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 108), ax).
spft(argsQuoted(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 109), ax).
spft(argsQuoted(ttFormated), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 110), ax).
spft(argsQuoted(ruleRewrite), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 111), ax).
spft(argsQuoted(bordersOn), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 112), ax).
spft(argsQuoted(mpred_action), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 113), ax).
spft(argsQuoted(ain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 114), ax).
spft(argsQuoted(mpred_rem), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 115), ax).
spft(argsQuoted(added), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 116), ax).
spft(argsQuoted(call), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 117), ax).
spft(argsQuoted(call_u), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 118), ax).
spft(argsQuoted(member), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 119), ax).
spft(argsQuoted(=..), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 120), ax).
spft(argsQuoted({}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 121), ax).
spft(argsQuoted(second_order), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 122), ax).
spft((prologBuiltin(A), arity(A, B)==>{make_builtin(A/B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 129), ax).
spft(mpred_mark(pfcLHS, p, prologBuiltin, 1), s(((prologBuiltin(A), arity(A, B)==>{make_builtin(A/B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 129))), ax).
spft(mpred_mark(pfcCallCode, p, make_builtin, 1), s(((prologBuiltin(A), arity(A, B)==>{make_builtin(A/B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 129))), ax).
spft(mpred_mark(pfcPosTrigger, p, prologBuiltin, 1), s(((prologBuiltin(A), arity(A, B)==>{make_builtin(A/B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 129))), ax).
spft(pt(prologBuiltin(A), pt(arity(A, B), rhs([{make_builtin(A/B)}]))),  (prologBuiltin(C), arity(C, D)==>{make_builtin(C/D)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 129)).
spft(arity(mpred_select, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 131), ax).
spft(prologBuiltin(mpred_select), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 131), ax).
spft(pt(arity(mpred_select, A), rhs([{make_builtin(mpred_select/A)}])), prologBuiltin(mpred_select), pt(prologBuiltin(mpred_select), pt(arity(mpred_select, A), rhs([{make_builtin(mpred_select/A)}])))).
spft(prologBuiltin(mpred_select), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 131), ax).
spft(arity(mpred_select, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 131), ax).
spft(tPred(mpred_select), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 131), ax).
spft((conflict(A)==>{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 135), ax).
spft(mpred_mark(pfcLHS, p, conflict, 1), s(((conflict(A)==>{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 135))), ax).
spft(mpred_mark(pfcCallCode, p, must, 1), s(((conflict(A)==>{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 135))), ax).
spft(mpred_mark(pfcPosTrigger, p, conflict, 1), s(((conflict(A)==>{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 135))), ax).
spft(pt(conflict(A), rhs([{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}])),  (conflict(B)==>{must(with_mpred_trace_exec(resolveConflict(B), \+conflict(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 135)).
spft(({type_prefix(_, A)}==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 145), ax).
spft(mpred_mark(pfcCallCode, p, type_prefix, 2), s((({type_prefix(_, A)}==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 145))), ax).
spft(mpred_mark(pfcCreates, p, tCol, 1), s((({type_prefix(_, A)}==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 145))), ax).
spft(tCol(ttValueType),  ({type_prefix(_, A)}==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 145)).
spft(({type_prefix(_, A)}==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 146), ax).
spft((mpred_undo_sys(A, B, C)==> (A==>{B}), mpred_do_and_undo_method(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 149), ax).
spft(mpred_mark(pfcLHS, p, mpred_undo_sys, 3), s(((mpred_undo_sys(A, B, C)==> (A==>{B}), mpred_do_and_undo_method(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 149))), ax).
spft(mpred_mark(pfcCreates, p, mpred_do_and_undo_method, 2), s(((mpred_undo_sys(A, B, C)==> (A==>{B}), mpred_do_and_undo_method(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 149))), ax).
spft(mpred_mark(pfcPosTrigger, p, mpred_undo_sys, 3), s(((mpred_undo_sys(A, B, C)==> (A==>{B}), mpred_do_and_undo_method(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 149))), ax).
spft(pt(mpred_undo_sys(A, B, C), rhs([(A==>{B}), mpred_do_and_undo_method(B, C)])),  (mpred_undo_sys(D, E, F)==> (D==>{E}), mpred_do_and_undo_method(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 149)).
spft(comment(isa, 'Instance of'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 155), ax).
spft(~tCol(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 157), ax).
spft(~singleValuedInArg(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 159), ax).
spft(~prologSingleValued(arity), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 160), ax).
spft(~prologSingleValued(support_hilog), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 161), ax).
spft(~arity(argIsa, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 163), ax).
spft(arity(pddlObjects, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 164), ax).
spft(meta_argtypes(support_hilog(tRelation, ftInt)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 166), ax).
spft((~A/mpred_non_neg_literal(A)==> \+A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 170), ax).
spft(mpred_mark(pfcCallCode, p, mpred_non_neg_literal, 1), s(((~A/mpred_non_neg_literal(A)==> \+A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 170))), ax).
spft(pt(~A,  (mpred_non_neg_literal(A)->rhs([\+A]))),  (~B/mpred_non_neg_literal(B)==> \+B), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 170)).
spft((A/mpred_non_neg_literal(A)==> \+ ~A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 173), ax).
spft(arity(genls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 178), ax).
spft(prologHybrid(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 178), ax).
spft(tPred(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 178), ax).
spft((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180), ax).
spft(mpred_mark(pfcLHS, p, tPred, 1), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcCallCode, p, integer, 1), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcCallCode, p, >, 2), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcLHS, n, prologBuiltin, 1), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcCreates, n, tCol, 1), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcCreates, p, support_hilog, 2), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(mpred_mark(pfcPosTrigger, p, tPred, 1), s(((tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180))), ax).
spft(pt(tPred(A), pt(arity(A, B),  (integer(B), B>1->pt(~prologBuiltin(A), rhs([~tCol(A), support_hilog(A, B)]))))),  (tPred(C), arity(C, D)/ (integer(D), D>1), ~prologBuiltin(C)==> ~tCol(C), support_hilog(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 180)).
spft(pt(arity(arity, A),  (integer(A), A>1->pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, A)])))), tPred(arity), pt(tPred(B), pt(arity(B, C),  (integer(C), C>1->pt(~prologBuiltin(B), rhs([~tCol(B), support_hilog(B, C)])))))).
spft(mpred_mark(pfcPosTrigger, n, prologBuiltin, 1), s((arity(arity, 2), pt(arity(arity, A),  (integer(A), A>1->pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, A)])))))), ax).
spft(pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, 2)])), arity(arity, 2), pt(arity(arity, A),  (integer(A), A>1->pt(~prologBuiltin(arity), rhs([~tCol(arity), support_hilog(arity, A)]))))).
spft(pt(arity(mpred_select, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_select), rhs([~tCol(mpred_select), support_hilog(mpred_select, A)])))), tPred(mpred_select), pt(tPred(B), pt(arity(B, C),  (integer(C), C>1->pt(~prologBuiltin(B), rhs([~tCol(B), support_hilog(B, C)])))))).
spft(pt(~prologBuiltin(mpred_select), rhs([~tCol(mpred_select), support_hilog(mpred_select, 2)])), arity(mpred_select, 2), pt(arity(mpred_select, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_select), rhs([~tCol(mpred_select), support_hilog(mpred_select, A)]))))).
spft(pt(arity(genls, A),  (integer(A), A>1->pt(~prologBuiltin(genls), rhs([~tCol(genls), support_hilog(genls, A)])))), tPred(genls), pt(tPred(B), pt(arity(B, C),  (integer(C), C>1->pt(~prologBuiltin(B), rhs([~tCol(B), support_hilog(B, C)])))))).
spft(pt(~prologBuiltin(genls), rhs([~tCol(genls), support_hilog(genls, 2)])), arity(genls, 2), pt(arity(genls, A),  (integer(A), A>1->pt(~prologBuiltin(genls), rhs([~tCol(genls), support_hilog(genls, A)]))))).
spft((~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183), ax).
spft(mpred_mark(pfcLHS, n, tCol, 1), s(((~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183))), ax).
spft(mpred_mark(pfcCallCode, p, completelyAssertedCollection, 1), s(((~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183))), ax).
spft(mpred_mark(pfcCreates, n, completelyAssertedCollection, 1), s(((~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183))), ax).
spft(mpred_mark(pfcPosTrigger, n, tCol, 1), s(((~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183))), ax).
spft(pt(~tCol(A),  (completelyAssertedCollection(A)->rhs([\+completelyAssertedCollection(A)]))),  (~tCol(B)/completelyAssertedCollection(B)==> \+completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 183)).
spft((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187), ax).
spft(mpred_mark(pfcLHS, p, support_hilog, 2), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, p, \=, 2), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, p, atom, 1), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, n, static_predicate, 1), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, n, prologDynamic, 1), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, p, static_predicate, 1), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, p, prologDynamic, 1), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCreates, p, hybrid_support, 2), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcCallCode, p, =, 2), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(mpred_mark(pfcPosTrigger, p, support_hilog, 2), s(((support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187))), ax).
spft(pt(support_hilog(A, B),  (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A)->rhs([hybrid_support(A, B), {C=arity(A, B)}, C]))),  (support_hilog(D, E)/ (D\='$VAR', atom(D), integer(E), \+static_predicate(D/E), \+prologDynamic(D))==>hybrid_support(D, E), {F=arity(D, E)}, F), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 187)).
spft((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199), ax).
spft(mpred_mark(pfcLHS, p, hybrid_support, 2), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCallCode, p, functor, 3), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCallCode, p, ->, 2), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCallCode, p, true, 0), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCallCode, p, kb_dynamic, 1), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCallCode, p, show_failure, 2), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcCreates, p, prologHybrid, 1), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(mpred_mark(pfcPosTrigger, p, hybrid_support, 2), s(((hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199))), ax).
spft(pt(hybrid_support(A, B),  (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B)->rhs([{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B)]))),  (hybrid_support(E, F)/ (E\='$VAR', atom(E), integer(F), \+prologDynamic(E), \+static_predicate(E/F))==>{functor(H, E, F),  (var(G)->t_l:user_abox(G);true),  (var(G)->ignore((current_predicate(E, G:H), \+predicate_property(G:H, imported_from(_))));true),  (var(G)->predicate_property(G:H, exported);true), kb_dynamic(G:E/F), show_failure(hybrid_support, \+static_predicate(E/F))}, prologHybrid(E), arity(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 199)).
spft((prologHybrid(A), arity(A, B)<==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 212), ax).
spft(mpred_mark(pfcLHS, p, prologHybrid, 1), s(((prologHybrid(A), arity(A, B)<==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 212))), ax).
spft(mpred_mark(pfcPosTrigger, p, prologHybrid, 1), s(((prologHybrid(A), arity(A, B)<==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 212))), ax).
spft(pt(prologHybrid(A), pt(arity(A, B), rhs([hybrid_support(A, B)]))),  (prologHybrid(C), arity(C, D)<==>hybrid_support(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 212)).
spft(pt(arity(arity, A), rhs([hybrid_support(arity, A)])), prologHybrid(arity), pt(prologHybrid(B), pt(arity(B, C), rhs([hybrid_support(B, C)])))).
spft(hybrid_support(arity, 2), arity(arity, 2), pt(arity(arity, A), rhs([hybrid_support(arity, A)]))).
spft(prologHybrid(arity), hybrid_support(arity, 2), pt(hybrid_support(arity, 2),  (arity\='$VAR', atom(arity), integer(2), \+prologDynamic(arity), \+static_predicate(arity/2)->rhs([{functor(arity(A, B), arity, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(arity, baseKB:arity(A, B)), \+predicate_property(baseKB:arity(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:arity(A, B), exported);true), kb_dynamic(baseKB:arity/2), show_failure(hybrid_support, \+static_predicate(arity/2))}, prologHybrid(arity), arity(arity, 2)])))).
spft(arity(arity, 2), hybrid_support(arity, 2), pt(hybrid_support(arity, 2),  (arity\='$VAR', atom(arity), integer(2), \+prologDynamic(arity), \+static_predicate(arity/2)->rhs([{functor(arity(A, B), arity, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(arity, baseKB:arity(A, B)), \+predicate_property(baseKB:arity(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:arity(A, B), exported);true), kb_dynamic(baseKB:arity/2), show_failure(hybrid_support, \+static_predicate(arity/2))}, prologHybrid(arity), arity(arity, 2)])))).
spft(pt(arity(genls, A), rhs([hybrid_support(genls, A)])), prologHybrid(genls), pt(prologHybrid(B), pt(arity(B, C), rhs([hybrid_support(B, C)])))).
spft(hybrid_support(genls, 2), arity(genls, 2), pt(arity(genls, A), rhs([hybrid_support(genls, A)]))).
spft(prologHybrid(genls), hybrid_support(genls, 2), pt(hybrid_support(genls, 2),  (genls\='$VAR', atom(genls), integer(2), \+prologDynamic(genls), \+static_predicate(genls/2)->rhs([{functor(genls(A, B), genls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genls, baseKB:genls(A, B)), \+predicate_property(baseKB:genls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genls(A, B), exported);true), kb_dynamic(baseKB:genls/2), show_failure(hybrid_support, \+static_predicate(genls/2))}, prologHybrid(genls), arity(genls, 2)])))).
spft(arity(genls, 2), hybrid_support(genls, 2), pt(hybrid_support(genls, 2),  (genls\='$VAR', atom(genls), integer(2), \+prologDynamic(genls), \+static_predicate(genls/2)->rhs([{functor(genls(A, B), genls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genls, baseKB:genls(A, B)), \+predicate_property(baseKB:genls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genls(A, B), exported);true), kb_dynamic(baseKB:genls/2), show_failure(hybrid_support, \+static_predicate(genls/2))}, prologHybrid(genls), arity(genls, 2)])))).
spft(pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)])),  (prologHybrid(C), arity(C, D)<==>hybrid_support(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 212)).
spft(prologHybrid(arity), hybrid_support(arity, 2), pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)]))).
spft(arity(arity, 2), hybrid_support(arity, 2), pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)]))).
spft(prologHybrid(genls), hybrid_support(genls, 2), pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)]))).
spft(arity(genls, 2), hybrid_support(genls, 2), pt(hybrid_support(A, B), rhs([prologHybrid(A), arity(A, B)]))).
spft((mpred_mark(pfcPosTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{trace_or_throw(warn(pfcPosTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 7), ax).
spft(mpred_mark(pfcCallCode, p, fa_to_p, 3), s(((mpred_mark(pfcPosTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{trace_or_throw(warn(pfcPosTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 7))), ax).
spft(mpred_mark(pfcCallCode, p, predicate_property, 2), s(((mpred_mark(pfcPosTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{trace_or_throw(warn(pfcPosTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 7))), ax).
spft(mpred_mark(pfcCallCode, p, trace_or_throw, 1), s(((mpred_mark(pfcPosTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{trace_or_throw(warn(pfcPosTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 7))), ax).
spft(pt(mpred_mark(pfcPosTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{trace_or_throw(warn(pfcPosTrigger, C, static))}]))),  (mpred_mark(pfcPosTrigger, _, D, E)/ (fa_to_p(D, E, F), predicate_property(F, static))==>{trace_or_throw(warn(pfcPosTrigger, F, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 7)).
spft((mpred_mark(pfcNegTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{dmsg(warn(pfcNegTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 8), ax).
spft(mpred_mark(pfcCallCode, p, dmsg, 1), s(((mpred_mark(pfcNegTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{dmsg(warn(pfcNegTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 8))), ax).
spft(pt(mpred_mark(pfcNegTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{dmsg(warn(pfcNegTrigger, C, static))}]))),  (mpred_mark(pfcNegTrigger, _, D, E)/ (fa_to_p(D, E, F), predicate_property(F, static))==>{dmsg(warn(pfcNegTrigger, F, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 8)).
spft((mpred_mark(pfcBcTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{dmsg(warn(pfcNegTrigger, C, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 9), ax).
spft(pt(mpred_mark(pfcBcTrigger, _, A, B),  (fa_to_p(A, B, C), predicate_property(C, static)->rhs([{dmsg(warn(pfcNegTrigger, C, static))}]))),  (mpred_mark(pfcBcTrigger, _, D, E)/ (fa_to_p(D, E, F), predicate_property(F, static))==>{dmsg(warn(pfcNegTrigger, F, static))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 9)).
spft((mpred_mark(A, B, C, D)/ground(A:B)==>arity(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 19), ax).
spft(mpred_mark(pfcCallCode, p, ground, 1), s(((mpred_mark(A, B, C, D)/ground(A:B)==>arity(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 19))), ax).
spft(pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)]))),  (mpred_mark(E, F, G, H)/ground(E:F)==>arity(G, H)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 19)).
spft(arity(prologBuiltin, 1), mpred_mark(pfcLHS, p, prologBuiltin, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(make_builtin, 1), mpred_mark(pfcCallCode, p, make_builtin, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologBuiltin, 1), mpred_mark(pfcPosTrigger, p, prologBuiltin, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(conflict, 1), mpred_mark(pfcLHS, p, conflict, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(must, 1), mpred_mark(pfcCallCode, p, must, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(conflict, 1), mpred_mark(pfcPosTrigger, p, conflict, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(type_prefix, 2), mpred_mark(pfcCallCode, p, type_prefix, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tCol, 1), mpred_mark(pfcCreates, p, tCol, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(mpred_undo_sys, 3), mpred_mark(pfcLHS, p, mpred_undo_sys, 3), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(mpred_do_and_undo_method, 2), mpred_mark(pfcCreates, p, mpred_do_and_undo_method, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(mpred_undo_sys, 3), mpred_mark(pfcPosTrigger, p, mpred_undo_sys, 3), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(mpred_non_neg_literal, 1), mpred_mark(pfcCallCode, p, mpred_non_neg_literal, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tPred, 1), mpred_mark(pfcLHS, p, tPred, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(integer, 1), mpred_mark(pfcCallCode, p, integer, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(>, 2), mpred_mark(pfcCallCode, p, >, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologBuiltin, 1), mpred_mark(pfcLHS, n, prologBuiltin, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tCol, 1), mpred_mark(pfcCreates, n, tCol, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(support_hilog, 2), mpred_mark(pfcCreates, p, support_hilog, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tPred, 1), mpred_mark(pfcPosTrigger, p, tPred, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologBuiltin, 1), mpred_mark(pfcPosTrigger, n, prologBuiltin, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tCol, 1), mpred_mark(pfcLHS, n, tCol, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcCallCode, p, completelyAssertedCollection, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcCreates, n, completelyAssertedCollection, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(tCol, 1), mpred_mark(pfcPosTrigger, n, tCol, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(support_hilog, 2), mpred_mark(pfcLHS, p, support_hilog, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(\=, 2), mpred_mark(pfcCallCode, p, \=, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(atom, 1), mpred_mark(pfcCallCode, p, atom, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(static_predicate, 1), mpred_mark(pfcCallCode, n, static_predicate, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologDynamic, 1), mpred_mark(pfcCallCode, n, prologDynamic, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(static_predicate, 1), mpred_mark(pfcCallCode, p, static_predicate, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologDynamic, 1), mpred_mark(pfcCallCode, p, prologDynamic, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(hybrid_support, 2), mpred_mark(pfcCreates, p, hybrid_support, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(=, 2), mpred_mark(pfcCallCode, p, =, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(support_hilog, 2), mpred_mark(pfcPosTrigger, p, support_hilog, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(hybrid_support, 2), mpred_mark(pfcLHS, p, hybrid_support, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(functor, 3), mpred_mark(pfcCallCode, p, functor, 3), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(->, 2), mpred_mark(pfcCallCode, p, ->, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(true, 0), mpred_mark(pfcCallCode, p, true, 0), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(kb_dynamic, 1), mpred_mark(pfcCallCode, p, kb_dynamic, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(show_failure, 2), mpred_mark(pfcCallCode, p, show_failure, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologHybrid, 1), mpred_mark(pfcCreates, p, prologHybrid, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(hybrid_support, 2), mpred_mark(pfcPosTrigger, p, hybrid_support, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologHybrid, 1), mpred_mark(pfcLHS, p, prologHybrid, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(prologHybrid, 1), mpred_mark(pfcPosTrigger, p, prologHybrid, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(fa_to_p, 3), mpred_mark(pfcCallCode, p, fa_to_p, 3), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(predicate_property, 2), mpred_mark(pfcCallCode, p, predicate_property, 2), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(trace_or_throw, 1), mpred_mark(pfcCallCode, p, trace_or_throw, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(dmsg, 1), mpred_mark(pfcCallCode, p, dmsg, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft(arity(ground, 1), mpred_mark(pfcCallCode, p, ground, 1), pt(mpred_mark(A, B, C, D),  (ground(A:B)->rhs([arity(C, D)])))).
spft((mpred_mark(pfcPosTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 20), ax).
spft(mpred_mark(pfcCreates, p, marker_supported, 2), s(((mpred_mark(pfcPosTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 20))), ax).
spft(arity(marker_supported, 2), mpred_mark(pfcCreates, p, marker_supported, 2), pt(mpred_mark(pfcCreates, p, marker_supported, 2),  (ground(pfcCreates:p)->rhs([arity(marker_supported, 2)])))).
spft(pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcPosTrigger, D, E, F)/ground(D:E:F)==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 20)).
spft(marker_supported(prologBuiltin, 1), mpred_mark(pfcPosTrigger, p, prologBuiltin, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(conflict, 1), mpred_mark(pfcPosTrigger, p, conflict, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(mpred_undo_sys, 3), mpred_mark(pfcPosTrigger, p, mpred_undo_sys, 3), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(tPred, 1), mpred_mark(pfcPosTrigger, p, tPred, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(prologBuiltin, 1), mpred_mark(pfcPosTrigger, n, prologBuiltin, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(tCol, 1), mpred_mark(pfcPosTrigger, n, tCol, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(support_hilog, 2), mpred_mark(pfcPosTrigger, p, support_hilog, 2), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(hybrid_support, 2), mpred_mark(pfcPosTrigger, p, hybrid_support, 2), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(prologHybrid, 1), mpred_mark(pfcPosTrigger, p, prologHybrid, 1), pt(mpred_mark(pfcPosTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft((mpred_mark(pfcNegTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 21), ax).
spft(pt(mpred_mark(pfcNegTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcNegTrigger, D, E, F)/ground(D:E:F)==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 21)).
spft((mpred_mark(pfcBcTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 22), ax).
spft(pt(mpred_mark(pfcBcTrigger, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcBcTrigger, D, E, F)/ground(D:E:F)==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 22)).
spft((mpred_mark(pfcRHS, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 23), ax).
spft(pt(mpred_mark(pfcRHS, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcRHS, D, E, F)/ground(D:E:F)==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 23)).
spft((mpred_mark(pfcCreates, A, B, C)/ground(A:B:C)==>{functor(D, B, C), make_dynamic(D)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 24), ax).
spft(mpred_mark(pfcCallCode, p, make_dynamic, 1), s(((mpred_mark(pfcCreates, A, B, C)/ground(A:B:C)==>{functor(D, B, C), make_dynamic(D)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 24))), ax).
spft(arity(make_dynamic, 1), mpred_mark(pfcCallCode, p, make_dynamic, 1), pt(mpred_mark(pfcCallCode, p, make_dynamic, 1),  (ground(pfcCallCode:p)->rhs([arity(make_dynamic, 1)])))).
spft(pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([{functor(D, B, C), make_dynamic(D)}]))),  (mpred_mark(pfcCreates, E, F, G)/ground(E:F:G)==>{functor(H, F, G), make_dynamic(H)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 24)).
spft((mpred_mark(pfcCreates, A, B, C)/ground(A:B:C)==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 25), ax).
spft(pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcCreates, D, E, F)/ground(D:E:F)==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 25)).
spft(marker_supported(tCol, 1), mpred_mark(pfcCreates, p, tCol, 1), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(mpred_do_and_undo_method, 2), mpred_mark(pfcCreates, p, mpred_do_and_undo_method, 2), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(tCol, 1), mpred_mark(pfcCreates, n, tCol, 1), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(support_hilog, 2), mpred_mark(pfcCreates, p, support_hilog, 2), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(completelyAssertedCollection, 1), mpred_mark(pfcCreates, n, completelyAssertedCollection, 1), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(hybrid_support, 2), mpred_mark(pfcCreates, p, hybrid_support, 2), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(prologHybrid, 1), mpred_mark(pfcCreates, p, prologHybrid, 1), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft(marker_supported(marker_supported, 2), mpred_mark(pfcCreates, p, marker_supported, 2), pt(mpred_mark(pfcCreates, A, B, C),  (ground(A:B:C)->rhs([marker_supported(B, C)])))).
spft((mpred_mark(pfcCallCode, A, B, C)/ (ground(A:B:C), predicate_is_undefined_fa(B, C))==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 26), ax).
spft(mpred_mark(pfcCallCode, p, predicate_is_undefined_fa, 2), s(((mpred_mark(pfcCallCode, A, B, C)/ (ground(A:B:C), predicate_is_undefined_fa(B, C))==>marker_supported(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 26))), ax).
spft(arity(predicate_is_undefined_fa, 2), mpred_mark(pfcCallCode, p, predicate_is_undefined_fa, 2), pt(mpred_mark(pfcCallCode, p, predicate_is_undefined_fa, 2),  (ground(pfcCallCode:p)->rhs([arity(predicate_is_undefined_fa, 2)])))).
spft(pt(mpred_mark(pfcCallCode, A, B, C),  (ground(A:B:C), predicate_is_undefined_fa(B, C)->rhs([marker_supported(B, C)]))),  (mpred_mark(pfcCallCode, D, E, F)/ (ground(D:E:F), predicate_is_undefined_fa(E, F))==>marker_supported(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 26)).
spft((marker_supported(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 30), ax).
spft(mpred_mark(pfcLHS, p, marker_supported, 2), s(((marker_supported(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 30))), ax).
spft(arity(marker_supported, 2), mpred_mark(pfcLHS, p, marker_supported, 2), pt(mpred_mark(pfcLHS, p, marker_supported, 2),  (ground(pfcLHS:p)->rhs([arity(marker_supported, 2)])))).
spft(mpred_mark(pfcPosTrigger, p, marker_supported, 2), s(((marker_supported(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 30))), ax).
spft(arity(marker_supported, 2), mpred_mark(pfcPosTrigger, p, marker_supported, 2), pt(mpred_mark(pfcPosTrigger, p, marker_supported, 2),  (ground(pfcPosTrigger:p)->rhs([arity(marker_supported, 2)])))).
spft(marker_supported(marker_supported, 2), mpred_mark(pfcPosTrigger, p, marker_supported, 2), pt(mpred_mark(pfcPosTrigger, p, marker_supported, 2),  (ground(p:marker_supported:2)->rhs([marker_supported(marker_supported, 2)])))).
spft(pt(marker_supported(A, B), rhs([hybrid_support(A, B)])),  (marker_supported(C, D)==>hybrid_support(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 30)).
spft(hybrid_support(prologBuiltin, 1), marker_supported(prologBuiltin, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(prologBuiltin), hybrid_support(prologBuiltin, 1), pt(hybrid_support(prologBuiltin, 1),  (prologBuiltin\='$VAR', atom(prologBuiltin), integer(1), \+prologDynamic(prologBuiltin), \+static_predicate(prologBuiltin/1)->rhs([{functor(prologBuiltin(A), prologBuiltin, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologBuiltin, baseKB:prologBuiltin(A)), \+predicate_property(baseKB:prologBuiltin(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologBuiltin(A), exported);true), kb_dynamic(baseKB:prologBuiltin/1), show_failure(hybrid_support, \+static_predicate(prologBuiltin/1))}, prologHybrid(prologBuiltin), arity(prologBuiltin, 1)])))).
spft(pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)])), prologHybrid(prologBuiltin), pt(prologHybrid(prologBuiltin), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)])))).
spft(hybrid_support(prologBuiltin, 1), arity(prologBuiltin, 1), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)]))).
spft(hybrid_support(prologBuiltin, 1), arity(prologBuiltin, 1), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)]))).
spft(arity(prologBuiltin, 1), hybrid_support(prologBuiltin, 1), pt(hybrid_support(prologBuiltin, 1),  (prologBuiltin\='$VAR', atom(prologBuiltin), integer(1), \+prologDynamic(prologBuiltin), \+static_predicate(prologBuiltin/1)->rhs([{functor(prologBuiltin(A), prologBuiltin, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologBuiltin, baseKB:prologBuiltin(A)), \+predicate_property(baseKB:prologBuiltin(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologBuiltin(A), exported);true), kb_dynamic(baseKB:prologBuiltin/1), show_failure(hybrid_support, \+static_predicate(prologBuiltin/1))}, prologHybrid(prologBuiltin), arity(prologBuiltin, 1)])))).
spft(prologHybrid(prologBuiltin), hybrid_support(prologBuiltin, 1), pt(hybrid_support(prologBuiltin, 1), rhs([prologHybrid(prologBuiltin), arity(prologBuiltin, 1)]))).
spft(arity(prologBuiltin, 1), hybrid_support(prologBuiltin, 1), pt(hybrid_support(prologBuiltin, 1), rhs([prologHybrid(prologBuiltin), arity(prologBuiltin, 1)]))).
spft(hybrid_support(conflict, 1), marker_supported(conflict, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(conflict), hybrid_support(conflict, 1), pt(hybrid_support(conflict, 1),  (conflict\='$VAR', atom(conflict), integer(1), \+prologDynamic(conflict), \+static_predicate(conflict/1)->rhs([{functor(conflict(A), conflict, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(conflict, baseKB:conflict(A)), \+predicate_property(baseKB:conflict(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:conflict(A), exported);true), kb_dynamic(baseKB:conflict/1), show_failure(hybrid_support, \+static_predicate(conflict/1))}, prologHybrid(conflict), arity(conflict, 1)])))).
spft(pt(arity(conflict, A), rhs([hybrid_support(conflict, A)])), prologHybrid(conflict), pt(prologHybrid(conflict), pt(arity(conflict, A), rhs([hybrid_support(conflict, A)])))).
spft(hybrid_support(conflict, 1), arity(conflict, 1), pt(arity(conflict, A), rhs([hybrid_support(conflict, A)]))).
spft(hybrid_support(conflict, 1), arity(conflict, 1), pt(arity(conflict, A), rhs([hybrid_support(conflict, A)]))).
spft(arity(conflict, 1), hybrid_support(conflict, 1), pt(hybrid_support(conflict, 1),  (conflict\='$VAR', atom(conflict), integer(1), \+prologDynamic(conflict), \+static_predicate(conflict/1)->rhs([{functor(conflict(A), conflict, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(conflict, baseKB:conflict(A)), \+predicate_property(baseKB:conflict(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:conflict(A), exported);true), kb_dynamic(baseKB:conflict/1), show_failure(hybrid_support, \+static_predicate(conflict/1))}, prologHybrid(conflict), arity(conflict, 1)])))).
spft(prologHybrid(conflict), hybrid_support(conflict, 1), pt(hybrid_support(conflict, 1), rhs([prologHybrid(conflict), arity(conflict, 1)]))).
spft(arity(conflict, 1), hybrid_support(conflict, 1), pt(hybrid_support(conflict, 1), rhs([prologHybrid(conflict), arity(conflict, 1)]))).
spft(hybrid_support(mpred_undo_sys, 3), marker_supported(mpred_undo_sys, 3), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(mpred_undo_sys), hybrid_support(mpred_undo_sys, 3), pt(hybrid_support(mpred_undo_sys, 3),  (mpred_undo_sys\='$VAR', atom(mpred_undo_sys), integer(3), \+prologDynamic(mpred_undo_sys), \+static_predicate(mpred_undo_sys/3)->rhs([{functor(mpred_undo_sys(A, B, C), mpred_undo_sys, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_undo_sys, baseKB:mpred_undo_sys(A, B, C)), \+predicate_property(baseKB:mpred_undo_sys(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_undo_sys(A, B, C), exported);true), kb_dynamic(baseKB:mpred_undo_sys/3), show_failure(hybrid_support, \+static_predicate(mpred_undo_sys/3))}, prologHybrid(mpred_undo_sys), arity(mpred_undo_sys, 3)])))).
spft(pt(arity(mpred_undo_sys, A), rhs([hybrid_support(mpred_undo_sys, A)])), prologHybrid(mpred_undo_sys), pt(prologHybrid(mpred_undo_sys), pt(arity(mpred_undo_sys, A), rhs([hybrid_support(mpred_undo_sys, A)])))).
spft(hybrid_support(mpred_undo_sys, 3), arity(mpred_undo_sys, 3), pt(arity(mpred_undo_sys, A), rhs([hybrid_support(mpred_undo_sys, A)]))).
spft(arity(mpred_undo_sys, 3), hybrid_support(mpred_undo_sys, 3), pt(hybrid_support(mpred_undo_sys, 3),  (mpred_undo_sys\='$VAR', atom(mpred_undo_sys), integer(3), \+prologDynamic(mpred_undo_sys), \+static_predicate(mpred_undo_sys/3)->rhs([{functor(mpred_undo_sys(A, B, C), mpred_undo_sys, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_undo_sys, baseKB:mpred_undo_sys(A, B, C)), \+predicate_property(baseKB:mpred_undo_sys(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_undo_sys(A, B, C), exported);true), kb_dynamic(baseKB:mpred_undo_sys/3), show_failure(hybrid_support, \+static_predicate(mpred_undo_sys/3))}, prologHybrid(mpred_undo_sys), arity(mpred_undo_sys, 3)])))).
spft(prologHybrid(mpred_undo_sys), hybrid_support(mpred_undo_sys, 3), pt(hybrid_support(mpred_undo_sys, 3), rhs([prologHybrid(mpred_undo_sys), arity(mpred_undo_sys, 3)]))).
spft(arity(mpred_undo_sys, 3), hybrid_support(mpred_undo_sys, 3), pt(hybrid_support(mpred_undo_sys, 3), rhs([prologHybrid(mpred_undo_sys), arity(mpred_undo_sys, 3)]))).
spft(hybrid_support(tPred, 1), marker_supported(tPred, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(tPred), hybrid_support(tPred, 1), pt(hybrid_support(tPred, 1),  (tPred\='$VAR', atom(tPred), integer(1), \+prologDynamic(tPred), \+static_predicate(tPred/1)->rhs([{functor(tPred(A), tPred, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tPred, baseKB:tPred(A)), \+predicate_property(baseKB:tPred(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tPred(A), exported);true), kb_dynamic(baseKB:tPred/1), show_failure(hybrid_support, \+static_predicate(tPred/1))}, prologHybrid(tPred), arity(tPred, 1)])))).
spft(pt(arity(tPred, A), rhs([hybrid_support(tPred, A)])), prologHybrid(tPred), pt(prologHybrid(tPred), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)])))).
spft(hybrid_support(tPred, 1), arity(tPred, 1), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)]))).
spft(hybrid_support(tPred, 1), arity(tPred, 1), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)]))).
spft(arity(tPred, 1), hybrid_support(tPred, 1), pt(hybrid_support(tPred, 1),  (tPred\='$VAR', atom(tPred), integer(1), \+prologDynamic(tPred), \+static_predicate(tPred/1)->rhs([{functor(tPred(A), tPred, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tPred, baseKB:tPred(A)), \+predicate_property(baseKB:tPred(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tPred(A), exported);true), kb_dynamic(baseKB:tPred/1), show_failure(hybrid_support, \+static_predicate(tPred/1))}, prologHybrid(tPred), arity(tPred, 1)])))).
spft(prologHybrid(tPred), hybrid_support(tPred, 1), pt(hybrid_support(tPred, 1), rhs([prologHybrid(tPred), arity(tPred, 1)]))).
spft(arity(tPred, 1), hybrid_support(tPred, 1), pt(hybrid_support(tPred, 1), rhs([prologHybrid(tPred), arity(tPred, 1)]))).
spft(hybrid_support(tCol, 1), marker_supported(tCol, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(tCol), hybrid_support(tCol, 1), pt(hybrid_support(tCol, 1),  (tCol\='$VAR', atom(tCol), integer(1), \+prologDynamic(tCol), \+static_predicate(tCol/1)->rhs([{functor(tCol(A), tCol, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tCol, baseKB:tCol(A)), \+predicate_property(baseKB:tCol(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tCol(A), exported);true), kb_dynamic(baseKB:tCol/1), show_failure(hybrid_support, \+static_predicate(tCol/1))}, prologHybrid(tCol), arity(tCol, 1)])))).
spft(pt(arity(tCol, A), rhs([hybrid_support(tCol, A)])), prologHybrid(tCol), pt(prologHybrid(tCol), pt(arity(tCol, A), rhs([hybrid_support(tCol, A)])))).
spft(hybrid_support(tCol, 1), arity(tCol, 1), pt(arity(tCol, A), rhs([hybrid_support(tCol, A)]))).
spft(hybrid_support(tCol, 1), arity(tCol, 1), pt(arity(tCol, A), rhs([hybrid_support(tCol, A)]))).
spft(arity(tCol, 1), hybrid_support(tCol, 1), pt(hybrid_support(tCol, 1),  (tCol\='$VAR', atom(tCol), integer(1), \+prologDynamic(tCol), \+static_predicate(tCol/1)->rhs([{functor(tCol(A), tCol, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tCol, baseKB:tCol(A)), \+predicate_property(baseKB:tCol(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tCol(A), exported);true), kb_dynamic(baseKB:tCol/1), show_failure(hybrid_support, \+static_predicate(tCol/1))}, prologHybrid(tCol), arity(tCol, 1)])))).
spft(prologHybrid(tCol), hybrid_support(tCol, 1), pt(hybrid_support(tCol, 1), rhs([prologHybrid(tCol), arity(tCol, 1)]))).
spft(arity(tCol, 1), hybrid_support(tCol, 1), pt(hybrid_support(tCol, 1), rhs([prologHybrid(tCol), arity(tCol, 1)]))).
spft(hybrid_support(support_hilog, 2), marker_supported(support_hilog, 2), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(support_hilog), hybrid_support(support_hilog, 2), pt(hybrid_support(support_hilog, 2),  (support_hilog\='$VAR', atom(support_hilog), integer(2), \+prologDynamic(support_hilog), \+static_predicate(support_hilog/2)->rhs([{functor(support_hilog(A, B), support_hilog, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(support_hilog, baseKB:support_hilog(A, B)), \+predicate_property(baseKB:support_hilog(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:support_hilog(A, B), exported);true), kb_dynamic(baseKB:support_hilog/2), show_failure(hybrid_support, \+static_predicate(support_hilog/2))}, prologHybrid(support_hilog), arity(support_hilog, 2)])))).
spft(pt(arity(support_hilog, A), rhs([hybrid_support(support_hilog, A)])), prologHybrid(support_hilog), pt(prologHybrid(support_hilog), pt(arity(support_hilog, A), rhs([hybrid_support(support_hilog, A)])))).
spft(hybrid_support(support_hilog, 2), arity(support_hilog, 2), pt(arity(support_hilog, A), rhs([hybrid_support(support_hilog, A)]))).
spft(arity(support_hilog, 2), hybrid_support(support_hilog, 2), pt(hybrid_support(support_hilog, 2),  (support_hilog\='$VAR', atom(support_hilog), integer(2), \+prologDynamic(support_hilog), \+static_predicate(support_hilog/2)->rhs([{functor(support_hilog(A, B), support_hilog, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(support_hilog, baseKB:support_hilog(A, B)), \+predicate_property(baseKB:support_hilog(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:support_hilog(A, B), exported);true), kb_dynamic(baseKB:support_hilog/2), show_failure(hybrid_support, \+static_predicate(support_hilog/2))}, prologHybrid(support_hilog), arity(support_hilog, 2)])))).
spft(prologHybrid(support_hilog), hybrid_support(support_hilog, 2), pt(hybrid_support(support_hilog, 2), rhs([prologHybrid(support_hilog), arity(support_hilog, 2)]))).
spft(arity(support_hilog, 2), hybrid_support(support_hilog, 2), pt(hybrid_support(support_hilog, 2), rhs([prologHybrid(support_hilog), arity(support_hilog, 2)]))).
spft(hybrid_support(hybrid_support, 2), marker_supported(hybrid_support, 2), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(hybrid_support), hybrid_support(hybrid_support, 2), pt(hybrid_support(hybrid_support, 2),  (hybrid_support\='$VAR', atom(hybrid_support), integer(2), \+prologDynamic(hybrid_support), \+static_predicate(hybrid_support/2)->rhs([{functor(hybrid_support(A, B), hybrid_support, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(hybrid_support, baseKB:hybrid_support(A, B)), \+predicate_property(baseKB:hybrid_support(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:hybrid_support(A, B), exported);true), kb_dynamic(baseKB:hybrid_support/2), show_failure(hybrid_support, \+static_predicate(hybrid_support/2))}, prologHybrid(hybrid_support), arity(hybrid_support, 2)])))).
spft(pt(arity(hybrid_support, A), rhs([hybrid_support(hybrid_support, A)])), prologHybrid(hybrid_support), pt(prologHybrid(hybrid_support), pt(arity(hybrid_support, A), rhs([hybrid_support(hybrid_support, A)])))).
spft(hybrid_support(hybrid_support, 2), arity(hybrid_support, 2), pt(arity(hybrid_support, A), rhs([hybrid_support(hybrid_support, A)]))).
spft(arity(hybrid_support, 2), hybrid_support(hybrid_support, 2), pt(hybrid_support(hybrid_support, 2),  (hybrid_support\='$VAR', atom(hybrid_support), integer(2), \+prologDynamic(hybrid_support), \+static_predicate(hybrid_support/2)->rhs([{functor(hybrid_support(A, B), hybrid_support, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(hybrid_support, baseKB:hybrid_support(A, B)), \+predicate_property(baseKB:hybrid_support(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:hybrid_support(A, B), exported);true), kb_dynamic(baseKB:hybrid_support/2), show_failure(hybrid_support, \+static_predicate(hybrid_support/2))}, prologHybrid(hybrid_support), arity(hybrid_support, 2)])))).
spft(prologHybrid(hybrid_support), hybrid_support(hybrid_support, 2), pt(hybrid_support(hybrid_support, 2), rhs([prologHybrid(hybrid_support), arity(hybrid_support, 2)]))).
spft(arity(hybrid_support, 2), hybrid_support(hybrid_support, 2), pt(hybrid_support(hybrid_support, 2), rhs([prologHybrid(hybrid_support), arity(hybrid_support, 2)]))).
spft(hybrid_support(prologHybrid, 1), marker_supported(prologHybrid, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(prologHybrid), hybrid_support(prologHybrid, 1), pt(hybrid_support(prologHybrid, 1),  (prologHybrid\='$VAR', atom(prologHybrid), integer(1), \+prologDynamic(prologHybrid), \+static_predicate(prologHybrid/1)->rhs([{functor(prologHybrid(A), prologHybrid, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologHybrid, baseKB:prologHybrid(A)), \+predicate_property(baseKB:prologHybrid(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologHybrid(A), exported);true), kb_dynamic(baseKB:prologHybrid/1), show_failure(hybrid_support, \+static_predicate(prologHybrid/1))}, prologHybrid(prologHybrid), arity(prologHybrid, 1)])))).
spft(pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)])), prologHybrid(prologHybrid), pt(prologHybrid(prologHybrid), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)])))).
spft(hybrid_support(prologHybrid, 1), arity(prologHybrid, 1), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)]))).
spft(hybrid_support(prologHybrid, 1), arity(prologHybrid, 1), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)]))).
spft(arity(prologHybrid, 1), hybrid_support(prologHybrid, 1), pt(hybrid_support(prologHybrid, 1),  (prologHybrid\='$VAR', atom(prologHybrid), integer(1), \+prologDynamic(prologHybrid), \+static_predicate(prologHybrid/1)->rhs([{functor(prologHybrid(A), prologHybrid, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologHybrid, baseKB:prologHybrid(A)), \+predicate_property(baseKB:prologHybrid(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologHybrid(A), exported);true), kb_dynamic(baseKB:prologHybrid/1), show_failure(hybrid_support, \+static_predicate(prologHybrid/1))}, prologHybrid(prologHybrid), arity(prologHybrid, 1)])))).
spft(prologHybrid(prologHybrid), hybrid_support(prologHybrid, 1), pt(hybrid_support(prologHybrid, 1), rhs([prologHybrid(prologHybrid), arity(prologHybrid, 1)]))).
spft(arity(prologHybrid, 1), hybrid_support(prologHybrid, 1), pt(hybrid_support(prologHybrid, 1), rhs([prologHybrid(prologHybrid), arity(prologHybrid, 1)]))).
spft(hybrid_support(mpred_do_and_undo_method, 2), marker_supported(mpred_do_and_undo_method, 2), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(mpred_do_and_undo_method), hybrid_support(mpred_do_and_undo_method, 2), pt(hybrid_support(mpred_do_and_undo_method, 2),  (mpred_do_and_undo_method\='$VAR', atom(mpred_do_and_undo_method), integer(2), \+prologDynamic(mpred_do_and_undo_method), \+static_predicate(mpred_do_and_undo_method/2)->rhs([{functor(mpred_do_and_undo_method(A, B), mpred_do_and_undo_method, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_do_and_undo_method, baseKB:mpred_do_and_undo_method(A, B)), \+predicate_property(baseKB:mpred_do_and_undo_method(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_do_and_undo_method(A, B), exported);true), kb_dynamic(baseKB:mpred_do_and_undo_method/2), show_failure(hybrid_support, \+static_predicate(mpred_do_and_undo_method/2))}, prologHybrid(mpred_do_and_undo_method), arity(mpred_do_and_undo_method, 2)])))).
spft(pt(arity(mpred_do_and_undo_method, A), rhs([hybrid_support(mpred_do_and_undo_method, A)])), prologHybrid(mpred_do_and_undo_method), pt(prologHybrid(mpred_do_and_undo_method), pt(arity(mpred_do_and_undo_method, A), rhs([hybrid_support(mpred_do_and_undo_method, A)])))).
spft(hybrid_support(mpred_do_and_undo_method, 2), arity(mpred_do_and_undo_method, 2), pt(arity(mpred_do_and_undo_method, A), rhs([hybrid_support(mpred_do_and_undo_method, A)]))).
spft(arity(mpred_do_and_undo_method, 2), hybrid_support(mpred_do_and_undo_method, 2), pt(hybrid_support(mpred_do_and_undo_method, 2),  (mpred_do_and_undo_method\='$VAR', atom(mpred_do_and_undo_method), integer(2), \+prologDynamic(mpred_do_and_undo_method), \+static_predicate(mpred_do_and_undo_method/2)->rhs([{functor(mpred_do_and_undo_method(A, B), mpred_do_and_undo_method, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_do_and_undo_method, baseKB:mpred_do_and_undo_method(A, B)), \+predicate_property(baseKB:mpred_do_and_undo_method(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_do_and_undo_method(A, B), exported);true), kb_dynamic(baseKB:mpred_do_and_undo_method/2), show_failure(hybrid_support, \+static_predicate(mpred_do_and_undo_method/2))}, prologHybrid(mpred_do_and_undo_method), arity(mpred_do_and_undo_method, 2)])))).
spft(prologHybrid(mpred_do_and_undo_method), hybrid_support(mpred_do_and_undo_method, 2), pt(hybrid_support(mpred_do_and_undo_method, 2), rhs([prologHybrid(mpred_do_and_undo_method), arity(mpred_do_and_undo_method, 2)]))).
spft(arity(mpred_do_and_undo_method, 2), hybrid_support(mpred_do_and_undo_method, 2), pt(hybrid_support(mpred_do_and_undo_method, 2), rhs([prologHybrid(mpred_do_and_undo_method), arity(mpred_do_and_undo_method, 2)]))).
spft(hybrid_support(completelyAssertedCollection, 1), marker_supported(completelyAssertedCollection, 1), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(completelyAssertedCollection), hybrid_support(completelyAssertedCollection, 1), pt(hybrid_support(completelyAssertedCollection, 1),  (completelyAssertedCollection\='$VAR', atom(completelyAssertedCollection), integer(1), \+prologDynamic(completelyAssertedCollection), \+static_predicate(completelyAssertedCollection/1)->rhs([{functor(completelyAssertedCollection(A), completelyAssertedCollection, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completelyAssertedCollection, baseKB:completelyAssertedCollection(A)), \+predicate_property(baseKB:completelyAssertedCollection(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completelyAssertedCollection(A), exported);true), kb_dynamic(baseKB:completelyAssertedCollection/1), show_failure(hybrid_support, \+static_predicate(completelyAssertedCollection/1))}, prologHybrid(completelyAssertedCollection), arity(completelyAssertedCollection, 1)])))).
spft(pt(arity(completelyAssertedCollection, A), rhs([hybrid_support(completelyAssertedCollection, A)])), prologHybrid(completelyAssertedCollection), pt(prologHybrid(completelyAssertedCollection), pt(arity(completelyAssertedCollection, A), rhs([hybrid_support(completelyAssertedCollection, A)])))).
spft(hybrid_support(completelyAssertedCollection, 1), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, A), rhs([hybrid_support(completelyAssertedCollection, A)]))).
spft(hybrid_support(completelyAssertedCollection, 1), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, A), rhs([hybrid_support(completelyAssertedCollection, A)]))).
spft(arity(completelyAssertedCollection, 1), hybrid_support(completelyAssertedCollection, 1), pt(hybrid_support(completelyAssertedCollection, 1),  (completelyAssertedCollection\='$VAR', atom(completelyAssertedCollection), integer(1), \+prologDynamic(completelyAssertedCollection), \+static_predicate(completelyAssertedCollection/1)->rhs([{functor(completelyAssertedCollection(A), completelyAssertedCollection, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completelyAssertedCollection, baseKB:completelyAssertedCollection(A)), \+predicate_property(baseKB:completelyAssertedCollection(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completelyAssertedCollection(A), exported);true), kb_dynamic(baseKB:completelyAssertedCollection/1), show_failure(hybrid_support, \+static_predicate(completelyAssertedCollection/1))}, prologHybrid(completelyAssertedCollection), arity(completelyAssertedCollection, 1)])))).
spft(prologHybrid(completelyAssertedCollection), hybrid_support(completelyAssertedCollection, 1), pt(hybrid_support(completelyAssertedCollection, 1), rhs([prologHybrid(completelyAssertedCollection), arity(completelyAssertedCollection, 1)]))).
spft(arity(completelyAssertedCollection, 1), hybrid_support(completelyAssertedCollection, 1), pt(hybrid_support(completelyAssertedCollection, 1), rhs([prologHybrid(completelyAssertedCollection), arity(completelyAssertedCollection, 1)]))).
spft(hybrid_support(marker_supported, 2), marker_supported(marker_supported, 2), pt(marker_supported(A, B), rhs([hybrid_support(A, B)]))).
spft(prologHybrid(marker_supported), hybrid_support(marker_supported, 2), pt(hybrid_support(marker_supported, 2),  (marker_supported\='$VAR', atom(marker_supported), integer(2), \+prologDynamic(marker_supported), \+static_predicate(marker_supported/2)->rhs([{functor(marker_supported(A, B), marker_supported, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(marker_supported, baseKB:marker_supported(A, B)), \+predicate_property(baseKB:marker_supported(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:marker_supported(A, B), exported);true), kb_dynamic(baseKB:marker_supported/2), show_failure(hybrid_support, \+static_predicate(marker_supported/2))}, prologHybrid(marker_supported), arity(marker_supported, 2)])))).
spft(pt(arity(marker_supported, A), rhs([hybrid_support(marker_supported, A)])), prologHybrid(marker_supported), pt(prologHybrid(marker_supported), pt(arity(marker_supported, A), rhs([hybrid_support(marker_supported, A)])))).
spft(hybrid_support(marker_supported, 2), arity(marker_supported, 2), pt(arity(marker_supported, A), rhs([hybrid_support(marker_supported, A)]))).
spft(arity(marker_supported, 2), hybrid_support(marker_supported, 2), pt(hybrid_support(marker_supported, 2),  (marker_supported\='$VAR', atom(marker_supported), integer(2), \+prologDynamic(marker_supported), \+static_predicate(marker_supported/2)->rhs([{functor(marker_supported(A, B), marker_supported, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(marker_supported, baseKB:marker_supported(A, B)), \+predicate_property(baseKB:marker_supported(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:marker_supported(A, B), exported);true), kb_dynamic(baseKB:marker_supported/2), show_failure(hybrid_support, \+static_predicate(marker_supported/2))}, prologHybrid(marker_supported), arity(marker_supported, 2)])))).
spft(prologHybrid(marker_supported), hybrid_support(marker_supported, 2), pt(hybrid_support(marker_supported, 2), rhs([prologHybrid(marker_supported), arity(marker_supported, 2)]))).
spft(arity(marker_supported, 2), hybrid_support(marker_supported, 2), pt(hybrid_support(marker_supported, 2), rhs([prologHybrid(marker_supported), arity(marker_supported, 2)]))).
spft((mpred_mark_C(A)==>{map_mpred_mark_C(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 46), ax).
spft(mpred_mark(pfcLHS, p, mpred_mark_C, 1), s(((mpred_mark_C(A)==>{map_mpred_mark_C(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 46))), ax).
spft(arity(mpred_mark_C, 1), mpred_mark(pfcLHS, p, mpred_mark_C, 1), pt(mpred_mark(pfcLHS, p, mpred_mark_C, 1),  (ground(pfcLHS:p)->rhs([arity(mpred_mark_C, 1)])))).
spft(mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1), s(((mpred_mark_C(A)==>{map_mpred_mark_C(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 46))), ax).
spft(arity(map_mpred_mark_C, 1), mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1), pt(mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1),  (ground(pfcCallCode:p)->rhs([arity(map_mpred_mark_C, 1)])))).
spft(marker_supported(map_mpred_mark_C, 1), mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1), pt(mpred_mark(pfcCallCode, p, map_mpred_mark_C, 1),  (ground(p:map_mpred_mark_C:1), predicate_is_undefined_fa(map_mpred_mark_C, 1)->rhs([marker_supported(map_mpred_mark_C, 1)])))).
spft(hybrid_support(map_mpred_mark_C, 1), marker_supported(map_mpred_mark_C, 1), pt(marker_supported(map_mpred_mark_C, 1), rhs([hybrid_support(map_mpred_mark_C, 1)]))).
spft(prologHybrid(map_mpred_mark_C), hybrid_support(map_mpred_mark_C, 1), pt(hybrid_support(map_mpred_mark_C, 1),  (map_mpred_mark_C\='$VAR', atom(map_mpred_mark_C), integer(1), \+prologDynamic(map_mpred_mark_C), \+static_predicate(map_mpred_mark_C/1)->rhs([{functor(map_mpred_mark_C(A), map_mpred_mark_C, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(map_mpred_mark_C, baseKB:map_mpred_mark_C(A)), \+predicate_property(baseKB:map_mpred_mark_C(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:map_mpred_mark_C(A), exported);true), kb_dynamic(baseKB:map_mpred_mark_C/1), show_failure(hybrid_support, \+static_predicate(map_mpred_mark_C/1))}, prologHybrid(map_mpred_mark_C), arity(map_mpred_mark_C, 1)])))).
spft(pt(arity(map_mpred_mark_C, A), rhs([hybrid_support(map_mpred_mark_C, A)])), prologHybrid(map_mpred_mark_C), pt(prologHybrid(map_mpred_mark_C), pt(arity(map_mpred_mark_C, A), rhs([hybrid_support(map_mpred_mark_C, A)])))).
spft(hybrid_support(map_mpred_mark_C, 1), arity(map_mpred_mark_C, 1), pt(arity(map_mpred_mark_C, A), rhs([hybrid_support(map_mpred_mark_C, A)]))).
spft(hybrid_support(map_mpred_mark_C, 1), arity(map_mpred_mark_C, 1), pt(arity(map_mpred_mark_C, A), rhs([hybrid_support(map_mpred_mark_C, A)]))).
spft(arity(map_mpred_mark_C, 1), hybrid_support(map_mpred_mark_C, 1), pt(hybrid_support(map_mpred_mark_C, 1),  (map_mpred_mark_C\='$VAR', atom(map_mpred_mark_C), integer(1), \+prologDynamic(map_mpred_mark_C), \+static_predicate(map_mpred_mark_C/1)->rhs([{functor(map_mpred_mark_C(A), map_mpred_mark_C, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(map_mpred_mark_C, baseKB:map_mpred_mark_C(A)), \+predicate_property(baseKB:map_mpred_mark_C(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:map_mpred_mark_C(A), exported);true), kb_dynamic(baseKB:map_mpred_mark_C/1), show_failure(hybrid_support, \+static_predicate(map_mpred_mark_C/1))}, prologHybrid(map_mpred_mark_C), arity(map_mpred_mark_C, 1)])))).
spft(prologHybrid(map_mpred_mark_C), hybrid_support(map_mpred_mark_C, 1), pt(hybrid_support(map_mpred_mark_C, 1), rhs([prologHybrid(map_mpred_mark_C), arity(map_mpred_mark_C, 1)]))).
spft(arity(map_mpred_mark_C, 1), hybrid_support(map_mpred_mark_C, 1), pt(hybrid_support(map_mpred_mark_C, 1), rhs([prologHybrid(map_mpred_mark_C), arity(map_mpred_mark_C, 1)]))).
spft(mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1), s(((mpred_mark_C(A)==>{map_mpred_mark_C(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 46))), ax).
spft(arity(mpred_mark_C, 1), mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1), pt(mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1),  (ground(pfcPosTrigger:p)->rhs([arity(mpred_mark_C, 1)])))).
spft(marker_supported(mpred_mark_C, 1), mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1), pt(mpred_mark(pfcPosTrigger, p, mpred_mark_C, 1),  (ground(p:mpred_mark_C:1)->rhs([marker_supported(mpred_mark_C, 1)])))).
spft(hybrid_support(mpred_mark_C, 1), marker_supported(mpred_mark_C, 1), pt(marker_supported(mpred_mark_C, 1), rhs([hybrid_support(mpred_mark_C, 1)]))).
spft(prologHybrid(mpred_mark_C), hybrid_support(mpred_mark_C, 1), pt(hybrid_support(mpred_mark_C, 1),  (mpred_mark_C\='$VAR', atom(mpred_mark_C), integer(1), \+prologDynamic(mpred_mark_C), \+static_predicate(mpred_mark_C/1)->rhs([{functor(mpred_mark_C(A), mpred_mark_C, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_mark_C, baseKB:mpred_mark_C(A)), \+predicate_property(baseKB:mpred_mark_C(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_mark_C(A), exported);true), kb_dynamic(baseKB:mpred_mark_C/1), show_failure(hybrid_support, \+static_predicate(mpred_mark_C/1))}, prologHybrid(mpred_mark_C), arity(mpred_mark_C, 1)])))).
spft(pt(arity(mpred_mark_C, A), rhs([hybrid_support(mpred_mark_C, A)])), prologHybrid(mpred_mark_C), pt(prologHybrid(mpred_mark_C), pt(arity(mpred_mark_C, A), rhs([hybrid_support(mpred_mark_C, A)])))).
spft(hybrid_support(mpred_mark_C, 1), arity(mpred_mark_C, 1), pt(arity(mpred_mark_C, A), rhs([hybrid_support(mpred_mark_C, A)]))).
spft(hybrid_support(mpred_mark_C, 1), arity(mpred_mark_C, 1), pt(arity(mpred_mark_C, A), rhs([hybrid_support(mpred_mark_C, A)]))).
spft(arity(mpred_mark_C, 1), hybrid_support(mpred_mark_C, 1), pt(hybrid_support(mpred_mark_C, 1),  (mpred_mark_C\='$VAR', atom(mpred_mark_C), integer(1), \+prologDynamic(mpred_mark_C), \+static_predicate(mpred_mark_C/1)->rhs([{functor(mpred_mark_C(A), mpred_mark_C, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_mark_C, baseKB:mpred_mark_C(A)), \+predicate_property(baseKB:mpred_mark_C(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_mark_C(A), exported);true), kb_dynamic(baseKB:mpred_mark_C/1), show_failure(hybrid_support, \+static_predicate(mpred_mark_C/1))}, prologHybrid(mpred_mark_C), arity(mpred_mark_C, 1)])))).
spft(prologHybrid(mpred_mark_C), hybrid_support(mpred_mark_C, 1), pt(hybrid_support(mpred_mark_C, 1), rhs([prologHybrid(mpred_mark_C), arity(mpred_mark_C, 1)]))).
spft(arity(mpred_mark_C, 1), hybrid_support(mpred_mark_C, 1), pt(hybrid_support(mpred_mark_C, 1), rhs([prologHybrid(mpred_mark_C), arity(mpred_mark_C, 1)]))).
spft(pt(mpred_mark_C(A), rhs([{map_mpred_mark_C(A)}])),  (mpred_mark_C(B)==>{map_mpred_mark_C(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 46)).
spft((map_mpred_mark_C(D):-map_literals(lambda(A,  (get_functor(A, B, C), ain([isa(B, pfcControlled), arity(B, C)]))), D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 47), ax).
spft((mpred_mark(pfcRHS, _, A, B)/ (atom(A), integer(B), A\==arity)==>tPred(A), arity(A, B), pfcControlled(A/B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 48), ax).
spft(mpred_mark(pfcCallCode, p, \==, 2), s(((mpred_mark(pfcRHS, _, A, B)/ (atom(A), integer(B), A\==arity)==>tPred(A), arity(A, B), pfcControlled(A/B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 48))), ax).
spft(arity(\==, 2), mpred_mark(pfcCallCode, p, \==, 2), pt(mpred_mark(pfcCallCode, p, \==, 2),  (ground(pfcCallCode:p)->rhs([arity(\==, 2)])))).
spft(mpred_mark(pfcCreates, p, tPred, 1), s(((mpred_mark(pfcRHS, _, A, B)/ (atom(A), integer(B), A\==arity)==>tPred(A), arity(A, B), pfcControlled(A/B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 48))), ax).
spft(arity(tPred, 1), mpred_mark(pfcCreates, p, tPred, 1), pt(mpred_mark(pfcCreates, p, tPred, 1),  (ground(pfcCreates:p)->rhs([arity(tPred, 1)])))).
spft(marker_supported(tPred, 1), mpred_mark(pfcCreates, p, tPred, 1), pt(mpred_mark(pfcCreates, p, tPred, 1),  (ground(p:tPred:1)->rhs([marker_supported(tPred, 1)])))).
spft(mpred_mark(pfcCreates, p, pfcControlled, 1), s(((mpred_mark(pfcRHS, _, A, B)/ (atom(A), integer(B), A\==arity)==>tPred(A), arity(A, B), pfcControlled(A/B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 48))), ax).
spft(arity(pfcControlled, 1), mpred_mark(pfcCreates, p, pfcControlled, 1), pt(mpred_mark(pfcCreates, p, pfcControlled, 1),  (ground(pfcCreates:p)->rhs([arity(pfcControlled, 1)])))).
spft(marker_supported(pfcControlled, 1), mpred_mark(pfcCreates, p, pfcControlled, 1), pt(mpred_mark(pfcCreates, p, pfcControlled, 1),  (ground(p:pfcControlled:1)->rhs([marker_supported(pfcControlled, 1)])))).
spft(hybrid_support(pfcControlled, 1), marker_supported(pfcControlled, 1), pt(marker_supported(pfcControlled, 1), rhs([hybrid_support(pfcControlled, 1)]))).
spft(prologHybrid(pfcControlled), hybrid_support(pfcControlled, 1), pt(hybrid_support(pfcControlled, 1),  (pfcControlled\='$VAR', atom(pfcControlled), integer(1), \+prologDynamic(pfcControlled), \+static_predicate(pfcControlled/1)->rhs([{functor(pfcControlled(A), pfcControlled, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcControlled, baseKB:pfcControlled(A)), \+predicate_property(baseKB:pfcControlled(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcControlled(A), exported);true), kb_dynamic(baseKB:pfcControlled/1), show_failure(hybrid_support, \+static_predicate(pfcControlled/1))}, prologHybrid(pfcControlled), arity(pfcControlled, 1)])))).
spft(pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)])), prologHybrid(pfcControlled), pt(prologHybrid(pfcControlled), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)])))).
spft(hybrid_support(pfcControlled, 1), arity(pfcControlled, 1), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)]))).
spft(hybrid_support(pfcControlled, 1), arity(pfcControlled, 1), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)]))).
spft(arity(pfcControlled, 1), hybrid_support(pfcControlled, 1), pt(hybrid_support(pfcControlled, 1),  (pfcControlled\='$VAR', atom(pfcControlled), integer(1), \+prologDynamic(pfcControlled), \+static_predicate(pfcControlled/1)->rhs([{functor(pfcControlled(A), pfcControlled, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcControlled, baseKB:pfcControlled(A)), \+predicate_property(baseKB:pfcControlled(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcControlled(A), exported);true), kb_dynamic(baseKB:pfcControlled/1), show_failure(hybrid_support, \+static_predicate(pfcControlled/1))}, prologHybrid(pfcControlled), arity(pfcControlled, 1)])))).
spft(prologHybrid(pfcControlled), hybrid_support(pfcControlled, 1), pt(hybrid_support(pfcControlled, 1), rhs([prologHybrid(pfcControlled), arity(pfcControlled, 1)]))).
spft(arity(pfcControlled, 1), hybrid_support(pfcControlled, 1), pt(hybrid_support(pfcControlled, 1), rhs([prologHybrid(pfcControlled), arity(pfcControlled, 1)]))).
spft(pt(mpred_mark(pfcRHS, _, A, B),  (atom(A), integer(B), A\==arity->rhs([tPred(A), arity(A, B), pfcControlled(A/B)]))),  (mpred_mark(pfcRHS, _, C, D)/ (atom(C), integer(D), C\==arity)==>tPred(C), arity(C, D), pfcControlled(C/D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_markers.pfc.pl', 48)).
spft(arity(genlPreds, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 216), ax).
spft(arity(resolveConflict, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(prologBuiltin(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(pt(arity(resolveConflict, A), rhs([{make_builtin(resolveConflict/A)}])), prologBuiltin(resolveConflict), pt(prologBuiltin(resolveConflict), pt(arity(resolveConflict, A), rhs([{make_builtin(resolveConflict/A)}])))).
spft(prologBuiltin(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(arity(resolveConflict, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(prologBuiltin(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(arity(resolveConflict, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(tPred(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(pt(arity(resolveConflict, A),  (integer(A), A>1->pt(~prologBuiltin(resolveConflict), rhs([~tCol(resolveConflict), support_hilog(resolveConflict, A)])))), tPred(resolveConflict), pt(tPred(resolveConflict), pt(arity(resolveConflict, A),  (integer(A), A>1->pt(~prologBuiltin(resolveConflict), rhs([~tCol(resolveConflict), support_hilog(resolveConflict, A)])))))).
spft(mpred_module(resolveConflict, baseKB), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 226), ax).
spft(arity(mpred_select, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 227), ax).
spft(prologBuiltin(mpred_select), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 227), ax).
spft(tPred(mpred_select), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 227), ax).
spft(mpred_module(mpred_select, lmconf), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 227), ax).
spft(arity(agent_text_command, 4), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(prologBuiltin(agent_text_command), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(pt(arity(agent_text_command, A), rhs([{make_builtin(agent_text_command/A)}])), prologBuiltin(agent_text_command), pt(prologBuiltin(agent_text_command), pt(arity(agent_text_command, A), rhs([{make_builtin(agent_text_command/A)}])))).
spft(prologBuiltin(agent_text_command), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(arity(agent_text_command, 4), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(tPred(agent_text_command), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(pt(arity(agent_text_command, A),  (integer(A), A>1->pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, A)])))), tPred(agent_text_command), pt(tPred(agent_text_command), pt(arity(agent_text_command, A),  (integer(A), A>1->pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, A)])))))).
spft(pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, 4)])), arity(agent_text_command, 4), pt(arity(agent_text_command, A),  (integer(A), A>1->pt(~prologBuiltin(agent_text_command), rhs([~tCol(agent_text_command), support_hilog(agent_text_command, A)]))))).
spft(prologDynamic(agent_text_command), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 229), ax).
spft(tCol(tNotForUnboundPredicates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 234), ax).
spft(tNotForUnboundPredicates(member), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 236), ax).
spft((never_assert_u(vtVerb(A), vtVerbError):-fail, A=='[|]'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 238), ax).
spft((never_assert_u(prologSingleValued(A), var_prologSingleValued(A)):-is_ftVar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 239), ax).
spft((never_assert_u(A, test_sanity(A)):-never_assert_u(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 241), ax).
spft((never_retract_u(A, test_sanity(A)):-never_retract_u(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 243), ax).
spft((never_retract_u(A, is_ftVar(A)):-is_ftVar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 245), ax).
spft((never_retract_u(~A, is_ftVar(A)):-is_ftVar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 246), ax).
spft(never_retract_u(human(trudy), sanity_test), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 247), ax).
spft(never_retract_u(tHumanHair(skRelationAllExistsFn(mudSubPart, skRelationAllExistsFn(mudSubPart, skRelationAllExistsFn(mudSubPart, iExplorer1, tHumanBody), tHumanHead), tHumanHair)), sanity_test), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 248), ax).
spft(never_retract_u(father(skArg1ofFatherFn(trudy), trudy), sanity_test), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 249), ax).
spft(never_retract_u(argQuotedIsa(thereExistAtLeast, 1, ftPositiveInteger), sanity_test), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 250), ax).
spft(tPred(arity/2, prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 253), ax).
spft(tPred(is_never_type/1, prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 254), ax).
spft(tPred(term_expansion/2, prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 255), ax).
spft(tPred(var/1, prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 256), ax).
spft(tCol(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 258), ax).
spft(completelyAssertedCollection(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 259), ax).
spft((completelyAssertedCollection(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 260), ax).
spft(mpred_mark(pfcLHS, p, completelyAssertedCollection, 1), s(((completelyAssertedCollection(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 260))), ax).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcLHS, p, completelyAssertedCollection, 1), pt(mpred_mark(pfcLHS, p, completelyAssertedCollection, 1),  (ground(pfcLHS:p)->rhs([arity(completelyAssertedCollection, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1), s(((completelyAssertedCollection(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 260))), ax).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1), pt(mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1),  (ground(pfcPosTrigger:p)->rhs([arity(completelyAssertedCollection, 1)])))).
spft(marker_supported(completelyAssertedCollection, 1), mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1), pt(mpred_mark(pfcPosTrigger, p, completelyAssertedCollection, 1),  (ground(p:completelyAssertedCollection:1)->rhs([marker_supported(completelyAssertedCollection, 1)])))).
spft(pt(completelyAssertedCollection(A), rhs([tCol(A)])),  (completelyAssertedCollection(B)==>tCol(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 260)).
spft(tCol(prologNegByFailure), completelyAssertedCollection(prologNegByFailure), pt(completelyAssertedCollection(A), rhs([tCol(A)]))).
spft(tCol(completelyAssertedCollection), completelyAssertedCollection(completelyAssertedCollection), pt(completelyAssertedCollection(A), rhs([tCol(A)]))).
spft(completelyAssertedCollection(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 263), ax).
spft(tCol(tCol), completelyAssertedCollection(tCol), pt(completelyAssertedCollection(tCol), rhs([tCol(tCol)]))).
spft(completelyAssertedCollection(tSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 264), ax).
spft(tCol(tSpec), completelyAssertedCollection(tSpec), pt(completelyAssertedCollection(tSpec), rhs([tCol(tSpec)]))).
spft(tSpec(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 267), ax).
spft(tSpec(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 268), ax).
spft(arity(apathFn, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 272), ax).
spft(arity(isKappaFn, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 273), ax).
spft(arity(isInstFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 274), ax).
spft(arity(ftListFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 275), ax).
spft(arity(xyzFn, 4), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 276), ax).
spft(arity(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 277), ax).
spft(arity(is_never_type, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 278), ax).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 279), ax).
spft((arity(A, 1):-ttPredType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 280), ax).
spft(arity(meta_argtypes, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 281), ax).
spft(arity(arity, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 282), ax).
spft(arity(is_never_type, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 283), ax).
spft(arity(prologSingleValued, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 284), ax).
spft(arity(<=>, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 285), ax).
spft((arity(A, B):-atom(A), integer(B), current_predicate(A/B), B>1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 286), ax).
spft((arity(A, 1):-atom(A), current_predicate(A/1), \+ (dif(B, 1), arity(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 287), ax).
spft((pfcControlled(A), arity(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 290), ax).
spft(mpred_mark(pfcLHS, p, pfcControlled, 1), s(((pfcControlled(A), arity(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 290))), ax).
spft(arity(pfcControlled, 1), mpred_mark(pfcLHS, p, pfcControlled, 1), pt(mpred_mark(pfcLHS, p, pfcControlled, 1),  (ground(pfcLHS:p)->rhs([arity(pfcControlled, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, pfcControlled, 1), s(((pfcControlled(A), arity(A, B)==>hybrid_support(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 290))), ax).
spft(arity(pfcControlled, 1), mpred_mark(pfcPosTrigger, p, pfcControlled, 1), pt(mpred_mark(pfcPosTrigger, p, pfcControlled, 1),  (ground(pfcPosTrigger:p)->rhs([arity(pfcControlled, 1)])))).
spft(marker_supported(pfcControlled, 1), mpred_mark(pfcPosTrigger, p, pfcControlled, 1), pt(mpred_mark(pfcPosTrigger, p, pfcControlled, 1),  (ground(p:pfcControlled:1)->rhs([marker_supported(pfcControlled, 1)])))).
spft(pt(pfcControlled(A), pt(arity(A, B), rhs([hybrid_support(A, B)]))),  (pfcControlled(C), arity(C, D)==>hybrid_support(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 290)).
spft((ttPredType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 292), ax).
spft(mpred_mark(pfcLHS, p, ttPredType, 1), s(((ttPredType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 292))), ax).
spft(arity(ttPredType, 1), mpred_mark(pfcLHS, p, ttPredType, 1), pt(mpred_mark(pfcLHS, p, ttPredType, 1),  (ground(pfcLHS:p)->rhs([arity(ttPredType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttPredType, 1), s(((ttPredType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 292))), ax).
spft(arity(ttPredType, 1), mpred_mark(pfcPosTrigger, p, ttPredType, 1), pt(mpred_mark(pfcPosTrigger, p, ttPredType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttPredType, 1)])))).
spft(marker_supported(ttPredType, 1), mpred_mark(pfcPosTrigger, p, ttPredType, 1), pt(mpred_mark(pfcPosTrigger, p, ttPredType, 1),  (ground(p:ttPredType:1)->rhs([marker_supported(ttPredType, 1)])))).
spft(hybrid_support(ttPredType, 1), marker_supported(ttPredType, 1), pt(marker_supported(ttPredType, 1), rhs([hybrid_support(ttPredType, 1)]))).
spft(prologHybrid(ttPredType), hybrid_support(ttPredType, 1), pt(hybrid_support(ttPredType, 1),  (ttPredType\='$VAR', atom(ttPredType), integer(1), \+prologDynamic(ttPredType), \+static_predicate(ttPredType/1)->rhs([{functor(ttPredType(A), ttPredType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttPredType, baseKB:ttPredType(A)), \+predicate_property(baseKB:ttPredType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttPredType(A), exported);true), kb_dynamic(baseKB:ttPredType/1), show_failure(hybrid_support, \+static_predicate(ttPredType/1))}, prologHybrid(ttPredType), arity(ttPredType, 1)])))).
spft(pt(arity(ttPredType, A), rhs([hybrid_support(ttPredType, A)])), prologHybrid(ttPredType), pt(prologHybrid(ttPredType), pt(arity(ttPredType, A), rhs([hybrid_support(ttPredType, A)])))).
spft(hybrid_support(ttPredType, 1), arity(ttPredType, 1), pt(arity(ttPredType, A), rhs([hybrid_support(ttPredType, A)]))).
spft(hybrid_support(ttPredType, 1), arity(ttPredType, 1), pt(arity(ttPredType, A), rhs([hybrid_support(ttPredType, A)]))).
spft(arity(ttPredType, 1), hybrid_support(ttPredType, 1), pt(hybrid_support(ttPredType, 1),  (ttPredType\='$VAR', atom(ttPredType), integer(1), \+prologDynamic(ttPredType), \+static_predicate(ttPredType/1)->rhs([{functor(ttPredType(A), ttPredType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttPredType, baseKB:ttPredType(A)), \+predicate_property(baseKB:ttPredType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttPredType(A), exported);true), kb_dynamic(baseKB:ttPredType/1), show_failure(hybrid_support, \+static_predicate(ttPredType/1))}, prologHybrid(ttPredType), arity(ttPredType, 1)])))).
spft(prologHybrid(ttPredType), hybrid_support(ttPredType, 1), pt(hybrid_support(ttPredType, 1), rhs([prologHybrid(ttPredType), arity(ttPredType, 1)]))).
spft(arity(ttPredType, 1), hybrid_support(ttPredType, 1), pt(hybrid_support(ttPredType, 1), rhs([prologHybrid(ttPredType), arity(ttPredType, 1)]))).
spft(pt(ttPredType(A), rhs([tCol(A)])),  (ttPredType(B)==>tCol(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 292)).
spft((ttPredType(A)/atom(A)==>arity(A, 1), pfcControlled(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 293), ax).
spft(pt(ttPredType(A),  (atom(A)->rhs([arity(A, 1), pfcControlled(A)]))),  (ttPredType(B)/atom(B)==>arity(B, 1), pfcControlled(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 293)).
spft(tSet(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 295), ax).
spft(completelyAssertedCollection(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 299), ax).
spft(tCol(ttFormatType), completelyAssertedCollection(ttFormatType), pt(completelyAssertedCollection(ttFormatType), rhs([tCol(ttFormatType)]))).
spft(completelyAssertedCollection(tSet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 300), ax).
spft(tCol(tSet), completelyAssertedCollection(tSet), pt(completelyAssertedCollection(tSet), rhs([tCol(tSet)]))).
spft(completelyAssertedCollection(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 303), ax).
spft(tCol(tRelation), completelyAssertedCollection(tRelation), pt(completelyAssertedCollection(tRelation), rhs([tCol(tRelation)]))).
spft(completelyAssertedCollection(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 304), ax).
spft(tCol(tPred), completelyAssertedCollection(tPred), pt(completelyAssertedCollection(tPred), rhs([tCol(tPred)]))).
spft(completelyAssertedCollection(tFunction), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 305), ax).
spft(tCol(tFunction), completelyAssertedCollection(tFunction), pt(completelyAssertedCollection(tFunction), rhs([tCol(tFunction)]))).
spft(completelyAssertedCollection(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 308), ax).
spft(tCol(prologMacroHead), completelyAssertedCollection(prologMacroHead), pt(completelyAssertedCollection(prologMacroHead), rhs([tCol(prologMacroHead)]))).
spft(completelyAssertedCollection(ttPredType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 309), ax).
spft(tCol(ttPredType), completelyAssertedCollection(ttPredType), pt(completelyAssertedCollection(ttPredType), rhs([tCol(ttPredType)]))).
spft(completelyAssertedCollection(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 310), ax).
spft(tCol(functorDeclares), completelyAssertedCollection(functorDeclares), pt(completelyAssertedCollection(functorDeclares), rhs([tCol(functorDeclares)]))).
spft(completelyAssertedCollection(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(completelyAssertedCollection(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologMultiValued), completelyAssertedCollection(prologMultiValued), pt(completelyAssertedCollection(prologMultiValued), rhs([tCol(prologMultiValued)]))).
spft(completelyAssertedCollection(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologOrdered), completelyAssertedCollection(prologOrdered), pt(completelyAssertedCollection(prologOrdered), rhs([tCol(prologOrdered)]))).
spft(completelyAssertedCollection(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(predIsFlag), completelyAssertedCollection(predIsFlag), pt(completelyAssertedCollection(predIsFlag), rhs([tCol(predIsFlag)]))).
spft(completelyAssertedCollection(ttNonGenled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(ttNonGenled), completelyAssertedCollection(ttNonGenled), pt(completelyAssertedCollection(ttNonGenled), rhs([tCol(ttNonGenled)]))).
spft(completelyAssertedCollection(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(completelyAssertedCollection(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(meta_argtypes), completelyAssertedCollection(meta_argtypes), pt(completelyAssertedCollection(meta_argtypes), rhs([tCol(meta_argtypes)]))).
spft(completelyAssertedCollection(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologHybrid), completelyAssertedCollection(prologHybrid), pt(completelyAssertedCollection(prologHybrid), rhs([tCol(prologHybrid)]))).
spft(completelyAssertedCollection(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologPTTP), completelyAssertedCollection(prologPTTP), pt(completelyAssertedCollection(prologPTTP), rhs([tCol(prologPTTP)]))).
spft(completelyAssertedCollection(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologDynamic), completelyAssertedCollection(prologDynamic), pt(completelyAssertedCollection(prologDynamic), rhs([tCol(prologDynamic)]))).
spft(completelyAssertedCollection(prologKIF), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologKIF), completelyAssertedCollection(prologKIF), pt(completelyAssertedCollection(prologKIF), rhs([tCol(prologKIF)]))).
spft(completelyAssertedCollection(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologBuiltin), completelyAssertedCollection(prologBuiltin), pt(completelyAssertedCollection(prologBuiltin), rhs([tCol(prologBuiltin)]))).
spft(completelyAssertedCollection(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(completelyAssertedCollection(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologListValued), completelyAssertedCollection(prologListValued), pt(completelyAssertedCollection(prologListValued), rhs([tCol(prologListValued)]))).
spft(completelyAssertedCollection(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 312), ax).
spft(tCol(prologSingleValued), completelyAssertedCollection(prologSingleValued), pt(completelyAssertedCollection(prologSingleValued), rhs([tCol(prologSingleValued)]))).
spft(completelyAssertedCollection(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 316), ax).
spft(completelyAssertedCollection(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 317), ax).
spft(tCol(pfcControlled), completelyAssertedCollection(pfcControlled), pt(completelyAssertedCollection(pfcControlled), rhs([tCol(pfcControlled)]))).
spft(completelyAssertedCollection(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 318), ax).
spft(tCol(predCanHaveSingletons), completelyAssertedCollection(predCanHaveSingletons), pt(completelyAssertedCollection(predCanHaveSingletons), rhs([tCol(predCanHaveSingletons)]))).
spft(completelyAssertedCollection(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 319), ax).
spft(completelyAssertedCollection(tTemporalThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 320), ax).
spft(tCol(tTemporalThing), completelyAssertedCollection(tTemporalThing), pt(completelyAssertedCollection(tTemporalThing), rhs([tCol(tTemporalThing)]))).
spft(completelyAssertedCollection(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 321), ax).
spft(completelyAssertedCollection(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 322), ax).
spft(completelyAssertedCollection(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 323), ax).
spft(tCol(prologSideEffects), completelyAssertedCollection(prologSideEffects), pt(completelyAssertedCollection(prologSideEffects), rhs([tCol(prologSideEffects)]))).
spft(completelyAssertedCollection(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 324), ax).
spft(completelyAssertedCollection(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 325), ax).
spft(completelyAssertedCollection(tInferInstanceFromArgType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 326), ax).
spft(tCol(tInferInstanceFromArgType), completelyAssertedCollection(tInferInstanceFromArgType), pt(completelyAssertedCollection(tInferInstanceFromArgType), rhs([tCol(tInferInstanceFromArgType)]))).
spft(completelyAssertedCollection(ttNotTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 327), ax).
spft(tCol(ttNotTemporalType), completelyAssertedCollection(ttNotTemporalType), pt(completelyAssertedCollection(ttNotTemporalType), rhs([tCol(ttNotTemporalType)]))).
spft(completelyAssertedCollection(ttSpatialType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 328), ax).
spft(tCol(ttSpatialType), completelyAssertedCollection(ttSpatialType), pt(completelyAssertedCollection(ttSpatialType), rhs([tCol(ttSpatialType)]))).
spft(completelyAssertedCollection(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 329), ax).
spft(tCol(ttTemporalType), completelyAssertedCollection(ttTemporalType), pt(completelyAssertedCollection(ttTemporalType), rhs([tCol(ttTemporalType)]))).
spft(completelyAssertedCollection(ttTypeType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 330), ax).
spft(tCol(ttTypeType), completelyAssertedCollection(ttTypeType), pt(completelyAssertedCollection(ttTypeType), rhs([tCol(ttTypeType)]))).
spft(completelyAssertedCollection(ttUnverifiableType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 331), ax).
spft(tCol(ttUnverifiableType), completelyAssertedCollection(ttUnverifiableType), pt(completelyAssertedCollection(ttUnverifiableType), rhs([tCol(ttUnverifiableType)]))).
spft(ttPredType(pfcDatabaseTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 333), ax).
spft(tCol(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(pfcDatabaseTerm), rhs([tCol(pfcDatabaseTerm)]))).
spft(arity(pfcDatabaseTerm, 1), ttPredType(pfcDatabaseTerm), pt(ttPredType(pfcDatabaseTerm),  (atom(pfcDatabaseTerm)->rhs([arity(pfcDatabaseTerm, 1), pfcControlled(pfcDatabaseTerm)])))).
spft(pfcControlled(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(pfcDatabaseTerm),  (atom(pfcDatabaseTerm)->rhs([arity(pfcDatabaseTerm, 1), pfcControlled(pfcDatabaseTerm)])))).
spft(pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)])), pfcControlled(pfcDatabaseTerm), pt(pfcControlled(pfcDatabaseTerm), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)])))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(prologHybrid(pfcDatabaseTerm), hybrid_support(pfcDatabaseTerm, 1), pt(hybrid_support(pfcDatabaseTerm, 1),  (pfcDatabaseTerm\='$VAR', atom(pfcDatabaseTerm), integer(1), \+prologDynamic(pfcDatabaseTerm), \+static_predicate(pfcDatabaseTerm/1)->rhs([{functor(pfcDatabaseTerm(A), pfcDatabaseTerm, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcDatabaseTerm, baseKB:pfcDatabaseTerm(A)), \+predicate_property(baseKB:pfcDatabaseTerm(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcDatabaseTerm(A), exported);true), kb_dynamic(baseKB:pfcDatabaseTerm/1), show_failure(hybrid_support, \+static_predicate(pfcDatabaseTerm/1))}, prologHybrid(pfcDatabaseTerm), arity(pfcDatabaseTerm, 1)])))).
spft(pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)])), prologHybrid(pfcDatabaseTerm), pt(prologHybrid(pfcDatabaseTerm), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)])))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(arity(pfcDatabaseTerm, 1), hybrid_support(pfcDatabaseTerm, 1), pt(hybrid_support(pfcDatabaseTerm, 1),  (pfcDatabaseTerm\='$VAR', atom(pfcDatabaseTerm), integer(1), \+prologDynamic(pfcDatabaseTerm), \+static_predicate(pfcDatabaseTerm/1)->rhs([{functor(pfcDatabaseTerm(A), pfcDatabaseTerm, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcDatabaseTerm, baseKB:pfcDatabaseTerm(A)), \+predicate_property(baseKB:pfcDatabaseTerm(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcDatabaseTerm(A), exported);true), kb_dynamic(baseKB:pfcDatabaseTerm/1), show_failure(hybrid_support, \+static_predicate(pfcDatabaseTerm/1))}, prologHybrid(pfcDatabaseTerm), arity(pfcDatabaseTerm, 1)])))).
spft(prologHybrid(pfcDatabaseTerm), hybrid_support(pfcDatabaseTerm, 1), pt(hybrid_support(pfcDatabaseTerm, 1), rhs([prologHybrid(pfcDatabaseTerm), arity(pfcDatabaseTerm, 1)]))).
spft(arity(pfcDatabaseTerm, 1), hybrid_support(pfcDatabaseTerm, 1), pt(hybrid_support(pfcDatabaseTerm, 1), rhs([prologHybrid(pfcDatabaseTerm), arity(pfcDatabaseTerm, 1)]))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(hybrid_support(pfcDatabaseTerm, 1), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, A), rhs([hybrid_support(pfcDatabaseTerm, A)]))).
spft(ttPredType(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 334), ax).
spft(tCol(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(pfcControlled), rhs([tCol(pfcControlled)]))).
spft(arity(pfcControlled, 1), ttPredType(pfcControlled), pt(ttPredType(pfcControlled),  (atom(pfcControlled)->rhs([arity(pfcControlled, 1), pfcControlled(pfcControlled)])))).
spft(pfcControlled(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(pfcControlled),  (atom(pfcControlled)->rhs([arity(pfcControlled, 1), pfcControlled(pfcControlled)])))).
spft(pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)])), pfcControlled(pfcControlled), pt(pfcControlled(pfcControlled), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)])))).
spft(hybrid_support(pfcControlled, 1), arity(pfcControlled, 1), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)]))).
spft(hybrid_support(pfcControlled, 1), arity(pfcControlled, 1), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)]))).
spft(hybrid_support(pfcControlled, 1), arity(pfcControlled, 1), pt(arity(pfcControlled, A), rhs([hybrid_support(pfcControlled, A)]))).
spft(ttPredType(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 335), ax).
spft(tCol(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(prologSingleValued), rhs([tCol(prologSingleValued)]))).
spft(arity(prologSingleValued, 1), ttPredType(prologSingleValued), pt(ttPredType(prologSingleValued),  (atom(prologSingleValued)->rhs([arity(prologSingleValued, 1), pfcControlled(prologSingleValued)])))).
spft(pfcControlled(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(prologSingleValued),  (atom(prologSingleValued)->rhs([arity(prologSingleValued, 1), pfcControlled(prologSingleValued)])))).
spft(pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)])), pfcControlled(prologSingleValued), pt(pfcControlled(prologSingleValued), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)])))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(prologHybrid(prologSingleValued), hybrid_support(prologSingleValued, 1), pt(hybrid_support(prologSingleValued, 1),  (prologSingleValued\='$VAR', atom(prologSingleValued), integer(1), \+prologDynamic(prologSingleValued), \+static_predicate(prologSingleValued/1)->rhs([{functor(prologSingleValued(A), prologSingleValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologSingleValued, baseKB:prologSingleValued(A)), \+predicate_property(baseKB:prologSingleValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologSingleValued(A), exported);true), kb_dynamic(baseKB:prologSingleValued/1), show_failure(hybrid_support, \+static_predicate(prologSingleValued/1))}, prologHybrid(prologSingleValued), arity(prologSingleValued, 1)])))).
spft(pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)])), prologHybrid(prologSingleValued), pt(prologHybrid(prologSingleValued), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)])))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(arity(prologSingleValued, 1), hybrid_support(prologSingleValued, 1), pt(hybrid_support(prologSingleValued, 1),  (prologSingleValued\='$VAR', atom(prologSingleValued), integer(1), \+prologDynamic(prologSingleValued), \+static_predicate(prologSingleValued/1)->rhs([{functor(prologSingleValued(A), prologSingleValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologSingleValued, baseKB:prologSingleValued(A)), \+predicate_property(baseKB:prologSingleValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologSingleValued(A), exported);true), kb_dynamic(baseKB:prologSingleValued/1), show_failure(hybrid_support, \+static_predicate(prologSingleValued/1))}, prologHybrid(prologSingleValued), arity(prologSingleValued, 1)])))).
spft(prologHybrid(prologSingleValued), hybrid_support(prologSingleValued, 1), pt(hybrid_support(prologSingleValued, 1), rhs([prologHybrid(prologSingleValued), arity(prologSingleValued, 1)]))).
spft(arity(prologSingleValued, 1), hybrid_support(prologSingleValued, 1), pt(hybrid_support(prologSingleValued, 1), rhs([prologHybrid(prologSingleValued), arity(prologSingleValued, 1)]))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(hybrid_support(prologSingleValued, 1), arity(prologSingleValued, 1), pt(arity(prologSingleValued, A), rhs([hybrid_support(prologSingleValued, A)]))).
spft(ttPredType(pfcWatched), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 338), ax).
spft(tCol(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(pfcWatched), rhs([tCol(pfcWatched)]))).
spft(arity(pfcWatched, 1), ttPredType(pfcWatched), pt(ttPredType(pfcWatched),  (atom(pfcWatched)->rhs([arity(pfcWatched, 1), pfcControlled(pfcWatched)])))).
spft(pfcControlled(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(pfcWatched),  (atom(pfcWatched)->rhs([arity(pfcWatched, 1), pfcControlled(pfcWatched)])))).
spft(pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)])), pfcControlled(pfcWatched), pt(pfcControlled(pfcWatched), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)])))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(prologHybrid(pfcWatched), hybrid_support(pfcWatched, 1), pt(hybrid_support(pfcWatched, 1),  (pfcWatched\='$VAR', atom(pfcWatched), integer(1), \+prologDynamic(pfcWatched), \+static_predicate(pfcWatched/1)->rhs([{functor(pfcWatched(A), pfcWatched, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcWatched, baseKB:pfcWatched(A)), \+predicate_property(baseKB:pfcWatched(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcWatched(A), exported);true), kb_dynamic(baseKB:pfcWatched/1), show_failure(hybrid_support, \+static_predicate(pfcWatched/1))}, prologHybrid(pfcWatched), arity(pfcWatched, 1)])))).
spft(pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)])), prologHybrid(pfcWatched), pt(prologHybrid(pfcWatched), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)])))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(arity(pfcWatched, 1), hybrid_support(pfcWatched, 1), pt(hybrid_support(pfcWatched, 1),  (pfcWatched\='$VAR', atom(pfcWatched), integer(1), \+prologDynamic(pfcWatched), \+static_predicate(pfcWatched/1)->rhs([{functor(pfcWatched(A), pfcWatched, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcWatched, baseKB:pfcWatched(A)), \+predicate_property(baseKB:pfcWatched(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcWatched(A), exported);true), kb_dynamic(baseKB:pfcWatched/1), show_failure(hybrid_support, \+static_predicate(pfcWatched/1))}, prologHybrid(pfcWatched), arity(pfcWatched, 1)])))).
spft(prologHybrid(pfcWatched), hybrid_support(pfcWatched, 1), pt(hybrid_support(pfcWatched, 1), rhs([prologHybrid(pfcWatched), arity(pfcWatched, 1)]))).
spft(arity(pfcWatched, 1), hybrid_support(pfcWatched, 1), pt(hybrid_support(pfcWatched, 1), rhs([prologHybrid(pfcWatched), arity(pfcWatched, 1)]))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(hybrid_support(pfcWatched, 1), arity(pfcWatched, 1), pt(arity(pfcWatched, A), rhs([hybrid_support(pfcWatched, A)]))).
spft(ttPredType(pfcCreates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 339), ax).
spft(tCol(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(pfcCreates), rhs([tCol(pfcCreates)]))).
spft(arity(pfcCreates, 1), ttPredType(pfcCreates), pt(ttPredType(pfcCreates),  (atom(pfcCreates)->rhs([arity(pfcCreates, 1), pfcControlled(pfcCreates)])))).
spft(pfcControlled(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(pfcCreates),  (atom(pfcCreates)->rhs([arity(pfcCreates, 1), pfcControlled(pfcCreates)])))).
spft(pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)])), pfcControlled(pfcCreates), pt(pfcControlled(pfcCreates), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)])))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(prologHybrid(pfcCreates), hybrid_support(pfcCreates, 1), pt(hybrid_support(pfcCreates, 1),  (pfcCreates\='$VAR', atom(pfcCreates), integer(1), \+prologDynamic(pfcCreates), \+static_predicate(pfcCreates/1)->rhs([{functor(pfcCreates(A), pfcCreates, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcCreates, baseKB:pfcCreates(A)), \+predicate_property(baseKB:pfcCreates(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcCreates(A), exported);true), kb_dynamic(baseKB:pfcCreates/1), show_failure(hybrid_support, \+static_predicate(pfcCreates/1))}, prologHybrid(pfcCreates), arity(pfcCreates, 1)])))).
spft(pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)])), prologHybrid(pfcCreates), pt(prologHybrid(pfcCreates), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)])))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(arity(pfcCreates, 1), hybrid_support(pfcCreates, 1), pt(hybrid_support(pfcCreates, 1),  (pfcCreates\='$VAR', atom(pfcCreates), integer(1), \+prologDynamic(pfcCreates), \+static_predicate(pfcCreates/1)->rhs([{functor(pfcCreates(A), pfcCreates, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcCreates, baseKB:pfcCreates(A)), \+predicate_property(baseKB:pfcCreates(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcCreates(A), exported);true), kb_dynamic(baseKB:pfcCreates/1), show_failure(hybrid_support, \+static_predicate(pfcCreates/1))}, prologHybrid(pfcCreates), arity(pfcCreates, 1)])))).
spft(prologHybrid(pfcCreates), hybrid_support(pfcCreates, 1), pt(hybrid_support(pfcCreates, 1), rhs([prologHybrid(pfcCreates), arity(pfcCreates, 1)]))).
spft(arity(pfcCreates, 1), hybrid_support(pfcCreates, 1), pt(hybrid_support(pfcCreates, 1), rhs([prologHybrid(pfcCreates), arity(pfcCreates, 1)]))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(hybrid_support(pfcCreates, 1), arity(pfcCreates, 1), pt(arity(pfcCreates, A), rhs([hybrid_support(pfcCreates, A)]))).
spft(ttPredType(pfcNegTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 340), ax).
spft(tCol(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(pfcNegTrigger), rhs([tCol(pfcNegTrigger)]))).
spft(arity(pfcNegTrigger, 1), ttPredType(pfcNegTrigger), pt(ttPredType(pfcNegTrigger),  (atom(pfcNegTrigger)->rhs([arity(pfcNegTrigger, 1), pfcControlled(pfcNegTrigger)])))).
spft(pfcControlled(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(pfcNegTrigger),  (atom(pfcNegTrigger)->rhs([arity(pfcNegTrigger, 1), pfcControlled(pfcNegTrigger)])))).
spft(pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)])), pfcControlled(pfcNegTrigger), pt(pfcControlled(pfcNegTrigger), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)])))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(prologHybrid(pfcNegTrigger), hybrid_support(pfcNegTrigger, 1), pt(hybrid_support(pfcNegTrigger, 1),  (pfcNegTrigger\='$VAR', atom(pfcNegTrigger), integer(1), \+prologDynamic(pfcNegTrigger), \+static_predicate(pfcNegTrigger/1)->rhs([{functor(pfcNegTrigger(A), pfcNegTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcNegTrigger, baseKB:pfcNegTrigger(A)), \+predicate_property(baseKB:pfcNegTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcNegTrigger(A), exported);true), kb_dynamic(baseKB:pfcNegTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcNegTrigger/1))}, prologHybrid(pfcNegTrigger), arity(pfcNegTrigger, 1)])))).
spft(pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)])), prologHybrid(pfcNegTrigger), pt(prologHybrid(pfcNegTrigger), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)])))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(arity(pfcNegTrigger, 1), hybrid_support(pfcNegTrigger, 1), pt(hybrid_support(pfcNegTrigger, 1),  (pfcNegTrigger\='$VAR', atom(pfcNegTrigger), integer(1), \+prologDynamic(pfcNegTrigger), \+static_predicate(pfcNegTrigger/1)->rhs([{functor(pfcNegTrigger(A), pfcNegTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcNegTrigger, baseKB:pfcNegTrigger(A)), \+predicate_property(baseKB:pfcNegTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcNegTrigger(A), exported);true), kb_dynamic(baseKB:pfcNegTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcNegTrigger/1))}, prologHybrid(pfcNegTrigger), arity(pfcNegTrigger, 1)])))).
spft(prologHybrid(pfcNegTrigger), hybrid_support(pfcNegTrigger, 1), pt(hybrid_support(pfcNegTrigger, 1), rhs([prologHybrid(pfcNegTrigger), arity(pfcNegTrigger, 1)]))).
spft(arity(pfcNegTrigger, 1), hybrid_support(pfcNegTrigger, 1), pt(hybrid_support(pfcNegTrigger, 1), rhs([prologHybrid(pfcNegTrigger), arity(pfcNegTrigger, 1)]))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(hybrid_support(pfcNegTrigger, 1), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, A), rhs([hybrid_support(pfcNegTrigger, A)]))).
spft(ttPredType(pfcPosTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 341), ax).
spft(tCol(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(pfcPosTrigger), rhs([tCol(pfcPosTrigger)]))).
spft(arity(pfcPosTrigger, 1), ttPredType(pfcPosTrigger), pt(ttPredType(pfcPosTrigger),  (atom(pfcPosTrigger)->rhs([arity(pfcPosTrigger, 1), pfcControlled(pfcPosTrigger)])))).
spft(pfcControlled(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(pfcPosTrigger),  (atom(pfcPosTrigger)->rhs([arity(pfcPosTrigger, 1), pfcControlled(pfcPosTrigger)])))).
spft(pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)])), pfcControlled(pfcPosTrigger), pt(pfcControlled(pfcPosTrigger), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)])))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(prologHybrid(pfcPosTrigger), hybrid_support(pfcPosTrigger, 1), pt(hybrid_support(pfcPosTrigger, 1),  (pfcPosTrigger\='$VAR', atom(pfcPosTrigger), integer(1), \+prologDynamic(pfcPosTrigger), \+static_predicate(pfcPosTrigger/1)->rhs([{functor(pfcPosTrigger(A), pfcPosTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcPosTrigger, baseKB:pfcPosTrigger(A)), \+predicate_property(baseKB:pfcPosTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcPosTrigger(A), exported);true), kb_dynamic(baseKB:pfcPosTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcPosTrigger/1))}, prologHybrid(pfcPosTrigger), arity(pfcPosTrigger, 1)])))).
spft(pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)])), prologHybrid(pfcPosTrigger), pt(prologHybrid(pfcPosTrigger), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)])))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(arity(pfcPosTrigger, 1), hybrid_support(pfcPosTrigger, 1), pt(hybrid_support(pfcPosTrigger, 1),  (pfcPosTrigger\='$VAR', atom(pfcPosTrigger), integer(1), \+prologDynamic(pfcPosTrigger), \+static_predicate(pfcPosTrigger/1)->rhs([{functor(pfcPosTrigger(A), pfcPosTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcPosTrigger, baseKB:pfcPosTrigger(A)), \+predicate_property(baseKB:pfcPosTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcPosTrigger(A), exported);true), kb_dynamic(baseKB:pfcPosTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcPosTrigger/1))}, prologHybrid(pfcPosTrigger), arity(pfcPosTrigger, 1)])))).
spft(prologHybrid(pfcPosTrigger), hybrid_support(pfcPosTrigger, 1), pt(hybrid_support(pfcPosTrigger, 1), rhs([prologHybrid(pfcPosTrigger), arity(pfcPosTrigger, 1)]))).
spft(arity(pfcPosTrigger, 1), hybrid_support(pfcPosTrigger, 1), pt(hybrid_support(pfcPosTrigger, 1), rhs([prologHybrid(pfcPosTrigger), arity(pfcPosTrigger, 1)]))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(hybrid_support(pfcPosTrigger, 1), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, A), rhs([hybrid_support(pfcPosTrigger, A)]))).
spft(ttPredType(pfcBcTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 342), ax).
spft(tCol(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(pfcBcTrigger), rhs([tCol(pfcBcTrigger)]))).
spft(arity(pfcBcTrigger, 1), ttPredType(pfcBcTrigger), pt(ttPredType(pfcBcTrigger),  (atom(pfcBcTrigger)->rhs([arity(pfcBcTrigger, 1), pfcControlled(pfcBcTrigger)])))).
spft(pfcControlled(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(pfcBcTrigger),  (atom(pfcBcTrigger)->rhs([arity(pfcBcTrigger, 1), pfcControlled(pfcBcTrigger)])))).
spft(pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)])), pfcControlled(pfcBcTrigger), pt(pfcControlled(pfcBcTrigger), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)])))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(prologHybrid(pfcBcTrigger), hybrid_support(pfcBcTrigger, 1), pt(hybrid_support(pfcBcTrigger, 1),  (pfcBcTrigger\='$VAR', atom(pfcBcTrigger), integer(1), \+prologDynamic(pfcBcTrigger), \+static_predicate(pfcBcTrigger/1)->rhs([{functor(pfcBcTrigger(A), pfcBcTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcBcTrigger, baseKB:pfcBcTrigger(A)), \+predicate_property(baseKB:pfcBcTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcBcTrigger(A), exported);true), kb_dynamic(baseKB:pfcBcTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcBcTrigger/1))}, prologHybrid(pfcBcTrigger), arity(pfcBcTrigger, 1)])))).
spft(pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)])), prologHybrid(pfcBcTrigger), pt(prologHybrid(pfcBcTrigger), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)])))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(arity(pfcBcTrigger, 1), hybrid_support(pfcBcTrigger, 1), pt(hybrid_support(pfcBcTrigger, 1),  (pfcBcTrigger\='$VAR', atom(pfcBcTrigger), integer(1), \+prologDynamic(pfcBcTrigger), \+static_predicate(pfcBcTrigger/1)->rhs([{functor(pfcBcTrigger(A), pfcBcTrigger, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcBcTrigger, baseKB:pfcBcTrigger(A)), \+predicate_property(baseKB:pfcBcTrigger(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcBcTrigger(A), exported);true), kb_dynamic(baseKB:pfcBcTrigger/1), show_failure(hybrid_support, \+static_predicate(pfcBcTrigger/1))}, prologHybrid(pfcBcTrigger), arity(pfcBcTrigger, 1)])))).
spft(prologHybrid(pfcBcTrigger), hybrid_support(pfcBcTrigger, 1), pt(hybrid_support(pfcBcTrigger, 1), rhs([prologHybrid(pfcBcTrigger), arity(pfcBcTrigger, 1)]))).
spft(arity(pfcBcTrigger, 1), hybrid_support(pfcBcTrigger, 1), pt(hybrid_support(pfcBcTrigger, 1), rhs([prologHybrid(pfcBcTrigger), arity(pfcBcTrigger, 1)]))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(hybrid_support(pfcBcTrigger, 1), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, A), rhs([hybrid_support(pfcBcTrigger, A)]))).
spft(ttPredType(pfcRHS), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 343), ax).
spft(tCol(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(pfcRHS), rhs([tCol(pfcRHS)]))).
spft(arity(pfcRHS, 1), ttPredType(pfcRHS), pt(ttPredType(pfcRHS),  (atom(pfcRHS)->rhs([arity(pfcRHS, 1), pfcControlled(pfcRHS)])))).
spft(pfcControlled(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(pfcRHS),  (atom(pfcRHS)->rhs([arity(pfcRHS, 1), pfcControlled(pfcRHS)])))).
spft(pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)])), pfcControlled(pfcRHS), pt(pfcControlled(pfcRHS), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)])))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(prologHybrid(pfcRHS), hybrid_support(pfcRHS, 1), pt(hybrid_support(pfcRHS, 1),  (pfcRHS\='$VAR', atom(pfcRHS), integer(1), \+prologDynamic(pfcRHS), \+static_predicate(pfcRHS/1)->rhs([{functor(pfcRHS(A), pfcRHS, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcRHS, baseKB:pfcRHS(A)), \+predicate_property(baseKB:pfcRHS(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcRHS(A), exported);true), kb_dynamic(baseKB:pfcRHS/1), show_failure(hybrid_support, \+static_predicate(pfcRHS/1))}, prologHybrid(pfcRHS), arity(pfcRHS, 1)])))).
spft(pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)])), prologHybrid(pfcRHS), pt(prologHybrid(pfcRHS), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)])))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(arity(pfcRHS, 1), hybrid_support(pfcRHS, 1), pt(hybrid_support(pfcRHS, 1),  (pfcRHS\='$VAR', atom(pfcRHS), integer(1), \+prologDynamic(pfcRHS), \+static_predicate(pfcRHS/1)->rhs([{functor(pfcRHS(A), pfcRHS, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcRHS, baseKB:pfcRHS(A)), \+predicate_property(baseKB:pfcRHS(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcRHS(A), exported);true), kb_dynamic(baseKB:pfcRHS/1), show_failure(hybrid_support, \+static_predicate(pfcRHS/1))}, prologHybrid(pfcRHS), arity(pfcRHS, 1)])))).
spft(prologHybrid(pfcRHS), hybrid_support(pfcRHS, 1), pt(hybrid_support(pfcRHS, 1), rhs([prologHybrid(pfcRHS), arity(pfcRHS, 1)]))).
spft(arity(pfcRHS, 1), hybrid_support(pfcRHS, 1), pt(hybrid_support(pfcRHS, 1), rhs([prologHybrid(pfcRHS), arity(pfcRHS, 1)]))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(hybrid_support(pfcRHS, 1), arity(pfcRHS, 1), pt(arity(pfcRHS, A), rhs([hybrid_support(pfcRHS, A)]))).
spft(ttPredType(pfcMustFC), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 345), ax).
spft(tCol(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(pfcMustFC), rhs([tCol(pfcMustFC)]))).
spft(arity(pfcMustFC, 1), ttPredType(pfcMustFC), pt(ttPredType(pfcMustFC),  (atom(pfcMustFC)->rhs([arity(pfcMustFC, 1), pfcControlled(pfcMustFC)])))).
spft(pfcControlled(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(pfcMustFC),  (atom(pfcMustFC)->rhs([arity(pfcMustFC, 1), pfcControlled(pfcMustFC)])))).
spft(pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)])), pfcControlled(pfcMustFC), pt(pfcControlled(pfcMustFC), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)])))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft(prologHybrid(pfcMustFC), hybrid_support(pfcMustFC, 1), pt(hybrid_support(pfcMustFC, 1),  (pfcMustFC\='$VAR', atom(pfcMustFC), integer(1), \+prologDynamic(pfcMustFC), \+static_predicate(pfcMustFC/1)->rhs([{functor(pfcMustFC(A), pfcMustFC, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcMustFC, baseKB:pfcMustFC(A)), \+predicate_property(baseKB:pfcMustFC(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcMustFC(A), exported);true), kb_dynamic(baseKB:pfcMustFC/1), show_failure(hybrid_support, \+static_predicate(pfcMustFC/1))}, prologHybrid(pfcMustFC), arity(pfcMustFC, 1)])))).
spft(pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)])), prologHybrid(pfcMustFC), pt(prologHybrid(pfcMustFC), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)])))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft(arity(pfcMustFC, 1), hybrid_support(pfcMustFC, 1), pt(hybrid_support(pfcMustFC, 1),  (pfcMustFC\='$VAR', atom(pfcMustFC), integer(1), \+prologDynamic(pfcMustFC), \+static_predicate(pfcMustFC/1)->rhs([{functor(pfcMustFC(A), pfcMustFC, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfcMustFC, baseKB:pfcMustFC(A)), \+predicate_property(baseKB:pfcMustFC(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfcMustFC(A), exported);true), kb_dynamic(baseKB:pfcMustFC/1), show_failure(hybrid_support, \+static_predicate(pfcMustFC/1))}, prologHybrid(pfcMustFC), arity(pfcMustFC, 1)])))).
spft(prologHybrid(pfcMustFC), hybrid_support(pfcMustFC, 1), pt(hybrid_support(pfcMustFC, 1), rhs([prologHybrid(pfcMustFC), arity(pfcMustFC, 1)]))).
spft(arity(pfcMustFC, 1), hybrid_support(pfcMustFC, 1), pt(hybrid_support(pfcMustFC, 1), rhs([prologHybrid(pfcMustFC), arity(pfcMustFC, 1)]))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft(hybrid_support(pfcMustFC, 1), arity(pfcMustFC, 1), pt(arity(pfcMustFC, A), rhs([hybrid_support(pfcMustFC, A)]))).
spft((ttPredType(A)/atom(A)==>support_hilog(A, 1)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 347), ax).
spft(pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)]))),  (ttPredType(B)/atom(B)==>support_hilog(B, 1)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 347)).
spft(support_hilog(pfcDatabaseTerm, 1), ttPredType(pfcDatabaseTerm), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcDatabaseTerm, 1), support_hilog(pfcDatabaseTerm, 1), pt(support_hilog(pfcDatabaseTerm, 1),  (pfcDatabaseTerm\='$VAR', atom(pfcDatabaseTerm), integer(1), \+static_predicate(pfcDatabaseTerm/1), \+prologDynamic(pfcDatabaseTerm)->rhs([hybrid_support(pfcDatabaseTerm, 1), {A=arity(pfcDatabaseTerm, 1)}, A])))).
spft(arity(pfcDatabaseTerm, 1), support_hilog(pfcDatabaseTerm, 1), pt(support_hilog(pfcDatabaseTerm, 1),  (pfcDatabaseTerm\='$VAR', atom(pfcDatabaseTerm), integer(1), \+static_predicate(pfcDatabaseTerm/1), \+prologDynamic(pfcDatabaseTerm)->rhs([hybrid_support(pfcDatabaseTerm, 1), {arity(pfcDatabaseTerm, 1)=arity(pfcDatabaseTerm, 1)}, arity(pfcDatabaseTerm, 1)])))).
spft(support_hilog(pfcControlled, 1), ttPredType(pfcControlled), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcControlled, 1), support_hilog(pfcControlled, 1), pt(support_hilog(pfcControlled, 1),  (pfcControlled\='$VAR', atom(pfcControlled), integer(1), \+static_predicate(pfcControlled/1), \+prologDynamic(pfcControlled)->rhs([hybrid_support(pfcControlled, 1), {A=arity(pfcControlled, 1)}, A])))).
spft(arity(pfcControlled, 1), support_hilog(pfcControlled, 1), pt(support_hilog(pfcControlled, 1),  (pfcControlled\='$VAR', atom(pfcControlled), integer(1), \+static_predicate(pfcControlled/1), \+prologDynamic(pfcControlled)->rhs([hybrid_support(pfcControlled, 1), {arity(pfcControlled, 1)=arity(pfcControlled, 1)}, arity(pfcControlled, 1)])))).
spft(support_hilog(prologSingleValued, 1), ttPredType(prologSingleValued), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(prologSingleValued, 1), support_hilog(prologSingleValued, 1), pt(support_hilog(prologSingleValued, 1),  (prologSingleValued\='$VAR', atom(prologSingleValued), integer(1), \+static_predicate(prologSingleValued/1), \+prologDynamic(prologSingleValued)->rhs([hybrid_support(prologSingleValued, 1), {A=arity(prologSingleValued, 1)}, A])))).
spft(arity(prologSingleValued, 1), support_hilog(prologSingleValued, 1), pt(support_hilog(prologSingleValued, 1),  (prologSingleValued\='$VAR', atom(prologSingleValued), integer(1), \+static_predicate(prologSingleValued/1), \+prologDynamic(prologSingleValued)->rhs([hybrid_support(prologSingleValued, 1), {arity(prologSingleValued, 1)=arity(prologSingleValued, 1)}, arity(prologSingleValued, 1)])))).
spft(support_hilog(pfcWatched, 1), ttPredType(pfcWatched), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcWatched, 1), support_hilog(pfcWatched, 1), pt(support_hilog(pfcWatched, 1),  (pfcWatched\='$VAR', atom(pfcWatched), integer(1), \+static_predicate(pfcWatched/1), \+prologDynamic(pfcWatched)->rhs([hybrid_support(pfcWatched, 1), {A=arity(pfcWatched, 1)}, A])))).
spft(arity(pfcWatched, 1), support_hilog(pfcWatched, 1), pt(support_hilog(pfcWatched, 1),  (pfcWatched\='$VAR', atom(pfcWatched), integer(1), \+static_predicate(pfcWatched/1), \+prologDynamic(pfcWatched)->rhs([hybrid_support(pfcWatched, 1), {arity(pfcWatched, 1)=arity(pfcWatched, 1)}, arity(pfcWatched, 1)])))).
spft(support_hilog(pfcCreates, 1), ttPredType(pfcCreates), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcCreates, 1), support_hilog(pfcCreates, 1), pt(support_hilog(pfcCreates, 1),  (pfcCreates\='$VAR', atom(pfcCreates), integer(1), \+static_predicate(pfcCreates/1), \+prologDynamic(pfcCreates)->rhs([hybrid_support(pfcCreates, 1), {A=arity(pfcCreates, 1)}, A])))).
spft(arity(pfcCreates, 1), support_hilog(pfcCreates, 1), pt(support_hilog(pfcCreates, 1),  (pfcCreates\='$VAR', atom(pfcCreates), integer(1), \+static_predicate(pfcCreates/1), \+prologDynamic(pfcCreates)->rhs([hybrid_support(pfcCreates, 1), {arity(pfcCreates, 1)=arity(pfcCreates, 1)}, arity(pfcCreates, 1)])))).
spft(support_hilog(pfcNegTrigger, 1), ttPredType(pfcNegTrigger), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcNegTrigger, 1), support_hilog(pfcNegTrigger, 1), pt(support_hilog(pfcNegTrigger, 1),  (pfcNegTrigger\='$VAR', atom(pfcNegTrigger), integer(1), \+static_predicate(pfcNegTrigger/1), \+prologDynamic(pfcNegTrigger)->rhs([hybrid_support(pfcNegTrigger, 1), {A=arity(pfcNegTrigger, 1)}, A])))).
spft(arity(pfcNegTrigger, 1), support_hilog(pfcNegTrigger, 1), pt(support_hilog(pfcNegTrigger, 1),  (pfcNegTrigger\='$VAR', atom(pfcNegTrigger), integer(1), \+static_predicate(pfcNegTrigger/1), \+prologDynamic(pfcNegTrigger)->rhs([hybrid_support(pfcNegTrigger, 1), {arity(pfcNegTrigger, 1)=arity(pfcNegTrigger, 1)}, arity(pfcNegTrigger, 1)])))).
spft(support_hilog(pfcPosTrigger, 1), ttPredType(pfcPosTrigger), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcPosTrigger, 1), support_hilog(pfcPosTrigger, 1), pt(support_hilog(pfcPosTrigger, 1),  (pfcPosTrigger\='$VAR', atom(pfcPosTrigger), integer(1), \+static_predicate(pfcPosTrigger/1), \+prologDynamic(pfcPosTrigger)->rhs([hybrid_support(pfcPosTrigger, 1), {A=arity(pfcPosTrigger, 1)}, A])))).
spft(arity(pfcPosTrigger, 1), support_hilog(pfcPosTrigger, 1), pt(support_hilog(pfcPosTrigger, 1),  (pfcPosTrigger\='$VAR', atom(pfcPosTrigger), integer(1), \+static_predicate(pfcPosTrigger/1), \+prologDynamic(pfcPosTrigger)->rhs([hybrid_support(pfcPosTrigger, 1), {arity(pfcPosTrigger, 1)=arity(pfcPosTrigger, 1)}, arity(pfcPosTrigger, 1)])))).
spft(support_hilog(pfcBcTrigger, 1), ttPredType(pfcBcTrigger), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcBcTrigger, 1), support_hilog(pfcBcTrigger, 1), pt(support_hilog(pfcBcTrigger, 1),  (pfcBcTrigger\='$VAR', atom(pfcBcTrigger), integer(1), \+static_predicate(pfcBcTrigger/1), \+prologDynamic(pfcBcTrigger)->rhs([hybrid_support(pfcBcTrigger, 1), {A=arity(pfcBcTrigger, 1)}, A])))).
spft(arity(pfcBcTrigger, 1), support_hilog(pfcBcTrigger, 1), pt(support_hilog(pfcBcTrigger, 1),  (pfcBcTrigger\='$VAR', atom(pfcBcTrigger), integer(1), \+static_predicate(pfcBcTrigger/1), \+prologDynamic(pfcBcTrigger)->rhs([hybrid_support(pfcBcTrigger, 1), {arity(pfcBcTrigger, 1)=arity(pfcBcTrigger, 1)}, arity(pfcBcTrigger, 1)])))).
spft(support_hilog(pfcRHS, 1), ttPredType(pfcRHS), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcRHS, 1), support_hilog(pfcRHS, 1), pt(support_hilog(pfcRHS, 1),  (pfcRHS\='$VAR', atom(pfcRHS), integer(1), \+static_predicate(pfcRHS/1), \+prologDynamic(pfcRHS)->rhs([hybrid_support(pfcRHS, 1), {A=arity(pfcRHS, 1)}, A])))).
spft(arity(pfcRHS, 1), support_hilog(pfcRHS, 1), pt(support_hilog(pfcRHS, 1),  (pfcRHS\='$VAR', atom(pfcRHS), integer(1), \+static_predicate(pfcRHS/1), \+prologDynamic(pfcRHS)->rhs([hybrid_support(pfcRHS, 1), {arity(pfcRHS, 1)=arity(pfcRHS, 1)}, arity(pfcRHS, 1)])))).
spft(support_hilog(pfcMustFC, 1), ttPredType(pfcMustFC), pt(ttPredType(A),  (atom(A)->rhs([support_hilog(A, 1)])))).
spft(hybrid_support(pfcMustFC, 1), support_hilog(pfcMustFC, 1), pt(support_hilog(pfcMustFC, 1),  (pfcMustFC\='$VAR', atom(pfcMustFC), integer(1), \+static_predicate(pfcMustFC/1), \+prologDynamic(pfcMustFC)->rhs([hybrid_support(pfcMustFC, 1), {A=arity(pfcMustFC, 1)}, A])))).
spft(arity(pfcMustFC, 1), support_hilog(pfcMustFC, 1), pt(support_hilog(pfcMustFC, 1),  (pfcMustFC\='$VAR', atom(pfcMustFC), integer(1), \+static_predicate(pfcMustFC/1), \+prologDynamic(pfcMustFC)->rhs([hybrid_support(pfcMustFC, 1), {arity(pfcMustFC, 1)=arity(pfcMustFC, 1)}, arity(pfcMustFC, 1)])))).
spft((ttPredType(A)==>tSet(A), completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 349), ax).
spft(mpred_mark(pfcCreates, p, tSet, 1), s(((ttPredType(A)==>tSet(A), completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 349))), ax).
spft(arity(tSet, 1), mpred_mark(pfcCreates, p, tSet, 1), pt(mpred_mark(pfcCreates, p, tSet, 1),  (ground(pfcCreates:p)->rhs([arity(tSet, 1)])))).
spft(marker_supported(tSet, 1), mpred_mark(pfcCreates, p, tSet, 1), pt(mpred_mark(pfcCreates, p, tSet, 1),  (ground(p:tSet:1)->rhs([marker_supported(tSet, 1)])))).
spft(hybrid_support(tSet, 1), marker_supported(tSet, 1), pt(marker_supported(tSet, 1), rhs([hybrid_support(tSet, 1)]))).
spft(prologHybrid(tSet), hybrid_support(tSet, 1), pt(hybrid_support(tSet, 1),  (tSet\='$VAR', atom(tSet), integer(1), \+prologDynamic(tSet), \+static_predicate(tSet/1)->rhs([{functor(tSet(A), tSet, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tSet, baseKB:tSet(A)), \+predicate_property(baseKB:tSet(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tSet(A), exported);true), kb_dynamic(baseKB:tSet/1), show_failure(hybrid_support, \+static_predicate(tSet/1))}, prologHybrid(tSet), arity(tSet, 1)])))).
spft(pt(arity(tSet, A), rhs([hybrid_support(tSet, A)])), prologHybrid(tSet), pt(prologHybrid(tSet), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)])))).
spft(hybrid_support(tSet, 1), arity(tSet, 1), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)]))).
spft(hybrid_support(tSet, 1), arity(tSet, 1), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)]))).
spft(arity(tSet, 1), hybrid_support(tSet, 1), pt(hybrid_support(tSet, 1),  (tSet\='$VAR', atom(tSet), integer(1), \+prologDynamic(tSet), \+static_predicate(tSet/1)->rhs([{functor(tSet(A), tSet, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tSet, baseKB:tSet(A)), \+predicate_property(baseKB:tSet(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tSet(A), exported);true), kb_dynamic(baseKB:tSet/1), show_failure(hybrid_support, \+static_predicate(tSet/1))}, prologHybrid(tSet), arity(tSet, 1)])))).
spft(prologHybrid(tSet), hybrid_support(tSet, 1), pt(hybrid_support(tSet, 1), rhs([prologHybrid(tSet), arity(tSet, 1)]))).
spft(arity(tSet, 1), hybrid_support(tSet, 1), pt(hybrid_support(tSet, 1), rhs([prologHybrid(tSet), arity(tSet, 1)]))).
spft(mpred_mark(pfcCreates, p, completelyAssertedCollection, 1), s(((ttPredType(A)==>tSet(A), completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 349))), ax).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcCreates, p, completelyAssertedCollection, 1), pt(mpred_mark(pfcCreates, p, completelyAssertedCollection, 1),  (ground(pfcCreates:p)->rhs([arity(completelyAssertedCollection, 1)])))).
spft(marker_supported(completelyAssertedCollection, 1), mpred_mark(pfcCreates, p, completelyAssertedCollection, 1), pt(mpred_mark(pfcCreates, p, completelyAssertedCollection, 1),  (ground(p:completelyAssertedCollection:1)->rhs([marker_supported(completelyAssertedCollection, 1)])))).
spft(pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)])),  (ttPredType(B)==>tSet(B), completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 349)).
spft(tSet(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcDatabaseTerm), completelyAssertedCollection(pfcDatabaseTerm), pt(completelyAssertedCollection(pfcDatabaseTerm), rhs([tCol(pfcDatabaseTerm)]))).
spft(tSet(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tSet(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tSet(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcWatched), completelyAssertedCollection(pfcWatched), pt(completelyAssertedCollection(pfcWatched), rhs([tCol(pfcWatched)]))).
spft(tSet(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcCreates), completelyAssertedCollection(pfcCreates), pt(completelyAssertedCollection(pfcCreates), rhs([tCol(pfcCreates)]))).
spft(tSet(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcNegTrigger), completelyAssertedCollection(pfcNegTrigger), pt(completelyAssertedCollection(pfcNegTrigger), rhs([tCol(pfcNegTrigger)]))).
spft(tSet(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcPosTrigger), completelyAssertedCollection(pfcPosTrigger), pt(completelyAssertedCollection(pfcPosTrigger), rhs([tCol(pfcPosTrigger)]))).
spft(tSet(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcBcTrigger), completelyAssertedCollection(pfcBcTrigger), pt(completelyAssertedCollection(pfcBcTrigger), rhs([tCol(pfcBcTrigger)]))).
spft(tSet(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcRHS), completelyAssertedCollection(pfcRHS), pt(completelyAssertedCollection(pfcRHS), rhs([tCol(pfcRHS)]))).
spft(tSet(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(A), rhs([tSet(A), completelyAssertedCollection(A)]))).
spft(tCol(pfcMustFC), completelyAssertedCollection(pfcMustFC), pt(completelyAssertedCollection(pfcMustFC), rhs([tCol(pfcMustFC)]))).
spft((ttTypeType(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 350), ax).
spft(mpred_mark(pfcLHS, p, ttTypeType, 1), s(((ttTypeType(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 350))), ax).
spft(arity(ttTypeType, 1), mpred_mark(pfcLHS, p, ttTypeType, 1), pt(mpred_mark(pfcLHS, p, ttTypeType, 1),  (ground(pfcLHS:p)->rhs([arity(ttTypeType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttTypeType, 1), s(((ttTypeType(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 350))), ax).
spft(arity(ttTypeType, 1), mpred_mark(pfcPosTrigger, p, ttTypeType, 1), pt(mpred_mark(pfcPosTrigger, p, ttTypeType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttTypeType, 1)])))).
spft(marker_supported(ttTypeType, 1), mpred_mark(pfcPosTrigger, p, ttTypeType, 1), pt(mpred_mark(pfcPosTrigger, p, ttTypeType, 1),  (ground(p:ttTypeType:1)->rhs([marker_supported(ttTypeType, 1)])))).
spft(hybrid_support(ttTypeType, 1), marker_supported(ttTypeType, 1), pt(marker_supported(ttTypeType, 1), rhs([hybrid_support(ttTypeType, 1)]))).
spft(prologHybrid(ttTypeType), hybrid_support(ttTypeType, 1), pt(hybrid_support(ttTypeType, 1),  (ttTypeType\='$VAR', atom(ttTypeType), integer(1), \+prologDynamic(ttTypeType), \+static_predicate(ttTypeType/1)->rhs([{functor(ttTypeType(A), ttTypeType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttTypeType, baseKB:ttTypeType(A)), \+predicate_property(baseKB:ttTypeType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttTypeType(A), exported);true), kb_dynamic(baseKB:ttTypeType/1), show_failure(hybrid_support, \+static_predicate(ttTypeType/1))}, prologHybrid(ttTypeType), arity(ttTypeType, 1)])))).
spft(pt(arity(ttTypeType, A), rhs([hybrid_support(ttTypeType, A)])), prologHybrid(ttTypeType), pt(prologHybrid(ttTypeType), pt(arity(ttTypeType, A), rhs([hybrid_support(ttTypeType, A)])))).
spft(hybrid_support(ttTypeType, 1), arity(ttTypeType, 1), pt(arity(ttTypeType, A), rhs([hybrid_support(ttTypeType, A)]))).
spft(hybrid_support(ttTypeType, 1), arity(ttTypeType, 1), pt(arity(ttTypeType, A), rhs([hybrid_support(ttTypeType, A)]))).
spft(arity(ttTypeType, 1), hybrid_support(ttTypeType, 1), pt(hybrid_support(ttTypeType, 1),  (ttTypeType\='$VAR', atom(ttTypeType), integer(1), \+prologDynamic(ttTypeType), \+static_predicate(ttTypeType/1)->rhs([{functor(ttTypeType(A), ttTypeType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttTypeType, baseKB:ttTypeType(A)), \+predicate_property(baseKB:ttTypeType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttTypeType(A), exported);true), kb_dynamic(baseKB:ttTypeType/1), show_failure(hybrid_support, \+static_predicate(ttTypeType/1))}, prologHybrid(ttTypeType), arity(ttTypeType, 1)])))).
spft(prologHybrid(ttTypeType), hybrid_support(ttTypeType, 1), pt(hybrid_support(ttTypeType, 1), rhs([prologHybrid(ttTypeType), arity(ttTypeType, 1)]))).
spft(arity(ttTypeType, 1), hybrid_support(ttTypeType, 1), pt(hybrid_support(ttTypeType, 1), rhs([prologHybrid(ttTypeType), arity(ttTypeType, 1)]))).
spft(pt(ttTypeType(A), rhs([completelyAssertedCollection(A)])),  (ttTypeType(B)==>completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 350)).
spft((tSet(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 353), ax).
spft(mpred_mark(pfcLHS, p, tSet, 1), s(((tSet(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 353))), ax).
spft(arity(tSet, 1), mpred_mark(pfcLHS, p, tSet, 1), pt(mpred_mark(pfcLHS, p, tSet, 1),  (ground(pfcLHS:p)->rhs([arity(tSet, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, tSet, 1), s(((tSet(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 353))), ax).
spft(arity(tSet, 1), mpred_mark(pfcPosTrigger, p, tSet, 1), pt(mpred_mark(pfcPosTrigger, p, tSet, 1),  (ground(pfcPosTrigger:p)->rhs([arity(tSet, 1)])))).
spft(marker_supported(tSet, 1), mpred_mark(pfcPosTrigger, p, tSet, 1), pt(mpred_mark(pfcPosTrigger, p, tSet, 1),  (ground(p:tSet:1)->rhs([marker_supported(tSet, 1)])))).
spft(pt(tSet(A), rhs([completelyAssertedCollection(A)])),  (tSet(B)==>completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 353)).
spft(completelyAssertedCollection(ttFormatType), tSet(ttFormatType), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcDatabaseTerm), tSet(pfcDatabaseTerm), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcControlled), tSet(pfcControlled), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologSingleValued), tSet(prologSingleValued), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcWatched), tSet(pfcWatched), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcCreates), tSet(pfcCreates), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcNegTrigger), tSet(pfcNegTrigger), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcPosTrigger), tSet(pfcPosTrigger), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcBcTrigger), tSet(pfcBcTrigger), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcRHS), tSet(pfcRHS), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcMustFC), tSet(pfcMustFC), pt(tSet(A), rhs([completelyAssertedCollection(A)]))).
spft((ttFormatType(A)==> ~completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 356), ax).
spft(mpred_mark(pfcLHS, p, ttFormatType, 1), s(((ttFormatType(A)==> ~completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 356))), ax).
spft(arity(ttFormatType, 1), mpred_mark(pfcLHS, p, ttFormatType, 1), pt(mpred_mark(pfcLHS, p, ttFormatType, 1),  (ground(pfcLHS:p)->rhs([arity(ttFormatType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttFormatType, 1), s(((ttFormatType(A)==> ~completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 356))), ax).
spft(arity(ttFormatType, 1), mpred_mark(pfcPosTrigger, p, ttFormatType, 1), pt(mpred_mark(pfcPosTrigger, p, ttFormatType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttFormatType, 1)])))).
spft(marker_supported(ttFormatType, 1), mpred_mark(pfcPosTrigger, p, ttFormatType, 1), pt(mpred_mark(pfcPosTrigger, p, ttFormatType, 1),  (ground(p:ttFormatType:1)->rhs([marker_supported(ttFormatType, 1)])))).
spft(hybrid_support(ttFormatType, 1), marker_supported(ttFormatType, 1), pt(marker_supported(ttFormatType, 1), rhs([hybrid_support(ttFormatType, 1)]))).
spft(prologHybrid(ttFormatType), hybrid_support(ttFormatType, 1), pt(hybrid_support(ttFormatType, 1),  (ttFormatType\='$VAR', atom(ttFormatType), integer(1), \+prologDynamic(ttFormatType), \+static_predicate(ttFormatType/1)->rhs([{functor(ttFormatType(A), ttFormatType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttFormatType, baseKB:ttFormatType(A)), \+predicate_property(baseKB:ttFormatType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttFormatType(A), exported);true), kb_dynamic(baseKB:ttFormatType/1), show_failure(hybrid_support, \+static_predicate(ttFormatType/1))}, prologHybrid(ttFormatType), arity(ttFormatType, 1)])))).
spft(pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)])), prologHybrid(ttFormatType), pt(prologHybrid(ttFormatType), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)])))).
spft(hybrid_support(ttFormatType, 1), arity(ttFormatType, 1), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)]))).
spft(hybrid_support(ttFormatType, 1), arity(ttFormatType, 1), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)]))).
spft(arity(ttFormatType, 1), hybrid_support(ttFormatType, 1), pt(hybrid_support(ttFormatType, 1),  (ttFormatType\='$VAR', atom(ttFormatType), integer(1), \+prologDynamic(ttFormatType), \+static_predicate(ttFormatType/1)->rhs([{functor(ttFormatType(A), ttFormatType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttFormatType, baseKB:ttFormatType(A)), \+predicate_property(baseKB:ttFormatType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttFormatType(A), exported);true), kb_dynamic(baseKB:ttFormatType/1), show_failure(hybrid_support, \+static_predicate(ttFormatType/1))}, prologHybrid(ttFormatType), arity(ttFormatType, 1)])))).
spft(prologHybrid(ttFormatType), hybrid_support(ttFormatType, 1), pt(hybrid_support(ttFormatType, 1), rhs([prologHybrid(ttFormatType), arity(ttFormatType, 1)]))).
spft(arity(ttFormatType, 1), hybrid_support(ttFormatType, 1), pt(hybrid_support(ttFormatType, 1), rhs([prologHybrid(ttFormatType), arity(ttFormatType, 1)]))).
spft(pt(ttFormatType(A), rhs([~completelyAssertedCollection(A)])),  (ttFormatType(B)==> ~completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 356)).
spft((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358), ax).
spft(mpred_mark(pfcLHS, p, tCol, 1), s(((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358))), ax).
spft(arity(tCol, 1), mpred_mark(pfcLHS, p, tCol, 1), pt(mpred_mark(pfcLHS, p, tCol, 1),  (ground(pfcLHS:p)->rhs([arity(tCol, 1)])))).
spft(mpred_mark(pfcCallCode, p, =.., 2), s(((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358))), ax).
spft(arity(=.., 2), mpred_mark(pfcCallCode, p, =.., 2), pt(mpred_mark(pfcCallCode, p, =.., 2),  (ground(pfcCallCode:p)->rhs([arity(=.., 2)])))).
spft(mpred_mark(pfcCallCode, p, decl_type, 1), s(((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358))), ax).
spft(arity(decl_type, 1), mpred_mark(pfcCallCode, p, decl_type, 1), pt(mpred_mark(pfcCallCode, p, decl_type, 1),  (ground(pfcCallCode:p)->rhs([arity(decl_type, 1)])))).
spft(mpred_mark(pfcCreates, p, mpred_univ, 3), s(((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358))), ax).
spft(arity(mpred_univ, 3), mpred_mark(pfcCreates, p, mpred_univ, 3), pt(mpred_mark(pfcCreates, p, mpred_univ, 3),  (ground(pfcCreates:p)->rhs([arity(mpred_univ, 3)])))).
spft(marker_supported(mpred_univ, 3), mpred_mark(pfcCreates, p, mpred_univ, 3), pt(mpred_mark(pfcCreates, p, mpred_univ, 3),  (ground(p:mpred_univ:3)->rhs([marker_supported(mpred_univ, 3)])))).
spft(hybrid_support(mpred_univ, 3), marker_supported(mpred_univ, 3), pt(marker_supported(mpred_univ, 3), rhs([hybrid_support(mpred_univ, 3)]))).
spft(prologHybrid(mpred_univ), hybrid_support(mpred_univ, 3), pt(hybrid_support(mpred_univ, 3),  (mpred_univ\='$VAR', atom(mpred_univ), integer(3), \+prologDynamic(mpred_univ), \+static_predicate(mpred_univ/3)->rhs([{functor(mpred_univ(A, B, C), mpred_univ, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_univ, baseKB:mpred_univ(A, B, C)), \+predicate_property(baseKB:mpred_univ(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_univ(A, B, C), exported);true), kb_dynamic(baseKB:mpred_univ/3), show_failure(hybrid_support, \+static_predicate(mpred_univ/3))}, prologHybrid(mpred_univ), arity(mpred_univ, 3)])))).
spft(pt(arity(mpred_univ, A), rhs([hybrid_support(mpred_univ, A)])), prologHybrid(mpred_univ), pt(prologHybrid(mpred_univ), pt(arity(mpred_univ, A), rhs([hybrid_support(mpred_univ, A)])))).
spft(hybrid_support(mpred_univ, 3), arity(mpred_univ, 3), pt(arity(mpred_univ, A), rhs([hybrid_support(mpred_univ, A)]))).
spft(arity(mpred_univ, 3), hybrid_support(mpred_univ, 3), pt(hybrid_support(mpred_univ, 3),  (mpred_univ\='$VAR', atom(mpred_univ), integer(3), \+prologDynamic(mpred_univ), \+static_predicate(mpred_univ/3)->rhs([{functor(mpred_univ(A, B, C), mpred_univ, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_univ, baseKB:mpred_univ(A, B, C)), \+predicate_property(baseKB:mpred_univ(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_univ(A, B, C), exported);true), kb_dynamic(baseKB:mpred_univ/3), show_failure(hybrid_support, \+static_predicate(mpred_univ/3))}, prologHybrid(mpred_univ), arity(mpred_univ, 3)])))).
spft(prologHybrid(mpred_univ), hybrid_support(mpred_univ, 3), pt(hybrid_support(mpred_univ, 3), rhs([prologHybrid(mpred_univ), arity(mpred_univ, 3)]))).
spft(arity(mpred_univ, 3), hybrid_support(mpred_univ, 3), pt(hybrid_support(mpred_univ, 3), rhs([prologHybrid(mpred_univ), arity(mpred_univ, 3)]))).
spft(mpred_mark(pfcPosTrigger, p, tCol, 1), s(((tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358))), ax).
spft(arity(tCol, 1), mpred_mark(pfcPosTrigger, p, tCol, 1), pt(mpred_mark(pfcPosTrigger, p, tCol, 1),  (ground(pfcPosTrigger:p)->rhs([arity(tCol, 1)])))).
spft(marker_supported(tCol, 1), mpred_mark(pfcPosTrigger, p, tCol, 1), pt(mpred_mark(pfcPosTrigger, p, tCol, 1),  (ground(p:tCol:1)->rhs([marker_supported(tCol, 1)])))).
spft(pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)]))),  (tCol(D)/ (atom(D), F=..[D, E])==>{decl_type(D)}, arity(D, 1), mpred_univ(D, E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 358)).
spft(arity(ttValueType, 1), tCol(ttValueType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttValueType, A, ttValueType(A)), tCol(ttValueType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tNotForUnboundPredicates, 1), tCol(tNotForUnboundPredicates), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tNotForUnboundPredicates, A, tNotForUnboundPredicates(A)), tCol(tNotForUnboundPredicates), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(completelyAssertedCollection, 1), tCol(completelyAssertedCollection), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(completelyAssertedCollection, A, completelyAssertedCollection(A)), tCol(completelyAssertedCollection), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologNegByFailure, 1), tCol(prologNegByFailure), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologNegByFailure, A, prologNegByFailure(A)), tCol(prologNegByFailure), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tCol, 1), tCol(tCol), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tCol, A, tCol(A)), tCol(tCol), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tSpec, 1), tCol(tSpec), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tSpec, A, tSpec(A)), tCol(tSpec), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttFormatType, 1), tCol(ttFormatType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttFormatType, A, ttFormatType(A)), tCol(ttFormatType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tSet, 1), tCol(tSet), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tSet, A, tSet(A)), tCol(tSet), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tRelation, 1), tCol(tRelation), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tRelation, A, tRelation(A)), tCol(tRelation), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tPred, 1), tCol(tPred), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tPred, A, tPred(A)), tCol(tPred), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tFunction, 1), tCol(tFunction), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tFunction, A, tFunction(A)), tCol(tFunction), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologMacroHead, 1), tCol(prologMacroHead), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologMacroHead, A, prologMacroHead(A)), tCol(prologMacroHead), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttPredType, 1), tCol(ttPredType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttPredType, A, ttPredType(A)), tCol(ttPredType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(functorDeclares, 1), tCol(functorDeclares), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(functorDeclares, A, functorDeclares(A)), tCol(functorDeclares), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologMultiValued, 1), tCol(prologMultiValued), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologMultiValued, A, prologMultiValued(A)), tCol(prologMultiValued), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologOrdered, 1), tCol(prologOrdered), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologOrdered, A, prologOrdered(A)), tCol(prologOrdered), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(predIsFlag, 1), tCol(predIsFlag), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(predIsFlag, A, predIsFlag(A)), tCol(predIsFlag), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttNonGenled, 1), tCol(ttNonGenled), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttNonGenled, A, ttNonGenled(A)), tCol(ttNonGenled), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(meta_argtypes, 1), tCol(meta_argtypes), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(meta_argtypes, A, meta_argtypes(A)), tCol(meta_argtypes), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologHybrid, 1), tCol(prologHybrid), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologHybrid, A, prologHybrid(A)), tCol(prologHybrid), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologPTTP, 1), tCol(prologPTTP), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologPTTP, A, prologPTTP(A)), tCol(prologPTTP), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologDynamic, 1), tCol(prologDynamic), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologDynamic, A, prologDynamic(A)), tCol(prologDynamic), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologKIF, 1), tCol(prologKIF), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologKIF, A, prologKIF(A)), tCol(prologKIF), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologBuiltin, 1), tCol(prologBuiltin), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologBuiltin, A, prologBuiltin(A)), tCol(prologBuiltin), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologListValued, 1), tCol(prologListValued), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologListValued, A, prologListValued(A)), tCol(prologListValued), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologSingleValued, 1), tCol(prologSingleValued), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologSingleValued, A, prologSingleValued(A)), tCol(prologSingleValued), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcControlled, 1), tCol(pfcControlled), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcControlled, A, pfcControlled(A)), tCol(pfcControlled), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(predCanHaveSingletons, 1), tCol(predCanHaveSingletons), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(predCanHaveSingletons, A, predCanHaveSingletons(A)), tCol(predCanHaveSingletons), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tTemporalThing, 1), tCol(tTemporalThing), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tTemporalThing, A, tTemporalThing(A)), tCol(tTemporalThing), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(prologSideEffects, 1), tCol(prologSideEffects), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(prologSideEffects, A, prologSideEffects(A)), tCol(prologSideEffects), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(tInferInstanceFromArgType, 1), tCol(tInferInstanceFromArgType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(tInferInstanceFromArgType, A, tInferInstanceFromArgType(A)), tCol(tInferInstanceFromArgType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttNotTemporalType, 1), tCol(ttNotTemporalType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttNotTemporalType, A, ttNotTemporalType(A)), tCol(ttNotTemporalType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttSpatialType, 1), tCol(ttSpatialType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttSpatialType, A, ttSpatialType(A)), tCol(ttSpatialType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttTemporalType, 1), tCol(ttTemporalType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttTemporalType, A, ttTemporalType(A)), tCol(ttTemporalType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttTypeType, 1), tCol(ttTypeType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttTypeType, A, ttTypeType(A)), tCol(ttTypeType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(ttUnverifiableType, 1), tCol(ttUnverifiableType), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(ttUnverifiableType, A, ttUnverifiableType(A)), tCol(ttUnverifiableType), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcDatabaseTerm, 1), tCol(pfcDatabaseTerm), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcDatabaseTerm, A, pfcDatabaseTerm(A)), tCol(pfcDatabaseTerm), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcWatched, 1), tCol(pfcWatched), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcWatched, A, pfcWatched(A)), tCol(pfcWatched), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcCreates, 1), tCol(pfcCreates), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcCreates, A, pfcCreates(A)), tCol(pfcCreates), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcNegTrigger, 1), tCol(pfcNegTrigger), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcNegTrigger, A, pfcNegTrigger(A)), tCol(pfcNegTrigger), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcPosTrigger, 1), tCol(pfcPosTrigger), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcPosTrigger, A, pfcPosTrigger(A)), tCol(pfcPosTrigger), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcBcTrigger, 1), tCol(pfcBcTrigger), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcBcTrigger, A, pfcBcTrigger(A)), tCol(pfcBcTrigger), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcRHS, 1), tCol(pfcRHS), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcRHS, A, pfcRHS(A)), tCol(pfcRHS), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft(arity(pfcMustFC, 1), tCol(pfcMustFC), pt(tCol(A),  (atom(A), C=..[A, B]->rhs([{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C)])))).
spft(mpred_univ(pfcMustFC, A, pfcMustFC(A)), tCol(pfcMustFC), pt(tCol(B),  (atom(B), D=..[B, C]->rhs([{decl_type(B)}, arity(B, 1), mpred_univ(B, C, D)])))).
spft((tCol(A)/ (atom(A), \+static_predicate(A/1))==>{kb_dynamic(A/1)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 359), ax).
spft(pt(tCol(A),  (atom(A), \+static_predicate(A/1)->rhs([{kb_dynamic(A/1)}]))),  (tCol(B)/ (atom(B), \+static_predicate(B/1))==>{kb_dynamic(B/1)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 359)).
spft((tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360), ax).
spft(mpred_mark(pfcCallCode, n, completelyAssertedCollection, 1), s(((tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360))), ax).
spft(arity(completelyAssertedCollection, 1), mpred_mark(pfcCallCode, n, completelyAssertedCollection, 1), pt(mpred_mark(pfcCallCode, n, completelyAssertedCollection, 1),  (ground(pfcCallCode:n)->rhs([arity(completelyAssertedCollection, 1)])))).
spft(mpred_mark(pfcCallCode, p, cwc, 0), s(((tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360))), ax).
spft(arity(cwc, 0), mpred_mark(pfcCallCode, p, cwc, 0), pt(mpred_mark(pfcCallCode, p, cwc, 0),  (ground(pfcCallCode:p)->rhs([arity(cwc, 0)])))).
spft(mpred_mark(pfcCallCode, p, lazy, 1), s(((tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360))), ax).
spft(arity(lazy, 1), mpred_mark(pfcCallCode, p, lazy, 1), pt(mpred_mark(pfcCallCode, p, lazy, 1),  (ground(pfcCallCode:p)->rhs([arity(lazy, 1)])))).
spft(mpred_mark(pfcCallCode, p, isa_backchaing, 2), s(((tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360))), ax).
spft(arity(isa_backchaing, 2), mpred_mark(pfcCallCode, p, isa_backchaing, 2), pt(mpred_mark(pfcCallCode, p, isa_backchaing, 2),  (ground(pfcCallCode:p)->rhs([arity(isa_backchaing, 2)])))).
spft(pt(tCol(A),  (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A)->rhs([(B:-cwc, lazy(\+ ~B), isa_backchaing(C, A))]))),  (tCol(D)/ (atom(D), E=..[D, F], \+static_predicate(D/1), \+completelyAssertedCollection(D))==> (E:-cwc, lazy(\+ ~E), isa_backchaing(F, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 360)).
spft((ttValueType(A):-cwc, lazy(\+ ~ttValueType(A)), isa_backchaing(A, ttValueType)), tCol(ttValueType), pt(tCol(B),  (atom(B), C=..[B, D], \+static_predicate(B/1), \+completelyAssertedCollection(B)->rhs([(C:-cwc, lazy(\+ ~C), isa_backchaing(D, B))])))).
spft((tNotForUnboundPredicates(A):-cwc, lazy(\+ ~tNotForUnboundPredicates(A)), isa_backchaing(A, tNotForUnboundPredicates)), tCol(tNotForUnboundPredicates), pt(tCol(B),  (atom(B), C=..[B, D], \+static_predicate(B/1), \+completelyAssertedCollection(B)->rhs([(C:-cwc, lazy(\+ ~C), isa_backchaing(D, B))])))).
spft(ttPredType(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 369), ax).
spft(tCol(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons), rhs([tCol(predCanHaveSingletons)]))).
spft(arity(predCanHaveSingletons, 1), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons),  (atom(predCanHaveSingletons)->rhs([arity(predCanHaveSingletons, 1), pfcControlled(predCanHaveSingletons)])))).
spft(pfcControlled(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons),  (atom(predCanHaveSingletons)->rhs([arity(predCanHaveSingletons, 1), pfcControlled(predCanHaveSingletons)])))).
spft(pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)])), pfcControlled(predCanHaveSingletons), pt(pfcControlled(predCanHaveSingletons), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)])))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(prologHybrid(predCanHaveSingletons), hybrid_support(predCanHaveSingletons, 1), pt(hybrid_support(predCanHaveSingletons, 1),  (predCanHaveSingletons\='$VAR', atom(predCanHaveSingletons), integer(1), \+prologDynamic(predCanHaveSingletons), \+static_predicate(predCanHaveSingletons/1)->rhs([{functor(predCanHaveSingletons(A), predCanHaveSingletons, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predCanHaveSingletons, baseKB:predCanHaveSingletons(A)), \+predicate_property(baseKB:predCanHaveSingletons(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predCanHaveSingletons(A), exported);true), kb_dynamic(baseKB:predCanHaveSingletons/1), show_failure(hybrid_support, \+static_predicate(predCanHaveSingletons/1))}, prologHybrid(predCanHaveSingletons), arity(predCanHaveSingletons, 1)])))).
spft(pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)])), prologHybrid(predCanHaveSingletons), pt(prologHybrid(predCanHaveSingletons), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)])))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(arity(predCanHaveSingletons, 1), hybrid_support(predCanHaveSingletons, 1), pt(hybrid_support(predCanHaveSingletons, 1),  (predCanHaveSingletons\='$VAR', atom(predCanHaveSingletons), integer(1), \+prologDynamic(predCanHaveSingletons), \+static_predicate(predCanHaveSingletons/1)->rhs([{functor(predCanHaveSingletons(A), predCanHaveSingletons, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predCanHaveSingletons, baseKB:predCanHaveSingletons(A)), \+predicate_property(baseKB:predCanHaveSingletons(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predCanHaveSingletons(A), exported);true), kb_dynamic(baseKB:predCanHaveSingletons/1), show_failure(hybrid_support, \+static_predicate(predCanHaveSingletons/1))}, prologHybrid(predCanHaveSingletons), arity(predCanHaveSingletons, 1)])))).
spft(prologHybrid(predCanHaveSingletons), hybrid_support(predCanHaveSingletons, 1), pt(hybrid_support(predCanHaveSingletons, 1), rhs([prologHybrid(predCanHaveSingletons), arity(predCanHaveSingletons, 1)]))).
spft(arity(predCanHaveSingletons, 1), hybrid_support(predCanHaveSingletons, 1), pt(hybrid_support(predCanHaveSingletons, 1), rhs([prologHybrid(predCanHaveSingletons), arity(predCanHaveSingletons, 1)]))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(hybrid_support(predCanHaveSingletons, 1), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, A), rhs([hybrid_support(predCanHaveSingletons, A)]))).
spft(support_hilog(predCanHaveSingletons, 1), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons),  (atom(predCanHaveSingletons)->rhs([support_hilog(predCanHaveSingletons, 1)])))).
spft(hybrid_support(predCanHaveSingletons, 1), support_hilog(predCanHaveSingletons, 1), pt(support_hilog(predCanHaveSingletons, 1),  (predCanHaveSingletons\='$VAR', atom(predCanHaveSingletons), integer(1), \+static_predicate(predCanHaveSingletons/1), \+prologDynamic(predCanHaveSingletons)->rhs([hybrid_support(predCanHaveSingletons, 1), {A=arity(predCanHaveSingletons, 1)}, A])))).
spft(arity(predCanHaveSingletons, 1), support_hilog(predCanHaveSingletons, 1), pt(support_hilog(predCanHaveSingletons, 1),  (predCanHaveSingletons\='$VAR', atom(predCanHaveSingletons), integer(1), \+static_predicate(predCanHaveSingletons/1), \+prologDynamic(predCanHaveSingletons)->rhs([hybrid_support(predCanHaveSingletons, 1), {arity(predCanHaveSingletons, 1)=arity(predCanHaveSingletons, 1)}, arity(predCanHaveSingletons, 1)])))).
spft(tSet(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons), rhs([tSet(predCanHaveSingletons), completelyAssertedCollection(predCanHaveSingletons)]))).
spft(completelyAssertedCollection(predCanHaveSingletons), tSet(predCanHaveSingletons), pt(tSet(predCanHaveSingletons), rhs([completelyAssertedCollection(predCanHaveSingletons)]))).
spft(completelyAssertedCollection(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(predCanHaveSingletons), rhs([tSet(predCanHaveSingletons), completelyAssertedCollection(predCanHaveSingletons)]))).
spft(ttPredType(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 370), ax).
spft(tCol(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects), rhs([tCol(prologSideEffects)]))).
spft(arity(prologSideEffects, 1), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects),  (atom(prologSideEffects)->rhs([arity(prologSideEffects, 1), pfcControlled(prologSideEffects)])))).
spft(pfcControlled(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects),  (atom(prologSideEffects)->rhs([arity(prologSideEffects, 1), pfcControlled(prologSideEffects)])))).
spft(pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)])), pfcControlled(prologSideEffects), pt(pfcControlled(prologSideEffects), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)])))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(prologHybrid(prologSideEffects), hybrid_support(prologSideEffects, 1), pt(hybrid_support(prologSideEffects, 1),  (prologSideEffects\='$VAR', atom(prologSideEffects), integer(1), \+prologDynamic(prologSideEffects), \+static_predicate(prologSideEffects/1)->rhs([{functor(prologSideEffects(A), prologSideEffects, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologSideEffects, baseKB:prologSideEffects(A)), \+predicate_property(baseKB:prologSideEffects(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologSideEffects(A), exported);true), kb_dynamic(baseKB:prologSideEffects/1), show_failure(hybrid_support, \+static_predicate(prologSideEffects/1))}, prologHybrid(prologSideEffects), arity(prologSideEffects, 1)])))).
spft(pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)])), prologHybrid(prologSideEffects), pt(prologHybrid(prologSideEffects), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)])))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(arity(prologSideEffects, 1), hybrid_support(prologSideEffects, 1), pt(hybrid_support(prologSideEffects, 1),  (prologSideEffects\='$VAR', atom(prologSideEffects), integer(1), \+prologDynamic(prologSideEffects), \+static_predicate(prologSideEffects/1)->rhs([{functor(prologSideEffects(A), prologSideEffects, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologSideEffects, baseKB:prologSideEffects(A)), \+predicate_property(baseKB:prologSideEffects(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologSideEffects(A), exported);true), kb_dynamic(baseKB:prologSideEffects/1), show_failure(hybrid_support, \+static_predicate(prologSideEffects/1))}, prologHybrid(prologSideEffects), arity(prologSideEffects, 1)])))).
spft(prologHybrid(prologSideEffects), hybrid_support(prologSideEffects, 1), pt(hybrid_support(prologSideEffects, 1), rhs([prologHybrid(prologSideEffects), arity(prologSideEffects, 1)]))).
spft(arity(prologSideEffects, 1), hybrid_support(prologSideEffects, 1), pt(hybrid_support(prologSideEffects, 1), rhs([prologHybrid(prologSideEffects), arity(prologSideEffects, 1)]))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(hybrid_support(prologSideEffects, 1), arity(prologSideEffects, 1), pt(arity(prologSideEffects, A), rhs([hybrid_support(prologSideEffects, A)]))).
spft(support_hilog(prologSideEffects, 1), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects),  (atom(prologSideEffects)->rhs([support_hilog(prologSideEffects, 1)])))).
spft(hybrid_support(prologSideEffects, 1), support_hilog(prologSideEffects, 1), pt(support_hilog(prologSideEffects, 1),  (prologSideEffects\='$VAR', atom(prologSideEffects), integer(1), \+static_predicate(prologSideEffects/1), \+prologDynamic(prologSideEffects)->rhs([hybrid_support(prologSideEffects, 1), {A=arity(prologSideEffects, 1)}, A])))).
spft(arity(prologSideEffects, 1), support_hilog(prologSideEffects, 1), pt(support_hilog(prologSideEffects, 1),  (prologSideEffects\='$VAR', atom(prologSideEffects), integer(1), \+static_predicate(prologSideEffects/1), \+prologDynamic(prologSideEffects)->rhs([hybrid_support(prologSideEffects, 1), {arity(prologSideEffects, 1)=arity(prologSideEffects, 1)}, arity(prologSideEffects, 1)])))).
spft(tSet(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects), rhs([tSet(prologSideEffects), completelyAssertedCollection(prologSideEffects)]))).
spft(completelyAssertedCollection(prologSideEffects), tSet(prologSideEffects), pt(tSet(prologSideEffects), rhs([completelyAssertedCollection(prologSideEffects)]))).
spft(completelyAssertedCollection(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(prologSideEffects), rhs([tSet(prologSideEffects), completelyAssertedCollection(prologSideEffects)]))).
spft(arity(write, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 371), ax).
spft(prologSideEffects(write), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 371), ax).
spft(tPred(write), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 371), ax).
spft(pt(arity(write, A),  (integer(A), A>1->pt(~prologBuiltin(write), rhs([~tCol(write), support_hilog(write, A)])))), tPred(write), pt(tPred(write), pt(arity(write, A),  (integer(A), A>1->pt(~prologBuiltin(write), rhs([~tCol(write), support_hilog(write, A)])))))).
spft(arity(resolveConflict, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 372), ax).
spft(prologSideEffects(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 372), ax).
spft(tPred(resolveConflict), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 372), ax).
spft(ttPredType(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes), rhs([tCol(meta_argtypes)]))).
spft(arity(meta_argtypes, 1), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes),  (atom(meta_argtypes)->rhs([arity(meta_argtypes, 1), pfcControlled(meta_argtypes)])))).
spft(pfcControlled(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes),  (atom(meta_argtypes)->rhs([arity(meta_argtypes, 1), pfcControlled(meta_argtypes)])))).
spft(pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)])), pfcControlled(meta_argtypes), pt(pfcControlled(meta_argtypes), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)])))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(prologHybrid(meta_argtypes), hybrid_support(meta_argtypes, 1), pt(hybrid_support(meta_argtypes, 1),  (meta_argtypes\='$VAR', atom(meta_argtypes), integer(1), \+prologDynamic(meta_argtypes), \+static_predicate(meta_argtypes/1)->rhs([{functor(meta_argtypes(A), meta_argtypes, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(meta_argtypes, baseKB:meta_argtypes(A)), \+predicate_property(baseKB:meta_argtypes(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:meta_argtypes(A), exported);true), kb_dynamic(baseKB:meta_argtypes/1), show_failure(hybrid_support, \+static_predicate(meta_argtypes/1))}, prologHybrid(meta_argtypes), arity(meta_argtypes, 1)])))).
spft(pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)])), prologHybrid(meta_argtypes), pt(prologHybrid(meta_argtypes), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)])))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(arity(meta_argtypes, 1), hybrid_support(meta_argtypes, 1), pt(hybrid_support(meta_argtypes, 1),  (meta_argtypes\='$VAR', atom(meta_argtypes), integer(1), \+prologDynamic(meta_argtypes), \+static_predicate(meta_argtypes/1)->rhs([{functor(meta_argtypes(A), meta_argtypes, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(meta_argtypes, baseKB:meta_argtypes(A)), \+predicate_property(baseKB:meta_argtypes(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:meta_argtypes(A), exported);true), kb_dynamic(baseKB:meta_argtypes/1), show_failure(hybrid_support, \+static_predicate(meta_argtypes/1))}, prologHybrid(meta_argtypes), arity(meta_argtypes, 1)])))).
spft(prologHybrid(meta_argtypes), hybrid_support(meta_argtypes, 1), pt(hybrid_support(meta_argtypes, 1), rhs([prologHybrid(meta_argtypes), arity(meta_argtypes, 1)]))).
spft(arity(meta_argtypes, 1), hybrid_support(meta_argtypes, 1), pt(hybrid_support(meta_argtypes, 1), rhs([prologHybrid(meta_argtypes), arity(meta_argtypes, 1)]))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(hybrid_support(meta_argtypes, 1), arity(meta_argtypes, 1), pt(arity(meta_argtypes, A), rhs([hybrid_support(meta_argtypes, A)]))).
spft(support_hilog(meta_argtypes, 1), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes),  (atom(meta_argtypes)->rhs([support_hilog(meta_argtypes, 1)])))).
spft(hybrid_support(meta_argtypes, 1), support_hilog(meta_argtypes, 1), pt(support_hilog(meta_argtypes, 1),  (meta_argtypes\='$VAR', atom(meta_argtypes), integer(1), \+static_predicate(meta_argtypes/1), \+prologDynamic(meta_argtypes)->rhs([hybrid_support(meta_argtypes, 1), {A=arity(meta_argtypes, 1)}, A])))).
spft(arity(meta_argtypes, 1), support_hilog(meta_argtypes, 1), pt(support_hilog(meta_argtypes, 1),  (meta_argtypes\='$VAR', atom(meta_argtypes), integer(1), \+static_predicate(meta_argtypes/1), \+prologDynamic(meta_argtypes)->rhs([hybrid_support(meta_argtypes, 1), {arity(meta_argtypes, 1)=arity(meta_argtypes, 1)}, arity(meta_argtypes, 1)])))).
spft(tSet(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes), rhs([tSet(meta_argtypes), completelyAssertedCollection(meta_argtypes)]))).
spft(completelyAssertedCollection(meta_argtypes), tSet(meta_argtypes), pt(tSet(meta_argtypes), rhs([completelyAssertedCollection(meta_argtypes)]))).
spft(completelyAssertedCollection(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(meta_argtypes), rhs([tSet(meta_argtypes), completelyAssertedCollection(meta_argtypes)]))).
spft(ttPredType(pfcDatabaseTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(pfcWatched), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(pfcMustFC), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(predIsFlag), rhs([tCol(predIsFlag)]))).
spft(arity(predIsFlag, 1), ttPredType(predIsFlag), pt(ttPredType(predIsFlag),  (atom(predIsFlag)->rhs([arity(predIsFlag, 1), pfcControlled(predIsFlag)])))).
spft(pfcControlled(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(predIsFlag),  (atom(predIsFlag)->rhs([arity(predIsFlag, 1), pfcControlled(predIsFlag)])))).
spft(pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)])), pfcControlled(predIsFlag), pt(pfcControlled(predIsFlag), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)])))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(prologHybrid(predIsFlag), hybrid_support(predIsFlag, 1), pt(hybrid_support(predIsFlag, 1),  (predIsFlag\='$VAR', atom(predIsFlag), integer(1), \+prologDynamic(predIsFlag), \+static_predicate(predIsFlag/1)->rhs([{functor(predIsFlag(A), predIsFlag, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predIsFlag, baseKB:predIsFlag(A)), \+predicate_property(baseKB:predIsFlag(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predIsFlag(A), exported);true), kb_dynamic(baseKB:predIsFlag/1), show_failure(hybrid_support, \+static_predicate(predIsFlag/1))}, prologHybrid(predIsFlag), arity(predIsFlag, 1)])))).
spft(pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)])), prologHybrid(predIsFlag), pt(prologHybrid(predIsFlag), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)])))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(arity(predIsFlag, 1), hybrid_support(predIsFlag, 1), pt(hybrid_support(predIsFlag, 1),  (predIsFlag\='$VAR', atom(predIsFlag), integer(1), \+prologDynamic(predIsFlag), \+static_predicate(predIsFlag/1)->rhs([{functor(predIsFlag(A), predIsFlag, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predIsFlag, baseKB:predIsFlag(A)), \+predicate_property(baseKB:predIsFlag(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predIsFlag(A), exported);true), kb_dynamic(baseKB:predIsFlag/1), show_failure(hybrid_support, \+static_predicate(predIsFlag/1))}, prologHybrid(predIsFlag), arity(predIsFlag, 1)])))).
spft(prologHybrid(predIsFlag), hybrid_support(predIsFlag, 1), pt(hybrid_support(predIsFlag, 1), rhs([prologHybrid(predIsFlag), arity(predIsFlag, 1)]))).
spft(arity(predIsFlag, 1), hybrid_support(predIsFlag, 1), pt(hybrid_support(predIsFlag, 1), rhs([prologHybrid(predIsFlag), arity(predIsFlag, 1)]))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(hybrid_support(predIsFlag, 1), arity(predIsFlag, 1), pt(arity(predIsFlag, A), rhs([hybrid_support(predIsFlag, A)]))).
spft(support_hilog(predIsFlag, 1), ttPredType(predIsFlag), pt(ttPredType(predIsFlag),  (atom(predIsFlag)->rhs([support_hilog(predIsFlag, 1)])))).
spft(hybrid_support(predIsFlag, 1), support_hilog(predIsFlag, 1), pt(support_hilog(predIsFlag, 1),  (predIsFlag\='$VAR', atom(predIsFlag), integer(1), \+static_predicate(predIsFlag/1), \+prologDynamic(predIsFlag)->rhs([hybrid_support(predIsFlag, 1), {A=arity(predIsFlag, 1)}, A])))).
spft(arity(predIsFlag, 1), support_hilog(predIsFlag, 1), pt(support_hilog(predIsFlag, 1),  (predIsFlag\='$VAR', atom(predIsFlag), integer(1), \+static_predicate(predIsFlag/1), \+prologDynamic(predIsFlag)->rhs([hybrid_support(predIsFlag, 1), {arity(predIsFlag, 1)=arity(predIsFlag, 1)}, arity(predIsFlag, 1)])))).
spft(tSet(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(predIsFlag), rhs([tSet(predIsFlag), completelyAssertedCollection(predIsFlag)]))).
spft(completelyAssertedCollection(predIsFlag), tSet(predIsFlag), pt(tSet(predIsFlag), rhs([completelyAssertedCollection(predIsFlag)]))).
spft(completelyAssertedCollection(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(predIsFlag), rhs([tSet(predIsFlag), completelyAssertedCollection(predIsFlag)]))).
spft(ttPredType(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(tPred), ttPredType(tPred), pt(ttPredType(tPred), rhs([tCol(tPred)]))).
spft(arity(tPred, 1), ttPredType(tPred), pt(ttPredType(tPred),  (atom(tPred)->rhs([arity(tPred, 1), pfcControlled(tPred)])))).
spft(pfcControlled(tPred), ttPredType(tPred), pt(ttPredType(tPred),  (atom(tPred)->rhs([arity(tPred, 1), pfcControlled(tPred)])))).
spft(pt(arity(tPred, A), rhs([hybrid_support(tPred, A)])), pfcControlled(tPred), pt(pfcControlled(tPred), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)])))).
spft(hybrid_support(tPred, 1), arity(tPred, 1), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)]))).
spft(hybrid_support(tPred, 1), arity(tPred, 1), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)]))).
spft(hybrid_support(tPred, 1), arity(tPred, 1), pt(arity(tPred, A), rhs([hybrid_support(tPred, A)]))).
spft(support_hilog(tPred, 1), ttPredType(tPred), pt(ttPredType(tPred),  (atom(tPred)->rhs([support_hilog(tPred, 1)])))).
spft(hybrid_support(tPred, 1), support_hilog(tPred, 1), pt(support_hilog(tPred, 1),  (tPred\='$VAR', atom(tPred), integer(1), \+static_predicate(tPred/1), \+prologDynamic(tPred)->rhs([hybrid_support(tPred, 1), {A=arity(tPred, 1)}, A])))).
spft(arity(tPred, 1), support_hilog(tPred, 1), pt(support_hilog(tPred, 1),  (tPred\='$VAR', atom(tPred), integer(1), \+static_predicate(tPred/1), \+prologDynamic(tPred)->rhs([hybrid_support(tPred, 1), {arity(tPred, 1)=arity(tPred, 1)}, arity(tPred, 1)])))).
spft(tSet(tPred), ttPredType(tPred), pt(ttPredType(tPred), rhs([tSet(tPred), completelyAssertedCollection(tPred)]))).
spft(completelyAssertedCollection(tPred), tSet(tPred), pt(tSet(tPred), rhs([completelyAssertedCollection(tPred)]))).
spft(completelyAssertedCollection(tPred), ttPredType(tPred), pt(ttPredType(tPred), rhs([tSet(tPred), completelyAssertedCollection(tPred)]))).
spft(ttPredType(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued), rhs([tCol(prologMultiValued)]))).
spft(arity(prologMultiValued, 1), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued),  (atom(prologMultiValued)->rhs([arity(prologMultiValued, 1), pfcControlled(prologMultiValued)])))).
spft(pfcControlled(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued),  (atom(prologMultiValued)->rhs([arity(prologMultiValued, 1), pfcControlled(prologMultiValued)])))).
spft(pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)])), pfcControlled(prologMultiValued), pt(pfcControlled(prologMultiValued), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)])))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(prologHybrid(prologMultiValued), hybrid_support(prologMultiValued, 1), pt(hybrid_support(prologMultiValued, 1),  (prologMultiValued\='$VAR', atom(prologMultiValued), integer(1), \+prologDynamic(prologMultiValued), \+static_predicate(prologMultiValued/1)->rhs([{functor(prologMultiValued(A), prologMultiValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologMultiValued, baseKB:prologMultiValued(A)), \+predicate_property(baseKB:prologMultiValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologMultiValued(A), exported);true), kb_dynamic(baseKB:prologMultiValued/1), show_failure(hybrid_support, \+static_predicate(prologMultiValued/1))}, prologHybrid(prologMultiValued), arity(prologMultiValued, 1)])))).
spft(pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)])), prologHybrid(prologMultiValued), pt(prologHybrid(prologMultiValued), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)])))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(arity(prologMultiValued, 1), hybrid_support(prologMultiValued, 1), pt(hybrid_support(prologMultiValued, 1),  (prologMultiValued\='$VAR', atom(prologMultiValued), integer(1), \+prologDynamic(prologMultiValued), \+static_predicate(prologMultiValued/1)->rhs([{functor(prologMultiValued(A), prologMultiValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologMultiValued, baseKB:prologMultiValued(A)), \+predicate_property(baseKB:prologMultiValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologMultiValued(A), exported);true), kb_dynamic(baseKB:prologMultiValued/1), show_failure(hybrid_support, \+static_predicate(prologMultiValued/1))}, prologHybrid(prologMultiValued), arity(prologMultiValued, 1)])))).
spft(prologHybrid(prologMultiValued), hybrid_support(prologMultiValued, 1), pt(hybrid_support(prologMultiValued, 1), rhs([prologHybrid(prologMultiValued), arity(prologMultiValued, 1)]))).
spft(arity(prologMultiValued, 1), hybrid_support(prologMultiValued, 1), pt(hybrid_support(prologMultiValued, 1), rhs([prologHybrid(prologMultiValued), arity(prologMultiValued, 1)]))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(hybrid_support(prologMultiValued, 1), arity(prologMultiValued, 1), pt(arity(prologMultiValued, A), rhs([hybrid_support(prologMultiValued, A)]))).
spft(support_hilog(prologMultiValued, 1), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued),  (atom(prologMultiValued)->rhs([support_hilog(prologMultiValued, 1)])))).
spft(hybrid_support(prologMultiValued, 1), support_hilog(prologMultiValued, 1), pt(support_hilog(prologMultiValued, 1),  (prologMultiValued\='$VAR', atom(prologMultiValued), integer(1), \+static_predicate(prologMultiValued/1), \+prologDynamic(prologMultiValued)->rhs([hybrid_support(prologMultiValued, 1), {A=arity(prologMultiValued, 1)}, A])))).
spft(arity(prologMultiValued, 1), support_hilog(prologMultiValued, 1), pt(support_hilog(prologMultiValued, 1),  (prologMultiValued\='$VAR', atom(prologMultiValued), integer(1), \+static_predicate(prologMultiValued/1), \+prologDynamic(prologMultiValued)->rhs([hybrid_support(prologMultiValued, 1), {arity(prologMultiValued, 1)=arity(prologMultiValued, 1)}, arity(prologMultiValued, 1)])))).
spft(tSet(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued), rhs([tSet(prologMultiValued), completelyAssertedCollection(prologMultiValued)]))).
spft(completelyAssertedCollection(prologMultiValued), tSet(prologMultiValued), pt(tSet(prologMultiValued), rhs([completelyAssertedCollection(prologMultiValued)]))).
spft(completelyAssertedCollection(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(prologMultiValued), rhs([tSet(prologMultiValued), completelyAssertedCollection(prologMultiValued)]))).
spft(ttPredType(pfcBcTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead), rhs([tCol(prologMacroHead)]))).
spft(arity(prologMacroHead, 1), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead),  (atom(prologMacroHead)->rhs([arity(prologMacroHead, 1), pfcControlled(prologMacroHead)])))).
spft(pfcControlled(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead),  (atom(prologMacroHead)->rhs([arity(prologMacroHead, 1), pfcControlled(prologMacroHead)])))).
spft(pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)])), pfcControlled(prologMacroHead), pt(pfcControlled(prologMacroHead), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)])))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(prologHybrid(prologMacroHead), hybrid_support(prologMacroHead, 1), pt(hybrid_support(prologMacroHead, 1),  (prologMacroHead\='$VAR', atom(prologMacroHead), integer(1), \+prologDynamic(prologMacroHead), \+static_predicate(prologMacroHead/1)->rhs([{functor(prologMacroHead(A), prologMacroHead, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologMacroHead, baseKB:prologMacroHead(A)), \+predicate_property(baseKB:prologMacroHead(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologMacroHead(A), exported);true), kb_dynamic(baseKB:prologMacroHead/1), show_failure(hybrid_support, \+static_predicate(prologMacroHead/1))}, prologHybrid(prologMacroHead), arity(prologMacroHead, 1)])))).
spft(pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)])), prologHybrid(prologMacroHead), pt(prologHybrid(prologMacroHead), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)])))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(arity(prologMacroHead, 1), hybrid_support(prologMacroHead, 1), pt(hybrid_support(prologMacroHead, 1),  (prologMacroHead\='$VAR', atom(prologMacroHead), integer(1), \+prologDynamic(prologMacroHead), \+static_predicate(prologMacroHead/1)->rhs([{functor(prologMacroHead(A), prologMacroHead, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologMacroHead, baseKB:prologMacroHead(A)), \+predicate_property(baseKB:prologMacroHead(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologMacroHead(A), exported);true), kb_dynamic(baseKB:prologMacroHead/1), show_failure(hybrid_support, \+static_predicate(prologMacroHead/1))}, prologHybrid(prologMacroHead), arity(prologMacroHead, 1)])))).
spft(prologHybrid(prologMacroHead), hybrid_support(prologMacroHead, 1), pt(hybrid_support(prologMacroHead, 1), rhs([prologHybrid(prologMacroHead), arity(prologMacroHead, 1)]))).
spft(arity(prologMacroHead, 1), hybrid_support(prologMacroHead, 1), pt(hybrid_support(prologMacroHead, 1), rhs([prologHybrid(prologMacroHead), arity(prologMacroHead, 1)]))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(hybrid_support(prologMacroHead, 1), arity(prologMacroHead, 1), pt(arity(prologMacroHead, A), rhs([hybrid_support(prologMacroHead, A)]))).
spft(support_hilog(prologMacroHead, 1), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead),  (atom(prologMacroHead)->rhs([support_hilog(prologMacroHead, 1)])))).
spft(hybrid_support(prologMacroHead, 1), support_hilog(prologMacroHead, 1), pt(support_hilog(prologMacroHead, 1),  (prologMacroHead\='$VAR', atom(prologMacroHead), integer(1), \+static_predicate(prologMacroHead/1), \+prologDynamic(prologMacroHead)->rhs([hybrid_support(prologMacroHead, 1), {A=arity(prologMacroHead, 1)}, A])))).
spft(arity(prologMacroHead, 1), support_hilog(prologMacroHead, 1), pt(support_hilog(prologMacroHead, 1),  (prologMacroHead\='$VAR', atom(prologMacroHead), integer(1), \+static_predicate(prologMacroHead/1), \+prologDynamic(prologMacroHead)->rhs([hybrid_support(prologMacroHead, 1), {arity(prologMacroHead, 1)=arity(prologMacroHead, 1)}, arity(prologMacroHead, 1)])))).
spft(tSet(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead), rhs([tSet(prologMacroHead), completelyAssertedCollection(prologMacroHead)]))).
spft(completelyAssertedCollection(prologMacroHead), tSet(prologMacroHead), pt(tSet(prologMacroHead), rhs([completelyAssertedCollection(prologMacroHead)]))).
spft(completelyAssertedCollection(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(prologMacroHead), rhs([tSet(prologMacroHead), completelyAssertedCollection(prologMacroHead)]))).
spft(ttPredType(notAssertable), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(notAssertable), ttPredType(notAssertable), pt(ttPredType(notAssertable), rhs([tCol(notAssertable)]))).
spft(arity(notAssertable, 1), tCol(notAssertable), pt(tCol(notAssertable),  (atom(notAssertable), notAssertable(A)=..[notAssertable, A]->rhs([{decl_type(notAssertable)}, arity(notAssertable, 1), mpred_univ(notAssertable, A, notAssertable(A))])))).
spft(mpred_univ(notAssertable, A, notAssertable(A)), tCol(notAssertable), pt(tCol(notAssertable),  (atom(notAssertable), notAssertable(A)=..[notAssertable, A]->rhs([{decl_type(notAssertable)}, arity(notAssertable, 1), mpred_univ(notAssertable, A, notAssertable(A))])))).
spft((notAssertable(A):-cwc, lazy(\+ ~notAssertable(A)), isa_backchaing(A, notAssertable)), tCol(notAssertable), pt(tCol(notAssertable),  (atom(notAssertable), notAssertable(A)=..[notAssertable, A], \+static_predicate(notAssertable/1), \+completelyAssertedCollection(notAssertable)->rhs([(notAssertable(A):-cwc, lazy(\+ ~notAssertable(A)), isa_backchaing(A, notAssertable))])))).
spft(arity(notAssertable, 1), ttPredType(notAssertable), pt(ttPredType(notAssertable),  (atom(notAssertable)->rhs([arity(notAssertable, 1), pfcControlled(notAssertable)])))).
spft(pfcControlled(notAssertable), ttPredType(notAssertable), pt(ttPredType(notAssertable),  (atom(notAssertable)->rhs([arity(notAssertable, 1), pfcControlled(notAssertable)])))).
spft(pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)])), pfcControlled(notAssertable), pt(pfcControlled(notAssertable), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)])))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(prologHybrid(notAssertable), hybrid_support(notAssertable, 1), pt(hybrid_support(notAssertable, 1),  (notAssertable\='$VAR', atom(notAssertable), integer(1), \+prologDynamic(notAssertable), \+static_predicate(notAssertable/1)->rhs([{functor(notAssertable(A), notAssertable, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(notAssertable, baseKB:notAssertable(A)), \+predicate_property(baseKB:notAssertable(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:notAssertable(A), exported);true), kb_dynamic(baseKB:notAssertable/1), show_failure(hybrid_support, \+static_predicate(notAssertable/1))}, prologHybrid(notAssertable), arity(notAssertable, 1)])))).
spft(pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)])), prologHybrid(notAssertable), pt(prologHybrid(notAssertable), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)])))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(arity(notAssertable, 1), hybrid_support(notAssertable, 1), pt(hybrid_support(notAssertable, 1),  (notAssertable\='$VAR', atom(notAssertable), integer(1), \+prologDynamic(notAssertable), \+static_predicate(notAssertable/1)->rhs([{functor(notAssertable(A), notAssertable, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(notAssertable, baseKB:notAssertable(A)), \+predicate_property(baseKB:notAssertable(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:notAssertable(A), exported);true), kb_dynamic(baseKB:notAssertable/1), show_failure(hybrid_support, \+static_predicate(notAssertable/1))}, prologHybrid(notAssertable), arity(notAssertable, 1)])))).
spft(prologHybrid(notAssertable), hybrid_support(notAssertable, 1), pt(hybrid_support(notAssertable, 1), rhs([prologHybrid(notAssertable), arity(notAssertable, 1)]))).
spft(arity(notAssertable, 1), hybrid_support(notAssertable, 1), pt(hybrid_support(notAssertable, 1), rhs([prologHybrid(notAssertable), arity(notAssertable, 1)]))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(hybrid_support(notAssertable, 1), arity(notAssertable, 1), pt(arity(notAssertable, A), rhs([hybrid_support(notAssertable, A)]))).
spft(support_hilog(notAssertable, 1), ttPredType(notAssertable), pt(ttPredType(notAssertable),  (atom(notAssertable)->rhs([support_hilog(notAssertable, 1)])))).
spft(hybrid_support(notAssertable, 1), support_hilog(notAssertable, 1), pt(support_hilog(notAssertable, 1),  (notAssertable\='$VAR', atom(notAssertable), integer(1), \+static_predicate(notAssertable/1), \+prologDynamic(notAssertable)->rhs([hybrid_support(notAssertable, 1), {A=arity(notAssertable, 1)}, A])))).
spft(arity(notAssertable, 1), support_hilog(notAssertable, 1), pt(support_hilog(notAssertable, 1),  (notAssertable\='$VAR', atom(notAssertable), integer(1), \+static_predicate(notAssertable/1), \+prologDynamic(notAssertable)->rhs([hybrid_support(notAssertable, 1), {arity(notAssertable, 1)=arity(notAssertable, 1)}, arity(notAssertable, 1)])))).
spft(tSet(notAssertable), ttPredType(notAssertable), pt(ttPredType(notAssertable), rhs([tSet(notAssertable), completelyAssertedCollection(notAssertable)]))).
spft(completelyAssertedCollection(notAssertable), tSet(notAssertable), pt(tSet(notAssertable), rhs([completelyAssertedCollection(notAssertable)]))).
spft(tCol(notAssertable), completelyAssertedCollection(notAssertable), pt(completelyAssertedCollection(notAssertable), rhs([tCol(notAssertable)]))).
spft(completelyAssertedCollection(notAssertable), ttPredType(notAssertable), pt(ttPredType(notAssertable), rhs([tSet(notAssertable), completelyAssertedCollection(notAssertable)]))).
spft(ttPredType(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin), rhs([tCol(prologBuiltin)]))).
spft(arity(prologBuiltin, 1), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin),  (atom(prologBuiltin)->rhs([arity(prologBuiltin, 1), pfcControlled(prologBuiltin)])))).
spft(pfcControlled(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin),  (atom(prologBuiltin)->rhs([arity(prologBuiltin, 1), pfcControlled(prologBuiltin)])))).
spft(pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)])), pfcControlled(prologBuiltin), pt(pfcControlled(prologBuiltin), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)])))).
spft(hybrid_support(prologBuiltin, 1), arity(prologBuiltin, 1), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)]))).
spft(hybrid_support(prologBuiltin, 1), arity(prologBuiltin, 1), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)]))).
spft(hybrid_support(prologBuiltin, 1), arity(prologBuiltin, 1), pt(arity(prologBuiltin, A), rhs([hybrid_support(prologBuiltin, A)]))).
spft(support_hilog(prologBuiltin, 1), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin),  (atom(prologBuiltin)->rhs([support_hilog(prologBuiltin, 1)])))).
spft(hybrid_support(prologBuiltin, 1), support_hilog(prologBuiltin, 1), pt(support_hilog(prologBuiltin, 1),  (prologBuiltin\='$VAR', atom(prologBuiltin), integer(1), \+static_predicate(prologBuiltin/1), \+prologDynamic(prologBuiltin)->rhs([hybrid_support(prologBuiltin, 1), {A=arity(prologBuiltin, 1)}, A])))).
spft(arity(prologBuiltin, 1), support_hilog(prologBuiltin, 1), pt(support_hilog(prologBuiltin, 1),  (prologBuiltin\='$VAR', atom(prologBuiltin), integer(1), \+static_predicate(prologBuiltin/1), \+prologDynamic(prologBuiltin)->rhs([hybrid_support(prologBuiltin, 1), {arity(prologBuiltin, 1)=arity(prologBuiltin, 1)}, arity(prologBuiltin, 1)])))).
spft(tSet(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin), rhs([tSet(prologBuiltin), completelyAssertedCollection(prologBuiltin)]))).
spft(completelyAssertedCollection(prologBuiltin), tSet(prologBuiltin), pt(tSet(prologBuiltin), rhs([completelyAssertedCollection(prologBuiltin)]))).
spft(completelyAssertedCollection(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(prologBuiltin), rhs([tSet(prologBuiltin), completelyAssertedCollection(prologBuiltin)]))).
spft(ttPredType(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(prologDynamic), rhs([tCol(prologDynamic)]))).
spft(arity(prologDynamic, 1), ttPredType(prologDynamic), pt(ttPredType(prologDynamic),  (atom(prologDynamic)->rhs([arity(prologDynamic, 1), pfcControlled(prologDynamic)])))).
spft(pfcControlled(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(prologDynamic),  (atom(prologDynamic)->rhs([arity(prologDynamic, 1), pfcControlled(prologDynamic)])))).
spft(pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)])), pfcControlled(prologDynamic), pt(pfcControlled(prologDynamic), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)])))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(prologHybrid(prologDynamic), hybrid_support(prologDynamic, 1), pt(hybrid_support(prologDynamic, 1),  (prologDynamic\='$VAR', atom(prologDynamic), integer(1), \+prologDynamic(prologDynamic), \+static_predicate(prologDynamic/1)->rhs([{functor(prologDynamic(A), prologDynamic, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologDynamic, baseKB:prologDynamic(A)), \+predicate_property(baseKB:prologDynamic(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologDynamic(A), exported);true), kb_dynamic(baseKB:prologDynamic/1), show_failure(hybrid_support, \+static_predicate(prologDynamic/1))}, prologHybrid(prologDynamic), arity(prologDynamic, 1)])))).
spft(pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)])), prologHybrid(prologDynamic), pt(prologHybrid(prologDynamic), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)])))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(arity(prologDynamic, 1), hybrid_support(prologDynamic, 1), pt(hybrid_support(prologDynamic, 1),  (prologDynamic\='$VAR', atom(prologDynamic), integer(1), \+prologDynamic(prologDynamic), \+static_predicate(prologDynamic/1)->rhs([{functor(prologDynamic(A), prologDynamic, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologDynamic, baseKB:prologDynamic(A)), \+predicate_property(baseKB:prologDynamic(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologDynamic(A), exported);true), kb_dynamic(baseKB:prologDynamic/1), show_failure(hybrid_support, \+static_predicate(prologDynamic/1))}, prologHybrid(prologDynamic), arity(prologDynamic, 1)])))).
spft(prologHybrid(prologDynamic), hybrid_support(prologDynamic, 1), pt(hybrid_support(prologDynamic, 1), rhs([prologHybrid(prologDynamic), arity(prologDynamic, 1)]))).
spft(arity(prologDynamic, 1), hybrid_support(prologDynamic, 1), pt(hybrid_support(prologDynamic, 1), rhs([prologHybrid(prologDynamic), arity(prologDynamic, 1)]))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(hybrid_support(prologDynamic, 1), arity(prologDynamic, 1), pt(arity(prologDynamic, A), rhs([hybrid_support(prologDynamic, A)]))).
spft(support_hilog(prologDynamic, 1), ttPredType(prologDynamic), pt(ttPredType(prologDynamic),  (atom(prologDynamic)->rhs([support_hilog(prologDynamic, 1)])))).
spft(hybrid_support(prologDynamic, 1), support_hilog(prologDynamic, 1), pt(support_hilog(prologDynamic, 1),  (prologDynamic\='$VAR', atom(prologDynamic), integer(1), \+static_predicate(prologDynamic/1), \+prologDynamic(prologDynamic)->rhs([hybrid_support(prologDynamic, 1), {A=arity(prologDynamic, 1)}, A])))).
spft(arity(prologDynamic, 1), support_hilog(prologDynamic, 1), pt(support_hilog(prologDynamic, 1),  (prologDynamic\='$VAR', atom(prologDynamic), integer(1), \+static_predicate(prologDynamic/1), \+prologDynamic(prologDynamic)->rhs([hybrid_support(prologDynamic, 1), {arity(prologDynamic, 1)=arity(prologDynamic, 1)}, arity(prologDynamic, 1)])))).
spft(tSet(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(prologDynamic), rhs([tSet(prologDynamic), completelyAssertedCollection(prologDynamic)]))).
spft(completelyAssertedCollection(prologDynamic), tSet(prologDynamic), pt(tSet(prologDynamic), rhs([completelyAssertedCollection(prologDynamic)]))).
spft(completelyAssertedCollection(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(prologDynamic), rhs([tSet(prologDynamic), completelyAssertedCollection(prologDynamic)]))).
spft(ttPredType(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(prologOrdered), rhs([tCol(prologOrdered)]))).
spft(arity(prologOrdered, 1), ttPredType(prologOrdered), pt(ttPredType(prologOrdered),  (atom(prologOrdered)->rhs([arity(prologOrdered, 1), pfcControlled(prologOrdered)])))).
spft(pfcControlled(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(prologOrdered),  (atom(prologOrdered)->rhs([arity(prologOrdered, 1), pfcControlled(prologOrdered)])))).
spft(pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)])), pfcControlled(prologOrdered), pt(pfcControlled(prologOrdered), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)])))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(prologHybrid(prologOrdered), hybrid_support(prologOrdered, 1), pt(hybrid_support(prologOrdered, 1),  (prologOrdered\='$VAR', atom(prologOrdered), integer(1), \+prologDynamic(prologOrdered), \+static_predicate(prologOrdered/1)->rhs([{functor(prologOrdered(A), prologOrdered, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologOrdered, baseKB:prologOrdered(A)), \+predicate_property(baseKB:prologOrdered(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologOrdered(A), exported);true), kb_dynamic(baseKB:prologOrdered/1), show_failure(hybrid_support, \+static_predicate(prologOrdered/1))}, prologHybrid(prologOrdered), arity(prologOrdered, 1)])))).
spft(pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)])), prologHybrid(prologOrdered), pt(prologHybrid(prologOrdered), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)])))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(arity(prologOrdered, 1), hybrid_support(prologOrdered, 1), pt(hybrid_support(prologOrdered, 1),  (prologOrdered\='$VAR', atom(prologOrdered), integer(1), \+prologDynamic(prologOrdered), \+static_predicate(prologOrdered/1)->rhs([{functor(prologOrdered(A), prologOrdered, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologOrdered, baseKB:prologOrdered(A)), \+predicate_property(baseKB:prologOrdered(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologOrdered(A), exported);true), kb_dynamic(baseKB:prologOrdered/1), show_failure(hybrid_support, \+static_predicate(prologOrdered/1))}, prologHybrid(prologOrdered), arity(prologOrdered, 1)])))).
spft(prologHybrid(prologOrdered), hybrid_support(prologOrdered, 1), pt(hybrid_support(prologOrdered, 1), rhs([prologHybrid(prologOrdered), arity(prologOrdered, 1)]))).
spft(arity(prologOrdered, 1), hybrid_support(prologOrdered, 1), pt(hybrid_support(prologOrdered, 1), rhs([prologHybrid(prologOrdered), arity(prologOrdered, 1)]))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(hybrid_support(prologOrdered, 1), arity(prologOrdered, 1), pt(arity(prologOrdered, A), rhs([hybrid_support(prologOrdered, A)]))).
spft(support_hilog(prologOrdered, 1), ttPredType(prologOrdered), pt(ttPredType(prologOrdered),  (atom(prologOrdered)->rhs([support_hilog(prologOrdered, 1)])))).
spft(hybrid_support(prologOrdered, 1), support_hilog(prologOrdered, 1), pt(support_hilog(prologOrdered, 1),  (prologOrdered\='$VAR', atom(prologOrdered), integer(1), \+static_predicate(prologOrdered/1), \+prologDynamic(prologOrdered)->rhs([hybrid_support(prologOrdered, 1), {A=arity(prologOrdered, 1)}, A])))).
spft(arity(prologOrdered, 1), support_hilog(prologOrdered, 1), pt(support_hilog(prologOrdered, 1),  (prologOrdered\='$VAR', atom(prologOrdered), integer(1), \+static_predicate(prologOrdered/1), \+prologDynamic(prologOrdered)->rhs([hybrid_support(prologOrdered, 1), {arity(prologOrdered, 1)=arity(prologOrdered, 1)}, arity(prologOrdered, 1)])))).
spft(tSet(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(prologOrdered), rhs([tSet(prologOrdered), completelyAssertedCollection(prologOrdered)]))).
spft(completelyAssertedCollection(prologOrdered), tSet(prologOrdered), pt(tSet(prologOrdered), rhs([completelyAssertedCollection(prologOrdered)]))).
spft(completelyAssertedCollection(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(prologOrdered), rhs([tSet(prologOrdered), completelyAssertedCollection(prologOrdered)]))).
spft(ttPredType(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure), rhs([tCol(prologNegByFailure)]))).
spft(arity(prologNegByFailure, 1), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure),  (atom(prologNegByFailure)->rhs([arity(prologNegByFailure, 1), pfcControlled(prologNegByFailure)])))).
spft(pfcControlled(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure),  (atom(prologNegByFailure)->rhs([arity(prologNegByFailure, 1), pfcControlled(prologNegByFailure)])))).
spft(pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)])), pfcControlled(prologNegByFailure), pt(pfcControlled(prologNegByFailure), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)])))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(prologHybrid(prologNegByFailure), hybrid_support(prologNegByFailure, 1), pt(hybrid_support(prologNegByFailure, 1),  (prologNegByFailure\='$VAR', atom(prologNegByFailure), integer(1), \+prologDynamic(prologNegByFailure), \+static_predicate(prologNegByFailure/1)->rhs([{functor(prologNegByFailure(A), prologNegByFailure, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologNegByFailure, baseKB:prologNegByFailure(A)), \+predicate_property(baseKB:prologNegByFailure(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologNegByFailure(A), exported);true), kb_dynamic(baseKB:prologNegByFailure/1), show_failure(hybrid_support, \+static_predicate(prologNegByFailure/1))}, prologHybrid(prologNegByFailure), arity(prologNegByFailure, 1)])))).
spft(pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)])), prologHybrid(prologNegByFailure), pt(prologHybrid(prologNegByFailure), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)])))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(arity(prologNegByFailure, 1), hybrid_support(prologNegByFailure, 1), pt(hybrid_support(prologNegByFailure, 1),  (prologNegByFailure\='$VAR', atom(prologNegByFailure), integer(1), \+prologDynamic(prologNegByFailure), \+static_predicate(prologNegByFailure/1)->rhs([{functor(prologNegByFailure(A), prologNegByFailure, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologNegByFailure, baseKB:prologNegByFailure(A)), \+predicate_property(baseKB:prologNegByFailure(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologNegByFailure(A), exported);true), kb_dynamic(baseKB:prologNegByFailure/1), show_failure(hybrid_support, \+static_predicate(prologNegByFailure/1))}, prologHybrid(prologNegByFailure), arity(prologNegByFailure, 1)])))).
spft(prologHybrid(prologNegByFailure), hybrid_support(prologNegByFailure, 1), pt(hybrid_support(prologNegByFailure, 1), rhs([prologHybrid(prologNegByFailure), arity(prologNegByFailure, 1)]))).
spft(arity(prologNegByFailure, 1), hybrid_support(prologNegByFailure, 1), pt(hybrid_support(prologNegByFailure, 1), rhs([prologHybrid(prologNegByFailure), arity(prologNegByFailure, 1)]))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(hybrid_support(prologNegByFailure, 1), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, A), rhs([hybrid_support(prologNegByFailure, A)]))).
spft(support_hilog(prologNegByFailure, 1), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure),  (atom(prologNegByFailure)->rhs([support_hilog(prologNegByFailure, 1)])))).
spft(hybrid_support(prologNegByFailure, 1), support_hilog(prologNegByFailure, 1), pt(support_hilog(prologNegByFailure, 1),  (prologNegByFailure\='$VAR', atom(prologNegByFailure), integer(1), \+static_predicate(prologNegByFailure/1), \+prologDynamic(prologNegByFailure)->rhs([hybrid_support(prologNegByFailure, 1), {A=arity(prologNegByFailure, 1)}, A])))).
spft(arity(prologNegByFailure, 1), support_hilog(prologNegByFailure, 1), pt(support_hilog(prologNegByFailure, 1),  (prologNegByFailure\='$VAR', atom(prologNegByFailure), integer(1), \+static_predicate(prologNegByFailure/1), \+prologDynamic(prologNegByFailure)->rhs([hybrid_support(prologNegByFailure, 1), {arity(prologNegByFailure, 1)=arity(prologNegByFailure, 1)}, arity(prologNegByFailure, 1)])))).
spft(tSet(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure), rhs([tSet(prologNegByFailure), completelyAssertedCollection(prologNegByFailure)]))).
spft(completelyAssertedCollection(prologNegByFailure), tSet(prologNegByFailure), pt(tSet(prologNegByFailure), rhs([completelyAssertedCollection(prologNegByFailure)]))).
spft(completelyAssertedCollection(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(prologNegByFailure), rhs([tSet(prologNegByFailure), completelyAssertedCollection(prologNegByFailure)]))).
spft(ttPredType(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(prologPTTP), rhs([tCol(prologPTTP)]))).
spft(arity(prologPTTP, 1), ttPredType(prologPTTP), pt(ttPredType(prologPTTP),  (atom(prologPTTP)->rhs([arity(prologPTTP, 1), pfcControlled(prologPTTP)])))).
spft(pfcControlled(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(prologPTTP),  (atom(prologPTTP)->rhs([arity(prologPTTP, 1), pfcControlled(prologPTTP)])))).
spft(pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)])), pfcControlled(prologPTTP), pt(pfcControlled(prologPTTP), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)])))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(prologHybrid(prologPTTP), hybrid_support(prologPTTP, 1), pt(hybrid_support(prologPTTP, 1),  (prologPTTP\='$VAR', atom(prologPTTP), integer(1), \+prologDynamic(prologPTTP), \+static_predicate(prologPTTP/1)->rhs([{functor(prologPTTP(A), prologPTTP, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologPTTP, baseKB:prologPTTP(A)), \+predicate_property(baseKB:prologPTTP(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologPTTP(A), exported);true), kb_dynamic(baseKB:prologPTTP/1), show_failure(hybrid_support, \+static_predicate(prologPTTP/1))}, prologHybrid(prologPTTP), arity(prologPTTP, 1)])))).
spft(pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)])), prologHybrid(prologPTTP), pt(prologHybrid(prologPTTP), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)])))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(arity(prologPTTP, 1), hybrid_support(prologPTTP, 1), pt(hybrid_support(prologPTTP, 1),  (prologPTTP\='$VAR', atom(prologPTTP), integer(1), \+prologDynamic(prologPTTP), \+static_predicate(prologPTTP/1)->rhs([{functor(prologPTTP(A), prologPTTP, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologPTTP, baseKB:prologPTTP(A)), \+predicate_property(baseKB:prologPTTP(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologPTTP(A), exported);true), kb_dynamic(baseKB:prologPTTP/1), show_failure(hybrid_support, \+static_predicate(prologPTTP/1))}, prologHybrid(prologPTTP), arity(prologPTTP, 1)])))).
spft(prologHybrid(prologPTTP), hybrid_support(prologPTTP, 1), pt(hybrid_support(prologPTTP, 1), rhs([prologHybrid(prologPTTP), arity(prologPTTP, 1)]))).
spft(arity(prologPTTP, 1), hybrid_support(prologPTTP, 1), pt(hybrid_support(prologPTTP, 1), rhs([prologHybrid(prologPTTP), arity(prologPTTP, 1)]))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(hybrid_support(prologPTTP, 1), arity(prologPTTP, 1), pt(arity(prologPTTP, A), rhs([hybrid_support(prologPTTP, A)]))).
spft(support_hilog(prologPTTP, 1), ttPredType(prologPTTP), pt(ttPredType(prologPTTP),  (atom(prologPTTP)->rhs([support_hilog(prologPTTP, 1)])))).
spft(hybrid_support(prologPTTP, 1), support_hilog(prologPTTP, 1), pt(support_hilog(prologPTTP, 1),  (prologPTTP\='$VAR', atom(prologPTTP), integer(1), \+static_predicate(prologPTTP/1), \+prologDynamic(prologPTTP)->rhs([hybrid_support(prologPTTP, 1), {A=arity(prologPTTP, 1)}, A])))).
spft(arity(prologPTTP, 1), support_hilog(prologPTTP, 1), pt(support_hilog(prologPTTP, 1),  (prologPTTP\='$VAR', atom(prologPTTP), integer(1), \+static_predicate(prologPTTP/1), \+prologDynamic(prologPTTP)->rhs([hybrid_support(prologPTTP, 1), {arity(prologPTTP, 1)=arity(prologPTTP, 1)}, arity(prologPTTP, 1)])))).
spft(tSet(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(prologPTTP), rhs([tSet(prologPTTP), completelyAssertedCollection(prologPTTP)]))).
spft(completelyAssertedCollection(prologPTTP), tSet(prologPTTP), pt(tSet(prologPTTP), rhs([completelyAssertedCollection(prologPTTP)]))).
spft(completelyAssertedCollection(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(prologPTTP), rhs([tSet(prologPTTP), completelyAssertedCollection(prologPTTP)]))).
spft(ttPredType(prologKIF), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologKIF), ttPredType(prologKIF), pt(ttPredType(prologKIF), rhs([tCol(prologKIF)]))).
spft(arity(prologKIF, 1), ttPredType(prologKIF), pt(ttPredType(prologKIF),  (atom(prologKIF)->rhs([arity(prologKIF, 1), pfcControlled(prologKIF)])))).
spft(pfcControlled(prologKIF), ttPredType(prologKIF), pt(ttPredType(prologKIF),  (atom(prologKIF)->rhs([arity(prologKIF, 1), pfcControlled(prologKIF)])))).
spft(pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)])), pfcControlled(prologKIF), pt(pfcControlled(prologKIF), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)])))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(prologHybrid(prologKIF), hybrid_support(prologKIF, 1), pt(hybrid_support(prologKIF, 1),  (prologKIF\='$VAR', atom(prologKIF), integer(1), \+prologDynamic(prologKIF), \+static_predicate(prologKIF/1)->rhs([{functor(prologKIF(A), prologKIF, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologKIF, baseKB:prologKIF(A)), \+predicate_property(baseKB:prologKIF(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologKIF(A), exported);true), kb_dynamic(baseKB:prologKIF/1), show_failure(hybrid_support, \+static_predicate(prologKIF/1))}, prologHybrid(prologKIF), arity(prologKIF, 1)])))).
spft(pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)])), prologHybrid(prologKIF), pt(prologHybrid(prologKIF), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)])))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(arity(prologKIF, 1), hybrid_support(prologKIF, 1), pt(hybrid_support(prologKIF, 1),  (prologKIF\='$VAR', atom(prologKIF), integer(1), \+prologDynamic(prologKIF), \+static_predicate(prologKIF/1)->rhs([{functor(prologKIF(A), prologKIF, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologKIF, baseKB:prologKIF(A)), \+predicate_property(baseKB:prologKIF(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologKIF(A), exported);true), kb_dynamic(baseKB:prologKIF/1), show_failure(hybrid_support, \+static_predicate(prologKIF/1))}, prologHybrid(prologKIF), arity(prologKIF, 1)])))).
spft(prologHybrid(prologKIF), hybrid_support(prologKIF, 1), pt(hybrid_support(prologKIF, 1), rhs([prologHybrid(prologKIF), arity(prologKIF, 1)]))).
spft(arity(prologKIF, 1), hybrid_support(prologKIF, 1), pt(hybrid_support(prologKIF, 1), rhs([prologHybrid(prologKIF), arity(prologKIF, 1)]))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(hybrid_support(prologKIF, 1), arity(prologKIF, 1), pt(arity(prologKIF, A), rhs([hybrid_support(prologKIF, A)]))).
spft(support_hilog(prologKIF, 1), ttPredType(prologKIF), pt(ttPredType(prologKIF),  (atom(prologKIF)->rhs([support_hilog(prologKIF, 1)])))).
spft(hybrid_support(prologKIF, 1), support_hilog(prologKIF, 1), pt(support_hilog(prologKIF, 1),  (prologKIF\='$VAR', atom(prologKIF), integer(1), \+static_predicate(prologKIF/1), \+prologDynamic(prologKIF)->rhs([hybrid_support(prologKIF, 1), {A=arity(prologKIF, 1)}, A])))).
spft(arity(prologKIF, 1), support_hilog(prologKIF, 1), pt(support_hilog(prologKIF, 1),  (prologKIF\='$VAR', atom(prologKIF), integer(1), \+static_predicate(prologKIF/1), \+prologDynamic(prologKIF)->rhs([hybrid_support(prologKIF, 1), {arity(prologKIF, 1)=arity(prologKIF, 1)}, arity(prologKIF, 1)])))).
spft(tSet(prologKIF), ttPredType(prologKIF), pt(ttPredType(prologKIF), rhs([tSet(prologKIF), completelyAssertedCollection(prologKIF)]))).
spft(completelyAssertedCollection(prologKIF), tSet(prologKIF), pt(tSet(prologKIF), rhs([completelyAssertedCollection(prologKIF)]))).
spft(completelyAssertedCollection(prologKIF), ttPredType(prologKIF), pt(ttPredType(prologKIF), rhs([tSet(prologKIF), completelyAssertedCollection(prologKIF)]))).
spft(ttPredType(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologEquality), ttPredType(prologEquality), pt(ttPredType(prologEquality), rhs([tCol(prologEquality)]))).
spft(arity(prologEquality, 1), tCol(prologEquality), pt(tCol(prologEquality),  (atom(prologEquality), prologEquality(A)=..[prologEquality, A]->rhs([{decl_type(prologEquality)}, arity(prologEquality, 1), mpred_univ(prologEquality, A, prologEquality(A))])))).
spft(mpred_univ(prologEquality, A, prologEquality(A)), tCol(prologEquality), pt(tCol(prologEquality),  (atom(prologEquality), prologEquality(A)=..[prologEquality, A]->rhs([{decl_type(prologEquality)}, arity(prologEquality, 1), mpred_univ(prologEquality, A, prologEquality(A))])))).
spft((prologEquality(A):-cwc, lazy(\+ ~prologEquality(A)), isa_backchaing(A, prologEquality)), tCol(prologEquality), pt(tCol(prologEquality),  (atom(prologEquality), prologEquality(A)=..[prologEquality, A], \+static_predicate(prologEquality/1), \+completelyAssertedCollection(prologEquality)->rhs([(prologEquality(A):-cwc, lazy(\+ ~prologEquality(A)), isa_backchaing(A, prologEquality))])))).
spft(arity(prologEquality, 1), ttPredType(prologEquality), pt(ttPredType(prologEquality),  (atom(prologEquality)->rhs([arity(prologEquality, 1), pfcControlled(prologEquality)])))).
spft(pfcControlled(prologEquality), ttPredType(prologEquality), pt(ttPredType(prologEquality),  (atom(prologEquality)->rhs([arity(prologEquality, 1), pfcControlled(prologEquality)])))).
spft(pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)])), pfcControlled(prologEquality), pt(pfcControlled(prologEquality), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)])))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(prologHybrid(prologEquality), hybrid_support(prologEquality, 1), pt(hybrid_support(prologEquality, 1),  (prologEquality\='$VAR', atom(prologEquality), integer(1), \+prologDynamic(prologEquality), \+static_predicate(prologEquality/1)->rhs([{functor(prologEquality(A), prologEquality, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologEquality, baseKB:prologEquality(A)), \+predicate_property(baseKB:prologEquality(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologEquality(A), exported);true), kb_dynamic(baseKB:prologEquality/1), show_failure(hybrid_support, \+static_predicate(prologEquality/1))}, prologHybrid(prologEquality), arity(prologEquality, 1)])))).
spft(pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)])), prologHybrid(prologEquality), pt(prologHybrid(prologEquality), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)])))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(arity(prologEquality, 1), hybrid_support(prologEquality, 1), pt(hybrid_support(prologEquality, 1),  (prologEquality\='$VAR', atom(prologEquality), integer(1), \+prologDynamic(prologEquality), \+static_predicate(prologEquality/1)->rhs([{functor(prologEquality(A), prologEquality, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologEquality, baseKB:prologEquality(A)), \+predicate_property(baseKB:prologEquality(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologEquality(A), exported);true), kb_dynamic(baseKB:prologEquality/1), show_failure(hybrid_support, \+static_predicate(prologEquality/1))}, prologHybrid(prologEquality), arity(prologEquality, 1)])))).
spft(prologHybrid(prologEquality), hybrid_support(prologEquality, 1), pt(hybrid_support(prologEquality, 1), rhs([prologHybrid(prologEquality), arity(prologEquality, 1)]))).
spft(arity(prologEquality, 1), hybrid_support(prologEquality, 1), pt(hybrid_support(prologEquality, 1), rhs([prologHybrid(prologEquality), arity(prologEquality, 1)]))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(hybrid_support(prologEquality, 1), arity(prologEquality, 1), pt(arity(prologEquality, A), rhs([hybrid_support(prologEquality, A)]))).
spft(support_hilog(prologEquality, 1), ttPredType(prologEquality), pt(ttPredType(prologEquality),  (atom(prologEquality)->rhs([support_hilog(prologEquality, 1)])))).
spft(hybrid_support(prologEquality, 1), support_hilog(prologEquality, 1), pt(support_hilog(prologEquality, 1),  (prologEquality\='$VAR', atom(prologEquality), integer(1), \+static_predicate(prologEquality/1), \+prologDynamic(prologEquality)->rhs([hybrid_support(prologEquality, 1), {A=arity(prologEquality, 1)}, A])))).
spft(arity(prologEquality, 1), support_hilog(prologEquality, 1), pt(support_hilog(prologEquality, 1),  (prologEquality\='$VAR', atom(prologEquality), integer(1), \+static_predicate(prologEquality/1), \+prologDynamic(prologEquality)->rhs([hybrid_support(prologEquality, 1), {arity(prologEquality, 1)=arity(prologEquality, 1)}, arity(prologEquality, 1)])))).
spft(tSet(prologEquality), ttPredType(prologEquality), pt(ttPredType(prologEquality), rhs([tSet(prologEquality), completelyAssertedCollection(prologEquality)]))).
spft(completelyAssertedCollection(prologEquality), tSet(prologEquality), pt(tSet(prologEquality), rhs([completelyAssertedCollection(prologEquality)]))).
spft(tCol(prologEquality), completelyAssertedCollection(prologEquality), pt(completelyAssertedCollection(prologEquality), rhs([tCol(prologEquality)]))).
spft(completelyAssertedCollection(prologEquality), ttPredType(prologEquality), pt(ttPredType(prologEquality), rhs([tSet(prologEquality), completelyAssertedCollection(prologEquality)]))).
spft(ttPredType(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(ttPredType(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(prologHybrid), rhs([tCol(prologHybrid)]))).
spft(arity(prologHybrid, 1), ttPredType(prologHybrid), pt(ttPredType(prologHybrid),  (atom(prologHybrid)->rhs([arity(prologHybrid, 1), pfcControlled(prologHybrid)])))).
spft(pfcControlled(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(prologHybrid),  (atom(prologHybrid)->rhs([arity(prologHybrid, 1), pfcControlled(prologHybrid)])))).
spft(pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)])), pfcControlled(prologHybrid), pt(pfcControlled(prologHybrid), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)])))).
spft(hybrid_support(prologHybrid, 1), arity(prologHybrid, 1), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)]))).
spft(hybrid_support(prologHybrid, 1), arity(prologHybrid, 1), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)]))).
spft(hybrid_support(prologHybrid, 1), arity(prologHybrid, 1), pt(arity(prologHybrid, A), rhs([hybrid_support(prologHybrid, A)]))).
spft(support_hilog(prologHybrid, 1), ttPredType(prologHybrid), pt(ttPredType(prologHybrid),  (atom(prologHybrid)->rhs([support_hilog(prologHybrid, 1)])))).
spft(hybrid_support(prologHybrid, 1), support_hilog(prologHybrid, 1), pt(support_hilog(prologHybrid, 1),  (prologHybrid\='$VAR', atom(prologHybrid), integer(1), \+static_predicate(prologHybrid/1), \+prologDynamic(prologHybrid)->rhs([hybrid_support(prologHybrid, 1), {A=arity(prologHybrid, 1)}, A])))).
spft(arity(prologHybrid, 1), support_hilog(prologHybrid, 1), pt(support_hilog(prologHybrid, 1),  (prologHybrid\='$VAR', atom(prologHybrid), integer(1), \+static_predicate(prologHybrid/1), \+prologDynamic(prologHybrid)->rhs([hybrid_support(prologHybrid, 1), {arity(prologHybrid, 1)=arity(prologHybrid, 1)}, arity(prologHybrid, 1)])))).
spft(tSet(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(prologHybrid), rhs([tSet(prologHybrid), completelyAssertedCollection(prologHybrid)]))).
spft(completelyAssertedCollection(prologHybrid), tSet(prologHybrid), pt(tSet(prologHybrid), rhs([completelyAssertedCollection(prologHybrid)]))).
spft(completelyAssertedCollection(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(prologHybrid), rhs([tSet(prologHybrid), completelyAssertedCollection(prologHybrid)]))).
spft(ttPredType(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 377), ax).
spft(tCol(prologListValued), ttPredType(prologListValued), pt(ttPredType(prologListValued), rhs([tCol(prologListValued)]))).
spft(arity(prologListValued, 1), ttPredType(prologListValued), pt(ttPredType(prologListValued),  (atom(prologListValued)->rhs([arity(prologListValued, 1), pfcControlled(prologListValued)])))).
spft(pfcControlled(prologListValued), ttPredType(prologListValued), pt(ttPredType(prologListValued),  (atom(prologListValued)->rhs([arity(prologListValued, 1), pfcControlled(prologListValued)])))).
spft(pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)])), pfcControlled(prologListValued), pt(pfcControlled(prologListValued), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)])))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(prologHybrid(prologListValued), hybrid_support(prologListValued, 1), pt(hybrid_support(prologListValued, 1),  (prologListValued\='$VAR', atom(prologListValued), integer(1), \+prologDynamic(prologListValued), \+static_predicate(prologListValued/1)->rhs([{functor(prologListValued(A), prologListValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologListValued, baseKB:prologListValued(A)), \+predicate_property(baseKB:prologListValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologListValued(A), exported);true), kb_dynamic(baseKB:prologListValued/1), show_failure(hybrid_support, \+static_predicate(prologListValued/1))}, prologHybrid(prologListValued), arity(prologListValued, 1)])))).
spft(pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)])), prologHybrid(prologListValued), pt(prologHybrid(prologListValued), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)])))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(arity(prologListValued, 1), hybrid_support(prologListValued, 1), pt(hybrid_support(prologListValued, 1),  (prologListValued\='$VAR', atom(prologListValued), integer(1), \+prologDynamic(prologListValued), \+static_predicate(prologListValued/1)->rhs([{functor(prologListValued(A), prologListValued, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(prologListValued, baseKB:prologListValued(A)), \+predicate_property(baseKB:prologListValued(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:prologListValued(A), exported);true), kb_dynamic(baseKB:prologListValued/1), show_failure(hybrid_support, \+static_predicate(prologListValued/1))}, prologHybrid(prologListValued), arity(prologListValued, 1)])))).
spft(prologHybrid(prologListValued), hybrid_support(prologListValued, 1), pt(hybrid_support(prologListValued, 1), rhs([prologHybrid(prologListValued), arity(prologListValued, 1)]))).
spft(arity(prologListValued, 1), hybrid_support(prologListValued, 1), pt(hybrid_support(prologListValued, 1), rhs([prologHybrid(prologListValued), arity(prologListValued, 1)]))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(hybrid_support(prologListValued, 1), arity(prologListValued, 1), pt(arity(prologListValued, A), rhs([hybrid_support(prologListValued, A)]))).
spft(support_hilog(prologListValued, 1), ttPredType(prologListValued), pt(ttPredType(prologListValued),  (atom(prologListValued)->rhs([support_hilog(prologListValued, 1)])))).
spft(hybrid_support(prologListValued, 1), support_hilog(prologListValued, 1), pt(support_hilog(prologListValued, 1),  (prologListValued\='$VAR', atom(prologListValued), integer(1), \+static_predicate(prologListValued/1), \+prologDynamic(prologListValued)->rhs([hybrid_support(prologListValued, 1), {A=arity(prologListValued, 1)}, A])))).
spft(arity(prologListValued, 1), support_hilog(prologListValued, 1), pt(support_hilog(prologListValued, 1),  (prologListValued\='$VAR', atom(prologListValued), integer(1), \+static_predicate(prologListValued/1), \+prologDynamic(prologListValued)->rhs([hybrid_support(prologListValued, 1), {arity(prologListValued, 1)=arity(prologListValued, 1)}, arity(prologListValued, 1)])))).
spft(tSet(prologListValued), ttPredType(prologListValued), pt(ttPredType(prologListValued), rhs([tSet(prologListValued), completelyAssertedCollection(prologListValued)]))).
spft(completelyAssertedCollection(prologListValued), tSet(prologListValued), pt(tSet(prologListValued), rhs([completelyAssertedCollection(prologListValued)]))).
spft(completelyAssertedCollection(prologListValued), ttPredType(prologListValued), pt(ttPredType(prologListValued), rhs([tSet(prologListValued), completelyAssertedCollection(prologListValued)]))).
spft(completelyAssertedCollection(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 381), ax).
spft(completelyAssertedCollection(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 381), ax).
spft(completelyAssertedCollection(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 381), ax).
spft((ttPredType(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 382), ax).
spft(pt(ttPredType(A), rhs([completelyAssertedCollection(A)])),  (ttPredType(B)==>completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 382)).
spft(completelyAssertedCollection(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(tPred), ttPredType(tPred), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(notAssertable), ttPredType(notAssertable), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologKIF), ttPredType(prologKIF), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologEquality), ttPredType(prologEquality), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(completelyAssertedCollection(prologListValued), ttPredType(prologListValued), pt(ttPredType(A), rhs([completelyAssertedCollection(A)]))).
spft(~ttFormatType(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 385), ax).
spft(ttPredType(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 386), ax).
spft(tSpec(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 387), ax).
spft(prologEquality(mudEquals), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 388), ax).
spft(prologEquality(=), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 389), ax).
spft(prologEquality(==), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 390), ax).
spft(~prologEquality(','), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 392), ax).
spft(tCol(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 394), ax).
spft(tCol(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 394), ax).
spft(tCol(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 394), ax).
spft(tCol(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 395), ax).
spft(tCol(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 396), ax).
spft(ttPredType(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 397), ax).
spft(ttPredType(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 398), ax).
spft(ttPredType(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 399), ax).
spft(ttPredType(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 400), ax).
spft(ttPredType(prologKIF), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 401), ax).
spft(ttPredType(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 402), ax).
spft(ttPredType(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 403), ax).
spft(pfcControlled(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 405), ax).
spft(pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)])), pfcControlled(genlPreds), pt(pfcControlled(genlPreds), pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)])))).
spft(hybrid_support(genlPreds, 2), arity(genlPreds, 2), pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)]))).
spft(prologHybrid(genlPreds), hybrid_support(genlPreds, 2), pt(hybrid_support(genlPreds, 2),  (genlPreds\='$VAR', atom(genlPreds), integer(2), \+prologDynamic(genlPreds), \+static_predicate(genlPreds/2)->rhs([{functor(genlPreds(A, B), genlPreds, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genlPreds, baseKB:genlPreds(A, B)), \+predicate_property(baseKB:genlPreds(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genlPreds(A, B), exported);true), kb_dynamic(baseKB:genlPreds/2), show_failure(hybrid_support, \+static_predicate(genlPreds/2))}, prologHybrid(genlPreds), arity(genlPreds, 2)])))).
spft(pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)])), prologHybrid(genlPreds), pt(prologHybrid(genlPreds), pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)])))).
spft(hybrid_support(genlPreds, 2), arity(genlPreds, 2), pt(arity(genlPreds, A), rhs([hybrid_support(genlPreds, A)]))).
spft(arity(genlPreds, 2), hybrid_support(genlPreds, 2), pt(hybrid_support(genlPreds, 2),  (genlPreds\='$VAR', atom(genlPreds), integer(2), \+prologDynamic(genlPreds), \+static_predicate(genlPreds/2)->rhs([{functor(genlPreds(A, B), genlPreds, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genlPreds, baseKB:genlPreds(A, B)), \+predicate_property(baseKB:genlPreds(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genlPreds(A, B), exported);true), kb_dynamic(baseKB:genlPreds/2), show_failure(hybrid_support, \+static_predicate(genlPreds/2))}, prologHybrid(genlPreds), arity(genlPreds, 2)])))).
spft(prologHybrid(genlPreds), hybrid_support(genlPreds, 2), pt(hybrid_support(genlPreds, 2), rhs([prologHybrid(genlPreds), arity(genlPreds, 2)]))).
spft(arity(genlPreds, 2), hybrid_support(genlPreds, 2), pt(hybrid_support(genlPreds, 2), rhs([prologHybrid(genlPreds), arity(genlPreds, 2)]))).
spft(pfcControlled(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 406), ax).
spft(pt(arity(isa, A), rhs([hybrid_support(isa, A)])), pfcControlled(isa), pt(pfcControlled(isa), pt(arity(isa, A), rhs([hybrid_support(isa, A)])))).
spft(pfcControlled(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 407), ax).
spft(pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)])), pfcControlled(argIsa), pt(pfcControlled(argIsa), pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)])))).
spft(hybrid_support(argIsa, 3), arity(argIsa, 3), pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)]))).
spft(prologHybrid(argIsa), hybrid_support(argIsa, 3), pt(hybrid_support(argIsa, 3),  (argIsa\='$VAR', atom(argIsa), integer(3), \+prologDynamic(argIsa), \+static_predicate(argIsa/3)->rhs([{functor(argIsa(A, B, C), argIsa, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(argIsa, baseKB:argIsa(A, B, C)), \+predicate_property(baseKB:argIsa(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:argIsa(A, B, C), exported);true), kb_dynamic(baseKB:argIsa/3), show_failure(hybrid_support, \+static_predicate(argIsa/3))}, prologHybrid(argIsa), arity(argIsa, 3)])))).
spft(pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)])), prologHybrid(argIsa), pt(prologHybrid(argIsa), pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)])))).
spft(hybrid_support(argIsa, 3), arity(argIsa, 3), pt(arity(argIsa, A), rhs([hybrid_support(argIsa, A)]))).
spft(arity(argIsa, 3), hybrid_support(argIsa, 3), pt(hybrid_support(argIsa, 3),  (argIsa\='$VAR', atom(argIsa), integer(3), \+prologDynamic(argIsa), \+static_predicate(argIsa/3)->rhs([{functor(argIsa(A, B, C), argIsa, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(argIsa, baseKB:argIsa(A, B, C)), \+predicate_property(baseKB:argIsa(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:argIsa(A, B, C), exported);true), kb_dynamic(baseKB:argIsa/3), show_failure(hybrid_support, \+static_predicate(argIsa/3))}, prologHybrid(argIsa), arity(argIsa, 3)])))).
spft(prologHybrid(argIsa), hybrid_support(argIsa, 3), pt(hybrid_support(argIsa, 3), rhs([prologHybrid(argIsa), arity(argIsa, 3)]))).
spft(arity(argIsa, 3), hybrid_support(argIsa, 3), pt(hybrid_support(argIsa, 3), rhs([prologHybrid(argIsa), arity(argIsa, 3)]))).
spft(tSet(tSet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 419), ax).
spft(completelyAssertedCollection(tSet), tSet(tSet), pt(tSet(tSet), rhs([completelyAssertedCollection(tSet)]))).
spft((tSet(A)==>{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 422), ax).
spft(mpred_mark(pfcCallCode, p, nop, 1), s(((tSet(A)==>{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 422))), ax).
spft(arity(nop, 1), mpred_mark(pfcCallCode, p, nop, 1), pt(mpred_mark(pfcCallCode, p, nop, 1),  (ground(pfcCallCode:p)->rhs([arity(nop, 1)])))).
spft(mpred_mark(pfcCallCode, p, show_pred_info, 1), s(((tSet(A)==>{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 422))), ax).
spft(arity(show_pred_info, 1), mpred_mark(pfcCallCode, p, show_pred_info, 1), pt(mpred_mark(pfcCallCode, p, show_pred_info, 1),  (ground(pfcCallCode:p)->rhs([arity(show_pred_info, 1)])))).
spft(mpred_mark(pfcCreates, p, functorDeclares, 1), s(((tSet(A)==>{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 422))), ax).
spft(arity(functorDeclares, 1), mpred_mark(pfcCreates, p, functorDeclares, 1), pt(mpred_mark(pfcCreates, p, functorDeclares, 1),  (ground(pfcCreates:p)->rhs([arity(functorDeclares, 1)])))).
spft(marker_supported(functorDeclares, 1), mpred_mark(pfcCreates, p, functorDeclares, 1), pt(mpred_mark(pfcCreates, p, functorDeclares, 1),  (ground(p:functorDeclares:1)->rhs([marker_supported(functorDeclares, 1)])))).
spft(hybrid_support(functorDeclares, 1), marker_supported(functorDeclares, 1), pt(marker_supported(functorDeclares, 1), rhs([hybrid_support(functorDeclares, 1)]))).
spft(prologHybrid(functorDeclares), hybrid_support(functorDeclares, 1), pt(hybrid_support(functorDeclares, 1),  (functorDeclares\='$VAR', atom(functorDeclares), integer(1), \+prologDynamic(functorDeclares), \+static_predicate(functorDeclares/1)->rhs([{functor(functorDeclares(A), functorDeclares, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(functorDeclares, baseKB:functorDeclares(A)), \+predicate_property(baseKB:functorDeclares(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:functorDeclares(A), exported);true), kb_dynamic(baseKB:functorDeclares/1), show_failure(hybrid_support, \+static_predicate(functorDeclares/1))}, prologHybrid(functorDeclares), arity(functorDeclares, 1)])))).
spft(pt(arity(functorDeclares, A), rhs([hybrid_support(functorDeclares, A)])), prologHybrid(functorDeclares), pt(prologHybrid(functorDeclares), pt(arity(functorDeclares, A), rhs([hybrid_support(functorDeclares, A)])))).
spft(hybrid_support(functorDeclares, 1), arity(functorDeclares, 1), pt(arity(functorDeclares, A), rhs([hybrid_support(functorDeclares, A)]))).
spft(hybrid_support(functorDeclares, 1), arity(functorDeclares, 1), pt(arity(functorDeclares, A), rhs([hybrid_support(functorDeclares, A)]))).
spft(arity(functorDeclares, 1), hybrid_support(functorDeclares, 1), pt(hybrid_support(functorDeclares, 1),  (functorDeclares\='$VAR', atom(functorDeclares), integer(1), \+prologDynamic(functorDeclares), \+static_predicate(functorDeclares/1)->rhs([{functor(functorDeclares(A), functorDeclares, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(functorDeclares, baseKB:functorDeclares(A)), \+predicate_property(baseKB:functorDeclares(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:functorDeclares(A), exported);true), kb_dynamic(baseKB:functorDeclares/1), show_failure(hybrid_support, \+static_predicate(functorDeclares/1))}, prologHybrid(functorDeclares), arity(functorDeclares, 1)])))).
spft(prologHybrid(functorDeclares), hybrid_support(functorDeclares, 1), pt(hybrid_support(functorDeclares, 1), rhs([prologHybrid(functorDeclares), arity(functorDeclares, 1)]))).
spft(arity(functorDeclares, 1), hybrid_support(functorDeclares, 1), pt(hybrid_support(functorDeclares, 1), rhs([prologHybrid(functorDeclares), arity(functorDeclares, 1)]))).
spft(pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)])),  (tSet(E)==>{atom(E), functor(F, E, 1),  (\+predicate_property(F, G)->kb_dynamic(E/1);true), F=..[E, H], nop(G:H),  (predicate_property(F, dynamic)->true;show_pred_info(F))}, functorDeclares(E), pfcControlled(E), arity(E, 1), tCol(E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 422)).
spft(functorDeclares(ttFormatType), tSet(ttFormatType), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(ttFormatType), tSet(ttFormatType), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)])), pfcControlled(ttFormatType), pt(pfcControlled(ttFormatType), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)])))).
spft(hybrid_support(ttFormatType, 1), arity(ttFormatType, 1), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)]))).
spft(hybrid_support(ttFormatType, 1), arity(ttFormatType, 1), pt(arity(ttFormatType, A), rhs([hybrid_support(ttFormatType, A)]))).
spft(arity(ttFormatType, 1), tSet(ttFormatType), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(ttFormatType), tSet(ttFormatType), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcDatabaseTerm), tSet(pfcDatabaseTerm), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcDatabaseTerm), tSet(pfcDatabaseTerm), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcDatabaseTerm, 1), tSet(pfcDatabaseTerm), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcDatabaseTerm), tSet(pfcDatabaseTerm), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcControlled), tSet(pfcControlled), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcControlled), tSet(pfcControlled), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcControlled, 1), tSet(pfcControlled), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcControlled), tSet(pfcControlled), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologSingleValued), tSet(prologSingleValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologSingleValued), tSet(prologSingleValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologSingleValued, 1), tSet(prologSingleValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologSingleValued), tSet(prologSingleValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcWatched), tSet(pfcWatched), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcWatched), tSet(pfcWatched), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcWatched, 1), tSet(pfcWatched), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcWatched), tSet(pfcWatched), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcCreates), tSet(pfcCreates), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcCreates), tSet(pfcCreates), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcCreates, 1), tSet(pfcCreates), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcCreates), tSet(pfcCreates), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcNegTrigger), tSet(pfcNegTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcNegTrigger), tSet(pfcNegTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcNegTrigger, 1), tSet(pfcNegTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcNegTrigger), tSet(pfcNegTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcPosTrigger), tSet(pfcPosTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcPosTrigger), tSet(pfcPosTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcPosTrigger, 1), tSet(pfcPosTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcPosTrigger), tSet(pfcPosTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcBcTrigger), tSet(pfcBcTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcBcTrigger), tSet(pfcBcTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcBcTrigger, 1), tSet(pfcBcTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcBcTrigger), tSet(pfcBcTrigger), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcRHS), tSet(pfcRHS), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcRHS), tSet(pfcRHS), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcRHS, 1), tSet(pfcRHS), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcRHS), tSet(pfcRHS), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(pfcMustFC), tSet(pfcMustFC), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(pfcMustFC), tSet(pfcMustFC), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(pfcMustFC, 1), tSet(pfcMustFC), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(pfcMustFC), tSet(pfcMustFC), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(predCanHaveSingletons), tSet(predCanHaveSingletons), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(predCanHaveSingletons), tSet(predCanHaveSingletons), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(predCanHaveSingletons, 1), tSet(predCanHaveSingletons), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(predCanHaveSingletons), tSet(predCanHaveSingletons), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologSideEffects), tSet(prologSideEffects), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologSideEffects), tSet(prologSideEffects), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologSideEffects, 1), tSet(prologSideEffects), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologSideEffects), tSet(prologSideEffects), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(meta_argtypes), tSet(meta_argtypes), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(meta_argtypes), tSet(meta_argtypes), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(meta_argtypes, 1), tSet(meta_argtypes), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(meta_argtypes), tSet(meta_argtypes), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(predIsFlag), tSet(predIsFlag), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(predIsFlag), tSet(predIsFlag), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(predIsFlag, 1), tSet(predIsFlag), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(predIsFlag), tSet(predIsFlag), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(tPred), tSet(tPred), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(tPred), tSet(tPred), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(tPred, 1), tSet(tPred), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(tPred), tSet(tPred), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologMultiValued), tSet(prologMultiValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologMultiValued), tSet(prologMultiValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologMultiValued, 1), tSet(prologMultiValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologMultiValued), tSet(prologMultiValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologMacroHead), tSet(prologMacroHead), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologMacroHead), tSet(prologMacroHead), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologMacroHead, 1), tSet(prologMacroHead), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologMacroHead), tSet(prologMacroHead), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(notAssertable), tSet(notAssertable), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(notAssertable), tSet(notAssertable), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(notAssertable, 1), tSet(notAssertable), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(notAssertable), tSet(notAssertable), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologBuiltin), tSet(prologBuiltin), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologBuiltin), tSet(prologBuiltin), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologBuiltin, 1), tSet(prologBuiltin), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologBuiltin), tSet(prologBuiltin), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologDynamic), tSet(prologDynamic), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologDynamic), tSet(prologDynamic), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologDynamic, 1), tSet(prologDynamic), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologDynamic), tSet(prologDynamic), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologOrdered), tSet(prologOrdered), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologOrdered), tSet(prologOrdered), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologOrdered, 1), tSet(prologOrdered), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologOrdered), tSet(prologOrdered), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologNegByFailure), tSet(prologNegByFailure), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologNegByFailure), tSet(prologNegByFailure), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologNegByFailure, 1), tSet(prologNegByFailure), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologNegByFailure), tSet(prologNegByFailure), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologPTTP), tSet(prologPTTP), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologPTTP), tSet(prologPTTP), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologPTTP, 1), tSet(prologPTTP), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologPTTP), tSet(prologPTTP), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologKIF), tSet(prologKIF), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologKIF), tSet(prologKIF), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologKIF, 1), tSet(prologKIF), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologKIF), tSet(prologKIF), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologEquality), tSet(prologEquality), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologEquality), tSet(prologEquality), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologEquality, 1), tSet(prologEquality), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologEquality), tSet(prologEquality), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologHybrid), tSet(prologHybrid), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologHybrid), tSet(prologHybrid), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologHybrid, 1), tSet(prologHybrid), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologHybrid), tSet(prologHybrid), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(prologListValued), tSet(prologListValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(prologListValued), tSet(prologListValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(arity(prologListValued, 1), tSet(prologListValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(prologListValued), tSet(prologListValued), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(functorDeclares(tSet), tSet(tSet), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pfcControlled(tSet), tSet(tSet), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(pt(arity(tSet, A), rhs([hybrid_support(tSet, A)])), pfcControlled(tSet), pt(pfcControlled(tSet), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)])))).
spft(hybrid_support(tSet, 1), arity(tSet, 1), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)]))).
spft(hybrid_support(tSet, 1), arity(tSet, 1), pt(arity(tSet, A), rhs([hybrid_support(tSet, A)]))).
spft(arity(tSet, 1), tSet(tSet), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft(tCol(tSet), tSet(tSet), pt(tSet(A), rhs([{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A)]))).
spft((ttFormatType(A)==>{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 434), ax).
spft(mpred_mark(pfcCallCode, p, get_functor, 2), s(((ttFormatType(A)==>{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 434))), ax).
spft(arity(get_functor, 2), mpred_mark(pfcCallCode, p, get_functor, 2), pt(mpred_mark(pfcCallCode, p, get_functor, 2),  (ground(pfcCallCode:p)->rhs([arity(get_functor, 2)])))).
spft(mpred_mark(pfcCreates, n, functorDeclares, 1), s(((ttFormatType(A)==>{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 434))), ax).
spft(arity(functorDeclares, 1), mpred_mark(pfcCreates, n, functorDeclares, 1), pt(mpred_mark(pfcCreates, n, functorDeclares, 1),  (ground(pfcCreates:n)->rhs([arity(functorDeclares, 1)])))).
spft(marker_supported(functorDeclares, 1), mpred_mark(pfcCreates, n, functorDeclares, 1), pt(mpred_mark(pfcCreates, n, functorDeclares, 1),  (ground(n:functorDeclares:1)->rhs([marker_supported(functorDeclares, 1)])))).
spft(mpred_mark(pfcCallCode, p, ignore, 1), s(((ttFormatType(A)==>{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 434))), ax).
spft(arity(ignore, 1), mpred_mark(pfcCallCode, p, ignore, 1), pt(mpred_mark(pfcCallCode, p, ignore, 1),  (ground(pfcCallCode:p)->rhs([arity(ignore, 1)])))).
spft(pt(ttFormatType(A), rhs([{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))})])),  (ttFormatType(F)==>{get_functor(F, G), functor(H, G, 1),  (\+predicate_property(H, I)->kb_dynamic(G/1);true), H=..[G, J], nop(I),  (predicate_property(H, dynamic)->true;show_pred_info(H))}, ~functorDeclares(G), arity(G, 1),  (H/predicate_property(H, dynamic)==>{ignore(retract(H))}),  (isa(J, G)==>{ignore(retract(isa(J, G)))})), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 434)).
spft(arity(prologMacroHead, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 445), ax).
spft(ttPredType(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(ttPredType(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 449), ax).
spft(prologMacroHead(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 451), ax).
spft((ttPredType(A)==>functorDeclares(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 452), ax).
spft(pt(ttPredType(A), rhs([functorDeclares(A)])),  (ttPredType(B)==>functorDeclares(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 452)).
spft(functorDeclares(pfcDatabaseTerm), ttPredType(pfcDatabaseTerm), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcControlled), ttPredType(pfcControlled), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologSingleValued), ttPredType(prologSingleValued), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcWatched), ttPredType(pfcWatched), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcCreates), ttPredType(pfcCreates), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcNegTrigger), ttPredType(pfcNegTrigger), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcPosTrigger), ttPredType(pfcPosTrigger), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcBcTrigger), ttPredType(pfcBcTrigger), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcRHS), ttPredType(pfcRHS), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(pfcMustFC), ttPredType(pfcMustFC), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(predCanHaveSingletons), ttPredType(predCanHaveSingletons), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologSideEffects), ttPredType(prologSideEffects), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(meta_argtypes), ttPredType(meta_argtypes), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(predIsFlag), ttPredType(predIsFlag), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(tPred), ttPredType(tPred), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologMultiValued), ttPredType(prologMultiValued), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologMacroHead), ttPredType(prologMacroHead), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(notAssertable), ttPredType(notAssertable), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologBuiltin), ttPredType(prologBuiltin), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologDynamic), ttPredType(prologDynamic), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologOrdered), ttPredType(prologOrdered), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologNegByFailure), ttPredType(prologNegByFailure), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologPTTP), ttPredType(prologPTTP), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologKIF), ttPredType(prologKIF), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologEquality), ttPredType(prologEquality), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologHybrid), ttPredType(prologHybrid), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft(functorDeclares(prologListValued), ttPredType(prologListValued), pt(ttPredType(A), rhs([functorDeclares(A)]))).
spft((functorDeclares(A)==>tSet(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 453), ax).
spft(mpred_mark(pfcLHS, p, functorDeclares, 1), s(((functorDeclares(A)==>tSet(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 453))), ax).
spft(arity(functorDeclares, 1), mpred_mark(pfcLHS, p, functorDeclares, 1), pt(mpred_mark(pfcLHS, p, functorDeclares, 1),  (ground(pfcLHS:p)->rhs([arity(functorDeclares, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, functorDeclares, 1), s(((functorDeclares(A)==>tSet(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 453))), ax).
spft(arity(functorDeclares, 1), mpred_mark(pfcPosTrigger, p, functorDeclares, 1), pt(mpred_mark(pfcPosTrigger, p, functorDeclares, 1),  (ground(pfcPosTrigger:p)->rhs([arity(functorDeclares, 1)])))).
spft(marker_supported(functorDeclares, 1), mpred_mark(pfcPosTrigger, p, functorDeclares, 1), pt(mpred_mark(pfcPosTrigger, p, functorDeclares, 1),  (ground(p:functorDeclares:1)->rhs([marker_supported(functorDeclares, 1)])))).
spft(pt(functorDeclares(A), rhs([tSet(A)])),  (functorDeclares(B)==>tSet(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 453)).
spft(tSet(ttFormatType), functorDeclares(ttFormatType), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcDatabaseTerm), functorDeclares(pfcDatabaseTerm), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcControlled), functorDeclares(pfcControlled), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologSingleValued), functorDeclares(prologSingleValued), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcWatched), functorDeclares(pfcWatched), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcCreates), functorDeclares(pfcCreates), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcNegTrigger), functorDeclares(pfcNegTrigger), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcPosTrigger), functorDeclares(pfcPosTrigger), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcBcTrigger), functorDeclares(pfcBcTrigger), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcRHS), functorDeclares(pfcRHS), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(pfcMustFC), functorDeclares(pfcMustFC), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(predCanHaveSingletons), functorDeclares(predCanHaveSingletons), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologSideEffects), functorDeclares(prologSideEffects), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(meta_argtypes), functorDeclares(meta_argtypes), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(predIsFlag), functorDeclares(predIsFlag), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(tPred), functorDeclares(tPred), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologMultiValued), functorDeclares(prologMultiValued), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologMacroHead), functorDeclares(prologMacroHead), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(notAssertable), functorDeclares(notAssertable), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologBuiltin), functorDeclares(prologBuiltin), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologDynamic), functorDeclares(prologDynamic), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologOrdered), functorDeclares(prologOrdered), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologNegByFailure), functorDeclares(prologNegByFailure), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologPTTP), functorDeclares(prologPTTP), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologKIF), functorDeclares(prologKIF), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologEquality), functorDeclares(prologEquality), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologHybrid), functorDeclares(prologHybrid), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(prologListValued), functorDeclares(prologListValued), pt(functorDeclares(A), rhs([tSet(A)]))).
spft(tSet(tSet), functorDeclares(tSet), pt(functorDeclares(A), rhs([tSet(A)]))).
spft((functorDeclares(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 454), ax).
spft(pt(functorDeclares(A), rhs([tCol(A)])),  (functorDeclares(B)==>tCol(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 454)).
spft(tCol(ttFormatType), functorDeclares(ttFormatType), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcDatabaseTerm), functorDeclares(pfcDatabaseTerm), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcControlled), functorDeclares(pfcControlled), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologSingleValued), functorDeclares(prologSingleValued), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcWatched), functorDeclares(pfcWatched), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcCreates), functorDeclares(pfcCreates), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcNegTrigger), functorDeclares(pfcNegTrigger), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcPosTrigger), functorDeclares(pfcPosTrigger), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcBcTrigger), functorDeclares(pfcBcTrigger), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcRHS), functorDeclares(pfcRHS), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(pfcMustFC), functorDeclares(pfcMustFC), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(predCanHaveSingletons), functorDeclares(predCanHaveSingletons), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologSideEffects), functorDeclares(prologSideEffects), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(meta_argtypes), functorDeclares(meta_argtypes), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(predIsFlag), functorDeclares(predIsFlag), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(tPred), functorDeclares(tPred), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologMultiValued), functorDeclares(prologMultiValued), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologMacroHead), functorDeclares(prologMacroHead), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(notAssertable), functorDeclares(notAssertable), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologBuiltin), functorDeclares(prologBuiltin), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologDynamic), functorDeclares(prologDynamic), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologOrdered), functorDeclares(prologOrdered), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologNegByFailure), functorDeclares(prologNegByFailure), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologPTTP), functorDeclares(prologPTTP), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologKIF), functorDeclares(prologKIF), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologEquality), functorDeclares(prologEquality), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologHybrid), functorDeclares(prologHybrid), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(prologListValued), functorDeclares(prologListValued), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tCol(tSet), functorDeclares(tSet), pt(functorDeclares(A), rhs([tCol(A)]))).
spft(tPred(pddlSomethingIsa(ftTerm, ftListFn(tCol))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 457), ax).
spft(pt(arity(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa(ftTerm, ftListFn(tCol))), rhs([~tCol(pddlSomethingIsa(ftTerm, ftListFn(tCol))), support_hilog(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A)])))), tPred(pddlSomethingIsa(ftTerm, ftListFn(tCol))), pt(tPred(pddlSomethingIsa(ftTerm, ftListFn(tCol))), pt(arity(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa(ftTerm, ftListFn(tCol))), rhs([~tCol(pddlSomethingIsa(ftTerm, ftListFn(tCol))), support_hilog(pddlSomethingIsa(ftTerm, ftListFn(tCol)), A)])))))).
spft((prologBuiltin(A):-cwc, is_ftCompound(A), get_functor(A, B), prologBuiltin(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 459), ax).
spft((prologBuiltin(A):-cwc, is_ftCompound(A), !, get_functor(A, B, C), functor(D, B, C), predicate_property(D, built_in)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 460), ax).
spft((ttPredType(A)==>{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 461), ax).
spft(mpred_mark(pfcCallCode, p, is_ftCompound, 1), s(((ttPredType(A)==>{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 461))), ax).
spft(arity(is_ftCompound, 1), mpred_mark(pfcCallCode, p, is_ftCompound, 1), pt(mpred_mark(pfcCallCode, p, is_ftCompound, 1),  (ground(pfcCallCode:p)->rhs([arity(is_ftCompound, 1)])))).
spft(mpred_mark(pfcCallCode, p, call, 2), s(((ttPredType(A)==>{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 461))), ax).
spft(arity(call, 2), mpred_mark(pfcCallCode, p, call, 2), pt(mpred_mark(pfcCallCode, p, call, 2),  (ground(pfcCallCode:p)->rhs([arity(call, 2)])))).
spft(pt(ttPredType(A), rhs([{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D))])),  (ttPredType(E)==>{atom(E), F=..[E, G]},  (F:-cwc, is_ftCompound(G), get_functor(G, H), call(E, H))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 461)).
spft((pfcDatabaseTerm(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcDatabaseTerm, B)), ttPredType(pfcDatabaseTerm), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcControlled(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcControlled, B)), ttPredType(pfcControlled), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologSingleValued(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologSingleValued, B)), ttPredType(prologSingleValued), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcWatched(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcWatched, B)), ttPredType(pfcWatched), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcCreates(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcCreates, B)), ttPredType(pfcCreates), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcNegTrigger(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcNegTrigger, B)), ttPredType(pfcNegTrigger), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcPosTrigger(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcPosTrigger, B)), ttPredType(pfcPosTrigger), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcBcTrigger(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcBcTrigger, B)), ttPredType(pfcBcTrigger), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcRHS(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcRHS, B)), ttPredType(pfcRHS), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((pfcMustFC(A):-cwc, is_ftCompound(A), get_functor(A, B), call(pfcMustFC, B)), ttPredType(pfcMustFC), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((predCanHaveSingletons(A):-cwc, is_ftCompound(A), get_functor(A, B), call(predCanHaveSingletons, B)), ttPredType(predCanHaveSingletons), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologSideEffects(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologSideEffects, B)), ttPredType(prologSideEffects), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((meta_argtypes(A):-cwc, is_ftCompound(A), get_functor(A, B), call(meta_argtypes, B)), ttPredType(meta_argtypes), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((predIsFlag(A):-cwc, is_ftCompound(A), get_functor(A, B), call(predIsFlag, B)), ttPredType(predIsFlag), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((tPred(A):-cwc, is_ftCompound(A), get_functor(A, B), call(tPred, B)), ttPredType(tPred), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologMultiValued(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologMultiValued, B)), ttPredType(prologMultiValued), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologMacroHead(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologMacroHead, B)), ttPredType(prologMacroHead), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((notAssertable(A):-cwc, is_ftCompound(A), get_functor(A, B), call(notAssertable, B)), ttPredType(notAssertable), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologBuiltin(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologBuiltin, B)), ttPredType(prologBuiltin), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologDynamic(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologDynamic, B)), ttPredType(prologDynamic), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologOrdered(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologOrdered, B)), ttPredType(prologOrdered), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologNegByFailure(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologNegByFailure, B)), ttPredType(prologNegByFailure), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologPTTP(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologPTTP, B)), ttPredType(prologPTTP), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologKIF(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologKIF, B)), ttPredType(prologKIF), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologEquality(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologEquality, B)), ttPredType(prologEquality), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologHybrid(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologHybrid, B)), ttPredType(prologHybrid), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft((prologListValued(A):-cwc, is_ftCompound(A), get_functor(A, B), call(prologListValued, B)), ttPredType(prologListValued), pt(ttPredType(C), rhs([{atom(C), D=..[C, E]},  (D:-cwc, is_ftCompound(E), get_functor(E, F), call(C, F))]))).
spft(arity(pddlSomethingIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 463), ax).
spft(prologHybrid(pddlSomethingIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 463), ax).
spft(pt(arity(pddlSomethingIsa, A), rhs([hybrid_support(pddlSomethingIsa, A)])), prologHybrid(pddlSomethingIsa), pt(prologHybrid(pddlSomethingIsa), pt(arity(pddlSomethingIsa, A), rhs([hybrid_support(pddlSomethingIsa, A)])))).
spft(hybrid_support(pddlSomethingIsa, 2), arity(pddlSomethingIsa, 2), pt(arity(pddlSomethingIsa, A), rhs([hybrid_support(pddlSomethingIsa, A)]))).
spft(prologHybrid(pddlSomethingIsa), hybrid_support(pddlSomethingIsa, 2), pt(hybrid_support(pddlSomethingIsa, 2),  (pddlSomethingIsa\='$VAR', atom(pddlSomethingIsa), integer(2), \+prologDynamic(pddlSomethingIsa), \+static_predicate(pddlSomethingIsa/2)->rhs([{functor(pddlSomethingIsa(A, B), pddlSomethingIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pddlSomethingIsa, baseKB:pddlSomethingIsa(A, B)), \+predicate_property(baseKB:pddlSomethingIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pddlSomethingIsa(A, B), exported);true), kb_dynamic(baseKB:pddlSomethingIsa/2), show_failure(hybrid_support, \+static_predicate(pddlSomethingIsa/2))}, prologHybrid(pddlSomethingIsa), arity(pddlSomethingIsa, 2)])))).
spft(arity(pddlSomethingIsa, 2), hybrid_support(pddlSomethingIsa, 2), pt(hybrid_support(pddlSomethingIsa, 2),  (pddlSomethingIsa\='$VAR', atom(pddlSomethingIsa), integer(2), \+prologDynamic(pddlSomethingIsa), \+static_predicate(pddlSomethingIsa/2)->rhs([{functor(pddlSomethingIsa(A, B), pddlSomethingIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pddlSomethingIsa, baseKB:pddlSomethingIsa(A, B)), \+predicate_property(baseKB:pddlSomethingIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pddlSomethingIsa(A, B), exported);true), kb_dynamic(baseKB:pddlSomethingIsa/2), show_failure(hybrid_support, \+static_predicate(pddlSomethingIsa/2))}, prologHybrid(pddlSomethingIsa), arity(pddlSomethingIsa, 2)])))).
spft(prologHybrid(pddlSomethingIsa), hybrid_support(pddlSomethingIsa, 2), pt(hybrid_support(pddlSomethingIsa, 2), rhs([prologHybrid(pddlSomethingIsa), arity(pddlSomethingIsa, 2)]))).
spft(arity(pddlSomethingIsa, 2), hybrid_support(pddlSomethingIsa, 2), pt(hybrid_support(pddlSomethingIsa, 2), rhs([prologHybrid(pddlSomethingIsa), arity(pddlSomethingIsa, 2)]))).
spft(tPred(pddlSomethingIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 463), ax).
spft(pt(arity(pddlSomethingIsa, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, A)])))), tPred(pddlSomethingIsa), pt(tPred(pddlSomethingIsa), pt(arity(pddlSomethingIsa, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, A)])))))).
spft(pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, 2)])), arity(pddlSomethingIsa, 2), pt(arity(pddlSomethingIsa, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSomethingIsa), rhs([~tCol(pddlSomethingIsa), support_hilog(pddlSomethingIsa, A)]))))).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 465), ax).
spft((tFunction(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470), ax).
spft(mpred_mark(pfcLHS, p, tFunction, 1), s(((tFunction(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470))), ax).
spft(arity(tFunction, 1), mpred_mark(pfcLHS, p, tFunction, 1), pt(mpred_mark(pfcLHS, p, tFunction, 1),  (ground(pfcLHS:p)->rhs([arity(tFunction, 1)])))).
spft(mpred_mark(pfcCallCode, p, is_declarations, 1), s(((tFunction(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470))), ax).
spft(arity(is_declarations, 1), mpred_mark(pfcCallCode, p, is_declarations, 1), pt(mpred_mark(pfcCallCode, p, is_declarations, 1),  (ground(pfcCallCode:p)->rhs([arity(is_declarations, 1)])))).
spft(mpred_mark(pfcCreates, p, meta_argtypes, 1), s(((tFunction(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470))), ax).
spft(arity(meta_argtypes, 1), mpred_mark(pfcCreates, p, meta_argtypes, 1), pt(mpred_mark(pfcCreates, p, meta_argtypes, 1),  (ground(pfcCreates:p)->rhs([arity(meta_argtypes, 1)])))).
spft(marker_supported(meta_argtypes, 1), mpred_mark(pfcCreates, p, meta_argtypes, 1), pt(mpred_mark(pfcCreates, p, meta_argtypes, 1),  (ground(p:meta_argtypes:1)->rhs([marker_supported(meta_argtypes, 1)])))).
spft(hybrid_support(meta_argtypes, 1), marker_supported(meta_argtypes, 1), pt(marker_supported(meta_argtypes, 1), rhs([hybrid_support(meta_argtypes, 1)]))).
spft(mpred_mark(pfcPosTrigger, p, tFunction, 1), s(((tFunction(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470))), ax).
spft(arity(tFunction, 1), mpred_mark(pfcPosTrigger, p, tFunction, 1), pt(mpred_mark(pfcPosTrigger, p, tFunction, 1),  (ground(pfcPosTrigger:p)->rhs([arity(tFunction, 1)])))).
spft(marker_supported(tFunction, 1), mpred_mark(pfcPosTrigger, p, tFunction, 1), pt(mpred_mark(pfcPosTrigger, p, tFunction, 1),  (ground(p:tFunction:1)->rhs([marker_supported(tFunction, 1)])))).
spft(hybrid_support(tFunction, 1), marker_supported(tFunction, 1), pt(marker_supported(tFunction, 1), rhs([hybrid_support(tFunction, 1)]))).
spft(prologHybrid(tFunction), hybrid_support(tFunction, 1), pt(hybrid_support(tFunction, 1),  (tFunction\='$VAR', atom(tFunction), integer(1), \+prologDynamic(tFunction), \+static_predicate(tFunction/1)->rhs([{functor(tFunction(A), tFunction, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tFunction, baseKB:tFunction(A)), \+predicate_property(baseKB:tFunction(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tFunction(A), exported);true), kb_dynamic(baseKB:tFunction/1), show_failure(hybrid_support, \+static_predicate(tFunction/1))}, prologHybrid(tFunction), arity(tFunction, 1)])))).
spft(pt(arity(tFunction, A), rhs([hybrid_support(tFunction, A)])), prologHybrid(tFunction), pt(prologHybrid(tFunction), pt(arity(tFunction, A), rhs([hybrid_support(tFunction, A)])))).
spft(hybrid_support(tFunction, 1), arity(tFunction, 1), pt(arity(tFunction, A), rhs([hybrid_support(tFunction, A)]))).
spft(hybrid_support(tFunction, 1), arity(tFunction, 1), pt(arity(tFunction, A), rhs([hybrid_support(tFunction, A)]))).
spft(arity(tFunction, 1), hybrid_support(tFunction, 1), pt(hybrid_support(tFunction, 1),  (tFunction\='$VAR', atom(tFunction), integer(1), \+prologDynamic(tFunction), \+static_predicate(tFunction/1)->rhs([{functor(tFunction(A), tFunction, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tFunction, baseKB:tFunction(A)), \+predicate_property(baseKB:tFunction(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tFunction(A), exported);true), kb_dynamic(baseKB:tFunction/1), show_failure(hybrid_support, \+static_predicate(tFunction/1))}, prologHybrid(tFunction), arity(tFunction, 1)])))).
spft(prologHybrid(tFunction), hybrid_support(tFunction, 1), pt(hybrid_support(tFunction, 1), rhs([prologHybrid(tFunction), arity(tFunction, 1)]))).
spft(arity(tFunction, 1), hybrid_support(tFunction, 1), pt(hybrid_support(tFunction, 1), rhs([prologHybrid(tFunction), arity(tFunction, 1)]))).
spft(pt(tFunction(A),  (is_declarations(A)->rhs([meta_argtypes(A)]))),  (tFunction(B)/is_declarations(B)==>meta_argtypes(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 470)).
spft((ttFormatType(A)/is_declarations(A)==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 472), ax).
spft(pt(ttFormatType(A),  (is_declarations(A)->rhs([meta_argtypes(A)]))),  (ttFormatType(B)/is_declarations(B)==>meta_argtypes(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 472)).
spft((meta_argtypes(A)/is_ftCompound(A)==>{get_functor(A, B, C)}, arity(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 475), ax).
spft(mpred_mark(pfcLHS, p, meta_argtypes, 1), s(((meta_argtypes(A)/is_ftCompound(A)==>{get_functor(A, B, C)}, arity(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 475))), ax).
spft(arity(meta_argtypes, 1), mpred_mark(pfcLHS, p, meta_argtypes, 1), pt(mpred_mark(pfcLHS, p, meta_argtypes, 1),  (ground(pfcLHS:p)->rhs([arity(meta_argtypes, 1)])))).
spft(mpred_mark(pfcCallCode, p, get_functor, 3), s(((meta_argtypes(A)/is_ftCompound(A)==>{get_functor(A, B, C)}, arity(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 475))), ax).
spft(arity(get_functor, 3), mpred_mark(pfcCallCode, p, get_functor, 3), pt(mpred_mark(pfcCallCode, p, get_functor, 3),  (ground(pfcCallCode:p)->rhs([arity(get_functor, 3)])))).
spft(mpred_mark(pfcPosTrigger, p, meta_argtypes, 1), s(((meta_argtypes(A)/is_ftCompound(A)==>{get_functor(A, B, C)}, arity(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 475))), ax).
spft(arity(meta_argtypes, 1), mpred_mark(pfcPosTrigger, p, meta_argtypes, 1), pt(mpred_mark(pfcPosTrigger, p, meta_argtypes, 1),  (ground(pfcPosTrigger:p)->rhs([arity(meta_argtypes, 1)])))).
spft(marker_supported(meta_argtypes, 1), mpred_mark(pfcPosTrigger, p, meta_argtypes, 1), pt(mpred_mark(pfcPosTrigger, p, meta_argtypes, 1),  (ground(p:meta_argtypes:1)->rhs([marker_supported(meta_argtypes, 1)])))).
spft(pt(meta_argtypes(A),  (is_ftCompound(A)->rhs([{get_functor(A, B, C)}, arity(B, C)]))),  (meta_argtypes(D)/is_ftCompound(D)==>{get_functor(D, E, F)}, arity(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 475)).
spft(arity(support_hilog, 2), meta_argtypes(support_hilog(tRelation, ftInt)), pt(meta_argtypes(A),  (is_ftCompound(A)->rhs([{get_functor(A, B, C)}, arity(B, C)])))).
spft(prologMacroHead(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 478), ax).
spft(completelyAssertedCollection(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 481), ax).
spft(completelyAssertedCollection(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 482), ax).
spft(completelyAssertedCollection(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 483), ax).
spft(completelyAssertedCollection(ttValueType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 484), ax).
spft(tCol(ttValueType), completelyAssertedCollection(ttValueType), pt(completelyAssertedCollection(ttValueType), rhs([tCol(ttValueType)]))).
spft(completelyAssertedCollection(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 485), ax).
spft(completelyAssertedCollection(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 486), ax).
spft(completelyAssertedCollection(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 487), ax).
spft((completelyAssertedCollection(A)==>completeExtentAsserted(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 489), ax).
spft(mpred_mark(pfcCreates, p, completeExtentAsserted, 1), s(((completelyAssertedCollection(A)==>completeExtentAsserted(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 489))), ax).
spft(arity(completeExtentAsserted, 1), mpred_mark(pfcCreates, p, completeExtentAsserted, 1), pt(mpred_mark(pfcCreates, p, completeExtentAsserted, 1),  (ground(pfcCreates:p)->rhs([arity(completeExtentAsserted, 1)])))).
spft(marker_supported(completeExtentAsserted, 1), mpred_mark(pfcCreates, p, completeExtentAsserted, 1), pt(mpred_mark(pfcCreates, p, completeExtentAsserted, 1),  (ground(p:completeExtentAsserted:1)->rhs([marker_supported(completeExtentAsserted, 1)])))).
spft(hybrid_support(completeExtentAsserted, 1), marker_supported(completeExtentAsserted, 1), pt(marker_supported(completeExtentAsserted, 1), rhs([hybrid_support(completeExtentAsserted, 1)]))).
spft(prologHybrid(completeExtentAsserted), hybrid_support(completeExtentAsserted, 1), pt(hybrid_support(completeExtentAsserted, 1),  (completeExtentAsserted\='$VAR', atom(completeExtentAsserted), integer(1), \+prologDynamic(completeExtentAsserted), \+static_predicate(completeExtentAsserted/1)->rhs([{functor(completeExtentAsserted(A), completeExtentAsserted, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completeExtentAsserted, baseKB:completeExtentAsserted(A)), \+predicate_property(baseKB:completeExtentAsserted(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completeExtentAsserted(A), exported);true), kb_dynamic(baseKB:completeExtentAsserted/1), show_failure(hybrid_support, \+static_predicate(completeExtentAsserted/1))}, prologHybrid(completeExtentAsserted), arity(completeExtentAsserted, 1)])))).
spft(pt(arity(completeExtentAsserted, A), rhs([hybrid_support(completeExtentAsserted, A)])), prologHybrid(completeExtentAsserted), pt(prologHybrid(completeExtentAsserted), pt(arity(completeExtentAsserted, A), rhs([hybrid_support(completeExtentAsserted, A)])))).
spft(hybrid_support(completeExtentAsserted, 1), arity(completeExtentAsserted, 1), pt(arity(completeExtentAsserted, A), rhs([hybrid_support(completeExtentAsserted, A)]))).
spft(hybrid_support(completeExtentAsserted, 1), arity(completeExtentAsserted, 1), pt(arity(completeExtentAsserted, A), rhs([hybrid_support(completeExtentAsserted, A)]))).
spft(arity(completeExtentAsserted, 1), hybrid_support(completeExtentAsserted, 1), pt(hybrid_support(completeExtentAsserted, 1),  (completeExtentAsserted\='$VAR', atom(completeExtentAsserted), integer(1), \+prologDynamic(completeExtentAsserted), \+static_predicate(completeExtentAsserted/1)->rhs([{functor(completeExtentAsserted(A), completeExtentAsserted, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completeExtentAsserted, baseKB:completeExtentAsserted(A)), \+predicate_property(baseKB:completeExtentAsserted(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completeExtentAsserted(A), exported);true), kb_dynamic(baseKB:completeExtentAsserted/1), show_failure(hybrid_support, \+static_predicate(completeExtentAsserted/1))}, prologHybrid(completeExtentAsserted), arity(completeExtentAsserted, 1)])))).
spft(prologHybrid(completeExtentAsserted), hybrid_support(completeExtentAsserted, 1), pt(hybrid_support(completeExtentAsserted, 1), rhs([prologHybrid(completeExtentAsserted), arity(completeExtentAsserted, 1)]))).
spft(arity(completeExtentAsserted, 1), hybrid_support(completeExtentAsserted, 1), pt(hybrid_support(completeExtentAsserted, 1), rhs([prologHybrid(completeExtentAsserted), arity(completeExtentAsserted, 1)]))).
spft(pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)])),  (completelyAssertedCollection(B)==>completeExtentAsserted(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 489)).
spft(completeExtentAsserted(prologNegByFailure), completelyAssertedCollection(prologNegByFailure), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(completelyAssertedCollection), completelyAssertedCollection(completelyAssertedCollection), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tCol), completelyAssertedCollection(tCol), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tSpec), completelyAssertedCollection(tSpec), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttFormatType), completelyAssertedCollection(ttFormatType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tSet), completelyAssertedCollection(tSet), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tRelation), completelyAssertedCollection(tRelation), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tPred), completelyAssertedCollection(tPred), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tFunction), completelyAssertedCollection(tFunction), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologMacroHead), completelyAssertedCollection(prologMacroHead), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttPredType), completelyAssertedCollection(ttPredType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(functorDeclares), completelyAssertedCollection(functorDeclares), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologMultiValued), completelyAssertedCollection(prologMultiValued), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologOrdered), completelyAssertedCollection(prologOrdered), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(predIsFlag), completelyAssertedCollection(predIsFlag), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttNonGenled), completelyAssertedCollection(ttNonGenled), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(meta_argtypes), completelyAssertedCollection(meta_argtypes), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologHybrid), completelyAssertedCollection(prologHybrid), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologPTTP), completelyAssertedCollection(prologPTTP), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologDynamic), completelyAssertedCollection(prologDynamic), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologKIF), completelyAssertedCollection(prologKIF), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologBuiltin), completelyAssertedCollection(prologBuiltin), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologListValued), completelyAssertedCollection(prologListValued), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologSingleValued), completelyAssertedCollection(prologSingleValued), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcControlled), completelyAssertedCollection(pfcControlled), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(predCanHaveSingletons), completelyAssertedCollection(predCanHaveSingletons), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tTemporalThing), completelyAssertedCollection(tTemporalThing), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologSideEffects), completelyAssertedCollection(prologSideEffects), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(tInferInstanceFromArgType), completelyAssertedCollection(tInferInstanceFromArgType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttNotTemporalType), completelyAssertedCollection(ttNotTemporalType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttSpatialType), completelyAssertedCollection(ttSpatialType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttTemporalType), completelyAssertedCollection(ttTemporalType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttTypeType), completelyAssertedCollection(ttTypeType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttUnverifiableType), completelyAssertedCollection(ttUnverifiableType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcDatabaseTerm), completelyAssertedCollection(pfcDatabaseTerm), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcWatched), completelyAssertedCollection(pfcWatched), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcCreates), completelyAssertedCollection(pfcCreates), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcNegTrigger), completelyAssertedCollection(pfcNegTrigger), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcPosTrigger), completelyAssertedCollection(pfcPosTrigger), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcBcTrigger), completelyAssertedCollection(pfcBcTrigger), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcRHS), completelyAssertedCollection(pfcRHS), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(pfcMustFC), completelyAssertedCollection(pfcMustFC), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(notAssertable), completelyAssertedCollection(notAssertable), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(prologEquality), completelyAssertedCollection(prologEquality), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(ttValueType), completelyAssertedCollection(ttValueType), pt(completelyAssertedCollection(A), rhs([completeExtentAsserted(A)]))).
spft(completeExtentAsserted(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 491), ax).
spft(completeExtentAsserted(defnSufficient), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 492), ax).
spft(ttNotTemporalType(ftInt), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 495), ax).
spft(ttNotTemporalType(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 497), ax).
spft(ttNotTemporalType(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 498), ax).
spft(ttNotTemporalType(ttValueType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 499), ax).
spft(ttNotTemporalType(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 501), ax).
spft((ttNotTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 502), ax).
spft(mpred_mark(pfcLHS, p, ttNotTemporalType, 1), s(((ttNotTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 502))), ax).
spft(arity(ttNotTemporalType, 1), mpred_mark(pfcLHS, p, ttNotTemporalType, 1), pt(mpred_mark(pfcLHS, p, ttNotTemporalType, 1),  (ground(pfcLHS:p)->rhs([arity(ttNotTemporalType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1), s(((ttNotTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 502))), ax).
spft(arity(ttNotTemporalType, 1), mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1), pt(mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttNotTemporalType, 1)])))).
spft(marker_supported(ttNotTemporalType, 1), mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1), pt(mpred_mark(pfcPosTrigger, p, ttNotTemporalType, 1),  (ground(p:ttNotTemporalType:1)->rhs([marker_supported(ttNotTemporalType, 1)])))).
spft(hybrid_support(ttNotTemporalType, 1), marker_supported(ttNotTemporalType, 1), pt(marker_supported(ttNotTemporalType, 1), rhs([hybrid_support(ttNotTemporalType, 1)]))).
spft(prologHybrid(ttNotTemporalType), hybrid_support(ttNotTemporalType, 1), pt(hybrid_support(ttNotTemporalType, 1),  (ttNotTemporalType\='$VAR', atom(ttNotTemporalType), integer(1), \+prologDynamic(ttNotTemporalType), \+static_predicate(ttNotTemporalType/1)->rhs([{functor(ttNotTemporalType(A), ttNotTemporalType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttNotTemporalType, baseKB:ttNotTemporalType(A)), \+predicate_property(baseKB:ttNotTemporalType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttNotTemporalType(A), exported);true), kb_dynamic(baseKB:ttNotTemporalType/1), show_failure(hybrid_support, \+static_predicate(ttNotTemporalType/1))}, prologHybrid(ttNotTemporalType), arity(ttNotTemporalType, 1)])))).
spft(pt(arity(ttNotTemporalType, A), rhs([hybrid_support(ttNotTemporalType, A)])), prologHybrid(ttNotTemporalType), pt(prologHybrid(ttNotTemporalType), pt(arity(ttNotTemporalType, A), rhs([hybrid_support(ttNotTemporalType, A)])))).
spft(hybrid_support(ttNotTemporalType, 1), arity(ttNotTemporalType, 1), pt(arity(ttNotTemporalType, A), rhs([hybrid_support(ttNotTemporalType, A)]))).
spft(hybrid_support(ttNotTemporalType, 1), arity(ttNotTemporalType, 1), pt(arity(ttNotTemporalType, A), rhs([hybrid_support(ttNotTemporalType, A)]))).
spft(arity(ttNotTemporalType, 1), hybrid_support(ttNotTemporalType, 1), pt(hybrid_support(ttNotTemporalType, 1),  (ttNotTemporalType\='$VAR', atom(ttNotTemporalType), integer(1), \+prologDynamic(ttNotTemporalType), \+static_predicate(ttNotTemporalType/1)->rhs([{functor(ttNotTemporalType(A), ttNotTemporalType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttNotTemporalType, baseKB:ttNotTemporalType(A)), \+predicate_property(baseKB:ttNotTemporalType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttNotTemporalType(A), exported);true), kb_dynamic(baseKB:ttNotTemporalType/1), show_failure(hybrid_support, \+static_predicate(ttNotTemporalType/1))}, prologHybrid(ttNotTemporalType), arity(ttNotTemporalType, 1)])))).
spft(prologHybrid(ttNotTemporalType), hybrid_support(ttNotTemporalType, 1), pt(hybrid_support(ttNotTemporalType, 1), rhs([prologHybrid(ttNotTemporalType), arity(ttNotTemporalType, 1)]))).
spft(arity(ttNotTemporalType, 1), hybrid_support(ttNotTemporalType, 1), pt(hybrid_support(ttNotTemporalType, 1), rhs([prologHybrid(ttNotTemporalType), arity(ttNotTemporalType, 1)]))).
spft(pt(ttNotTemporalType(A), rhs([tCol(A)])),  (ttNotTemporalType(B)==>tCol(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 502)).
spft(tCol(ftInt), ttNotTemporalType(ftInt), pt(ttNotTemporalType(A), rhs([tCol(A)]))).
spft(arity(ftInt, 1), tCol(ftInt), pt(tCol(ftInt),  (atom(ftInt), ftInt(A)=..[ftInt, A]->rhs([{decl_type(ftInt)}, arity(ftInt, 1), mpred_univ(ftInt, A, ftInt(A))])))).
spft(mpred_univ(ftInt, A, ftInt(A)), tCol(ftInt), pt(tCol(ftInt),  (atom(ftInt), ftInt(A)=..[ftInt, A]->rhs([{decl_type(ftInt)}, arity(ftInt, 1), mpred_univ(ftInt, A, ftInt(A))])))).
spft((ftInt(A):-cwc, lazy(\+ ~ftInt(A)), isa_backchaing(A, ftInt)), tCol(ftInt), pt(tCol(ftInt),  (atom(ftInt), ftInt(A)=..[ftInt, A], \+static_predicate(ftInt/1), \+completelyAssertedCollection(ftInt)->rhs([(ftInt(A):-cwc, lazy(\+ ~ftInt(A)), isa_backchaing(A, ftInt))])))).
spft(tCol(tCol), ttNotTemporalType(tCol), pt(ttNotTemporalType(A), rhs([tCol(A)]))).
spft(tCol(ttFormatType), ttNotTemporalType(ttFormatType), pt(ttNotTemporalType(A), rhs([tCol(A)]))).
spft(tCol(ttValueType), ttNotTemporalType(ttValueType), pt(ttNotTemporalType(A), rhs([tCol(A)]))).
spft(ttTemporalType(tTemporalThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 503), ax).
spft((ttTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 504), ax).
spft(mpred_mark(pfcLHS, p, ttTemporalType, 1), s(((ttTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 504))), ax).
spft(arity(ttTemporalType, 1), mpred_mark(pfcLHS, p, ttTemporalType, 1), pt(mpred_mark(pfcLHS, p, ttTemporalType, 1),  (ground(pfcLHS:p)->rhs([arity(ttTemporalType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttTemporalType, 1), s(((ttTemporalType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 504))), ax).
spft(arity(ttTemporalType, 1), mpred_mark(pfcPosTrigger, p, ttTemporalType, 1), pt(mpred_mark(pfcPosTrigger, p, ttTemporalType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttTemporalType, 1)])))).
spft(marker_supported(ttTemporalType, 1), mpred_mark(pfcPosTrigger, p, ttTemporalType, 1), pt(mpred_mark(pfcPosTrigger, p, ttTemporalType, 1),  (ground(p:ttTemporalType:1)->rhs([marker_supported(ttTemporalType, 1)])))).
spft(hybrid_support(ttTemporalType, 1), marker_supported(ttTemporalType, 1), pt(marker_supported(ttTemporalType, 1), rhs([hybrid_support(ttTemporalType, 1)]))).
spft(prologHybrid(ttTemporalType), hybrid_support(ttTemporalType, 1), pt(hybrid_support(ttTemporalType, 1),  (ttTemporalType\='$VAR', atom(ttTemporalType), integer(1), \+prologDynamic(ttTemporalType), \+static_predicate(ttTemporalType/1)->rhs([{functor(ttTemporalType(A), ttTemporalType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttTemporalType, baseKB:ttTemporalType(A)), \+predicate_property(baseKB:ttTemporalType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttTemporalType(A), exported);true), kb_dynamic(baseKB:ttTemporalType/1), show_failure(hybrid_support, \+static_predicate(ttTemporalType/1))}, prologHybrid(ttTemporalType), arity(ttTemporalType, 1)])))).
spft(pt(arity(ttTemporalType, A), rhs([hybrid_support(ttTemporalType, A)])), prologHybrid(ttTemporalType), pt(prologHybrid(ttTemporalType), pt(arity(ttTemporalType, A), rhs([hybrid_support(ttTemporalType, A)])))).
spft(hybrid_support(ttTemporalType, 1), arity(ttTemporalType, 1), pt(arity(ttTemporalType, A), rhs([hybrid_support(ttTemporalType, A)]))).
spft(hybrid_support(ttTemporalType, 1), arity(ttTemporalType, 1), pt(arity(ttTemporalType, A), rhs([hybrid_support(ttTemporalType, A)]))).
spft(arity(ttTemporalType, 1), hybrid_support(ttTemporalType, 1), pt(hybrid_support(ttTemporalType, 1),  (ttTemporalType\='$VAR', atom(ttTemporalType), integer(1), \+prologDynamic(ttTemporalType), \+static_predicate(ttTemporalType/1)->rhs([{functor(ttTemporalType(A), ttTemporalType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttTemporalType, baseKB:ttTemporalType(A)), \+predicate_property(baseKB:ttTemporalType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttTemporalType(A), exported);true), kb_dynamic(baseKB:ttTemporalType/1), show_failure(hybrid_support, \+static_predicate(ttTemporalType/1))}, prologHybrid(ttTemporalType), arity(ttTemporalType, 1)])))).
spft(prologHybrid(ttTemporalType), hybrid_support(ttTemporalType, 1), pt(hybrid_support(ttTemporalType, 1), rhs([prologHybrid(ttTemporalType), arity(ttTemporalType, 1)]))).
spft(arity(ttTemporalType, 1), hybrid_support(ttTemporalType, 1), pt(hybrid_support(ttTemporalType, 1), rhs([prologHybrid(ttTemporalType), arity(ttTemporalType, 1)]))).
spft(pt(ttTemporalType(A), rhs([tCol(A)])),  (ttTemporalType(B)==>tCol(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 504)).
spft(tCol(tTemporalThing), ttTemporalType(tTemporalThing), pt(ttTemporalType(A), rhs([tCol(A)]))).
spft(arity(argQuoted, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 506), ax).
spft((ttTemporalType(A), tCol(A)==>genls(A, tTemporalThing)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 509), ax).
spft(mpred_mark(pfcCreates, p, genls, 2), s(((ttTemporalType(A), tCol(A)==>genls(A, tTemporalThing)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 509))), ax).
spft(arity(genls, 2), mpred_mark(pfcCreates, p, genls, 2), pt(mpred_mark(pfcCreates, p, genls, 2),  (ground(pfcCreates:p)->rhs([arity(genls, 2)])))).
spft(marker_supported(genls, 2), mpred_mark(pfcCreates, p, genls, 2), pt(mpred_mark(pfcCreates, p, genls, 2),  (ground(p:genls:2)->rhs([marker_supported(genls, 2)])))).
spft(hybrid_support(genls, 2), marker_supported(genls, 2), pt(marker_supported(genls, 2), rhs([hybrid_support(genls, 2)]))).
spft(pt(ttTemporalType(A), pt(tCol(A), rhs([genls(A, tTemporalThing)]))),  (ttTemporalType(B), tCol(B)==>genls(B, tTemporalThing)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 509)).
spft(pt(tCol(tTemporalThing), rhs([genls(tTemporalThing, tTemporalThing)])), ttTemporalType(tTemporalThing), pt(ttTemporalType(A), pt(tCol(A), rhs([genls(A, tTemporalThing)])))).
spft(genls(tTemporalThing, tTemporalThing), tCol(tTemporalThing), pt(tCol(tTemporalThing), rhs([genls(tTemporalThing, tTemporalThing)]))).
spft((ttFormatType(A), {is_ftCompound(A)}==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 514), ax).
spft(pt(ttFormatType(A),  (is_ftCompound(A)->rhs([meta_argtypes(A)]))),  (ttFormatType(B), {is_ftCompound(B)}==>meta_argtypes(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 514)).
spft(mpred_mark(pfcLHS, p, {}, 1), s(((ttFormatType(A), {is_ftCompound(A)}==>meta_argtypes(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 514))), ax).
spft(arity({}, 1), mpred_mark(pfcLHS, p, {}, 1), pt(mpred_mark(pfcLHS, p, {}, 1),  (ground(pfcLHS:p)->rhs([arity({}, 1)])))).
spft(pt(ttFormatType(A),  (is_ftCompound(A)->rhs([meta_argtypes(A)]))),  (ttFormatType(B), {is_ftCompound(B)}==>meta_argtypes(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 514)).
spft(tCol(vtDirection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 516), ax).
spft(arity(vtDirection, 1), tCol(vtDirection), pt(tCol(vtDirection),  (atom(vtDirection), vtDirection(A)=..[vtDirection, A]->rhs([{decl_type(vtDirection)}, arity(vtDirection, 1), mpred_univ(vtDirection, A, vtDirection(A))])))).
spft(mpred_univ(vtDirection, A, vtDirection(A)), tCol(vtDirection), pt(tCol(vtDirection),  (atom(vtDirection), vtDirection(A)=..[vtDirection, A]->rhs([{decl_type(vtDirection)}, arity(vtDirection, 1), mpred_univ(vtDirection, A, vtDirection(A))])))).
spft((vtDirection(A):-cwc, lazy(\+ ~vtDirection(A)), isa_backchaing(A, vtDirection)), tCol(vtDirection), pt(tCol(vtDirection),  (atom(vtDirection), vtDirection(A)=..[vtDirection, A], \+static_predicate(vtDirection/1), \+completelyAssertedCollection(vtDirection)->rhs([(vtDirection(A):-cwc, lazy(\+ ~vtDirection(A)), isa_backchaing(A, vtDirection))])))).
spft(disjointWith(ttTemporalType, ttAbstractType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 518), ax).
spft((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 519), ax).
spft(mpred_mark(pfcLHS, p, disjointWith, 2), s(((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 519))), ax).
spft(arity(disjointWith, 2), mpred_mark(pfcLHS, p, disjointWith, 2), pt(mpred_mark(pfcLHS, p, disjointWith, 2),  (ground(pfcLHS:p)->rhs([arity(disjointWith, 2)])))).
spft(mpred_mark(pfcCreates, p, disjointWith, 2), s(((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 519))), ax).
spft(arity(disjointWith, 2), mpred_mark(pfcCreates, p, disjointWith, 2), pt(mpred_mark(pfcCreates, p, disjointWith, 2),  (ground(pfcCreates:p)->rhs([arity(disjointWith, 2)])))).
spft(marker_supported(disjointWith, 2), mpred_mark(pfcCreates, p, disjointWith, 2), pt(mpred_mark(pfcCreates, p, disjointWith, 2),  (ground(p:disjointWith:2)->rhs([marker_supported(disjointWith, 2)])))).
spft(hybrid_support(disjointWith, 2), marker_supported(disjointWith, 2), pt(marker_supported(disjointWith, 2), rhs([hybrid_support(disjointWith, 2)]))).
spft(prologHybrid(disjointWith), hybrid_support(disjointWith, 2), pt(hybrid_support(disjointWith, 2),  (disjointWith\='$VAR', atom(disjointWith), integer(2), \+prologDynamic(disjointWith), \+static_predicate(disjointWith/2)->rhs([{functor(disjointWith(A, B), disjointWith, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(disjointWith, baseKB:disjointWith(A, B)), \+predicate_property(baseKB:disjointWith(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:disjointWith(A, B), exported);true), kb_dynamic(baseKB:disjointWith/2), show_failure(hybrid_support, \+static_predicate(disjointWith/2))}, prologHybrid(disjointWith), arity(disjointWith, 2)])))).
spft(pt(arity(disjointWith, A), rhs([hybrid_support(disjointWith, A)])), prologHybrid(disjointWith), pt(prologHybrid(disjointWith), pt(arity(disjointWith, A), rhs([hybrid_support(disjointWith, A)])))).
spft(hybrid_support(disjointWith, 2), arity(disjointWith, 2), pt(arity(disjointWith, A), rhs([hybrid_support(disjointWith, A)]))).
spft(arity(disjointWith, 2), hybrid_support(disjointWith, 2), pt(hybrid_support(disjointWith, 2),  (disjointWith\='$VAR', atom(disjointWith), integer(2), \+prologDynamic(disjointWith), \+static_predicate(disjointWith/2)->rhs([{functor(disjointWith(A, B), disjointWith, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(disjointWith, baseKB:disjointWith(A, B)), \+predicate_property(baseKB:disjointWith(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:disjointWith(A, B), exported);true), kb_dynamic(baseKB:disjointWith/2), show_failure(hybrid_support, \+static_predicate(disjointWith/2))}, prologHybrid(disjointWith), arity(disjointWith, 2)])))).
spft(prologHybrid(disjointWith), hybrid_support(disjointWith, 2), pt(hybrid_support(disjointWith, 2), rhs([prologHybrid(disjointWith), arity(disjointWith, 2)]))).
spft(arity(disjointWith, 2), hybrid_support(disjointWith, 2), pt(hybrid_support(disjointWith, 2), rhs([prologHybrid(disjointWith), arity(disjointWith, 2)]))).
spft(mpred_mark(pfcPosTrigger, p, disjointWith, 2), s(((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 519))), ax).
spft(arity(disjointWith, 2), mpred_mark(pfcPosTrigger, p, disjointWith, 2), pt(mpred_mark(pfcPosTrigger, p, disjointWith, 2),  (ground(pfcPosTrigger:p)->rhs([arity(disjointWith, 2)])))).
spft(marker_supported(disjointWith, 2), mpred_mark(pfcPosTrigger, p, disjointWith, 2), pt(mpred_mark(pfcPosTrigger, p, disjointWith, 2),  (ground(p:disjointWith:2)->rhs([marker_supported(disjointWith, 2)])))).
spft(pt(disjointWith(B, A), rhs([disjointWith(A, B)])),  (disjointWith(D, C)==>disjointWith(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 519)).
spft(disjointWith(ttAbstractType, ttTemporalType), disjointWith(ttTemporalType, ttAbstractType), pt(disjointWith(B, A), rhs([disjointWith(A, B)]))).
spft(disjointWith(ttTemporalType, ttAbstractType), disjointWith(ttAbstractType, ttTemporalType), pt(disjointWith(ttAbstractType, ttTemporalType), rhs([disjointWith(ttTemporalType, ttAbstractType)]))).
spft((ptSymmetric(A)==>{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 521), ax).
spft(mpred_mark(pfcLHS, p, ptSymmetric, 1), s(((ptSymmetric(A)==>{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 521))), ax).
spft(arity(ptSymmetric, 1), mpred_mark(pfcLHS, p, ptSymmetric, 1), pt(mpred_mark(pfcLHS, p, ptSymmetric, 1),  (ground(pfcLHS:p)->rhs([arity(ptSymmetric, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ptSymmetric, 1), s(((ptSymmetric(A)==>{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 521))), ax).
spft(arity(ptSymmetric, 1), mpred_mark(pfcPosTrigger, p, ptSymmetric, 1), pt(mpred_mark(pfcPosTrigger, p, ptSymmetric, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ptSymmetric, 1)])))).
spft(marker_supported(ptSymmetric, 1), mpred_mark(pfcPosTrigger, p, ptSymmetric, 1), pt(mpred_mark(pfcPosTrigger, p, ptSymmetric, 1),  (ground(p:ptSymmetric:1)->rhs([marker_supported(ptSymmetric, 1)])))).
spft(hybrid_support(ptSymmetric, 1), marker_supported(ptSymmetric, 1), pt(marker_supported(ptSymmetric, 1), rhs([hybrid_support(ptSymmetric, 1)]))).
spft(prologHybrid(ptSymmetric), hybrid_support(ptSymmetric, 1), pt(hybrid_support(ptSymmetric, 1),  (ptSymmetric\='$VAR', atom(ptSymmetric), integer(1), \+prologDynamic(ptSymmetric), \+static_predicate(ptSymmetric/1)->rhs([{functor(ptSymmetric(A), ptSymmetric, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ptSymmetric, baseKB:ptSymmetric(A)), \+predicate_property(baseKB:ptSymmetric(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ptSymmetric(A), exported);true), kb_dynamic(baseKB:ptSymmetric/1), show_failure(hybrid_support, \+static_predicate(ptSymmetric/1))}, prologHybrid(ptSymmetric), arity(ptSymmetric, 1)])))).
spft(pt(arity(ptSymmetric, A), rhs([hybrid_support(ptSymmetric, A)])), prologHybrid(ptSymmetric), pt(prologHybrid(ptSymmetric), pt(arity(ptSymmetric, A), rhs([hybrid_support(ptSymmetric, A)])))).
spft(hybrid_support(ptSymmetric, 1), arity(ptSymmetric, 1), pt(arity(ptSymmetric, A), rhs([hybrid_support(ptSymmetric, A)]))).
spft(hybrid_support(ptSymmetric, 1), arity(ptSymmetric, 1), pt(arity(ptSymmetric, A), rhs([hybrid_support(ptSymmetric, A)]))).
spft(arity(ptSymmetric, 1), hybrid_support(ptSymmetric, 1), pt(hybrid_support(ptSymmetric, 1),  (ptSymmetric\='$VAR', atom(ptSymmetric), integer(1), \+prologDynamic(ptSymmetric), \+static_predicate(ptSymmetric/1)->rhs([{functor(ptSymmetric(A), ptSymmetric, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ptSymmetric, baseKB:ptSymmetric(A)), \+predicate_property(baseKB:ptSymmetric(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ptSymmetric(A), exported);true), kb_dynamic(baseKB:ptSymmetric/1), show_failure(hybrid_support, \+static_predicate(ptSymmetric/1))}, prologHybrid(ptSymmetric), arity(ptSymmetric, 1)])))).
spft(prologHybrid(ptSymmetric), hybrid_support(ptSymmetric, 1), pt(hybrid_support(ptSymmetric, 1), rhs([prologHybrid(ptSymmetric), arity(ptSymmetric, 1)]))).
spft(arity(ptSymmetric, 1), hybrid_support(ptSymmetric, 1), pt(hybrid_support(ptSymmetric, 1), rhs([prologHybrid(ptSymmetric), arity(ptSymmetric, 1)]))).
spft(pt(ptSymmetric(A), rhs([{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E)])),  (ptSymmetric(F)==>{atom(F), I=..[F, H, G], J=..[F, G, H]},  (I==>J),  (~I==> ~J)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 521)).
spft(tCol(tNotForUnboundPredicates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 524), ax).
spft((prologSideEffects(A)==>tNotForUnboundPredicates(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 526), ax).
spft(mpred_mark(pfcLHS, p, prologSideEffects, 1), s(((prologSideEffects(A)==>tNotForUnboundPredicates(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 526))), ax).
spft(arity(prologSideEffects, 1), mpred_mark(pfcLHS, p, prologSideEffects, 1), pt(mpred_mark(pfcLHS, p, prologSideEffects, 1),  (ground(pfcLHS:p)->rhs([arity(prologSideEffects, 1)])))).
spft(mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1), s(((prologSideEffects(A)==>tNotForUnboundPredicates(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 526))), ax).
spft(arity(tNotForUnboundPredicates, 1), mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1), pt(mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1),  (ground(pfcCreates:p)->rhs([arity(tNotForUnboundPredicates, 1)])))).
spft(marker_supported(tNotForUnboundPredicates, 1), mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1), pt(mpred_mark(pfcCreates, p, tNotForUnboundPredicates, 1),  (ground(p:tNotForUnboundPredicates:1)->rhs([marker_supported(tNotForUnboundPredicates, 1)])))).
spft(hybrid_support(tNotForUnboundPredicates, 1), marker_supported(tNotForUnboundPredicates, 1), pt(marker_supported(tNotForUnboundPredicates, 1), rhs([hybrid_support(tNotForUnboundPredicates, 1)]))).
spft(prologHybrid(tNotForUnboundPredicates), hybrid_support(tNotForUnboundPredicates, 1), pt(hybrid_support(tNotForUnboundPredicates, 1),  (tNotForUnboundPredicates\='$VAR', atom(tNotForUnboundPredicates), integer(1), \+prologDynamic(tNotForUnboundPredicates), \+static_predicate(tNotForUnboundPredicates/1)->rhs([{functor(tNotForUnboundPredicates(A), tNotForUnboundPredicates, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tNotForUnboundPredicates, baseKB:tNotForUnboundPredicates(A)), \+predicate_property(baseKB:tNotForUnboundPredicates(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tNotForUnboundPredicates(A), exported);true), kb_dynamic(baseKB:tNotForUnboundPredicates/1), show_failure(hybrid_support, \+static_predicate(tNotForUnboundPredicates/1))}, prologHybrid(tNotForUnboundPredicates), arity(tNotForUnboundPredicates, 1)])))).
spft(pt(arity(tNotForUnboundPredicates, A), rhs([hybrid_support(tNotForUnboundPredicates, A)])), prologHybrid(tNotForUnboundPredicates), pt(prologHybrid(tNotForUnboundPredicates), pt(arity(tNotForUnboundPredicates, A), rhs([hybrid_support(tNotForUnboundPredicates, A)])))).
spft(hybrid_support(tNotForUnboundPredicates, 1), arity(tNotForUnboundPredicates, 1), pt(arity(tNotForUnboundPredicates, A), rhs([hybrid_support(tNotForUnboundPredicates, A)]))).
spft(hybrid_support(tNotForUnboundPredicates, 1), arity(tNotForUnboundPredicates, 1), pt(arity(tNotForUnboundPredicates, A), rhs([hybrid_support(tNotForUnboundPredicates, A)]))).
spft(arity(tNotForUnboundPredicates, 1), hybrid_support(tNotForUnboundPredicates, 1), pt(hybrid_support(tNotForUnboundPredicates, 1),  (tNotForUnboundPredicates\='$VAR', atom(tNotForUnboundPredicates), integer(1), \+prologDynamic(tNotForUnboundPredicates), \+static_predicate(tNotForUnboundPredicates/1)->rhs([{functor(tNotForUnboundPredicates(A), tNotForUnboundPredicates, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tNotForUnboundPredicates, baseKB:tNotForUnboundPredicates(A)), \+predicate_property(baseKB:tNotForUnboundPredicates(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tNotForUnboundPredicates(A), exported);true), kb_dynamic(baseKB:tNotForUnboundPredicates/1), show_failure(hybrid_support, \+static_predicate(tNotForUnboundPredicates/1))}, prologHybrid(tNotForUnboundPredicates), arity(tNotForUnboundPredicates, 1)])))).
spft(prologHybrid(tNotForUnboundPredicates), hybrid_support(tNotForUnboundPredicates, 1), pt(hybrid_support(tNotForUnboundPredicates, 1), rhs([prologHybrid(tNotForUnboundPredicates), arity(tNotForUnboundPredicates, 1)]))).
spft(arity(tNotForUnboundPredicates, 1), hybrid_support(tNotForUnboundPredicates, 1), pt(hybrid_support(tNotForUnboundPredicates, 1), rhs([prologHybrid(tNotForUnboundPredicates), arity(tNotForUnboundPredicates, 1)]))).
spft(mpred_mark(pfcPosTrigger, p, prologSideEffects, 1), s(((prologSideEffects(A)==>tNotForUnboundPredicates(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 526))), ax).
spft(arity(prologSideEffects, 1), mpred_mark(pfcPosTrigger, p, prologSideEffects, 1), pt(mpred_mark(pfcPosTrigger, p, prologSideEffects, 1),  (ground(pfcPosTrigger:p)->rhs([arity(prologSideEffects, 1)])))).
spft(marker_supported(prologSideEffects, 1), mpred_mark(pfcPosTrigger, p, prologSideEffects, 1), pt(mpred_mark(pfcPosTrigger, p, prologSideEffects, 1),  (ground(p:prologSideEffects:1)->rhs([marker_supported(prologSideEffects, 1)])))).
spft(hybrid_support(prologSideEffects, 1), marker_supported(prologSideEffects, 1), pt(marker_supported(prologSideEffects, 1), rhs([hybrid_support(prologSideEffects, 1)]))).
spft(pt(prologSideEffects(A), rhs([tNotForUnboundPredicates(A)])),  (prologSideEffects(B)==>tNotForUnboundPredicates(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 526)).
spft(tNotForUnboundPredicates(write), prologSideEffects(write), pt(prologSideEffects(A), rhs([tNotForUnboundPredicates(A)]))).
spft(tNotForUnboundPredicates(resolveConflict), prologSideEffects(resolveConflict), pt(prologSideEffects(A), rhs([tNotForUnboundPredicates(A)]))).
spft(ttAbstractType(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 528), ax).
spft((tCol(A), {isa_from_morphology(A, B)}==>isa(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 548), ax).
spft(mpred_mark(pfcCallCode, p, isa_from_morphology, 2), s(((tCol(A), {isa_from_morphology(A, B)}==>isa(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 548))), ax).
spft(arity(isa_from_morphology, 2), mpred_mark(pfcCallCode, p, isa_from_morphology, 2), pt(mpred_mark(pfcCallCode, p, isa_from_morphology, 2),  (ground(pfcCallCode:p)->rhs([arity(isa_from_morphology, 2)])))).
spft(pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)]))),  (tCol(C), {isa_from_morphology(C, D)}==>isa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 548)).
spft(isa(ttValueType, ttTypeType), tCol(ttValueType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tNotForUnboundPredicates, tCol), tCol(tNotForUnboundPredicates), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologNegByFailure, ttPredType), tCol(prologNegByFailure), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tCol, tFunction), tCol(tCol), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tSpec, tCol), tCol(tSpec), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttFormatType, ttTypeType), tCol(ttFormatType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tSet, tCol), tCol(tSet), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tRelation, tCol), tCol(tRelation), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tPred, tCol), tCol(tPred), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tFunction, tCol), tCol(tFunction), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologMacroHead, ttPredType), tCol(prologMacroHead), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttPredType, ttTypeType), tCol(ttPredType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologMultiValued, ttPredType), tCol(prologMultiValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologOrdered, ttPredType), tCol(prologOrdered), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(predIsFlag, tPred), tCol(predIsFlag), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttNonGenled, ttTypeType), tCol(ttNonGenled), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologHybrid, ttPredType), tCol(prologHybrid), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologPTTP, ttPredType), tCol(prologPTTP), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologDynamic, ttPredType), tCol(prologDynamic), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologKIF, ttPredType), tCol(prologKIF), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologBuiltin, ttPredType), tCol(prologBuiltin), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologListValued, ttPredType), tCol(prologListValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologSingleValued, ttPredType), tCol(prologSingleValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(predCanHaveSingletons, tPred), tCol(predCanHaveSingletons), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tTemporalThing, tCol), tCol(tTemporalThing), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologSideEffects, ttPredType), tCol(prologSideEffects), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tInferInstanceFromArgType, ttTypeType), tCol(tInferInstanceFromArgType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttNotTemporalType, ttTypeType), tCol(ttNotTemporalType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttSpatialType, ttTypeType), tCol(ttSpatialType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttTemporalType, ttTypeType), tCol(ttTemporalType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttUnverifiableType, ttTypeType), tCol(ttUnverifiableType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologEquality, ttPredType), tCol(prologEquality), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ftInt, ttFormatType), tCol(ftInt), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(vtDirection, ttValueType), tCol(vtDirection), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)]))),  (tCol(C), {isa_from_morphology(C, D)}==>isa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 548)).
spft(isa(ttValueType, ttTypeType), tCol(ttValueType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tNotForUnboundPredicates, tCol), tCol(tNotForUnboundPredicates), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologNegByFailure, ttPredType), tCol(prologNegByFailure), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tCol, tFunction), tCol(tCol), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tSpec, tCol), tCol(tSpec), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttFormatType, ttTypeType), tCol(ttFormatType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tSet, tCol), tCol(tSet), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tRelation, tCol), tCol(tRelation), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tPred, tCol), tCol(tPred), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tFunction, tCol), tCol(tFunction), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologMacroHead, ttPredType), tCol(prologMacroHead), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttPredType, ttTypeType), tCol(ttPredType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologMultiValued, ttPredType), tCol(prologMultiValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologOrdered, ttPredType), tCol(prologOrdered), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(predIsFlag, tPred), tCol(predIsFlag), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttNonGenled, ttTypeType), tCol(ttNonGenled), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologHybrid, ttPredType), tCol(prologHybrid), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologPTTP, ttPredType), tCol(prologPTTP), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologDynamic, ttPredType), tCol(prologDynamic), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologKIF, ttPredType), tCol(prologKIF), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologBuiltin, ttPredType), tCol(prologBuiltin), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologListValued, ttPredType), tCol(prologListValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologSingleValued, ttPredType), tCol(prologSingleValued), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(predCanHaveSingletons, tPred), tCol(predCanHaveSingletons), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tTemporalThing, tCol), tCol(tTemporalThing), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologSideEffects, ttPredType), tCol(prologSideEffects), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(tInferInstanceFromArgType, ttTypeType), tCol(tInferInstanceFromArgType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttNotTemporalType, ttTypeType), tCol(ttNotTemporalType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttSpatialType, ttTypeType), tCol(ttSpatialType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttTemporalType, ttTypeType), tCol(ttTemporalType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ttUnverifiableType, ttTypeType), tCol(ttUnverifiableType), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(prologEquality, ttPredType), tCol(prologEquality), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(ftInt, ttFormatType), tCol(ftInt), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(isa(vtDirection, ttValueType), tCol(vtDirection), pt(tCol(A),  (isa_from_morphology(A, B)->rhs([isa(A, B)])))).
spft(tCol(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 555), ax).
spft(tCol(completeIsaAsserted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 556), ax).
spft(arity(completeIsaAsserted, 1), tCol(completeIsaAsserted), pt(tCol(completeIsaAsserted),  (atom(completeIsaAsserted), completeIsaAsserted(A)=..[completeIsaAsserted, A]->rhs([{decl_type(completeIsaAsserted)}, arity(completeIsaAsserted, 1), mpred_univ(completeIsaAsserted, A, completeIsaAsserted(A))])))).
spft(mpred_univ(completeIsaAsserted, A, completeIsaAsserted(A)), tCol(completeIsaAsserted), pt(tCol(completeIsaAsserted),  (atom(completeIsaAsserted), completeIsaAsserted(A)=..[completeIsaAsserted, A]->rhs([{decl_type(completeIsaAsserted)}, arity(completeIsaAsserted, 1), mpred_univ(completeIsaAsserted, A, completeIsaAsserted(A))])))).
spft((completeIsaAsserted(A):-cwc, lazy(\+ ~completeIsaAsserted(A)), isa_backchaing(A, completeIsaAsserted)), tCol(completeIsaAsserted), pt(tCol(completeIsaAsserted),  (atom(completeIsaAsserted), completeIsaAsserted(A)=..[completeIsaAsserted, A], \+static_predicate(completeIsaAsserted/1), \+completelyAssertedCollection(completeIsaAsserted)->rhs([(completeIsaAsserted(A):-cwc, lazy(\+ ~completeIsaAsserted(A)), isa_backchaing(A, completeIsaAsserted))])))).
spft(genls(completelyAssertedCollection, tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 558), ax).
spft(completelyAssertedCollection(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 559), ax).
spft(completelyAssertedCollection(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 560), ax).
spft(completelyAssertedCollection(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 561), ax).
spft(completelyAssertedCollection(tFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 562), ax).
spft(tCol(tFormatType), completelyAssertedCollection(tFormatType), pt(completelyAssertedCollection(tFormatType), rhs([tCol(tFormatType)]))).
spft(arity(tFormatType, 1), tCol(tFormatType), pt(tCol(tFormatType),  (atom(tFormatType), tFormatType(A)=..[tFormatType, A]->rhs([{decl_type(tFormatType)}, arity(tFormatType, 1), mpred_univ(tFormatType, A, tFormatType(A))])))).
spft(mpred_univ(tFormatType, A, tFormatType(A)), tCol(tFormatType), pt(tCol(tFormatType),  (atom(tFormatType), tFormatType(A)=..[tFormatType, A]->rhs([{decl_type(tFormatType)}, arity(tFormatType, 1), mpred_univ(tFormatType, A, tFormatType(A))])))).
spft(isa(tFormatType, ttTypeType), tCol(tFormatType), pt(tCol(tFormatType),  (isa_from_morphology(tFormatType, ttTypeType)->rhs([isa(tFormatType, ttTypeType)])))).
spft(completeExtentAsserted(tFormatType), completelyAssertedCollection(tFormatType), pt(completelyAssertedCollection(tFormatType), rhs([completeExtentAsserted(tFormatType)]))).
spft(completelyAssertedCollection(tSet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 563), ax).
spft(completelyAssertedCollection(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 564), ax).
spft(completelyAssertedCollection(ttPredType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 565), ax).
spft(completelyAssertedCollection(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 566), ax).
spft(tCol(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 574), ax).
spft(tCol(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 575), ax).
spft(tCol(tFunction), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 576), ax).
spft(tCol(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 577), ax).
spft(tCol(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 578), ax).
spft(tCol(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 579), ax).
spft(tCol(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 580), ax).
spft(tCol(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 584), ax).
spft((genls(B, A), genls(A, B), {B\==A}==>{mpred_withdraw(genls(B, A))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7), ax).
spft(mpred_mark(pfcLHS, p, genls, 2), s(((genls(B, A), genls(A, B), {B\==A}==>{mpred_withdraw(genls(B, A))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7))), ax).
spft(arity(genls, 2), mpred_mark(pfcLHS, p, genls, 2), pt(mpred_mark(pfcLHS, p, genls, 2),  (ground(pfcLHS:p)->rhs([arity(genls, 2)])))).
spft(mpred_mark(pfcCallCode, p, mpred_withdraw, 1), s(((genls(B, A), genls(A, B), {B\==A}==>{mpred_withdraw(genls(B, A))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7))), ax).
spft(arity(mpred_withdraw, 1), mpred_mark(pfcCallCode, p, mpred_withdraw, 1), pt(mpred_mark(pfcCallCode, p, mpred_withdraw, 1),  (ground(pfcCallCode:p)->rhs([arity(mpred_withdraw, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, genls, 2), s(((genls(B, A), genls(A, B), {B\==A}==>{mpred_withdraw(genls(B, A))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7))), ax).
spft(arity(genls, 2), mpred_mark(pfcPosTrigger, p, genls, 2), pt(mpred_mark(pfcPosTrigger, p, genls, 2),  (ground(pfcPosTrigger:p)->rhs([arity(genls, 2)])))).
spft(marker_supported(genls, 2), mpred_mark(pfcPosTrigger, p, genls, 2), pt(mpred_mark(pfcPosTrigger, p, genls, 2),  (ground(p:genls:2)->rhs([marker_supported(genls, 2)])))).
spft(pt(genls(B, A), pt(genls(A, B),  (B\==A->rhs([{mpred_withdraw(genls(B, A))}])))),  (genls(D, C), genls(C, D), {D\==C}==>{mpred_withdraw(genls(D, C))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7)).
spft(pt(genls(tCol, completelyAssertedCollection),  (completelyAssertedCollection\==tCol->rhs([{mpred_withdraw(genls(completelyAssertedCollection, tCol))}]))), genls(completelyAssertedCollection, tCol), pt(genls(B, A), pt(genls(A, B),  (B\==A->rhs([{mpred_withdraw(genls(B, A))}]))))).
spft(pt(genls(B, A), pt(genls(A, B),  (B\==A->rhs([{mpred_withdraw(genls(B, A))}])))),  (genls(D, C), genls(C, D), {D\==C}==>{mpred_withdraw(genls(D, C))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 7)).
spft(pt(genls(tCol, completelyAssertedCollection),  (completelyAssertedCollection\==tCol->rhs([{mpred_withdraw(genls(completelyAssertedCollection, tCol))}]))), genls(completelyAssertedCollection, tCol), pt(genls(B, A), pt(genls(A, B),  (B\==A->rhs([{mpred_withdraw(genls(B, A))}]))))).
spft((genls(A, B), arity(A, 1), arity(B, 1), {\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A}==>{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13), ax).
spft(mpred_mark(pfcCallCode, n, genls, 2), s(((genls(A, B), arity(A, 1), arity(B, 1), {\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A}==>{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13))), ax).
spft(arity(genls, 2), mpred_mark(pfcCallCode, n, genls, 2), pt(mpred_mark(pfcCallCode, n, genls, 2),  (ground(pfcCallCode:n)->rhs([arity(genls, 2)])))).
spft(mpred_mark(pfcCallCode, n, \=, 2), s(((genls(A, B), arity(A, 1), arity(B, 1), {\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A}==>{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13))), ax).
spft(arity(\=, 2), mpred_mark(pfcCallCode, n, \=, 2), pt(mpred_mark(pfcCallCode, n, \=, 2),  (ground(pfcCallCode:n)->rhs([arity(\=, 2)])))).
spft(mpred_mark(pfcCreates, p, nearestGenls, 2), s(((genls(A, B), arity(A, 1), arity(B, 1), {\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A}==>{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13))), ax).
spft(arity(nearestGenls, 2), mpred_mark(pfcCreates, p, nearestGenls, 2), pt(mpred_mark(pfcCreates, p, nearestGenls, 2),  (ground(pfcCreates:p)->rhs([arity(nearestGenls, 2)])))).
spft(marker_supported(nearestGenls, 2), mpred_mark(pfcCreates, p, nearestGenls, 2), pt(mpred_mark(pfcCreates, p, nearestGenls, 2),  (ground(p:nearestGenls:2)->rhs([marker_supported(nearestGenls, 2)])))).
spft(hybrid_support(nearestGenls, 2), marker_supported(nearestGenls, 2), pt(marker_supported(nearestGenls, 2), rhs([hybrid_support(nearestGenls, 2)]))).
spft(prologHybrid(nearestGenls), hybrid_support(nearestGenls, 2), pt(hybrid_support(nearestGenls, 2),  (nearestGenls\='$VAR', atom(nearestGenls), integer(2), \+prologDynamic(nearestGenls), \+static_predicate(nearestGenls/2)->rhs([{functor(nearestGenls(A, B), nearestGenls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(nearestGenls, baseKB:nearestGenls(A, B)), \+predicate_property(baseKB:nearestGenls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:nearestGenls(A, B), exported);true), kb_dynamic(baseKB:nearestGenls/2), show_failure(hybrid_support, \+static_predicate(nearestGenls/2))}, prologHybrid(nearestGenls), arity(nearestGenls, 2)])))).
spft(pt(arity(nearestGenls, A), rhs([hybrid_support(nearestGenls, A)])), prologHybrid(nearestGenls), pt(prologHybrid(nearestGenls), pt(arity(nearestGenls, A), rhs([hybrid_support(nearestGenls, A)])))).
spft(hybrid_support(nearestGenls, 2), arity(nearestGenls, 2), pt(arity(nearestGenls, A), rhs([hybrid_support(nearestGenls, A)]))).
spft(arity(nearestGenls, 2), hybrid_support(nearestGenls, 2), pt(hybrid_support(nearestGenls, 2),  (nearestGenls\='$VAR', atom(nearestGenls), integer(2), \+prologDynamic(nearestGenls), \+static_predicate(nearestGenls/2)->rhs([{functor(nearestGenls(A, B), nearestGenls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(nearestGenls, baseKB:nearestGenls(A, B)), \+predicate_property(baseKB:nearestGenls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:nearestGenls(A, B), exported);true), kb_dynamic(baseKB:nearestGenls/2), show_failure(hybrid_support, \+static_predicate(nearestGenls/2))}, prologHybrid(nearestGenls), arity(nearestGenls, 2)])))).
spft(prologHybrid(nearestGenls), hybrid_support(nearestGenls, 2), pt(hybrid_support(nearestGenls, 2), rhs([prologHybrid(nearestGenls), arity(nearestGenls, 2)]))).
spft(arity(nearestGenls, 2), hybrid_support(nearestGenls, 2), pt(hybrid_support(nearestGenls, 2), rhs([prologHybrid(nearestGenls), arity(nearestGenls, 2)]))).
spft(pt(genls(A, B), pt(arity(A, 1), pt(arity(B, 1),  (\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A->rhs([{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)]))))),  (genls(F, G), arity(F, 1), arity(G, 1), {\+ (genls(F, H), H\=F, genls(H, G), H\=G), G\=F}==>{get_functor(F, I), get_functor(G, J), nop(dmsg(wishing_to_add((F==>G))))}, nearestGenls(I, J)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13)).
spft(pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)])))), genls(completelyAssertedCollection, tCol), pt(genls(D, E), pt(arity(D, 1), pt(arity(E, 1),  (\+ (genls(D, F), F\=D, genls(F, E), F\=E), E\=D->rhs([{get_functor(D, G), get_functor(E, H), nop(dmsg(wishing_to_add((D==>E))))}, nearestGenls(G, H)])))))).
spft(pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)]))), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, D), D\=completelyAssertedCollection, genls(D, tCol), D\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, E), get_functor(tCol, F), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(E, F)]))))).
spft(pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)]))), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, D), D\=completelyAssertedCollection, genls(D, tCol), D\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, E), get_functor(tCol, F), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(E, F)]))))).
spft(pt(genls(A, B), pt(arity(A, 1), pt(arity(B, 1),  (\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A->rhs([{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E)]))))),  (genls(F, G), arity(F, 1), arity(G, 1), {\+ (genls(F, H), H\=F, genls(H, G), H\=G), G\=F}==>{get_functor(F, I), get_functor(G, J), nop(dmsg(wishing_to_add((F==>G))))}, nearestGenls(I, J)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 13)).
spft(pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)])))), genls(completelyAssertedCollection, tCol), pt(genls(D, E), pt(arity(D, 1), pt(arity(E, 1),  (\+ (genls(D, F), F\=D, genls(F, E), F\=E), E\=D->rhs([{get_functor(D, G), get_functor(E, H), nop(dmsg(wishing_to_add((D==>E))))}, nearestGenls(G, H)])))))).
spft(pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)]))), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, D), D\=completelyAssertedCollection, genls(D, tCol), D\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, E), get_functor(tCol, F), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(E, F)]))))).
spft(pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, A), A\=completelyAssertedCollection, genls(A, tCol), A\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, B), get_functor(tCol, C), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(B, C)]))), arity(completelyAssertedCollection, 1), pt(arity(completelyAssertedCollection, 1), pt(arity(tCol, 1),  (\+ (genls(completelyAssertedCollection, D), D\=completelyAssertedCollection, genls(D, tCol), D\=tCol), tCol\=completelyAssertedCollection->rhs([{get_functor(completelyAssertedCollection, E), get_functor(tCol, F), nop(dmsg(wishing_to_add((completelyAssertedCollection==>tCol))))}, nearestGenls(E, F)]))))).
spft((nearestGenls(A, B)==>{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 24), ax).
spft(mpred_mark(pfcLHS, p, nearestGenls, 2), s(((nearestGenls(A, B)==>{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 24))), ax).
spft(arity(nearestGenls, 2), mpred_mark(pfcLHS, p, nearestGenls, 2), pt(mpred_mark(pfcLHS, p, nearestGenls, 2),  (ground(pfcLHS:p)->rhs([arity(nearestGenls, 2)])))).
spft(mpred_mark(pfcCallCode, p, asserta_if_new, 1), s(((nearestGenls(A, B)==>{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 24))), ax).
spft(arity(asserta_if_new, 1), mpred_mark(pfcCallCode, p, asserta_if_new, 1), pt(mpred_mark(pfcCallCode, p, asserta_if_new, 1),  (ground(pfcCallCode:p)->rhs([arity(asserta_if_new, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, nearestGenls, 2), s(((nearestGenls(A, B)==>{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 24))), ax).
spft(arity(nearestGenls, 2), mpred_mark(pfcPosTrigger, p, nearestGenls, 2), pt(mpred_mark(pfcPosTrigger, p, nearestGenls, 2),  (ground(pfcPosTrigger:p)->rhs([arity(nearestGenls, 2)])))).
spft(marker_supported(nearestGenls, 2), mpred_mark(pfcPosTrigger, p, nearestGenls, 2), pt(mpred_mark(pfcPosTrigger, p, nearestGenls, 2),  (ground(p:nearestGenls:2)->rhs([marker_supported(nearestGenls, 2)])))).
spft(pt(nearestGenls(A, B), rhs([{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}])),  (nearestGenls(H, I)==>{get_functor(H, J), get_functor(I, K), N=..[J, L], M=..[K, L], asserta_if_new((M:-loop_check(N)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 24)).
spft((completeIsaAsserted(A), isa(A, B), genls(B, C), {ground(B:C)}==>{dif:dif(B, C)}, isa(A, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32), ax).
spft(mpred_mark(pfcLHS, p, completeIsaAsserted, 1), s(((completeIsaAsserted(A), isa(A, B), genls(B, C), {ground(B:C)}==>{dif:dif(B, C)}, isa(A, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32))), ax).
spft(arity(completeIsaAsserted, 1), mpred_mark(pfcLHS, p, completeIsaAsserted, 1), pt(mpred_mark(pfcLHS, p, completeIsaAsserted, 1),  (ground(pfcLHS:p)->rhs([arity(completeIsaAsserted, 1)])))).
spft(mpred_mark(pfcCallCode, p, dif, 2), s(((completeIsaAsserted(A), isa(A, B), genls(B, C), {ground(B:C)}==>{dif:dif(B, C)}, isa(A, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32))), ax).
spft(arity(dif, 2), mpred_mark(pfcCallCode, p, dif, 2), pt(mpred_mark(pfcCallCode, p, dif, 2),  (ground(pfcCallCode:p)->rhs([arity(dif, 2)])))).
spft(mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1), s(((completeIsaAsserted(A), isa(A, B), genls(B, C), {ground(B:C)}==>{dif:dif(B, C)}, isa(A, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32))), ax).
spft(arity(completeIsaAsserted, 1), mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1), pt(mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1),  (ground(pfcPosTrigger:p)->rhs([arity(completeIsaAsserted, 1)])))).
spft(marker_supported(completeIsaAsserted, 1), mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1), pt(mpred_mark(pfcPosTrigger, p, completeIsaAsserted, 1),  (ground(p:completeIsaAsserted:1)->rhs([marker_supported(completeIsaAsserted, 1)])))).
spft(hybrid_support(completeIsaAsserted, 1), marker_supported(completeIsaAsserted, 1), pt(marker_supported(completeIsaAsserted, 1), rhs([hybrid_support(completeIsaAsserted, 1)]))).
spft(prologHybrid(completeIsaAsserted), hybrid_support(completeIsaAsserted, 1), pt(hybrid_support(completeIsaAsserted, 1),  (completeIsaAsserted\='$VAR', atom(completeIsaAsserted), integer(1), \+prologDynamic(completeIsaAsserted), \+static_predicate(completeIsaAsserted/1)->rhs([{functor(completeIsaAsserted(A), completeIsaAsserted, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completeIsaAsserted, baseKB:completeIsaAsserted(A)), \+predicate_property(baseKB:completeIsaAsserted(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completeIsaAsserted(A), exported);true), kb_dynamic(baseKB:completeIsaAsserted/1), show_failure(hybrid_support, \+static_predicate(completeIsaAsserted/1))}, prologHybrid(completeIsaAsserted), arity(completeIsaAsserted, 1)])))).
spft(pt(arity(completeIsaAsserted, A), rhs([hybrid_support(completeIsaAsserted, A)])), prologHybrid(completeIsaAsserted), pt(prologHybrid(completeIsaAsserted), pt(arity(completeIsaAsserted, A), rhs([hybrid_support(completeIsaAsserted, A)])))).
spft(hybrid_support(completeIsaAsserted, 1), arity(completeIsaAsserted, 1), pt(arity(completeIsaAsserted, A), rhs([hybrid_support(completeIsaAsserted, A)]))).
spft(hybrid_support(completeIsaAsserted, 1), arity(completeIsaAsserted, 1), pt(arity(completeIsaAsserted, A), rhs([hybrid_support(completeIsaAsserted, A)]))).
spft(arity(completeIsaAsserted, 1), hybrid_support(completeIsaAsserted, 1), pt(hybrid_support(completeIsaAsserted, 1),  (completeIsaAsserted\='$VAR', atom(completeIsaAsserted), integer(1), \+prologDynamic(completeIsaAsserted), \+static_predicate(completeIsaAsserted/1)->rhs([{functor(completeIsaAsserted(A), completeIsaAsserted, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(completeIsaAsserted, baseKB:completeIsaAsserted(A)), \+predicate_property(baseKB:completeIsaAsserted(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:completeIsaAsserted(A), exported);true), kb_dynamic(baseKB:completeIsaAsserted/1), show_failure(hybrid_support, \+static_predicate(completeIsaAsserted/1))}, prologHybrid(completeIsaAsserted), arity(completeIsaAsserted, 1)])))).
spft(prologHybrid(completeIsaAsserted), hybrid_support(completeIsaAsserted, 1), pt(hybrid_support(completeIsaAsserted, 1), rhs([prologHybrid(completeIsaAsserted), arity(completeIsaAsserted, 1)]))).
spft(arity(completeIsaAsserted, 1), hybrid_support(completeIsaAsserted, 1), pt(hybrid_support(completeIsaAsserted, 1), rhs([prologHybrid(completeIsaAsserted), arity(completeIsaAsserted, 1)]))).
spft(pt(completeIsaAsserted(A), pt(isa(A, B), pt(genls(B, C),  (ground(B:C)->rhs([{dif:dif(B, C)}, isa(A, C)]))))),  (completeIsaAsserted(D), isa(D, E), genls(E, F), {ground(E:F)}==>{dif:dif(E, F)}, isa(D, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32)).
spft(pt(completeIsaAsserted(A), pt(isa(A, B), pt(genls(B, C),  (ground(B:C)->rhs([{dif:dif(B, C)}, isa(A, C)]))))),  (completeIsaAsserted(D), isa(D, E), genls(E, F), {ground(E:F)}==>{dif:dif(E, F)}, isa(D, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 32)).
spft((meta_argtypes(A), {dif:dif(A, B)}, genls(A, B), tCol(B), {~isa(B, ttFormatType)}==>formatted_resultIsa(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36), ax).
spft(mpred_mark(pfcCreates, p, formatted_resultIsa, 2), s(((meta_argtypes(A), {dif:dif(A, B)}, genls(A, B), tCol(B), {~isa(B, ttFormatType)}==>formatted_resultIsa(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36))), ax).
spft(arity(formatted_resultIsa, 2), mpred_mark(pfcCreates, p, formatted_resultIsa, 2), pt(mpred_mark(pfcCreates, p, formatted_resultIsa, 2),  (ground(pfcCreates:p)->rhs([arity(formatted_resultIsa, 2)])))).
spft(marker_supported(formatted_resultIsa, 2), mpred_mark(pfcCreates, p, formatted_resultIsa, 2), pt(mpred_mark(pfcCreates, p, formatted_resultIsa, 2),  (ground(p:formatted_resultIsa:2)->rhs([marker_supported(formatted_resultIsa, 2)])))).
spft(hybrid_support(formatted_resultIsa, 2), marker_supported(formatted_resultIsa, 2), pt(marker_supported(formatted_resultIsa, 2), rhs([hybrid_support(formatted_resultIsa, 2)]))).
spft(prologHybrid(formatted_resultIsa), hybrid_support(formatted_resultIsa, 2), pt(hybrid_support(formatted_resultIsa, 2),  (formatted_resultIsa\='$VAR', atom(formatted_resultIsa), integer(2), \+prologDynamic(formatted_resultIsa), \+static_predicate(formatted_resultIsa/2)->rhs([{functor(formatted_resultIsa(A, B), formatted_resultIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(formatted_resultIsa, baseKB:formatted_resultIsa(A, B)), \+predicate_property(baseKB:formatted_resultIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:formatted_resultIsa(A, B), exported);true), kb_dynamic(baseKB:formatted_resultIsa/2), show_failure(hybrid_support, \+static_predicate(formatted_resultIsa/2))}, prologHybrid(formatted_resultIsa), arity(formatted_resultIsa, 2)])))).
spft(pt(arity(formatted_resultIsa, A), rhs([hybrid_support(formatted_resultIsa, A)])), prologHybrid(formatted_resultIsa), pt(prologHybrid(formatted_resultIsa), pt(arity(formatted_resultIsa, A), rhs([hybrid_support(formatted_resultIsa, A)])))).
spft(hybrid_support(formatted_resultIsa, 2), arity(formatted_resultIsa, 2), pt(arity(formatted_resultIsa, A), rhs([hybrid_support(formatted_resultIsa, A)]))).
spft(arity(formatted_resultIsa, 2), hybrid_support(formatted_resultIsa, 2), pt(hybrid_support(formatted_resultIsa, 2),  (formatted_resultIsa\='$VAR', atom(formatted_resultIsa), integer(2), \+prologDynamic(formatted_resultIsa), \+static_predicate(formatted_resultIsa/2)->rhs([{functor(formatted_resultIsa(A, B), formatted_resultIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(formatted_resultIsa, baseKB:formatted_resultIsa(A, B)), \+predicate_property(baseKB:formatted_resultIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:formatted_resultIsa(A, B), exported);true), kb_dynamic(baseKB:formatted_resultIsa/2), show_failure(hybrid_support, \+static_predicate(formatted_resultIsa/2))}, prologHybrid(formatted_resultIsa), arity(formatted_resultIsa, 2)])))).
spft(prologHybrid(formatted_resultIsa), hybrid_support(formatted_resultIsa, 2), pt(hybrid_support(formatted_resultIsa, 2), rhs([prologHybrid(formatted_resultIsa), arity(formatted_resultIsa, 2)]))).
spft(arity(formatted_resultIsa, 2), hybrid_support(formatted_resultIsa, 2), pt(hybrid_support(formatted_resultIsa, 2), rhs([prologHybrid(formatted_resultIsa), arity(formatted_resultIsa, 2)]))).
spft(pt(meta_argtypes(A),  (dif:dif(A, B)->pt(genls(A, B), pt(tCol(B),  (~isa(B, ttFormatType)->rhs([formatted_resultIsa(A, B)])))))),  (meta_argtypes(C), {dif:dif(C, D)}, genls(C, D), tCol(D), {~isa(D, ttFormatType)}==>formatted_resultIsa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36)).
spft(pt(genls(support_hilog(tRelation, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(support_hilog(tRelation, ftInt), A)])))), meta_argtypes(support_hilog(tRelation, ftInt)), pt(meta_argtypes(B),  (dif:dif(B, C)->pt(genls(B, C), pt(tCol(C),  (~isa(C, ttFormatType)->rhs([formatted_resultIsa(B, C)]))))))).
spft(pt(meta_argtypes(A),  (dif:dif(A, B)->pt(genls(A, B), pt(tCol(B),  (~isa(B, ttFormatType)->rhs([formatted_resultIsa(A, B)])))))),  (meta_argtypes(C), {dif:dif(C, D)}, genls(C, D), tCol(D), {~isa(D, ttFormatType)}==>formatted_resultIsa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36)).
spft(pt(genls(support_hilog(tRelation, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(support_hilog(tRelation, ftInt), A)])))), meta_argtypes(support_hilog(tRelation, ftInt)), pt(meta_argtypes(B),  (dif:dif(B, C)->pt(genls(B, C), pt(tCol(C),  (~isa(C, ttFormatType)->rhs([formatted_resultIsa(B, C)]))))))).
spft(pt(meta_argtypes(A),  (dif:dif(A, B)->pt(genls(A, B), pt(tCol(B),  (~isa(B, ttFormatType)->rhs([formatted_resultIsa(A, B)])))))),  (meta_argtypes(C), {dif:dif(C, D)}, genls(C, D), tCol(D), {~isa(D, ttFormatType)}==>formatted_resultIsa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36)).
spft(pt(genls(support_hilog(tRelation, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(support_hilog(tRelation, ftInt), A)])))), meta_argtypes(support_hilog(tRelation, ftInt)), pt(meta_argtypes(B),  (dif:dif(B, C)->pt(genls(B, C), pt(tCol(C),  (~isa(C, ttFormatType)->rhs([formatted_resultIsa(B, C)]))))))).
spft(pt(meta_argtypes(A),  (dif:dif(A, B)->pt(genls(A, B), pt(tCol(B),  (~isa(B, ttFormatType)->rhs([formatted_resultIsa(A, B)])))))),  (meta_argtypes(C), {dif:dif(C, D)}, genls(C, D), tCol(D), {~isa(D, ttFormatType)}==>formatted_resultIsa(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_genls.pfc.pl', 36)).
spft(pt(genls(support_hilog(tRelation, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(support_hilog(tRelation, ftInt), A)])))), meta_argtypes(support_hilog(tRelation, ftInt)), pt(meta_argtypes(B),  (dif:dif(B, C)->pt(genls(B, C), pt(tCol(C),  (~isa(C, ttFormatType)->rhs([formatted_resultIsa(B, C)]))))))).
spft(genls(ttSpatialType, ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 589), ax).
spft(pt(genls(ttTemporalType, ttSpatialType),  (ttSpatialType\==ttTemporalType->rhs([{mpred_withdraw(genls(ttSpatialType, ttTemporalType))}]))), genls(ttSpatialType, ttTemporalType), pt(genls(ttSpatialType, ttTemporalType), pt(genls(ttTemporalType, ttSpatialType),  (ttSpatialType\==ttTemporalType->rhs([{mpred_withdraw(genls(ttSpatialType, ttTemporalType))}]))))).
spft(pt(arity(ttSpatialType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))), genls(ttSpatialType, ttTemporalType), pt(genls(ttSpatialType, ttTemporalType), pt(arity(ttSpatialType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))))).
spft(pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)]))), arity(ttSpatialType, 1), pt(arity(ttSpatialType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, D), D\=ttSpatialType, genls(D, ttTemporalType), D\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, E), get_functor(ttTemporalType, F), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(ttSpatialType, ttTemporalType), arity(ttTemporalType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))).
spft(nearestGenls(ttSpatialType, ttTemporalType), arity(ttTemporalType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))).
spft(pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)]))), arity(ttSpatialType, 1), pt(arity(ttSpatialType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, D), D\=ttSpatialType, genls(D, ttTemporalType), D\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, E), get_functor(ttTemporalType, F), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(ttSpatialType, ttTemporalType), arity(ttTemporalType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))).
spft(nearestGenls(ttSpatialType, ttTemporalType), arity(ttTemporalType, 1), pt(arity(ttTemporalType, 1),  (\+ (genls(ttSpatialType, A), A\=ttSpatialType, genls(A, ttTemporalType), A\=ttTemporalType), ttTemporalType\=ttSpatialType->rhs([{get_functor(ttSpatialType, B), get_functor(ttTemporalType, C), nop(dmsg(wishing_to_add((ttSpatialType==>ttTemporalType))))}, nearestGenls(B, C)])))).
spft(genls(tSpatialThing, tTemporalThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 590), ax).
spft(pt(genls(tTemporalThing, tSpatialThing),  (tSpatialThing\==tTemporalThing->rhs([{mpred_withdraw(genls(tSpatialThing, tTemporalThing))}]))), genls(tSpatialThing, tTemporalThing), pt(genls(tSpatialThing, tTemporalThing), pt(genls(tTemporalThing, tSpatialThing),  (tSpatialThing\==tTemporalThing->rhs([{mpred_withdraw(genls(tSpatialThing, tTemporalThing))}]))))).
spft(pt(arity(tSpatialThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)])))), genls(tSpatialThing, tTemporalThing), pt(genls(tSpatialThing, tTemporalThing), pt(arity(tSpatialThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)])))))).
spft(tCol(ttNonGenled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 593), ax).
spft(ttNonGenled('Thing'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 595), ax).
spft(ttNonGenled('CycLTerm'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 596), ax).
spft(arity(quotedIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 597), ax).
spft(meta_argtypes(quotedIsa(ftTerm, ttFormatType)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 597), ax).
spft(arity(quotedIsa, 2), meta_argtypes(quotedIsa(ftTerm, ttFormatType)), pt(meta_argtypes(quotedIsa(ftTerm, ttFormatType)),  (is_ftCompound(quotedIsa(ftTerm, ttFormatType))->rhs([{get_functor(quotedIsa(ftTerm, ttFormatType), quotedIsa, 2)}, arity(quotedIsa, 2)])))).
spft(pt(genls(quotedIsa(ftTerm, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedIsa(ftTerm, ttFormatType), A)])))), meta_argtypes(quotedIsa(ftTerm, ttFormatType)), pt(meta_argtypes(quotedIsa(ftTerm, ttFormatType)),  (dif:dif(quotedIsa(ftTerm, ttFormatType), A)->pt(genls(quotedIsa(ftTerm, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedIsa(ftTerm, ttFormatType), A)]))))))).
spft(prologHybrid(quotedIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 597), ax).
spft(pt(arity(quotedIsa, A), rhs([hybrid_support(quotedIsa, A)])), prologHybrid(quotedIsa), pt(prologHybrid(quotedIsa), pt(arity(quotedIsa, A), rhs([hybrid_support(quotedIsa, A)])))).
spft(hybrid_support(quotedIsa, 2), arity(quotedIsa, 2), pt(arity(quotedIsa, A), rhs([hybrid_support(quotedIsa, A)]))).
spft(prologHybrid(quotedIsa), hybrid_support(quotedIsa, 2), pt(hybrid_support(quotedIsa, 2),  (quotedIsa\='$VAR', atom(quotedIsa), integer(2), \+prologDynamic(quotedIsa), \+static_predicate(quotedIsa/2)->rhs([{functor(quotedIsa(A, B), quotedIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(quotedIsa, baseKB:quotedIsa(A, B)), \+predicate_property(baseKB:quotedIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:quotedIsa(A, B), exported);true), kb_dynamic(baseKB:quotedIsa/2), show_failure(hybrid_support, \+static_predicate(quotedIsa/2))}, prologHybrid(quotedIsa), arity(quotedIsa, 2)])))).
spft(arity(quotedIsa, 2), hybrid_support(quotedIsa, 2), pt(hybrid_support(quotedIsa, 2),  (quotedIsa\='$VAR', atom(quotedIsa), integer(2), \+prologDynamic(quotedIsa), \+static_predicate(quotedIsa/2)->rhs([{functor(quotedIsa(A, B), quotedIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(quotedIsa, baseKB:quotedIsa(A, B)), \+predicate_property(baseKB:quotedIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:quotedIsa(A, B), exported);true), kb_dynamic(baseKB:quotedIsa/2), show_failure(hybrid_support, \+static_predicate(quotedIsa/2))}, prologHybrid(quotedIsa), arity(quotedIsa, 2)])))).
spft(prologHybrid(quotedIsa), hybrid_support(quotedIsa, 2), pt(hybrid_support(quotedIsa, 2), rhs([prologHybrid(quotedIsa), arity(quotedIsa, 2)]))).
spft(arity(quotedIsa, 2), hybrid_support(quotedIsa, 2), pt(hybrid_support(quotedIsa, 2), rhs([prologHybrid(quotedIsa), arity(quotedIsa, 2)]))).
spft(tPred(quotedIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 597), ax).
spft(pt(arity(quotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, A)])))), tPred(quotedIsa), pt(tPred(quotedIsa), pt(arity(quotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, A)])))))).
spft(pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, 2)])), arity(quotedIsa, 2), pt(arity(quotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(quotedIsa), rhs([~tCol(quotedIsa), support_hilog(quotedIsa, A)]))))).
spft((isa(B, A):-cwc, mpred_univ(A, B, C), atom(A),  (current_predicate(A, D:C), \+predicate_property(D:C, imported_form(_))), call_u(call(D:C))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 600), ax).
spft((isa(A, B):-isa_backchaing(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 601), ax).
spft((isa(B, A):-cwc, is_asserted(ttFormatType(A)), !, quotedIsa(B, A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 602), ax).
spft((quotedIsa(A, B):-cwc, term_is_ft(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 603), ax).
spft((dif_in_arg(A, B, C):-cwc, ground(A), A=..[D|E], arg(B, A, G), C=..[D|E], nb_setarg(B, C, F), dif(F, G)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 604), ax).
spft(tCol(ttSpatialType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 606), ax).
spft(tCol(tSpatialThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 607), ax).
spft(arity(tSpatialThing, 1), tCol(tSpatialThing), pt(tCol(tSpatialThing),  (atom(tSpatialThing), tSpatialThing(A)=..[tSpatialThing, A]->rhs([{decl_type(tSpatialThing)}, arity(tSpatialThing, 1), mpred_univ(tSpatialThing, A, tSpatialThing(A))])))).
spft(pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)]))), arity(tSpatialThing, 1), pt(arity(tSpatialThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)]))))).
spft(nearestGenls(tSpatialThing, tTemporalThing), arity(tTemporalThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)])))).
spft(nearestGenls(tSpatialThing, tTemporalThing), arity(tTemporalThing, 1), pt(arity(tTemporalThing, 1),  (\+ (genls(tSpatialThing, A), A\=tSpatialThing, genls(A, tTemporalThing), A\=tTemporalThing), tTemporalThing\=tSpatialThing->rhs([{get_functor(tSpatialThing, B), get_functor(tTemporalThing, C), nop(dmsg(wishing_to_add((tSpatialThing==>tTemporalThing))))}, nearestGenls(B, C)])))).
spft(mpred_univ(tSpatialThing, A, tSpatialThing(A)), tCol(tSpatialThing), pt(tCol(tSpatialThing),  (atom(tSpatialThing), tSpatialThing(A)=..[tSpatialThing, A]->rhs([{decl_type(tSpatialThing)}, arity(tSpatialThing, 1), mpred_univ(tSpatialThing, A, tSpatialThing(A))])))).
spft((tSpatialThing(A):-cwc, lazy(\+ ~tSpatialThing(A)), isa_backchaing(A, tSpatialThing)), tCol(tSpatialThing), pt(tCol(tSpatialThing),  (atom(tSpatialThing), tSpatialThing(A)=..[tSpatialThing, A], \+static_predicate(tSpatialThing/1), \+completelyAssertedCollection(tSpatialThing)->rhs([(tSpatialThing(A):-cwc, lazy(\+ ~tSpatialThing(A)), isa_backchaing(A, tSpatialThing))])))).
spft(isa(tSpatialThing, tCol), tCol(tSpatialThing), pt(tCol(tSpatialThing),  (isa_from_morphology(tSpatialThing, tCol)->rhs([isa(tSpatialThing, tCol)])))).
spft(completelyAssertedCollection(ttTypeType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 608), ax).
spft(completelyAssertedCollection(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 609), ax).
spft((ttPredType(A)==>tCol(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 615), ax).
spft((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626), ax).
spft(mpred_mark(pfcCallCode, p, nonvar, 1), s(((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626))), ax).
spft(arity(nonvar, 1), mpred_mark(pfcCallCode, p, nonvar, 1), pt(mpred_mark(pfcCallCode, p, nonvar, 1),  (ground(pfcCallCode:p)->rhs([arity(nonvar, 1)])))).
spft(mpred_mark(pfcCallCode, p, is_ftNonvar, 1), s(((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626))), ax).
spft(arity(is_ftNonvar, 1), mpred_mark(pfcCallCode, p, is_ftNonvar, 1), pt(mpred_mark(pfcCallCode, p, is_ftNonvar, 1),  (ground(pfcCallCode:p)->rhs([arity(is_ftNonvar, 1)])))).
spft(mpred_mark(pfcCallCode, n, mpred_connective, 1), s(((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626))), ax).
spft(arity(mpred_connective, 1), mpred_mark(pfcCallCode, n, mpred_connective, 1), pt(mpred_mark(pfcCallCode, n, mpred_connective, 1),  (ground(pfcCallCode:n)->rhs([arity(mpred_connective, 1)])))).
spft(mpred_mark(pfcCallCode, p, mpred_connective, 1), s(((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626))), ax).
spft(arity(mpred_connective, 1), mpred_mark(pfcCallCode, p, mpred_connective, 1), pt(mpred_mark(pfcCallCode, p, mpred_connective, 1),  (ground(pfcCallCode:p)->rhs([arity(mpred_connective, 1)])))).
spft(mpred_mark(pfcCallCode, p, agenda_slow_op_enqueue, 1), s(((A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626))), ax).
spft(arity(agenda_slow_op_enqueue, 1), mpred_mark(pfcCallCode, p, agenda_slow_op_enqueue, 1), pt(mpred_mark(pfcCallCode, p, agenda_slow_op_enqueue, 1),  (ground(pfcCallCode:p)->rhs([arity(agenda_slow_op_enqueue, 1)])))).
spft(pt(A,  (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1->rhs([{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}]))),  (D/ (nonvar(D), is_ftNonvar(D), functor(D, E, F), \+mpred_connective(E), F>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(D))))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 626)).
spft((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 634), ax).
spft(disjointWith(ttTemporalType, ttAbstractType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 635), ax).
spft(arity(typeGenls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 637), ax).
spft(prologHybrid(typeGenls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 637), ax).
spft(pt(arity(typeGenls, A), rhs([hybrid_support(typeGenls, A)])), prologHybrid(typeGenls), pt(prologHybrid(typeGenls), pt(arity(typeGenls, A), rhs([hybrid_support(typeGenls, A)])))).
spft(hybrid_support(typeGenls, 2), arity(typeGenls, 2), pt(arity(typeGenls, A), rhs([hybrid_support(typeGenls, A)]))).
spft(prologHybrid(typeGenls), hybrid_support(typeGenls, 2), pt(hybrid_support(typeGenls, 2),  (typeGenls\='$VAR', atom(typeGenls), integer(2), \+prologDynamic(typeGenls), \+static_predicate(typeGenls/2)->rhs([{functor(typeGenls(A, B), typeGenls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(typeGenls, baseKB:typeGenls(A, B)), \+predicate_property(baseKB:typeGenls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:typeGenls(A, B), exported);true), kb_dynamic(baseKB:typeGenls/2), show_failure(hybrid_support, \+static_predicate(typeGenls/2))}, prologHybrid(typeGenls), arity(typeGenls, 2)])))).
spft(arity(typeGenls, 2), hybrid_support(typeGenls, 2), pt(hybrid_support(typeGenls, 2),  (typeGenls\='$VAR', atom(typeGenls), integer(2), \+prologDynamic(typeGenls), \+static_predicate(typeGenls/2)->rhs([{functor(typeGenls(A, B), typeGenls, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(typeGenls, baseKB:typeGenls(A, B)), \+predicate_property(baseKB:typeGenls(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:typeGenls(A, B), exported);true), kb_dynamic(baseKB:typeGenls/2), show_failure(hybrid_support, \+static_predicate(typeGenls/2))}, prologHybrid(typeGenls), arity(typeGenls, 2)])))).
spft(prologHybrid(typeGenls), hybrid_support(typeGenls, 2), pt(hybrid_support(typeGenls, 2), rhs([prologHybrid(typeGenls), arity(typeGenls, 2)]))).
spft(arity(typeGenls, 2), hybrid_support(typeGenls, 2), pt(hybrid_support(typeGenls, 2), rhs([prologHybrid(typeGenls), arity(typeGenls, 2)]))).
spft(tPred(typeGenls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 637), ax).
spft(pt(arity(typeGenls, A),  (integer(A), A>1->pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, A)])))), tPred(typeGenls), pt(tPred(typeGenls), pt(arity(typeGenls, A),  (integer(A), A>1->pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, A)])))))).
spft(pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, 2)])), arity(typeGenls, 2), pt(arity(typeGenls, A),  (integer(A), A>1->pt(~prologBuiltin(typeGenls), rhs([~tCol(typeGenls), support_hilog(typeGenls, A)]))))).
spft(meta_argtypes(typeGenls(ttTypeType, tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 638), ax).
spft(arity(typeGenls, 2), meta_argtypes(typeGenls(ttTypeType, tCol)), pt(meta_argtypes(typeGenls(ttTypeType, tCol)),  (is_ftCompound(typeGenls(ttTypeType, tCol))->rhs([{get_functor(typeGenls(ttTypeType, tCol), typeGenls, 2)}, arity(typeGenls, 2)])))).
spft(pt(genls(typeGenls(ttTypeType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(typeGenls(ttTypeType, tCol), A)])))), meta_argtypes(typeGenls(ttTypeType, tCol)), pt(meta_argtypes(typeGenls(ttTypeType, tCol)),  (dif:dif(typeGenls(ttTypeType, tCol), A)->pt(genls(typeGenls(ttTypeType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(typeGenls(ttTypeType, tCol), A)]))))))).
spft(typeGenls(ttPredType, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 641), ax).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 644), ax).
spft(prologHybrid(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 644), ax).
spft(tPred(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 644), ax).
spft(pt(arity(argIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, A)])))), tPred(argIsa), pt(tPred(argIsa), pt(arity(argIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, A)])))))).
spft(pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, 3)])), arity(argIsa, 3), pt(arity(argIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argIsa), rhs([~tCol(argIsa), support_hilog(argIsa, A)]))))).
spft(meta_argtypes(mpred_module(tPred, tPrologModule)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 682), ax).
spft(arity(mpred_module, 2), meta_argtypes(mpred_module(tPred, tPrologModule)), pt(meta_argtypes(mpred_module(tPred, tPrologModule)),  (is_ftCompound(mpred_module(tPred, tPrologModule))->rhs([{get_functor(mpred_module(tPred, tPrologModule), mpred_module, 2)}, arity(mpred_module, 2)])))).
spft(pt(genls(mpred_module(tPred, tPrologModule), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tPred, tPrologModule), A)])))), meta_argtypes(mpred_module(tPred, tPrologModule)), pt(meta_argtypes(mpred_module(tPred, tPrologModule)),  (dif:dif(mpred_module(tPred, tPrologModule), A)->pt(genls(mpred_module(tPred, tPrologModule), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tPred, tPrologModule), A)]))))))).
spft(arity(mpred_module, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 685), ax).
spft(prologHybrid(mpred_module), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 685), ax).
spft(pt(arity(mpred_module, A), rhs([hybrid_support(mpred_module, A)])), prologHybrid(mpred_module), pt(prologHybrid(mpred_module), pt(arity(mpred_module, A), rhs([hybrid_support(mpred_module, A)])))).
spft(hybrid_support(mpred_module, 2), arity(mpred_module, 2), pt(arity(mpred_module, A), rhs([hybrid_support(mpred_module, A)]))).
spft(prologHybrid(mpred_module), hybrid_support(mpred_module, 2), pt(hybrid_support(mpred_module, 2),  (mpred_module\='$VAR', atom(mpred_module), integer(2), \+prologDynamic(mpred_module), \+static_predicate(mpred_module/2)->rhs([{functor(mpred_module(A, B), mpred_module, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_module, baseKB:mpred_module(A, B)), \+predicate_property(baseKB:mpred_module(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_module(A, B), exported);true), kb_dynamic(baseKB:mpred_module/2), show_failure(hybrid_support, \+static_predicate(mpred_module/2))}, prologHybrid(mpred_module), arity(mpred_module, 2)])))).
spft(arity(mpred_module, 2), hybrid_support(mpred_module, 2), pt(hybrid_support(mpred_module, 2),  (mpred_module\='$VAR', atom(mpred_module), integer(2), \+prologDynamic(mpred_module), \+static_predicate(mpred_module/2)->rhs([{functor(mpred_module(A, B), mpred_module, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_module, baseKB:mpred_module(A, B)), \+predicate_property(baseKB:mpred_module(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_module(A, B), exported);true), kb_dynamic(baseKB:mpred_module/2), show_failure(hybrid_support, \+static_predicate(mpred_module/2))}, prologHybrid(mpred_module), arity(mpred_module, 2)])))).
spft(prologHybrid(mpred_module), hybrid_support(mpred_module, 2), pt(hybrid_support(mpred_module, 2), rhs([prologHybrid(mpred_module), arity(mpred_module, 2)]))).
spft(arity(mpred_module, 2), hybrid_support(mpred_module, 2), pt(hybrid_support(mpred_module, 2), rhs([prologHybrid(mpred_module), arity(mpred_module, 2)]))).
spft(tPred(mpred_module), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 685), ax).
spft(pt(arity(mpred_module, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, A)])))), tPred(mpred_module), pt(tPred(mpred_module), pt(arity(mpred_module, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, A)])))))).
spft(pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, 2)])), arity(mpred_module, 2), pt(arity(mpred_module, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_module), rhs([~tCol(mpred_module), support_hilog(mpred_module, A)]))))).
spft(arity(mpred_module, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 686), ax).
spft(meta_argtypes(mpred_module(tRelation, ftAtom)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 686), ax).
spft(arity(mpred_module, 2), meta_argtypes(mpred_module(tRelation, ftAtom)), pt(meta_argtypes(mpred_module(tRelation, ftAtom)),  (is_ftCompound(mpred_module(tRelation, ftAtom))->rhs([{get_functor(mpred_module(tRelation, ftAtom), mpred_module, 2)}, arity(mpred_module, 2)])))).
spft(pt(genls(mpred_module(tRelation, ftAtom), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tRelation, ftAtom), A)])))), meta_argtypes(mpred_module(tRelation, ftAtom)), pt(meta_argtypes(mpred_module(tRelation, ftAtom)),  (dif:dif(mpred_module(tRelation, ftAtom), A)->pt(genls(mpred_module(tRelation, ftAtom), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mpred_module(tRelation, ftAtom), A)]))))))).
spft(prologMultiValued(mpred_module), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 686), ax).
spft(tPred(mpred_module), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 686), ax).
spft((tCol(A)==>arity(A, 1)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 697), ax).
spft(pt(tCol(A), rhs([arity(A, 1)])),  (tCol(B)==>arity(B, 1)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 697)).
spft(arity(ttValueType, 1), tCol(ttValueType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tNotForUnboundPredicates, 1), tCol(tNotForUnboundPredicates), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(completelyAssertedCollection, 1), tCol(completelyAssertedCollection), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologNegByFailure, 1), tCol(prologNegByFailure), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tCol, 1), tCol(tCol), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tSpec, 1), tCol(tSpec), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttFormatType, 1), tCol(ttFormatType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tSet, 1), tCol(tSet), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tRelation, 1), tCol(tRelation), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tPred, 1), tCol(tPred), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tFunction, 1), tCol(tFunction), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologMacroHead, 1), tCol(prologMacroHead), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttPredType, 1), tCol(ttPredType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(functorDeclares, 1), tCol(functorDeclares), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologMultiValued, 1), tCol(prologMultiValued), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologOrdered, 1), tCol(prologOrdered), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(predIsFlag, 1), tCol(predIsFlag), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttNonGenled, 1), tCol(ttNonGenled), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(meta_argtypes, 1), tCol(meta_argtypes), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologHybrid, 1), tCol(prologHybrid), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologPTTP, 1), tCol(prologPTTP), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologDynamic, 1), tCol(prologDynamic), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologKIF, 1), tCol(prologKIF), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologBuiltin, 1), tCol(prologBuiltin), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologListValued, 1), tCol(prologListValued), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologSingleValued, 1), tCol(prologSingleValued), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcControlled, 1), tCol(pfcControlled), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(predCanHaveSingletons, 1), tCol(predCanHaveSingletons), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tTemporalThing, 1), tCol(tTemporalThing), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologSideEffects, 1), tCol(prologSideEffects), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tInferInstanceFromArgType, 1), tCol(tInferInstanceFromArgType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttNotTemporalType, 1), tCol(ttNotTemporalType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttSpatialType, 1), tCol(ttSpatialType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttTemporalType, 1), tCol(ttTemporalType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttTypeType, 1), tCol(ttTypeType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ttUnverifiableType, 1), tCol(ttUnverifiableType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcDatabaseTerm, 1), tCol(pfcDatabaseTerm), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcWatched, 1), tCol(pfcWatched), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcCreates, 1), tCol(pfcCreates), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcNegTrigger, 1), tCol(pfcNegTrigger), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcPosTrigger, 1), tCol(pfcPosTrigger), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcBcTrigger, 1), tCol(pfcBcTrigger), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcRHS, 1), tCol(pfcRHS), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(pfcMustFC, 1), tCol(pfcMustFC), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(notAssertable, 1), tCol(notAssertable), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(prologEquality, 1), tCol(prologEquality), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(ftInt, 1), tCol(ftInt), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(vtDirection, 1), tCol(vtDirection), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(completeIsaAsserted, 1), tCol(completeIsaAsserted), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tFormatType, 1), tCol(tFormatType), pt(tCol(A), rhs([arity(A, 1)]))).
spft(arity(tSpatialThing, 1), tCol(tSpatialThing), pt(tCol(A), rhs([arity(A, 1)]))).
spft(tCol(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 704), ax).
spft(argIsa(tPred, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 706), ax).
spft((either(A, B)==> (~A<==>B),  (~B<==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 720), ax).
spft(mpred_mark(pfcLHS, p, either, 2), s(((either(A, B)==> (~A<==>B),  (~B<==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 720))), ax).
spft(arity(either, 2), mpred_mark(pfcLHS, p, either, 2), pt(mpred_mark(pfcLHS, p, either, 2),  (ground(pfcLHS:p)->rhs([arity(either, 2)])))).
spft(mpred_mark(pfcCreates, p, <==>, 2), s(((either(A, B)==> (~A<==>B),  (~B<==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 720))), ax).
spft(arity(<==>, 2), mpred_mark(pfcCreates, p, <==>, 2), pt(mpred_mark(pfcCreates, p, <==>, 2),  (ground(pfcCreates:p)->rhs([arity(<==>, 2)])))).
spft(marker_supported(<==>, 2), mpred_mark(pfcCreates, p, <==>, 2), pt(mpred_mark(pfcCreates, p, <==>, 2),  (ground(p: (<==>):2)->rhs([marker_supported(<==>, 2)])))).
spft(hybrid_support(<==>, 2), marker_supported(<==>, 2), pt(marker_supported(<==>, 2), rhs([hybrid_support(<==>, 2)]))).
spft(prologHybrid(<==>), hybrid_support(<==>, 2), pt(hybrid_support(<==>, 2),  ((<==>)\='$VAR', atom(<==>), integer(2), \+prologDynamic(<==>), \+static_predicate((<==>)/2)->rhs([{functor((A<==>B), <==>, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(<==>, baseKB: (A<==>B)), \+predicate_property(baseKB: (A<==>B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB: (A<==>B), exported);true), kb_dynamic(baseKB: (<==>)/2), show_failure(hybrid_support, \+static_predicate((<==>)/2))}, prologHybrid(<==>), arity(<==>, 2)])))).
spft(pt(arity(<==>, A), rhs([hybrid_support(<==>, A)])), prologHybrid(<==>), pt(prologHybrid(<==>), pt(arity(<==>, A), rhs([hybrid_support(<==>, A)])))).
spft(hybrid_support(<==>, 2), arity(<==>, 2), pt(arity(<==>, A), rhs([hybrid_support(<==>, A)]))).
spft(arity(<==>, 2), hybrid_support(<==>, 2), pt(hybrid_support(<==>, 2),  ((<==>)\='$VAR', atom(<==>), integer(2), \+prologDynamic(<==>), \+static_predicate((<==>)/2)->rhs([{functor((A<==>B), <==>, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(<==>, baseKB: (A<==>B)), \+predicate_property(baseKB: (A<==>B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB: (A<==>B), exported);true), kb_dynamic(baseKB: (<==>)/2), show_failure(hybrid_support, \+static_predicate((<==>)/2))}, prologHybrid(<==>), arity(<==>, 2)])))).
spft(prologHybrid(<==>), hybrid_support(<==>, 2), pt(hybrid_support(<==>, 2), rhs([prologHybrid(<==>), arity(<==>, 2)]))).
spft(arity(<==>, 2), hybrid_support(<==>, 2), pt(hybrid_support(<==>, 2), rhs([prologHybrid(<==>), arity(<==>, 2)]))).
spft(mpred_mark(pfcPosTrigger, p, either, 2), s(((either(A, B)==> (~A<==>B),  (~B<==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 720))), ax).
spft(arity(either, 2), mpred_mark(pfcPosTrigger, p, either, 2), pt(mpred_mark(pfcPosTrigger, p, either, 2),  (ground(pfcPosTrigger:p)->rhs([arity(either, 2)])))).
spft(marker_supported(either, 2), mpred_mark(pfcPosTrigger, p, either, 2), pt(mpred_mark(pfcPosTrigger, p, either, 2),  (ground(p:either:2)->rhs([marker_supported(either, 2)])))).
spft(hybrid_support(either, 2), marker_supported(either, 2), pt(marker_supported(either, 2), rhs([hybrid_support(either, 2)]))).
spft(prologHybrid(either), hybrid_support(either, 2), pt(hybrid_support(either, 2),  (either\='$VAR', atom(either), integer(2), \+prologDynamic(either), \+static_predicate(either/2)->rhs([{functor(either(A, B), either, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(either, baseKB:either(A, B)), \+predicate_property(baseKB:either(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:either(A, B), exported);true), kb_dynamic(baseKB:either/2), show_failure(hybrid_support, \+static_predicate(either/2))}, prologHybrid(either), arity(either, 2)])))).
spft(pt(arity(either, A), rhs([hybrid_support(either, A)])), prologHybrid(either), pt(prologHybrid(either), pt(arity(either, A), rhs([hybrid_support(either, A)])))).
spft(hybrid_support(either, 2), arity(either, 2), pt(arity(either, A), rhs([hybrid_support(either, A)]))).
spft(arity(either, 2), hybrid_support(either, 2), pt(hybrid_support(either, 2),  (either\='$VAR', atom(either), integer(2), \+prologDynamic(either), \+static_predicate(either/2)->rhs([{functor(either(A, B), either, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(either, baseKB:either(A, B)), \+predicate_property(baseKB:either(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:either(A, B), exported);true), kb_dynamic(baseKB:either/2), show_failure(hybrid_support, \+static_predicate(either/2))}, prologHybrid(either), arity(either, 2)])))).
spft(prologHybrid(either), hybrid_support(either, 2), pt(hybrid_support(either, 2), rhs([prologHybrid(either), arity(either, 2)]))).
spft(arity(either, 2), hybrid_support(either, 2), pt(hybrid_support(either, 2), rhs([prologHybrid(either), arity(either, 2)]))).
spft(pt(either(A, B), rhs([(~A<==>B),  (~B<==>A)])),  (either(C, D)==> (~C<==>D),  (~D<==>C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 720)).
spft(tCol(completeExtentAsserted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 735), ax).
spft(arity(completeExtentAsserted, 1), tCol(completeExtentAsserted), pt(tCol(completeExtentAsserted),  (atom(completeExtentAsserted), completeExtentAsserted(A)=..[completeExtentAsserted, A]->rhs([{decl_type(completeExtentAsserted)}, arity(completeExtentAsserted, 1), mpred_univ(completeExtentAsserted, A, completeExtentAsserted(A))])))).
spft(mpred_univ(completeExtentAsserted, A, completeExtentAsserted(A)), tCol(completeExtentAsserted), pt(tCol(completeExtentAsserted),  (atom(completeExtentAsserted), completeExtentAsserted(A)=..[completeExtentAsserted, A]->rhs([{decl_type(completeExtentAsserted)}, arity(completeExtentAsserted, 1), mpred_univ(completeExtentAsserted, A, completeExtentAsserted(A))])))).
spft((completeExtentAsserted(A):-cwc, lazy(\+ ~completeExtentAsserted(A)), isa_backchaing(A, completeExtentAsserted)), tCol(completeExtentAsserted), pt(tCol(completeExtentAsserted),  (atom(completeExtentAsserted), completeExtentAsserted(A)=..[completeExtentAsserted, A], \+static_predicate(completeExtentAsserted/1), \+completelyAssertedCollection(completeExtentAsserted)->rhs([(completeExtentAsserted(A):-cwc, lazy(\+ ~completeExtentAsserted(A)), isa_backchaing(A, completeExtentAsserted))])))).
spft(arity(completeExtentAsserted, 1), tCol(completeExtentAsserted), pt(tCol(completeExtentAsserted), rhs([arity(completeExtentAsserted, 1)]))).
spft(tCol(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 736), ax).
spft(tCol(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 737), ax).
spft((prologHybrid(A), {get_functor(A, B, C), A\=B}==>arity(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 740), ax).
spft(pt(prologHybrid(A),  (get_functor(A, B, C), A\=B->rhs([arity(B, C)]))),  (prologHybrid(D), {get_functor(D, E, F), D\=E}==>arity(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 740)).
spft(pt(prologHybrid(A),  (get_functor(A, B, C), A\=B->rhs([arity(B, C)]))),  (prologHybrid(D), {get_functor(D, E, F), D\=E}==>arity(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 740)).
spft(arity(typeProps, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 741), ax).
spft(prologHybrid(typeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 741), ax).
spft(pt(arity(typeProps, A), rhs([hybrid_support(typeProps, A)])), prologHybrid(typeProps), pt(prologHybrid(typeProps), pt(arity(typeProps, A), rhs([hybrid_support(typeProps, A)])))).
spft(hybrid_support(typeProps, 2), arity(typeProps, 2), pt(arity(typeProps, A), rhs([hybrid_support(typeProps, A)]))).
spft(prologHybrid(typeProps), hybrid_support(typeProps, 2), pt(hybrid_support(typeProps, 2),  (typeProps\='$VAR', atom(typeProps), integer(2), \+prologDynamic(typeProps), \+static_predicate(typeProps/2)->rhs([{functor(typeProps(A, B), typeProps, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(typeProps, baseKB:typeProps(A, B)), \+predicate_property(baseKB:typeProps(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:typeProps(A, B), exported);true), kb_dynamic(baseKB:typeProps/2), show_failure(hybrid_support, \+static_predicate(typeProps/2))}, prologHybrid(typeProps), arity(typeProps, 2)])))).
spft(arity(typeProps, 2), hybrid_support(typeProps, 2), pt(hybrid_support(typeProps, 2),  (typeProps\='$VAR', atom(typeProps), integer(2), \+prologDynamic(typeProps), \+static_predicate(typeProps/2)->rhs([{functor(typeProps(A, B), typeProps, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(typeProps, baseKB:typeProps(A, B)), \+predicate_property(baseKB:typeProps(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:typeProps(A, B), exported);true), kb_dynamic(baseKB:typeProps/2), show_failure(hybrid_support, \+static_predicate(typeProps/2))}, prologHybrid(typeProps), arity(typeProps, 2)])))).
spft(prologHybrid(typeProps), hybrid_support(typeProps, 2), pt(hybrid_support(typeProps, 2), rhs([prologHybrid(typeProps), arity(typeProps, 2)]))).
spft(arity(typeProps, 2), hybrid_support(typeProps, 2), pt(hybrid_support(typeProps, 2), rhs([prologHybrid(typeProps), arity(typeProps, 2)]))).
spft(tPred(typeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 741), ax).
spft(pt(arity(typeProps, A),  (integer(A), A>1->pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, A)])))), tPred(typeProps), pt(tPred(typeProps), pt(arity(typeProps, A),  (integer(A), A>1->pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, A)])))))).
spft(pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, 2)])), arity(typeProps, 2), pt(arity(typeProps, A),  (integer(A), A>1->pt(~prologBuiltin(typeProps), rhs([~tCol(typeProps), support_hilog(typeProps, A)]))))).
spft(arity(typeProps, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 742), ax).
spft(arity(tCol, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(prologHybrid(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(tPred(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(pt(arity(tCol, A),  (integer(A), A>1->pt(~prologBuiltin(tCol), rhs([~tCol(tCol), support_hilog(tCol, A)])))), tPred(tCol), pt(tPred(tCol), pt(arity(tCol, A),  (integer(A), A>1->pt(~prologBuiltin(tCol), rhs([~tCol(tCol), support_hilog(tCol, A)])))))).
spft(arity(disjointWith, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(prologHybrid(disjointWith), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(tPred(disjointWith), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(pt(arity(disjointWith, A),  (integer(A), A>1->pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, A)])))), tPred(disjointWith), pt(tPred(disjointWith), pt(arity(disjointWith, A),  (integer(A), A>1->pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, A)])))))).
spft(pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, 2)])), arity(disjointWith, 2), pt(arity(disjointWith, A),  (integer(A), A>1->pt(~prologBuiltin(disjointWith), rhs([~tCol(disjointWith), support_hilog(disjointWith, A)]))))).
spft(arity(genls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(prologHybrid(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(tPred(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(arity(genlPreds, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(prologHybrid(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(tPred(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(pt(arity(genlPreds, A),  (integer(A), A>1->pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, A)])))), tPred(genlPreds), pt(tPred(genlPreds), pt(arity(genlPreds, A),  (integer(A), A>1->pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, A)])))))).
spft(pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, 2)])), arity(genlPreds, 2), pt(arity(genlPreds, A),  (integer(A), A>1->pt(~prologBuiltin(genlPreds), rhs([~tCol(genlPreds), support_hilog(genlPreds, A)]))))).
spft(arity(meta_argtypes, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(prologHybrid(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(tPred(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 747), ax).
spft(pt(arity(meta_argtypes, A),  (integer(A), A>1->pt(~prologBuiltin(meta_argtypes), rhs([~tCol(meta_argtypes), support_hilog(meta_argtypes, A)])))), tPred(meta_argtypes), pt(tPred(meta_argtypes), pt(arity(meta_argtypes, A),  (integer(A), A>1->pt(~prologBuiltin(meta_argtypes), rhs([~tCol(meta_argtypes), support_hilog(meta_argtypes, A)])))))).
spft(argIsa(tPred, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologMultiValued, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologOrdered, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologNegByFailure, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologHybrid, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologPTTP, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(predCanHaveSingletons, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologDynamic, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologMacroHead, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologListValued, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(prologSingleValued, 1, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 751), ax).
spft(argIsa(tPred, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologMultiValued, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologOrdered, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologNegByFailure, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(meta_argtypes, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologHybrid, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologPTTP, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologDynamic, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologMacroHead, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologListValued, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(argIsa(prologSingleValued, 2, ftListFn(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 752), ax).
spft(functorDeclares(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(functorDeclares(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 753), ax).
spft(genls(prologMultiValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologMultiValued),  (prologMultiValued\==tPred->rhs([{mpred_withdraw(genls(prologMultiValued, tPred))}]))), genls(prologMultiValued, tPred), pt(genls(prologMultiValued, tPred), pt(genls(tPred, prologMultiValued),  (prologMultiValued\==tPred->rhs([{mpred_withdraw(genls(prologMultiValued, tPred))}]))))).
spft(pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))), genls(prologMultiValued, tPred), pt(genls(prologMultiValued, tPred), pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologMultiValued, 1), pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, D), D\=prologMultiValued, genls(D, tPred), D\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologMultiValued, 1), pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, D), D\=prologMultiValued, genls(D, tPred), D\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologMultiValued, 1), pt(arity(prologMultiValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, D), D\=prologMultiValued, genls(D, tPred), D\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMultiValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMultiValued, A), A\=prologMultiValued, genls(A, tPred), A\=tPred), tPred\=prologMultiValued->rhs([{get_functor(prologMultiValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMultiValued==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologOrdered, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologOrdered),  (prologOrdered\==tPred->rhs([{mpred_withdraw(genls(prologOrdered, tPred))}]))), genls(prologOrdered, tPred), pt(genls(prologOrdered, tPred), pt(genls(tPred, prologOrdered),  (prologOrdered\==tPred->rhs([{mpred_withdraw(genls(prologOrdered, tPred))}]))))).
spft(pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))), genls(prologOrdered, tPred), pt(genls(prologOrdered, tPred), pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)]))), arity(prologOrdered, 1), pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, D), D\=prologOrdered, genls(D, tPred), D\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)]))), arity(prologOrdered, 1), pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, D), D\=prologOrdered, genls(D, tPred), D\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)]))), arity(prologOrdered, 1), pt(arity(prologOrdered, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, D), D\=prologOrdered, genls(D, tPred), D\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologOrdered, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologOrdered, A), A\=prologOrdered, genls(A, tPred), A\=tPred), tPred\=prologOrdered->rhs([{get_functor(prologOrdered, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologOrdered==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologNegByFailure, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologNegByFailure),  (prologNegByFailure\==tPred->rhs([{mpred_withdraw(genls(prologNegByFailure, tPred))}]))), genls(prologNegByFailure, tPred), pt(genls(prologNegByFailure, tPred), pt(genls(tPred, prologNegByFailure),  (prologNegByFailure\==tPred->rhs([{mpred_withdraw(genls(prologNegByFailure, tPred))}]))))).
spft(pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))), genls(prologNegByFailure, tPred), pt(genls(prologNegByFailure, tPred), pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)]))), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, D), D\=prologNegByFailure, genls(D, tPred), D\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)]))), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, D), D\=prologNegByFailure, genls(D, tPred), D\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)]))), arity(prologNegByFailure, 1), pt(arity(prologNegByFailure, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, D), D\=prologNegByFailure, genls(D, tPred), D\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologNegByFailure, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologNegByFailure, A), A\=prologNegByFailure, genls(A, tPred), A\=tPred), tPred\=prologNegByFailure->rhs([{get_functor(prologNegByFailure, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologNegByFailure==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologHybrid, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologHybrid),  (prologHybrid\==tPred->rhs([{mpred_withdraw(genls(prologHybrid, tPred))}]))), genls(prologHybrid, tPred), pt(genls(prologHybrid, tPred), pt(genls(tPred, prologHybrid),  (prologHybrid\==tPred->rhs([{mpred_withdraw(genls(prologHybrid, tPred))}]))))).
spft(pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))), genls(prologHybrid, tPred), pt(genls(prologHybrid, tPred), pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)]))), arity(prologHybrid, 1), pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, D), D\=prologHybrid, genls(D, tPred), D\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)]))), arity(prologHybrid, 1), pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, D), D\=prologHybrid, genls(D, tPred), D\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)]))), arity(prologHybrid, 1), pt(arity(prologHybrid, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, D), D\=prologHybrid, genls(D, tPred), D\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologHybrid, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologHybrid, A), A\=prologHybrid, genls(A, tPred), A\=tPred), tPred\=prologHybrid->rhs([{get_functor(prologHybrid, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologHybrid==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologPTTP, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologPTTP),  (prologPTTP\==tPred->rhs([{mpred_withdraw(genls(prologPTTP, tPred))}]))), genls(prologPTTP, tPred), pt(genls(prologPTTP, tPred), pt(genls(tPred, prologPTTP),  (prologPTTP\==tPred->rhs([{mpred_withdraw(genls(prologPTTP, tPred))}]))))).
spft(pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))), genls(prologPTTP, tPred), pt(genls(prologPTTP, tPred), pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)]))), arity(prologPTTP, 1), pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, D), D\=prologPTTP, genls(D, tPred), D\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)]))), arity(prologPTTP, 1), pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, D), D\=prologPTTP, genls(D, tPred), D\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)]))), arity(prologPTTP, 1), pt(arity(prologPTTP, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, D), D\=prologPTTP, genls(D, tPred), D\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologPTTP, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologPTTP, A), A\=prologPTTP, genls(A, tPred), A\=tPred), tPred\=prologPTTP->rhs([{get_functor(prologPTTP, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologPTTP==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologDynamic, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologDynamic),  (prologDynamic\==tPred->rhs([{mpred_withdraw(genls(prologDynamic, tPred))}]))), genls(prologDynamic, tPred), pt(genls(prologDynamic, tPred), pt(genls(tPred, prologDynamic),  (prologDynamic\==tPred->rhs([{mpred_withdraw(genls(prologDynamic, tPred))}]))))).
spft(pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))), genls(prologDynamic, tPred), pt(genls(prologDynamic, tPred), pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)]))), arity(prologDynamic, 1), pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, D), D\=prologDynamic, genls(D, tPred), D\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)]))), arity(prologDynamic, 1), pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, D), D\=prologDynamic, genls(D, tPred), D\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)]))), arity(prologDynamic, 1), pt(arity(prologDynamic, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, D), D\=prologDynamic, genls(D, tPred), D\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologDynamic, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologDynamic, A), A\=prologDynamic, genls(A, tPred), A\=tPred), tPred\=prologDynamic->rhs([{get_functor(prologDynamic, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologDynamic==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologBuiltin, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologBuiltin),  (prologBuiltin\==tPred->rhs([{mpred_withdraw(genls(prologBuiltin, tPred))}]))), genls(prologBuiltin, tPred), pt(genls(prologBuiltin, tPred), pt(genls(tPred, prologBuiltin),  (prologBuiltin\==tPred->rhs([{mpred_withdraw(genls(prologBuiltin, tPred))}]))))).
spft(pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))), genls(prologBuiltin, tPred), pt(genls(prologBuiltin, tPred), pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)]))), arity(prologBuiltin, 1), pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, D), D\=prologBuiltin, genls(D, tPred), D\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)]))), arity(prologBuiltin, 1), pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, D), D\=prologBuiltin, genls(D, tPred), D\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)]))), arity(prologBuiltin, 1), pt(arity(prologBuiltin, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, D), D\=prologBuiltin, genls(D, tPred), D\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologBuiltin, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologBuiltin, A), A\=prologBuiltin, genls(A, tPred), A\=tPred), tPred\=prologBuiltin->rhs([{get_functor(prologBuiltin, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologBuiltin==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologKIF, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologKIF),  (prologKIF\==tPred->rhs([{mpred_withdraw(genls(prologKIF, tPred))}]))), genls(prologKIF, tPred), pt(genls(prologKIF, tPred), pt(genls(tPred, prologKIF),  (prologKIF\==tPred->rhs([{mpred_withdraw(genls(prologKIF, tPred))}]))))).
spft(pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))), genls(prologKIF, tPred), pt(genls(prologKIF, tPred), pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)]))), arity(prologKIF, 1), pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, D), D\=prologKIF, genls(D, tPred), D\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)]))), arity(prologKIF, 1), pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, D), D\=prologKIF, genls(D, tPred), D\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)]))), arity(prologKIF, 1), pt(arity(prologKIF, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, D), D\=prologKIF, genls(D, tPred), D\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologKIF, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologKIF, A), A\=prologKIF, genls(A, tPred), A\=tPred), tPred\=prologKIF->rhs([{get_functor(prologKIF, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologKIF==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologMacroHead, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologMacroHead),  (prologMacroHead\==tPred->rhs([{mpred_withdraw(genls(prologMacroHead, tPred))}]))), genls(prologMacroHead, tPred), pt(genls(prologMacroHead, tPred), pt(genls(tPred, prologMacroHead),  (prologMacroHead\==tPred->rhs([{mpred_withdraw(genls(prologMacroHead, tPred))}]))))).
spft(pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))), genls(prologMacroHead, tPred), pt(genls(prologMacroHead, tPred), pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)]))), arity(prologMacroHead, 1), pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, D), D\=prologMacroHead, genls(D, tPred), D\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)]))), arity(prologMacroHead, 1), pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, D), D\=prologMacroHead, genls(D, tPred), D\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)]))), arity(prologMacroHead, 1), pt(arity(prologMacroHead, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, D), D\=prologMacroHead, genls(D, tPred), D\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologMacroHead, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologMacroHead, A), A\=prologMacroHead, genls(A, tPred), A\=tPred), tPred\=prologMacroHead->rhs([{get_functor(prologMacroHead, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologMacroHead==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologListValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologListValued),  (prologListValued\==tPred->rhs([{mpred_withdraw(genls(prologListValued, tPred))}]))), genls(prologListValued, tPred), pt(genls(prologListValued, tPred), pt(genls(tPred, prologListValued),  (prologListValued\==tPred->rhs([{mpred_withdraw(genls(prologListValued, tPred))}]))))).
spft(pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))), genls(prologListValued, tPred), pt(genls(prologListValued, tPred), pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologListValued, 1), pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, D), D\=prologListValued, genls(D, tPred), D\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologListValued, 1), pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, D), D\=prologListValued, genls(D, tPred), D\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologListValued, 1), pt(arity(prologListValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, D), D\=prologListValued, genls(D, tPred), D\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologListValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologListValued, A), A\=prologListValued, genls(A, tPred), A\=tPred), tPred\=prologListValued->rhs([{get_functor(prologListValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologListValued==>tPred))))}, nearestGenls(B, C)])))).
spft(genls(prologSingleValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 754), ax).
spft(pt(genls(tPred, prologSingleValued),  (prologSingleValued\==tPred->rhs([{mpred_withdraw(genls(prologSingleValued, tPred))}]))), genls(prologSingleValued, tPred), pt(genls(prologSingleValued, tPred), pt(genls(tPred, prologSingleValued),  (prologSingleValued\==tPred->rhs([{mpred_withdraw(genls(prologSingleValued, tPred))}]))))).
spft(pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))), genls(prologSingleValued, tPred), pt(genls(prologSingleValued, tPred), pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologSingleValued, 1), pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, D), D\=prologSingleValued, genls(D, tPred), D\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologSingleValued, 1), pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, D), D\=prologSingleValued, genls(D, tPred), D\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)]))), arity(prologSingleValued, 1), pt(arity(prologSingleValued, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, D), D\=prologSingleValued, genls(D, tPred), D\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSingleValued, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSingleValued, A), A\=prologSingleValued, genls(A, tPred), A\=tPred), tPred\=prologSingleValued->rhs([{get_functor(prologSingleValued, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSingleValued==>tPred))))}, nearestGenls(B, C)])))).
spft(tCol(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 755), ax).
spft(arity(ttNotTemporalType, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(prologHybrid(ttNotTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(tPred(ttNotTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(pt(arity(ttNotTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttNotTemporalType), rhs([~tCol(ttNotTemporalType), support_hilog(ttNotTemporalType, A)])))), tPred(ttNotTemporalType), pt(tPred(ttNotTemporalType), pt(arity(ttNotTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttNotTemporalType), rhs([~tCol(ttNotTemporalType), support_hilog(ttNotTemporalType, A)])))))).
spft(arity(ttTemporalType, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(prologHybrid(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(tPred(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 759), ax).
spft(pt(arity(ttTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttTemporalType), rhs([~tCol(ttTemporalType), support_hilog(ttTemporalType, A)])))), tPred(ttTemporalType), pt(tPred(ttTemporalType), pt(arity(ttTemporalType, A),  (integer(A), A>1->pt(~prologBuiltin(ttTemporalType), rhs([~tCol(ttTemporalType), support_hilog(ttTemporalType, A)])))))).
spft(arity(genlInverse, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(prologHybrid(genlInverse), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(pt(arity(genlInverse, A), rhs([hybrid_support(genlInverse, A)])), prologHybrid(genlInverse), pt(prologHybrid(genlInverse), pt(arity(genlInverse, A), rhs([hybrid_support(genlInverse, A)])))).
spft(hybrid_support(genlInverse, 2), arity(genlInverse, 2), pt(arity(genlInverse, A), rhs([hybrid_support(genlInverse, A)]))).
spft(prologHybrid(genlInverse), hybrid_support(genlInverse, 2), pt(hybrid_support(genlInverse, 2),  (genlInverse\='$VAR', atom(genlInverse), integer(2), \+prologDynamic(genlInverse), \+static_predicate(genlInverse/2)->rhs([{functor(genlInverse(A, B), genlInverse, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genlInverse, baseKB:genlInverse(A, B)), \+predicate_property(baseKB:genlInverse(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genlInverse(A, B), exported);true), kb_dynamic(baseKB:genlInverse/2), show_failure(hybrid_support, \+static_predicate(genlInverse/2))}, prologHybrid(genlInverse), arity(genlInverse, 2)])))).
spft(arity(genlInverse, 2), hybrid_support(genlInverse, 2), pt(hybrid_support(genlInverse, 2),  (genlInverse\='$VAR', atom(genlInverse), integer(2), \+prologDynamic(genlInverse), \+static_predicate(genlInverse/2)->rhs([{functor(genlInverse(A, B), genlInverse, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(genlInverse, baseKB:genlInverse(A, B)), \+predicate_property(baseKB:genlInverse(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:genlInverse(A, B), exported);true), kb_dynamic(baseKB:genlInverse/2), show_failure(hybrid_support, \+static_predicate(genlInverse/2))}, prologHybrid(genlInverse), arity(genlInverse, 2)])))).
spft(prologHybrid(genlInverse), hybrid_support(genlInverse, 2), pt(hybrid_support(genlInverse, 2), rhs([prologHybrid(genlInverse), arity(genlInverse, 2)]))).
spft(arity(genlInverse, 2), hybrid_support(genlInverse, 2), pt(hybrid_support(genlInverse, 2), rhs([prologHybrid(genlInverse), arity(genlInverse, 2)]))).
spft(tPred(genlInverse), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(pt(arity(genlInverse, A),  (integer(A), A>1->pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, A)])))), tPred(genlInverse), pt(tPred(genlInverse), pt(arity(genlInverse, A),  (integer(A), A>1->pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, A)])))))).
spft(pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, 2)])), arity(genlInverse, 2), pt(arity(genlInverse, A),  (integer(A), A>1->pt(~prologBuiltin(genlInverse), rhs([~tCol(genlInverse), support_hilog(genlInverse, A)]))))).
spft(arity(genlPreds, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(prologHybrid(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(tPred(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 760), ax).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 761), ax).
spft(prologHybrid(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 761), ax).
spft(tPred(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 761), ax).
spft(arity(disjointWith, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 762), ax).
spft(prologHybrid(disjointWith), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 762), ax).
spft(tPred(disjointWith), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 762), ax).
spft(arity(instTypeProps, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 763), ax).
spft(prologHybrid(instTypeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 763), ax).
spft(pt(arity(instTypeProps, A), rhs([hybrid_support(instTypeProps, A)])), prologHybrid(instTypeProps), pt(prologHybrid(instTypeProps), pt(arity(instTypeProps, A), rhs([hybrid_support(instTypeProps, A)])))).
spft(hybrid_support(instTypeProps, 3), arity(instTypeProps, 3), pt(arity(instTypeProps, A), rhs([hybrid_support(instTypeProps, A)]))).
spft(prologHybrid(instTypeProps), hybrid_support(instTypeProps, 3), pt(hybrid_support(instTypeProps, 3),  (instTypeProps\='$VAR', atom(instTypeProps), integer(3), \+prologDynamic(instTypeProps), \+static_predicate(instTypeProps/3)->rhs([{functor(instTypeProps(A, B, C), instTypeProps, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(instTypeProps, baseKB:instTypeProps(A, B, C)), \+predicate_property(baseKB:instTypeProps(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:instTypeProps(A, B, C), exported);true), kb_dynamic(baseKB:instTypeProps/3), show_failure(hybrid_support, \+static_predicate(instTypeProps/3))}, prologHybrid(instTypeProps), arity(instTypeProps, 3)])))).
spft(arity(instTypeProps, 3), hybrid_support(instTypeProps, 3), pt(hybrid_support(instTypeProps, 3),  (instTypeProps\='$VAR', atom(instTypeProps), integer(3), \+prologDynamic(instTypeProps), \+static_predicate(instTypeProps/3)->rhs([{functor(instTypeProps(A, B, C), instTypeProps, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(instTypeProps, baseKB:instTypeProps(A, B, C)), \+predicate_property(baseKB:instTypeProps(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:instTypeProps(A, B, C), exported);true), kb_dynamic(baseKB:instTypeProps/3), show_failure(hybrid_support, \+static_predicate(instTypeProps/3))}, prologHybrid(instTypeProps), arity(instTypeProps, 3)])))).
spft(prologHybrid(instTypeProps), hybrid_support(instTypeProps, 3), pt(hybrid_support(instTypeProps, 3), rhs([prologHybrid(instTypeProps), arity(instTypeProps, 3)]))).
spft(arity(instTypeProps, 3), hybrid_support(instTypeProps, 3), pt(hybrid_support(instTypeProps, 3), rhs([prologHybrid(instTypeProps), arity(instTypeProps, 3)]))).
spft(tPred(instTypeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 763), ax).
spft(pt(arity(instTypeProps, A),  (integer(A), A>1->pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, A)])))), tPred(instTypeProps), pt(tPred(instTypeProps), pt(arity(instTypeProps, A),  (integer(A), A>1->pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, A)])))))).
spft(pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, 3)])), arity(instTypeProps, 3), pt(arity(instTypeProps, A),  (integer(A), A>1->pt(~prologBuiltin(instTypeProps), rhs([~tCol(instTypeProps), support_hilog(instTypeProps, A)]))))).
spft(arity(predProxyAssert, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 764), ax).
spft(prologHybrid(predProxyAssert), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 764), ax).
spft(pt(arity(predProxyAssert, A), rhs([hybrid_support(predProxyAssert, A)])), prologHybrid(predProxyAssert), pt(prologHybrid(predProxyAssert), pt(arity(predProxyAssert, A), rhs([hybrid_support(predProxyAssert, A)])))).
spft(hybrid_support(predProxyAssert, 2), arity(predProxyAssert, 2), pt(arity(predProxyAssert, A), rhs([hybrid_support(predProxyAssert, A)]))).
spft(prologHybrid(predProxyAssert), hybrid_support(predProxyAssert, 2), pt(hybrid_support(predProxyAssert, 2),  (predProxyAssert\='$VAR', atom(predProxyAssert), integer(2), \+prologDynamic(predProxyAssert), \+static_predicate(predProxyAssert/2)->rhs([{functor(predProxyAssert(A, B), predProxyAssert, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyAssert, baseKB:predProxyAssert(A, B)), \+predicate_property(baseKB:predProxyAssert(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyAssert(A, B), exported);true), kb_dynamic(baseKB:predProxyAssert/2), show_failure(hybrid_support, \+static_predicate(predProxyAssert/2))}, prologHybrid(predProxyAssert), arity(predProxyAssert, 2)])))).
spft(arity(predProxyAssert, 2), hybrid_support(predProxyAssert, 2), pt(hybrid_support(predProxyAssert, 2),  (predProxyAssert\='$VAR', atom(predProxyAssert), integer(2), \+prologDynamic(predProxyAssert), \+static_predicate(predProxyAssert/2)->rhs([{functor(predProxyAssert(A, B), predProxyAssert, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyAssert, baseKB:predProxyAssert(A, B)), \+predicate_property(baseKB:predProxyAssert(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyAssert(A, B), exported);true), kb_dynamic(baseKB:predProxyAssert/2), show_failure(hybrid_support, \+static_predicate(predProxyAssert/2))}, prologHybrid(predProxyAssert), arity(predProxyAssert, 2)])))).
spft(prologHybrid(predProxyAssert), hybrid_support(predProxyAssert, 2), pt(hybrid_support(predProxyAssert, 2), rhs([prologHybrid(predProxyAssert), arity(predProxyAssert, 2)]))).
spft(arity(predProxyAssert, 2), hybrid_support(predProxyAssert, 2), pt(hybrid_support(predProxyAssert, 2), rhs([prologHybrid(predProxyAssert), arity(predProxyAssert, 2)]))).
spft(tPred(predProxyAssert), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 764), ax).
spft(pt(arity(predProxyAssert, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, A)])))), tPred(predProxyAssert), pt(tPred(predProxyAssert), pt(arity(predProxyAssert, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, A)])))))).
spft(pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, 2)])), arity(predProxyAssert, 2), pt(arity(predProxyAssert, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyAssert), rhs([~tCol(predProxyAssert), support_hilog(predProxyAssert, A)]))))).
spft(arity(predProxyQuery, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 765), ax).
spft(prologHybrid(predProxyQuery), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 765), ax).
spft(pt(arity(predProxyQuery, A), rhs([hybrid_support(predProxyQuery, A)])), prologHybrid(predProxyQuery), pt(prologHybrid(predProxyQuery), pt(arity(predProxyQuery, A), rhs([hybrid_support(predProxyQuery, A)])))).
spft(hybrid_support(predProxyQuery, 2), arity(predProxyQuery, 2), pt(arity(predProxyQuery, A), rhs([hybrid_support(predProxyQuery, A)]))).
spft(prologHybrid(predProxyQuery), hybrid_support(predProxyQuery, 2), pt(hybrid_support(predProxyQuery, 2),  (predProxyQuery\='$VAR', atom(predProxyQuery), integer(2), \+prologDynamic(predProxyQuery), \+static_predicate(predProxyQuery/2)->rhs([{functor(predProxyQuery(A, B), predProxyQuery, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyQuery, baseKB:predProxyQuery(A, B)), \+predicate_property(baseKB:predProxyQuery(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyQuery(A, B), exported);true), kb_dynamic(baseKB:predProxyQuery/2), show_failure(hybrid_support, \+static_predicate(predProxyQuery/2))}, prologHybrid(predProxyQuery), arity(predProxyQuery, 2)])))).
spft(arity(predProxyQuery, 2), hybrid_support(predProxyQuery, 2), pt(hybrid_support(predProxyQuery, 2),  (predProxyQuery\='$VAR', atom(predProxyQuery), integer(2), \+prologDynamic(predProxyQuery), \+static_predicate(predProxyQuery/2)->rhs([{functor(predProxyQuery(A, B), predProxyQuery, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyQuery, baseKB:predProxyQuery(A, B)), \+predicate_property(baseKB:predProxyQuery(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyQuery(A, B), exported);true), kb_dynamic(baseKB:predProxyQuery/2), show_failure(hybrid_support, \+static_predicate(predProxyQuery/2))}, prologHybrid(predProxyQuery), arity(predProxyQuery, 2)])))).
spft(prologHybrid(predProxyQuery), hybrid_support(predProxyQuery, 2), pt(hybrid_support(predProxyQuery, 2), rhs([prologHybrid(predProxyQuery), arity(predProxyQuery, 2)]))).
spft(arity(predProxyQuery, 2), hybrid_support(predProxyQuery, 2), pt(hybrid_support(predProxyQuery, 2), rhs([prologHybrid(predProxyQuery), arity(predProxyQuery, 2)]))).
spft(tPred(predProxyQuery), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 765), ax).
spft(pt(arity(predProxyQuery, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, A)])))), tPred(predProxyQuery), pt(tPred(predProxyQuery), pt(arity(predProxyQuery, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, A)])))))).
spft(pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, 2)])), arity(predProxyQuery, 2), pt(arity(predProxyQuery, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyQuery), rhs([~tCol(predProxyQuery), support_hilog(predProxyQuery, A)]))))).
spft(arity(predProxyRetract, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 766), ax).
spft(prologHybrid(predProxyRetract), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 766), ax).
spft(pt(arity(predProxyRetract, A), rhs([hybrid_support(predProxyRetract, A)])), prologHybrid(predProxyRetract), pt(prologHybrid(predProxyRetract), pt(arity(predProxyRetract, A), rhs([hybrid_support(predProxyRetract, A)])))).
spft(hybrid_support(predProxyRetract, 2), arity(predProxyRetract, 2), pt(arity(predProxyRetract, A), rhs([hybrid_support(predProxyRetract, A)]))).
spft(prologHybrid(predProxyRetract), hybrid_support(predProxyRetract, 2), pt(hybrid_support(predProxyRetract, 2),  (predProxyRetract\='$VAR', atom(predProxyRetract), integer(2), \+prologDynamic(predProxyRetract), \+static_predicate(predProxyRetract/2)->rhs([{functor(predProxyRetract(A, B), predProxyRetract, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyRetract, baseKB:predProxyRetract(A, B)), \+predicate_property(baseKB:predProxyRetract(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyRetract(A, B), exported);true), kb_dynamic(baseKB:predProxyRetract/2), show_failure(hybrid_support, \+static_predicate(predProxyRetract/2))}, prologHybrid(predProxyRetract), arity(predProxyRetract, 2)])))).
spft(arity(predProxyRetract, 2), hybrid_support(predProxyRetract, 2), pt(hybrid_support(predProxyRetract, 2),  (predProxyRetract\='$VAR', atom(predProxyRetract), integer(2), \+prologDynamic(predProxyRetract), \+static_predicate(predProxyRetract/2)->rhs([{functor(predProxyRetract(A, B), predProxyRetract, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predProxyRetract, baseKB:predProxyRetract(A, B)), \+predicate_property(baseKB:predProxyRetract(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predProxyRetract(A, B), exported);true), kb_dynamic(baseKB:predProxyRetract/2), show_failure(hybrid_support, \+static_predicate(predProxyRetract/2))}, prologHybrid(predProxyRetract), arity(predProxyRetract, 2)])))).
spft(prologHybrid(predProxyRetract), hybrid_support(predProxyRetract, 2), pt(hybrid_support(predProxyRetract, 2), rhs([prologHybrid(predProxyRetract), arity(predProxyRetract, 2)]))).
spft(arity(predProxyRetract, 2), hybrid_support(predProxyRetract, 2), pt(hybrid_support(predProxyRetract, 2), rhs([prologHybrid(predProxyRetract), arity(predProxyRetract, 2)]))).
spft(tPred(predProxyRetract), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 766), ax).
spft(pt(arity(predProxyRetract, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, A)])))), tPred(predProxyRetract), pt(tPred(predProxyRetract), pt(arity(predProxyRetract, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, A)])))))).
spft(pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, 2)])), arity(predProxyRetract, 2), pt(arity(predProxyRetract, A),  (integer(A), A>1->pt(~prologBuiltin(predProxyRetract), rhs([~tCol(predProxyRetract), support_hilog(predProxyRetract, A)]))))).
spft(arity(predTypeMax, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 767), ax).
spft(prologHybrid(predTypeMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 767), ax).
spft(pt(arity(predTypeMax, A), rhs([hybrid_support(predTypeMax, A)])), prologHybrid(predTypeMax), pt(prologHybrid(predTypeMax), pt(arity(predTypeMax, A), rhs([hybrid_support(predTypeMax, A)])))).
spft(hybrid_support(predTypeMax, 3), arity(predTypeMax, 3), pt(arity(predTypeMax, A), rhs([hybrid_support(predTypeMax, A)]))).
spft(prologHybrid(predTypeMax), hybrid_support(predTypeMax, 3), pt(hybrid_support(predTypeMax, 3),  (predTypeMax\='$VAR', atom(predTypeMax), integer(3), \+prologDynamic(predTypeMax), \+static_predicate(predTypeMax/3)->rhs([{functor(predTypeMax(A, B, C), predTypeMax, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predTypeMax, baseKB:predTypeMax(A, B, C)), \+predicate_property(baseKB:predTypeMax(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predTypeMax(A, B, C), exported);true), kb_dynamic(baseKB:predTypeMax/3), show_failure(hybrid_support, \+static_predicate(predTypeMax/3))}, prologHybrid(predTypeMax), arity(predTypeMax, 3)])))).
spft(arity(predTypeMax, 3), hybrid_support(predTypeMax, 3), pt(hybrid_support(predTypeMax, 3),  (predTypeMax\='$VAR', atom(predTypeMax), integer(3), \+prologDynamic(predTypeMax), \+static_predicate(predTypeMax/3)->rhs([{functor(predTypeMax(A, B, C), predTypeMax, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predTypeMax, baseKB:predTypeMax(A, B, C)), \+predicate_property(baseKB:predTypeMax(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predTypeMax(A, B, C), exported);true), kb_dynamic(baseKB:predTypeMax/3), show_failure(hybrid_support, \+static_predicate(predTypeMax/3))}, prologHybrid(predTypeMax), arity(predTypeMax, 3)])))).
spft(prologHybrid(predTypeMax), hybrid_support(predTypeMax, 3), pt(hybrid_support(predTypeMax, 3), rhs([prologHybrid(predTypeMax), arity(predTypeMax, 3)]))).
spft(arity(predTypeMax, 3), hybrid_support(predTypeMax, 3), pt(hybrid_support(predTypeMax, 3), rhs([prologHybrid(predTypeMax), arity(predTypeMax, 3)]))).
spft(tPred(predTypeMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 767), ax).
spft(pt(arity(predTypeMax, A),  (integer(A), A>1->pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, A)])))), tPred(predTypeMax), pt(tPred(predTypeMax), pt(arity(predTypeMax, A),  (integer(A), A>1->pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, A)])))))).
spft(pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, 3)])), arity(predTypeMax, 3), pt(arity(predTypeMax, A),  (integer(A), A>1->pt(~prologBuiltin(predTypeMax), rhs([~tCol(predTypeMax), support_hilog(predTypeMax, A)]))))).
spft(arity(prologSingleValued, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 768), ax).
spft(prologHybrid(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 768), ax).
spft(tPred(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 768), ax).
spft(pt(arity(prologSingleValued, A),  (integer(A), A>1->pt(~prologBuiltin(prologSingleValued), rhs([~tCol(prologSingleValued), support_hilog(prologSingleValued, A)])))), tPred(prologSingleValued), pt(tPred(prologSingleValued), pt(arity(prologSingleValued, A),  (integer(A), A>1->pt(~prologBuiltin(prologSingleValued), rhs([~tCol(prologSingleValued), support_hilog(prologSingleValued, A)])))))).
spft(prologHybrid(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 769), ax).
spft(arity(resultIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 770), ax).
spft(prologHybrid(resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 770), ax).
spft(pt(arity(resultIsa, A), rhs([hybrid_support(resultIsa, A)])), prologHybrid(resultIsa), pt(prologHybrid(resultIsa), pt(arity(resultIsa, A), rhs([hybrid_support(resultIsa, A)])))).
spft(hybrid_support(resultIsa, 2), arity(resultIsa, 2), pt(arity(resultIsa, A), rhs([hybrid_support(resultIsa, A)]))).
spft(prologHybrid(resultIsa), hybrid_support(resultIsa, 2), pt(hybrid_support(resultIsa, 2),  (resultIsa\='$VAR', atom(resultIsa), integer(2), \+prologDynamic(resultIsa), \+static_predicate(resultIsa/2)->rhs([{functor(resultIsa(A, B), resultIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(resultIsa, baseKB:resultIsa(A, B)), \+predicate_property(baseKB:resultIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:resultIsa(A, B), exported);true), kb_dynamic(baseKB:resultIsa/2), show_failure(hybrid_support, \+static_predicate(resultIsa/2))}, prologHybrid(resultIsa), arity(resultIsa, 2)])))).
spft(arity(resultIsa, 2), hybrid_support(resultIsa, 2), pt(hybrid_support(resultIsa, 2),  (resultIsa\='$VAR', atom(resultIsa), integer(2), \+prologDynamic(resultIsa), \+static_predicate(resultIsa/2)->rhs([{functor(resultIsa(A, B), resultIsa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(resultIsa, baseKB:resultIsa(A, B)), \+predicate_property(baseKB:resultIsa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:resultIsa(A, B), exported);true), kb_dynamic(baseKB:resultIsa/2), show_failure(hybrid_support, \+static_predicate(resultIsa/2))}, prologHybrid(resultIsa), arity(resultIsa, 2)])))).
spft(prologHybrid(resultIsa), hybrid_support(resultIsa, 2), pt(hybrid_support(resultIsa, 2), rhs([prologHybrid(resultIsa), arity(resultIsa, 2)]))).
spft(arity(resultIsa, 2), hybrid_support(resultIsa, 2), pt(hybrid_support(resultIsa, 2), rhs([prologHybrid(resultIsa), arity(resultIsa, 2)]))).
spft(tPred(resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 770), ax).
spft(pt(arity(resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, A)])))), tPred(resultIsa), pt(tPred(resultIsa), pt(arity(resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, A)])))))).
spft(pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, 2)])), arity(resultIsa, 2), pt(arity(resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(resultIsa), rhs([~tCol(resultIsa), support_hilog(resultIsa, A)]))))).
spft(arity(genls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 771), ax).
spft(prologHybrid(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 771), ax).
spft(tPred(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 771), ax).
spft(arity(isa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 772), ax).
spft(hybrid_support(isa, 2), arity(isa, 2), pt(arity(isa, 2), rhs([hybrid_support(isa, 2)]))).
spft(prologHybrid(isa), hybrid_support(isa, 2), pt(hybrid_support(isa, 2),  (isa\='$VAR', atom(isa), integer(2), \+prologDynamic(isa), \+static_predicate(isa/2)->rhs([{functor(isa(A, B), isa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(isa, baseKB:isa(A, B)), \+predicate_property(baseKB:isa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:isa(A, B), exported);true), kb_dynamic(baseKB:isa/2), show_failure(hybrid_support, \+static_predicate(isa/2))}, prologHybrid(isa), arity(isa, 2)])))).
spft(pt(arity(isa, A), rhs([hybrid_support(isa, A)])), prologHybrid(isa), pt(prologHybrid(isa), pt(arity(isa, A), rhs([hybrid_support(isa, A)])))).
spft(hybrid_support(isa, 2), arity(isa, 2), pt(arity(isa, A), rhs([hybrid_support(isa, A)]))).
spft(arity(isa, 2), hybrid_support(isa, 2), pt(hybrid_support(isa, 2),  (isa\='$VAR', atom(isa), integer(2), \+prologDynamic(isa), \+static_predicate(isa/2)->rhs([{functor(isa(A, B), isa, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(isa, baseKB:isa(A, B)), \+predicate_property(baseKB:isa(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:isa(A, B), exported);true), kb_dynamic(baseKB:isa/2), show_failure(hybrid_support, \+static_predicate(isa/2))}, prologHybrid(isa), arity(isa, 2)])))).
spft(prologHybrid(isa), hybrid_support(isa, 2), pt(hybrid_support(isa, 2), rhs([prologHybrid(isa), arity(isa, 2)]))).
spft(arity(isa, 2), hybrid_support(isa, 2), pt(hybrid_support(isa, 2), rhs([prologHybrid(isa), arity(isa, 2)]))).
spft(prologHybrid(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 772), ax).
spft(tPred(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 772), ax).
spft(pt(arity(isa, A),  (integer(A), A>1->pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, A)])))), tPred(isa), pt(tPred(isa), pt(arity(isa, A),  (integer(A), A>1->pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, A)])))))).
spft(pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, 2)])), arity(isa, 2), pt(arity(isa, A),  (integer(A), A>1->pt(~prologBuiltin(isa), rhs([~tCol(isa), support_hilog(isa, A)]))))).
spft(arity(genls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 773), ax).
spft(prologHybrid(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 773), ax).
spft(tPred(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 773), ax).
spft(arity(arg, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 774), ax).
spft(prologDynamic(arg), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 774), ax).
spft(tPred(arg), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 774), ax).
spft(pt(arity(arg, A),  (integer(A), A>1->pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, A)])))), tPred(arg), pt(tPred(arg), pt(arity(arg, A),  (integer(A), A>1->pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, A)])))))).
spft(pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, 3)])), arity(arg, 3), pt(arity(arg, A),  (integer(A), A>1->pt(~prologBuiltin(arg), rhs([~tCol(arg), support_hilog(arg, A)]))))).
spft(tCol(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 775), ax).
spft(tCol(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 776), ax).
spft(tCol(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 777), ax).
spft(tCol(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 778), ax).
spft(tCol(tFunction), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 779), ax).
spft(tCol(tInferInstanceFromArgType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 780), ax).
spft(tCol(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 781), ax).
spft(tCol(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 782), ax).
spft(tCol(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 783), ax).
spft(tCol(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 784), ax).
spft(tCol(ttTypeType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 785), ax).
spft(tCol(ttValueType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 788), ax).
spft(tSpec(vtActionTemplate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 789), ax).
spft(ttFormatType(ftString), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 790), ax).
spft(~completelyAssertedCollection(ftString), ttFormatType(ftString), pt(ttFormatType(ftString), rhs([~completelyAssertedCollection(ftString)]))).
spft(~functorDeclares(ftString), ttFormatType(ftString), pt(ttFormatType(ftString), rhs([{get_functor(ftString, ftString), functor(ftString(A), ftString, 1),  (\+predicate_property(ftString(A), B)->kb_dynamic(ftString/1);true), ftString(A)=..[ftString, A], nop(B),  (predicate_property(ftString(A), dynamic)->true;show_pred_info(ftString(A)))}, ~functorDeclares(ftString), arity(ftString, 1),  (ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}),  (isa(A, ftString)==>{ignore(retract(isa(A, ftString)))})]))).
spft(arity(ftString, 1), ttFormatType(ftString), pt(ttFormatType(ftString), rhs([{get_functor(ftString, ftString), functor(ftString(A), ftString, 1),  (\+predicate_property(ftString(A), B)->kb_dynamic(ftString/1);true), ftString(A)=..[ftString, A], nop(B),  (predicate_property(ftString(A), dynamic)->true;show_pred_info(ftString(A)))}, ~functorDeclares(ftString), arity(ftString, 1),  (ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}),  (isa(A, ftString)==>{ignore(retract(isa(A, ftString)))})]))).
spft((ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}), ttFormatType(ftString), pt(ttFormatType(ftString), rhs([{get_functor(ftString, ftString), functor(ftString(A), ftString, 1),  (\+predicate_property(ftString(A), B)->kb_dynamic(ftString/1);true), ftString(A)=..[ftString, A], nop(B),  (predicate_property(ftString(A), dynamic)->true;show_pred_info(ftString(A)))}, ~functorDeclares(ftString), arity(ftString, 1),  (ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}),  (isa(A, ftString)==>{ignore(retract(isa(A, ftString)))})]))).
spft(mpred_mark(pfcLHS, p, ftString, 1), s(((ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 790))), ax).
spft(arity(ftString, 1), mpred_mark(pfcLHS, p, ftString, 1), pt(mpred_mark(pfcLHS, p, ftString, 1),  (ground(pfcLHS:p)->rhs([arity(ftString, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftString, 1), s(((ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 790))), ax).
spft(arity(ftString, 1), mpred_mark(pfcPosTrigger, p, ftString, 1), pt(mpred_mark(pfcPosTrigger, p, ftString, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftString, 1)])))).
spft(marker_supported(ftString, 1), mpred_mark(pfcPosTrigger, p, ftString, 1), pt(mpred_mark(pfcPosTrigger, p, ftString, 1),  (ground(p:ftString:1)->rhs([marker_supported(ftString, 1)])))).
spft(hybrid_support(ftString, 1), marker_supported(ftString, 1), pt(marker_supported(ftString, 1), rhs([hybrid_support(ftString, 1)]))).
spft(prologHybrid(ftString), hybrid_support(ftString, 1), pt(hybrid_support(ftString, 1),  (ftString\='$VAR', atom(ftString), integer(1), \+prologDynamic(ftString), \+static_predicate(ftString/1)->rhs([{functor(ftString(A), ftString, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftString, baseKB:ftString(A)), \+predicate_property(baseKB:ftString(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftString(A), exported);true), kb_dynamic(baseKB:ftString/1), show_failure(hybrid_support, \+static_predicate(ftString/1))}, prologHybrid(ftString), arity(ftString, 1)])))).
spft(pt(arity(ftString, A), rhs([hybrid_support(ftString, A)])), prologHybrid(ftString), pt(prologHybrid(ftString), pt(arity(ftString, A), rhs([hybrid_support(ftString, A)])))).
spft(hybrid_support(ftString, 1), arity(ftString, 1), pt(arity(ftString, A), rhs([hybrid_support(ftString, A)]))).
spft(hybrid_support(ftString, 1), arity(ftString, 1), pt(arity(ftString, A), rhs([hybrid_support(ftString, A)]))).
spft(arity(ftString, 1), hybrid_support(ftString, 1), pt(hybrid_support(ftString, 1),  (ftString\='$VAR', atom(ftString), integer(1), \+prologDynamic(ftString), \+static_predicate(ftString/1)->rhs([{functor(ftString(A), ftString, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftString, baseKB:ftString(A)), \+predicate_property(baseKB:ftString(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftString(A), exported);true), kb_dynamic(baseKB:ftString/1), show_failure(hybrid_support, \+static_predicate(ftString/1))}, prologHybrid(ftString), arity(ftString, 1)])))).
spft(prologHybrid(ftString), hybrid_support(ftString, 1), pt(hybrid_support(ftString, 1), rhs([prologHybrid(ftString), arity(ftString, 1)]))).
spft(arity(ftString, 1), hybrid_support(ftString, 1), pt(hybrid_support(ftString, 1), rhs([prologHybrid(ftString), arity(ftString, 1)]))).
spft(pt(ftString(A),  (predicate_property(ftString(A), dynamic)->rhs([{ignore(retract(ftString(A)))}]))),  (ftString(B)/predicate_property(ftString(B), dynamic)==>{ignore(retract(ftString(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 790)).
spft((isa(A, ftString)==>{ignore(retract(isa(A, ftString)))}), ttFormatType(ftString), pt(ttFormatType(ftString), rhs([{get_functor(ftString, ftString), functor(ftString(A), ftString, 1),  (\+predicate_property(ftString(A), B)->kb_dynamic(ftString/1);true), ftString(A)=..[ftString, A], nop(B),  (predicate_property(ftString(A), dynamic)->true;show_pred_info(ftString(A)))}, ~functorDeclares(ftString), arity(ftString, 1),  (ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}),  (isa(A, ftString)==>{ignore(retract(isa(A, ftString)))})]))).
spft(pt(isa(A, ftString), rhs([{ignore(retract(isa(A, ftString)))}])),  (isa(B, ftString)==>{ignore(retract(isa(B, ftString)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 790)).
spft(ttFormatType(ftVar), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 791), ax).
spft(~completelyAssertedCollection(ftVar), ttFormatType(ftVar), pt(ttFormatType(ftVar), rhs([~completelyAssertedCollection(ftVar)]))).
spft(~functorDeclares(ftVar), ttFormatType(ftVar), pt(ttFormatType(ftVar), rhs([{get_functor(ftVar, ftVar), functor(ftVar(A), ftVar, 1),  (\+predicate_property(ftVar(A), B)->kb_dynamic(ftVar/1);true), ftVar(A)=..[ftVar, A], nop(B),  (predicate_property(ftVar(A), dynamic)->true;show_pred_info(ftVar(A)))}, ~functorDeclares(ftVar), arity(ftVar, 1),  (ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}),  (isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))})]))).
spft(arity(ftVar, 1), ttFormatType(ftVar), pt(ttFormatType(ftVar), rhs([{get_functor(ftVar, ftVar), functor(ftVar(A), ftVar, 1),  (\+predicate_property(ftVar(A), B)->kb_dynamic(ftVar/1);true), ftVar(A)=..[ftVar, A], nop(B),  (predicate_property(ftVar(A), dynamic)->true;show_pred_info(ftVar(A)))}, ~functorDeclares(ftVar), arity(ftVar, 1),  (ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}),  (isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))})]))).
spft((ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}), ttFormatType(ftVar), pt(ttFormatType(ftVar), rhs([{get_functor(ftVar, ftVar), functor(ftVar(A), ftVar, 1),  (\+predicate_property(ftVar(A), B)->kb_dynamic(ftVar/1);true), ftVar(A)=..[ftVar, A], nop(B),  (predicate_property(ftVar(A), dynamic)->true;show_pred_info(ftVar(A)))}, ~functorDeclares(ftVar), arity(ftVar, 1),  (ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}),  (isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))})]))).
spft(mpred_mark(pfcLHS, p, ftVar, 1), s(((ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 791))), ax).
spft(arity(ftVar, 1), mpred_mark(pfcLHS, p, ftVar, 1), pt(mpred_mark(pfcLHS, p, ftVar, 1),  (ground(pfcLHS:p)->rhs([arity(ftVar, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftVar, 1), s(((ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 791))), ax).
spft(arity(ftVar, 1), mpred_mark(pfcPosTrigger, p, ftVar, 1), pt(mpred_mark(pfcPosTrigger, p, ftVar, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftVar, 1)])))).
spft(marker_supported(ftVar, 1), mpred_mark(pfcPosTrigger, p, ftVar, 1), pt(mpred_mark(pfcPosTrigger, p, ftVar, 1),  (ground(p:ftVar:1)->rhs([marker_supported(ftVar, 1)])))).
spft(hybrid_support(ftVar, 1), marker_supported(ftVar, 1), pt(marker_supported(ftVar, 1), rhs([hybrid_support(ftVar, 1)]))).
spft(prologHybrid(ftVar), hybrid_support(ftVar, 1), pt(hybrid_support(ftVar, 1),  (ftVar\='$VAR', atom(ftVar), integer(1), \+prologDynamic(ftVar), \+static_predicate(ftVar/1)->rhs([{functor(ftVar(A), ftVar, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftVar, baseKB:ftVar(A)), \+predicate_property(baseKB:ftVar(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftVar(A), exported);true), kb_dynamic(baseKB:ftVar/1), show_failure(hybrid_support, \+static_predicate(ftVar/1))}, prologHybrid(ftVar), arity(ftVar, 1)])))).
spft(pt(arity(ftVar, A), rhs([hybrid_support(ftVar, A)])), prologHybrid(ftVar), pt(prologHybrid(ftVar), pt(arity(ftVar, A), rhs([hybrid_support(ftVar, A)])))).
spft(hybrid_support(ftVar, 1), arity(ftVar, 1), pt(arity(ftVar, A), rhs([hybrid_support(ftVar, A)]))).
spft(hybrid_support(ftVar, 1), arity(ftVar, 1), pt(arity(ftVar, A), rhs([hybrid_support(ftVar, A)]))).
spft(arity(ftVar, 1), hybrid_support(ftVar, 1), pt(hybrid_support(ftVar, 1),  (ftVar\='$VAR', atom(ftVar), integer(1), \+prologDynamic(ftVar), \+static_predicate(ftVar/1)->rhs([{functor(ftVar(A), ftVar, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftVar, baseKB:ftVar(A)), \+predicate_property(baseKB:ftVar(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftVar(A), exported);true), kb_dynamic(baseKB:ftVar/1), show_failure(hybrid_support, \+static_predicate(ftVar/1))}, prologHybrid(ftVar), arity(ftVar, 1)])))).
spft(prologHybrid(ftVar), hybrid_support(ftVar, 1), pt(hybrid_support(ftVar, 1), rhs([prologHybrid(ftVar), arity(ftVar, 1)]))).
spft(arity(ftVar, 1), hybrid_support(ftVar, 1), pt(hybrid_support(ftVar, 1), rhs([prologHybrid(ftVar), arity(ftVar, 1)]))).
spft(pt(ftVar(A),  (predicate_property(ftVar(A), dynamic)->rhs([{ignore(retract(ftVar(A)))}]))),  (ftVar(B)/predicate_property(ftVar(B), dynamic)==>{ignore(retract(ftVar(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 791)).
spft((isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))}), ttFormatType(ftVar), pt(ttFormatType(ftVar), rhs([{get_functor(ftVar, ftVar), functor(ftVar(A), ftVar, 1),  (\+predicate_property(ftVar(A), B)->kb_dynamic(ftVar/1);true), ftVar(A)=..[ftVar, A], nop(B),  (predicate_property(ftVar(A), dynamic)->true;show_pred_info(ftVar(A)))}, ~functorDeclares(ftVar), arity(ftVar, 1),  (ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}),  (isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))})]))).
spft(pt(isa(A, ftVar), rhs([{ignore(retract(isa(A, ftVar)))}])),  (isa(B, ftVar)==>{ignore(retract(isa(B, ftVar)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 791)).
spft(ttFormatType(ftSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 792), ax).
spft(~completelyAssertedCollection(ftSpec), ttFormatType(ftSpec), pt(ttFormatType(ftSpec), rhs([~completelyAssertedCollection(ftSpec)]))).
spft(~functorDeclares(ftSpec), ttFormatType(ftSpec), pt(ttFormatType(ftSpec), rhs([{get_functor(ftSpec, ftSpec), functor(ftSpec(A), ftSpec, 1),  (\+predicate_property(ftSpec(A), B)->kb_dynamic(ftSpec/1);true), ftSpec(A)=..[ftSpec, A], nop(B),  (predicate_property(ftSpec(A), dynamic)->true;show_pred_info(ftSpec(A)))}, ~functorDeclares(ftSpec), arity(ftSpec, 1),  (ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}),  (isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))})]))).
spft(arity(ftSpec, 1), ttFormatType(ftSpec), pt(ttFormatType(ftSpec), rhs([{get_functor(ftSpec, ftSpec), functor(ftSpec(A), ftSpec, 1),  (\+predicate_property(ftSpec(A), B)->kb_dynamic(ftSpec/1);true), ftSpec(A)=..[ftSpec, A], nop(B),  (predicate_property(ftSpec(A), dynamic)->true;show_pred_info(ftSpec(A)))}, ~functorDeclares(ftSpec), arity(ftSpec, 1),  (ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}),  (isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))})]))).
spft((ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}), ttFormatType(ftSpec), pt(ttFormatType(ftSpec), rhs([{get_functor(ftSpec, ftSpec), functor(ftSpec(A), ftSpec, 1),  (\+predicate_property(ftSpec(A), B)->kb_dynamic(ftSpec/1);true), ftSpec(A)=..[ftSpec, A], nop(B),  (predicate_property(ftSpec(A), dynamic)->true;show_pred_info(ftSpec(A)))}, ~functorDeclares(ftSpec), arity(ftSpec, 1),  (ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}),  (isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))})]))).
spft(mpred_mark(pfcLHS, p, ftSpec, 1), s(((ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 792))), ax).
spft(arity(ftSpec, 1), mpred_mark(pfcLHS, p, ftSpec, 1), pt(mpred_mark(pfcLHS, p, ftSpec, 1),  (ground(pfcLHS:p)->rhs([arity(ftSpec, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftSpec, 1), s(((ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 792))), ax).
spft(arity(ftSpec, 1), mpred_mark(pfcPosTrigger, p, ftSpec, 1), pt(mpred_mark(pfcPosTrigger, p, ftSpec, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftSpec, 1)])))).
spft(marker_supported(ftSpec, 1), mpred_mark(pfcPosTrigger, p, ftSpec, 1), pt(mpred_mark(pfcPosTrigger, p, ftSpec, 1),  (ground(p:ftSpec:1)->rhs([marker_supported(ftSpec, 1)])))).
spft(hybrid_support(ftSpec, 1), marker_supported(ftSpec, 1), pt(marker_supported(ftSpec, 1), rhs([hybrid_support(ftSpec, 1)]))).
spft(prologHybrid(ftSpec), hybrid_support(ftSpec, 1), pt(hybrid_support(ftSpec, 1),  (ftSpec\='$VAR', atom(ftSpec), integer(1), \+prologDynamic(ftSpec), \+static_predicate(ftSpec/1)->rhs([{functor(ftSpec(A), ftSpec, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftSpec, baseKB:ftSpec(A)), \+predicate_property(baseKB:ftSpec(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftSpec(A), exported);true), kb_dynamic(baseKB:ftSpec/1), show_failure(hybrid_support, \+static_predicate(ftSpec/1))}, prologHybrid(ftSpec), arity(ftSpec, 1)])))).
spft(pt(arity(ftSpec, A), rhs([hybrid_support(ftSpec, A)])), prologHybrid(ftSpec), pt(prologHybrid(ftSpec), pt(arity(ftSpec, A), rhs([hybrid_support(ftSpec, A)])))).
spft(hybrid_support(ftSpec, 1), arity(ftSpec, 1), pt(arity(ftSpec, A), rhs([hybrid_support(ftSpec, A)]))).
spft(hybrid_support(ftSpec, 1), arity(ftSpec, 1), pt(arity(ftSpec, A), rhs([hybrid_support(ftSpec, A)]))).
spft(arity(ftSpec, 1), hybrid_support(ftSpec, 1), pt(hybrid_support(ftSpec, 1),  (ftSpec\='$VAR', atom(ftSpec), integer(1), \+prologDynamic(ftSpec), \+static_predicate(ftSpec/1)->rhs([{functor(ftSpec(A), ftSpec, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftSpec, baseKB:ftSpec(A)), \+predicate_property(baseKB:ftSpec(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftSpec(A), exported);true), kb_dynamic(baseKB:ftSpec/1), show_failure(hybrid_support, \+static_predicate(ftSpec/1))}, prologHybrid(ftSpec), arity(ftSpec, 1)])))).
spft(prologHybrid(ftSpec), hybrid_support(ftSpec, 1), pt(hybrid_support(ftSpec, 1), rhs([prologHybrid(ftSpec), arity(ftSpec, 1)]))).
spft(arity(ftSpec, 1), hybrid_support(ftSpec, 1), pt(hybrid_support(ftSpec, 1), rhs([prologHybrid(ftSpec), arity(ftSpec, 1)]))).
spft(pt(ftSpec(A),  (predicate_property(ftSpec(A), dynamic)->rhs([{ignore(retract(ftSpec(A)))}]))),  (ftSpec(B)/predicate_property(ftSpec(B), dynamic)==>{ignore(retract(ftSpec(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 792)).
spft((isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))}), ttFormatType(ftSpec), pt(ttFormatType(ftSpec), rhs([{get_functor(ftSpec, ftSpec), functor(ftSpec(A), ftSpec, 1),  (\+predicate_property(ftSpec(A), B)->kb_dynamic(ftSpec/1);true), ftSpec(A)=..[ftSpec, A], nop(B),  (predicate_property(ftSpec(A), dynamic)->true;show_pred_info(ftSpec(A)))}, ~functorDeclares(ftSpec), arity(ftSpec, 1),  (ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}),  (isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))})]))).
spft(pt(isa(A, ftSpec), rhs([{ignore(retract(isa(A, ftSpec)))}])),  (isa(B, ftSpec)==>{ignore(retract(isa(B, ftSpec)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 792)).
spft(ttFormatType(ftCallable), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 794), ax).
spft(~completelyAssertedCollection(ftCallable), ttFormatType(ftCallable), pt(ttFormatType(ftCallable), rhs([~completelyAssertedCollection(ftCallable)]))).
spft(~functorDeclares(ftCallable), ttFormatType(ftCallable), pt(ttFormatType(ftCallable), rhs([{get_functor(ftCallable, ftCallable), functor(ftCallable(A), ftCallable, 1),  (\+predicate_property(ftCallable(A), B)->kb_dynamic(ftCallable/1);true), ftCallable(A)=..[ftCallable, A], nop(B),  (predicate_property(ftCallable(A), dynamic)->true;show_pred_info(ftCallable(A)))}, ~functorDeclares(ftCallable), arity(ftCallable, 1),  (ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}),  (isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))})]))).
spft(arity(ftCallable, 1), ttFormatType(ftCallable), pt(ttFormatType(ftCallable), rhs([{get_functor(ftCallable, ftCallable), functor(ftCallable(A), ftCallable, 1),  (\+predicate_property(ftCallable(A), B)->kb_dynamic(ftCallable/1);true), ftCallable(A)=..[ftCallable, A], nop(B),  (predicate_property(ftCallable(A), dynamic)->true;show_pred_info(ftCallable(A)))}, ~functorDeclares(ftCallable), arity(ftCallable, 1),  (ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}),  (isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))})]))).
spft((ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}), ttFormatType(ftCallable), pt(ttFormatType(ftCallable), rhs([{get_functor(ftCallable, ftCallable), functor(ftCallable(A), ftCallable, 1),  (\+predicate_property(ftCallable(A), B)->kb_dynamic(ftCallable/1);true), ftCallable(A)=..[ftCallable, A], nop(B),  (predicate_property(ftCallable(A), dynamic)->true;show_pred_info(ftCallable(A)))}, ~functorDeclares(ftCallable), arity(ftCallable, 1),  (ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}),  (isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))})]))).
spft(mpred_mark(pfcLHS, p, ftCallable, 1), s(((ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 794))), ax).
spft(arity(ftCallable, 1), mpred_mark(pfcLHS, p, ftCallable, 1), pt(mpred_mark(pfcLHS, p, ftCallable, 1),  (ground(pfcLHS:p)->rhs([arity(ftCallable, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftCallable, 1), s(((ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 794))), ax).
spft(arity(ftCallable, 1), mpred_mark(pfcPosTrigger, p, ftCallable, 1), pt(mpred_mark(pfcPosTrigger, p, ftCallable, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftCallable, 1)])))).
spft(marker_supported(ftCallable, 1), mpred_mark(pfcPosTrigger, p, ftCallable, 1), pt(mpred_mark(pfcPosTrigger, p, ftCallable, 1),  (ground(p:ftCallable:1)->rhs([marker_supported(ftCallable, 1)])))).
spft(hybrid_support(ftCallable, 1), marker_supported(ftCallable, 1), pt(marker_supported(ftCallable, 1), rhs([hybrid_support(ftCallable, 1)]))).
spft(prologHybrid(ftCallable), hybrid_support(ftCallable, 1), pt(hybrid_support(ftCallable, 1),  (ftCallable\='$VAR', atom(ftCallable), integer(1), \+prologDynamic(ftCallable), \+static_predicate(ftCallable/1)->rhs([{functor(ftCallable(A), ftCallable, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftCallable, baseKB:ftCallable(A)), \+predicate_property(baseKB:ftCallable(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftCallable(A), exported);true), kb_dynamic(baseKB:ftCallable/1), show_failure(hybrid_support, \+static_predicate(ftCallable/1))}, prologHybrid(ftCallable), arity(ftCallable, 1)])))).
spft(pt(arity(ftCallable, A), rhs([hybrid_support(ftCallable, A)])), prologHybrid(ftCallable), pt(prologHybrid(ftCallable), pt(arity(ftCallable, A), rhs([hybrid_support(ftCallable, A)])))).
spft(hybrid_support(ftCallable, 1), arity(ftCallable, 1), pt(arity(ftCallable, A), rhs([hybrid_support(ftCallable, A)]))).
spft(hybrid_support(ftCallable, 1), arity(ftCallable, 1), pt(arity(ftCallable, A), rhs([hybrid_support(ftCallable, A)]))).
spft(arity(ftCallable, 1), hybrid_support(ftCallable, 1), pt(hybrid_support(ftCallable, 1),  (ftCallable\='$VAR', atom(ftCallable), integer(1), \+prologDynamic(ftCallable), \+static_predicate(ftCallable/1)->rhs([{functor(ftCallable(A), ftCallable, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftCallable, baseKB:ftCallable(A)), \+predicate_property(baseKB:ftCallable(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftCallable(A), exported);true), kb_dynamic(baseKB:ftCallable/1), show_failure(hybrid_support, \+static_predicate(ftCallable/1))}, prologHybrid(ftCallable), arity(ftCallable, 1)])))).
spft(prologHybrid(ftCallable), hybrid_support(ftCallable, 1), pt(hybrid_support(ftCallable, 1), rhs([prologHybrid(ftCallable), arity(ftCallable, 1)]))).
spft(arity(ftCallable, 1), hybrid_support(ftCallable, 1), pt(hybrid_support(ftCallable, 1), rhs([prologHybrid(ftCallable), arity(ftCallable, 1)]))).
spft(pt(ftCallable(A),  (predicate_property(ftCallable(A), dynamic)->rhs([{ignore(retract(ftCallable(A)))}]))),  (ftCallable(B)/predicate_property(ftCallable(B), dynamic)==>{ignore(retract(ftCallable(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 794)).
spft((isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))}), ttFormatType(ftCallable), pt(ttFormatType(ftCallable), rhs([{get_functor(ftCallable, ftCallable), functor(ftCallable(A), ftCallable, 1),  (\+predicate_property(ftCallable(A), B)->kb_dynamic(ftCallable/1);true), ftCallable(A)=..[ftCallable, A], nop(B),  (predicate_property(ftCallable(A), dynamic)->true;show_pred_info(ftCallable(A)))}, ~functorDeclares(ftCallable), arity(ftCallable, 1),  (ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}),  (isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))})]))).
spft(pt(isa(A, ftCallable), rhs([{ignore(retract(isa(A, ftCallable)))}])),  (isa(B, ftCallable)==>{ignore(retract(isa(B, ftCallable)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 794)).
spft(ttFormatType(ftPercent), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 795), ax).
spft(~completelyAssertedCollection(ftPercent), ttFormatType(ftPercent), pt(ttFormatType(ftPercent), rhs([~completelyAssertedCollection(ftPercent)]))).
spft(~functorDeclares(ftPercent), ttFormatType(ftPercent), pt(ttFormatType(ftPercent), rhs([{get_functor(ftPercent, ftPercent), functor(ftPercent(A), ftPercent, 1),  (\+predicate_property(ftPercent(A), B)->kb_dynamic(ftPercent/1);true), ftPercent(A)=..[ftPercent, A], nop(B),  (predicate_property(ftPercent(A), dynamic)->true;show_pred_info(ftPercent(A)))}, ~functorDeclares(ftPercent), arity(ftPercent, 1),  (ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}),  (isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))})]))).
spft(arity(ftPercent, 1), ttFormatType(ftPercent), pt(ttFormatType(ftPercent), rhs([{get_functor(ftPercent, ftPercent), functor(ftPercent(A), ftPercent, 1),  (\+predicate_property(ftPercent(A), B)->kb_dynamic(ftPercent/1);true), ftPercent(A)=..[ftPercent, A], nop(B),  (predicate_property(ftPercent(A), dynamic)->true;show_pred_info(ftPercent(A)))}, ~functorDeclares(ftPercent), arity(ftPercent, 1),  (ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}),  (isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))})]))).
spft((ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}), ttFormatType(ftPercent), pt(ttFormatType(ftPercent), rhs([{get_functor(ftPercent, ftPercent), functor(ftPercent(A), ftPercent, 1),  (\+predicate_property(ftPercent(A), B)->kb_dynamic(ftPercent/1);true), ftPercent(A)=..[ftPercent, A], nop(B),  (predicate_property(ftPercent(A), dynamic)->true;show_pred_info(ftPercent(A)))}, ~functorDeclares(ftPercent), arity(ftPercent, 1),  (ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}),  (isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))})]))).
spft(mpred_mark(pfcLHS, p, ftPercent, 1), s(((ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 795))), ax).
spft(arity(ftPercent, 1), mpred_mark(pfcLHS, p, ftPercent, 1), pt(mpred_mark(pfcLHS, p, ftPercent, 1),  (ground(pfcLHS:p)->rhs([arity(ftPercent, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftPercent, 1), s(((ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 795))), ax).
spft(arity(ftPercent, 1), mpred_mark(pfcPosTrigger, p, ftPercent, 1), pt(mpred_mark(pfcPosTrigger, p, ftPercent, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftPercent, 1)])))).
spft(marker_supported(ftPercent, 1), mpred_mark(pfcPosTrigger, p, ftPercent, 1), pt(mpred_mark(pfcPosTrigger, p, ftPercent, 1),  (ground(p:ftPercent:1)->rhs([marker_supported(ftPercent, 1)])))).
spft(hybrid_support(ftPercent, 1), marker_supported(ftPercent, 1), pt(marker_supported(ftPercent, 1), rhs([hybrid_support(ftPercent, 1)]))).
spft(prologHybrid(ftPercent), hybrid_support(ftPercent, 1), pt(hybrid_support(ftPercent, 1),  (ftPercent\='$VAR', atom(ftPercent), integer(1), \+prologDynamic(ftPercent), \+static_predicate(ftPercent/1)->rhs([{functor(ftPercent(A), ftPercent, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftPercent, baseKB:ftPercent(A)), \+predicate_property(baseKB:ftPercent(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftPercent(A), exported);true), kb_dynamic(baseKB:ftPercent/1), show_failure(hybrid_support, \+static_predicate(ftPercent/1))}, prologHybrid(ftPercent), arity(ftPercent, 1)])))).
spft(pt(arity(ftPercent, A), rhs([hybrid_support(ftPercent, A)])), prologHybrid(ftPercent), pt(prologHybrid(ftPercent), pt(arity(ftPercent, A), rhs([hybrid_support(ftPercent, A)])))).
spft(hybrid_support(ftPercent, 1), arity(ftPercent, 1), pt(arity(ftPercent, A), rhs([hybrid_support(ftPercent, A)]))).
spft(hybrid_support(ftPercent, 1), arity(ftPercent, 1), pt(arity(ftPercent, A), rhs([hybrid_support(ftPercent, A)]))).
spft(arity(ftPercent, 1), hybrid_support(ftPercent, 1), pt(hybrid_support(ftPercent, 1),  (ftPercent\='$VAR', atom(ftPercent), integer(1), \+prologDynamic(ftPercent), \+static_predicate(ftPercent/1)->rhs([{functor(ftPercent(A), ftPercent, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftPercent, baseKB:ftPercent(A)), \+predicate_property(baseKB:ftPercent(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftPercent(A), exported);true), kb_dynamic(baseKB:ftPercent/1), show_failure(hybrid_support, \+static_predicate(ftPercent/1))}, prologHybrid(ftPercent), arity(ftPercent, 1)])))).
spft(prologHybrid(ftPercent), hybrid_support(ftPercent, 1), pt(hybrid_support(ftPercent, 1), rhs([prologHybrid(ftPercent), arity(ftPercent, 1)]))).
spft(arity(ftPercent, 1), hybrid_support(ftPercent, 1), pt(hybrid_support(ftPercent, 1), rhs([prologHybrid(ftPercent), arity(ftPercent, 1)]))).
spft(pt(ftPercent(A),  (predicate_property(ftPercent(A), dynamic)->rhs([{ignore(retract(ftPercent(A)))}]))),  (ftPercent(B)/predicate_property(ftPercent(B), dynamic)==>{ignore(retract(ftPercent(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 795)).
spft((isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))}), ttFormatType(ftPercent), pt(ttFormatType(ftPercent), rhs([{get_functor(ftPercent, ftPercent), functor(ftPercent(A), ftPercent, 1),  (\+predicate_property(ftPercent(A), B)->kb_dynamic(ftPercent/1);true), ftPercent(A)=..[ftPercent, A], nop(B),  (predicate_property(ftPercent(A), dynamic)->true;show_pred_info(ftPercent(A)))}, ~functorDeclares(ftPercent), arity(ftPercent, 1),  (ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}),  (isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))})]))).
spft(pt(isa(A, ftPercent), rhs([{ignore(retract(isa(A, ftPercent)))}])),  (isa(B, ftPercent)==>{ignore(retract(isa(B, ftPercent)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 795)).
spft(vtColor(vRed), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 798), ax).
spft(completelyAssertedCollection(vtValue), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 800), ax).
spft(tCol(vtValue), completelyAssertedCollection(vtValue), pt(completelyAssertedCollection(vtValue), rhs([tCol(vtValue)]))).
spft(arity(vtValue, 1), tCol(vtValue), pt(tCol(vtValue),  (atom(vtValue), vtValue(A)=..[vtValue, A]->rhs([{decl_type(vtValue)}, arity(vtValue, 1), mpred_univ(vtValue, A, vtValue(A))])))).
spft(mpred_univ(vtValue, A, vtValue(A)), tCol(vtValue), pt(tCol(vtValue),  (atom(vtValue), vtValue(A)=..[vtValue, A]->rhs([{decl_type(vtValue)}, arity(vtValue, 1), mpred_univ(vtValue, A, vtValue(A))])))).
spft(isa(vtValue, ttValueType), tCol(vtValue), pt(tCol(vtValue),  (isa_from_morphology(vtValue, ttValueType)->rhs([isa(vtValue, ttValueType)])))).
spft(arity(vtValue, 1), tCol(vtValue), pt(tCol(vtValue), rhs([arity(vtValue, 1)]))).
spft(completeExtentAsserted(vtValue), completelyAssertedCollection(vtValue), pt(completelyAssertedCollection(vtValue), rhs([completeExtentAsserted(vtValue)]))).
spft(ttValueType(vtColor), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 820), ax).
spft((ttValueType(A)==>genls(A, vtValue)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 822), ax).
spft(mpred_mark(pfcLHS, p, ttValueType, 1), s(((ttValueType(A)==>genls(A, vtValue)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 822))), ax).
spft(arity(ttValueType, 1), mpred_mark(pfcLHS, p, ttValueType, 1), pt(mpred_mark(pfcLHS, p, ttValueType, 1),  (ground(pfcLHS:p)->rhs([arity(ttValueType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ttValueType, 1), s(((ttValueType(A)==>genls(A, vtValue)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 822))), ax).
spft(arity(ttValueType, 1), mpred_mark(pfcPosTrigger, p, ttValueType, 1), pt(mpred_mark(pfcPosTrigger, p, ttValueType, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ttValueType, 1)])))).
spft(marker_supported(ttValueType, 1), mpred_mark(pfcPosTrigger, p, ttValueType, 1), pt(mpred_mark(pfcPosTrigger, p, ttValueType, 1),  (ground(p:ttValueType:1)->rhs([marker_supported(ttValueType, 1)])))).
spft(hybrid_support(ttValueType, 1), marker_supported(ttValueType, 1), pt(marker_supported(ttValueType, 1), rhs([hybrid_support(ttValueType, 1)]))).
spft(prologHybrid(ttValueType), hybrid_support(ttValueType, 1), pt(hybrid_support(ttValueType, 1),  (ttValueType\='$VAR', atom(ttValueType), integer(1), \+prologDynamic(ttValueType), \+static_predicate(ttValueType/1)->rhs([{functor(ttValueType(A), ttValueType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttValueType, baseKB:ttValueType(A)), \+predicate_property(baseKB:ttValueType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttValueType(A), exported);true), kb_dynamic(baseKB:ttValueType/1), show_failure(hybrid_support, \+static_predicate(ttValueType/1))}, prologHybrid(ttValueType), arity(ttValueType, 1)])))).
spft(pt(arity(ttValueType, A), rhs([hybrid_support(ttValueType, A)])), prologHybrid(ttValueType), pt(prologHybrid(ttValueType), pt(arity(ttValueType, A), rhs([hybrid_support(ttValueType, A)])))).
spft(hybrid_support(ttValueType, 1), arity(ttValueType, 1), pt(arity(ttValueType, A), rhs([hybrid_support(ttValueType, A)]))).
spft(hybrid_support(ttValueType, 1), arity(ttValueType, 1), pt(arity(ttValueType, A), rhs([hybrid_support(ttValueType, A)]))).
spft(arity(ttValueType, 1), hybrid_support(ttValueType, 1), pt(hybrid_support(ttValueType, 1),  (ttValueType\='$VAR', atom(ttValueType), integer(1), \+prologDynamic(ttValueType), \+static_predicate(ttValueType/1)->rhs([{functor(ttValueType(A), ttValueType, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ttValueType, baseKB:ttValueType(A)), \+predicate_property(baseKB:ttValueType(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ttValueType(A), exported);true), kb_dynamic(baseKB:ttValueType/1), show_failure(hybrid_support, \+static_predicate(ttValueType/1))}, prologHybrid(ttValueType), arity(ttValueType, 1)])))).
spft(prologHybrid(ttValueType), hybrid_support(ttValueType, 1), pt(hybrid_support(ttValueType, 1), rhs([prologHybrid(ttValueType), arity(ttValueType, 1)]))).
spft(arity(ttValueType, 1), hybrid_support(ttValueType, 1), pt(hybrid_support(ttValueType, 1), rhs([prologHybrid(ttValueType), arity(ttValueType, 1)]))).
spft(pt(ttValueType(A), rhs([genls(A, vtValue)])),  (ttValueType(B)==>genls(B, vtValue)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 822)).
spft(genls(vtColor, vtValue), ttValueType(vtColor), pt(ttValueType(A), rhs([genls(A, vtValue)]))).
spft(pt(genls(vtValue, vtColor),  (vtColor\==vtValue->rhs([{mpred_withdraw(genls(vtColor, vtValue))}]))), genls(vtColor, vtValue), pt(genls(vtColor, vtValue), pt(genls(vtValue, vtColor),  (vtColor\==vtValue->rhs([{mpred_withdraw(genls(vtColor, vtValue))}]))))).
spft(pt(arity(vtColor, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))), genls(vtColor, vtValue), pt(genls(vtColor, vtValue), pt(arity(vtColor, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))))).
spft(pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)]))), arity(vtColor, 1), pt(arity(vtColor, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, D), D\=vtColor, genls(D, vtValue), D\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, E), get_functor(vtValue, F), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(vtColor, vtValue), arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))).
spft(nearestGenls(vtColor, vtValue), arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))).
spft(genls(vtColor, vtValue), ttValueType(vtColor), pt(ttValueType(A), rhs([genls(A, vtValue)]))).
spft((ttValueType(A)==>completelyAssertedCollection(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 823), ax).
spft(pt(ttValueType(A), rhs([completelyAssertedCollection(A)])),  (ttValueType(B)==>completelyAssertedCollection(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 823)).
spft(completelyAssertedCollection(vtColor), ttValueType(vtColor), pt(ttValueType(A), rhs([completelyAssertedCollection(A)]))).
spft(tCol(vtColor), completelyAssertedCollection(vtColor), pt(completelyAssertedCollection(vtColor), rhs([tCol(vtColor)]))).
spft(arity(vtColor, 1), tCol(vtColor), pt(tCol(vtColor),  (atom(vtColor), vtColor(A)=..[vtColor, A]->rhs([{decl_type(vtColor)}, arity(vtColor, 1), mpred_univ(vtColor, A, vtColor(A))])))).
spft(pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)]))), arity(vtColor, 1), pt(arity(vtColor, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)]))))).
spft(nearestGenls(vtColor, vtValue), arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))).
spft(nearestGenls(vtColor, vtValue), arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtColor, A), A\=vtColor, genls(A, vtValue), A\=vtValue), vtValue\=vtColor->rhs([{get_functor(vtColor, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtColor==>vtValue))))}, nearestGenls(B, C)])))).
spft(mpred_univ(vtColor, A, vtColor(A)), tCol(vtColor), pt(tCol(vtColor),  (atom(vtColor), vtColor(A)=..[vtColor, A]->rhs([{decl_type(vtColor)}, arity(vtColor, 1), mpred_univ(vtColor, A, vtColor(A))])))).
spft(isa(vtColor, ttValueType), tCol(vtColor), pt(tCol(vtColor),  (isa_from_morphology(vtColor, ttValueType)->rhs([isa(vtColor, ttValueType)])))).
spft(arity(vtColor, 1), tCol(vtColor), pt(tCol(vtColor), rhs([arity(vtColor, 1)]))).
spft(completeExtentAsserted(vtColor), completelyAssertedCollection(vtColor), pt(completelyAssertedCollection(vtColor), rhs([completeExtentAsserted(vtColor)]))).
spft(completelyAssertedCollection(vtColor), ttValueType(vtColor), pt(ttValueType(A), rhs([completelyAssertedCollection(A)]))).
spft(ttValueType(vtValue), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 825), ax).
spft(genls(vtValue, vtValue), ttValueType(vtValue), pt(ttValueType(vtValue), rhs([genls(vtValue, vtValue)]))).
spft(pt(genls(vtValue, vtValue),  (vtValue\==vtValue->rhs([{mpred_withdraw(genls(vtValue, vtValue))}]))), genls(vtValue, vtValue), pt(genls(vtValue, vtValue), pt(genls(vtValue, vtValue),  (vtValue\==vtValue->rhs([{mpred_withdraw(genls(vtValue, vtValue))}]))))).
spft(pt(arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)])))), genls(vtValue, vtValue), pt(genls(vtValue, vtValue), pt(arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)])))))).
spft(pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)]))), arity(vtValue, 1), pt(arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtValue, D), D\=vtValue, genls(D, vtValue), D\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, E), get_functor(vtValue, F), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(E, F)]))))).
spft(pt(arity(vtValue, 1),  (\+ (genls(vtValue, A), A\=vtValue, genls(A, vtValue), A\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, B), get_functor(vtValue, C), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(B, C)]))), arity(vtValue, 1), pt(arity(vtValue, 1), pt(arity(vtValue, 1),  (\+ (genls(vtValue, D), D\=vtValue, genls(D, vtValue), D\=vtValue), vtValue\=vtValue->rhs([{get_functor(vtValue, E), get_functor(vtValue, F), nop(dmsg(wishing_to_add((vtValue==>vtValue))))}, nearestGenls(E, F)]))))).
spft(completelyAssertedCollection(vtValue), ttValueType(vtValue), pt(ttValueType(vtValue), rhs([completelyAssertedCollection(vtValue)]))).
spft(typeGenls(ttValueType, vtValue), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 827), ax).
spft((argIsa(C, A, B), {number(A)}, ttFormatType(B)==>argQuotedIsa(C, A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 834), ax).
spft(mpred_mark(pfcCallCode, p, number, 1), s(((argIsa(C, A, B), {number(A)}, ttFormatType(B)==>argQuotedIsa(C, A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 834))), ax).
spft(arity(number, 1), mpred_mark(pfcCallCode, p, number, 1), pt(mpred_mark(pfcCallCode, p, number, 1),  (ground(pfcCallCode:p)->rhs([arity(number, 1)])))).
spft(mpred_mark(pfcCreates, p, argQuotedIsa, 3), s(((argIsa(C, A, B), {number(A)}, ttFormatType(B)==>argQuotedIsa(C, A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 834))), ax).
spft(arity(argQuotedIsa, 3), mpred_mark(pfcCreates, p, argQuotedIsa, 3), pt(mpred_mark(pfcCreates, p, argQuotedIsa, 3),  (ground(pfcCreates:p)->rhs([arity(argQuotedIsa, 3)])))).
spft(marker_supported(argQuotedIsa, 3), mpred_mark(pfcCreates, p, argQuotedIsa, 3), pt(mpred_mark(pfcCreates, p, argQuotedIsa, 3),  (ground(p:argQuotedIsa:3)->rhs([marker_supported(argQuotedIsa, 3)])))).
spft(hybrid_support(argQuotedIsa, 3), marker_supported(argQuotedIsa, 3), pt(marker_supported(argQuotedIsa, 3), rhs([hybrid_support(argQuotedIsa, 3)]))).
spft(prologHybrid(argQuotedIsa), hybrid_support(argQuotedIsa, 3), pt(hybrid_support(argQuotedIsa, 3),  (argQuotedIsa\='$VAR', atom(argQuotedIsa), integer(3), \+prologDynamic(argQuotedIsa), \+static_predicate(argQuotedIsa/3)->rhs([{functor(argQuotedIsa(A, B, C), argQuotedIsa, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(argQuotedIsa, baseKB:argQuotedIsa(A, B, C)), \+predicate_property(baseKB:argQuotedIsa(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:argQuotedIsa(A, B, C), exported);true), kb_dynamic(baseKB:argQuotedIsa/3), show_failure(hybrid_support, \+static_predicate(argQuotedIsa/3))}, prologHybrid(argQuotedIsa), arity(argQuotedIsa, 3)])))).
spft(pt(arity(argQuotedIsa, A), rhs([hybrid_support(argQuotedIsa, A)])), prologHybrid(argQuotedIsa), pt(prologHybrid(argQuotedIsa), pt(arity(argQuotedIsa, A), rhs([hybrid_support(argQuotedIsa, A)])))).
spft(hybrid_support(argQuotedIsa, 3), arity(argQuotedIsa, 3), pt(arity(argQuotedIsa, A), rhs([hybrid_support(argQuotedIsa, A)]))).
spft(arity(argQuotedIsa, 3), hybrid_support(argQuotedIsa, 3), pt(hybrid_support(argQuotedIsa, 3),  (argQuotedIsa\='$VAR', atom(argQuotedIsa), integer(3), \+prologDynamic(argQuotedIsa), \+static_predicate(argQuotedIsa/3)->rhs([{functor(argQuotedIsa(A, B, C), argQuotedIsa, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(argQuotedIsa, baseKB:argQuotedIsa(A, B, C)), \+predicate_property(baseKB:argQuotedIsa(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:argQuotedIsa(A, B, C), exported);true), kb_dynamic(baseKB:argQuotedIsa/3), show_failure(hybrid_support, \+static_predicate(argQuotedIsa/3))}, prologHybrid(argQuotedIsa), arity(argQuotedIsa, 3)])))).
spft(prologHybrid(argQuotedIsa), hybrid_support(argQuotedIsa, 3), pt(hybrid_support(argQuotedIsa, 3), rhs([prologHybrid(argQuotedIsa), arity(argQuotedIsa, 3)]))).
spft(arity(argQuotedIsa, 3), hybrid_support(argQuotedIsa, 3), pt(hybrid_support(argQuotedIsa, 3), rhs([prologHybrid(argQuotedIsa), arity(argQuotedIsa, 3)]))).
spft(pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)])))),  (argIsa(F, D, E), {number(D)}, ttFormatType(E)==>argQuotedIsa(F, D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 834)).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMultiValued, 1, tPred)])), argIsa(prologMultiValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologOrdered, 1, tPred)])), argIsa(prologOrdered, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologNegByFailure, 1, tPred)])), argIsa(prologNegByFailure, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologHybrid, 1, tPred)])), argIsa(prologHybrid, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologPTTP, 1, tPred)])), argIsa(prologPTTP, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(predCanHaveSingletons, 1, tPred)])), argIsa(predCanHaveSingletons, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologDynamic, 1, tPred)])), argIsa(prologDynamic, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMacroHead, 1, tPred)])), argIsa(prologMacroHead, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologListValued, 1, tPred)])), argIsa(prologListValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologSingleValued, 1, tPred)])), argIsa(prologSingleValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(tPred, 2, ftListFn(ftVoprop))])), argIsa(tPred, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMultiValued, 2, ftListFn(ftVoprop))])), argIsa(prologMultiValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologOrdered, 2, ftListFn(ftVoprop))])), argIsa(prologOrdered, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologNegByFailure, 2, ftListFn(ftVoprop))])), argIsa(prologNegByFailure, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(meta_argtypes, 2, ftListFn(ftVoprop))])), argIsa(meta_argtypes, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologHybrid, 2, ftListFn(ftVoprop))])), argIsa(prologHybrid, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologPTTP, 2, ftListFn(ftVoprop))])), argIsa(prologPTTP, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologDynamic, 2, ftListFn(ftVoprop))])), argIsa(prologDynamic, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMacroHead, 2, ftListFn(ftVoprop))])), argIsa(prologMacroHead, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologListValued, 2, ftListFn(ftVoprop))])), argIsa(prologListValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologSingleValued, 2, ftListFn(ftVoprop))])), argIsa(prologSingleValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)])))),  (argIsa(F, D, E), {number(D)}, ttFormatType(E)==>argQuotedIsa(F, D, E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 834)).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMultiValued, 1, tPred)])), argIsa(prologMultiValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologOrdered, 1, tPred)])), argIsa(prologOrdered, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologNegByFailure, 1, tPred)])), argIsa(prologNegByFailure, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologHybrid, 1, tPred)])), argIsa(prologHybrid, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologPTTP, 1, tPred)])), argIsa(prologPTTP, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(predCanHaveSingletons, 1, tPred)])), argIsa(predCanHaveSingletons, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologDynamic, 1, tPred)])), argIsa(prologDynamic, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologMacroHead, 1, tPred)])), argIsa(prologMacroHead, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologListValued, 1, tPred)])), argIsa(prologListValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(tPred), rhs([argQuotedIsa(prologSingleValued, 1, tPred)])), argIsa(prologSingleValued, 1, tPred), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(tPred, 2, ftListFn(ftVoprop))])), argIsa(tPred, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMultiValued, 2, ftListFn(ftVoprop))])), argIsa(prologMultiValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologOrdered, 2, ftListFn(ftVoprop))])), argIsa(prologOrdered, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologNegByFailure, 2, ftListFn(ftVoprop))])), argIsa(prologNegByFailure, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(meta_argtypes, 2, ftListFn(ftVoprop))])), argIsa(meta_argtypes, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologHybrid, 2, ftListFn(ftVoprop))])), argIsa(prologHybrid, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologPTTP, 2, ftListFn(ftVoprop))])), argIsa(prologPTTP, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologDynamic, 2, ftListFn(ftVoprop))])), argIsa(prologDynamic, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologMacroHead, 2, ftListFn(ftVoprop))])), argIsa(prologMacroHead, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologListValued, 2, ftListFn(ftVoprop))])), argIsa(prologListValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(pt(ttFormatType(ftListFn(ftVoprop)), rhs([argQuotedIsa(prologSingleValued, 2, ftListFn(ftVoprop))])), argIsa(prologSingleValued, 2, ftListFn(ftVoprop)), pt(argIsa(C, A, B),  (number(A)->pt(ttFormatType(B), rhs([argQuotedIsa(C, A, B)]))))).
spft(functorDeclares(pfcDatabaseTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcDatabaseTerm, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcDatabaseTerm),  (pfcDatabaseTerm\==tPred->rhs([{mpred_withdraw(genls(pfcDatabaseTerm, tPred))}]))), genls(pfcDatabaseTerm, tPred), pt(genls(pfcDatabaseTerm, tPred), pt(genls(tPred, pfcDatabaseTerm),  (pfcDatabaseTerm\==tPred->rhs([{mpred_withdraw(genls(pfcDatabaseTerm, tPred))}]))))).
spft(pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))), genls(pfcDatabaseTerm, tPred), pt(genls(pfcDatabaseTerm, tPred), pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)]))), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, D), D\=pfcDatabaseTerm, genls(D, tPred), D\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)]))), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, D), D\=pfcDatabaseTerm, genls(D, tPred), D\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)]))), arity(pfcDatabaseTerm, 1), pt(arity(pfcDatabaseTerm, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, D), D\=pfcDatabaseTerm, genls(D, tPred), D\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcDatabaseTerm, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcDatabaseTerm, A), A\=pfcDatabaseTerm, genls(A, tPred), A\=tPred), tPred\=pfcDatabaseTerm->rhs([{get_functor(pfcDatabaseTerm, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcDatabaseTerm==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcControlled, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcControlled),  (pfcControlled\==tPred->rhs([{mpred_withdraw(genls(pfcControlled, tPred))}]))), genls(pfcControlled, tPred), pt(genls(pfcControlled, tPred), pt(genls(tPred, pfcControlled),  (pfcControlled\==tPred->rhs([{mpred_withdraw(genls(pfcControlled, tPred))}]))))).
spft(pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))), genls(pfcControlled, tPred), pt(genls(pfcControlled, tPred), pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)]))), arity(pfcControlled, 1), pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, D), D\=pfcControlled, genls(D, tPred), D\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)]))), arity(pfcControlled, 1), pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, D), D\=pfcControlled, genls(D, tPred), D\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)]))), arity(pfcControlled, 1), pt(arity(pfcControlled, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, D), D\=pfcControlled, genls(D, tPred), D\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcControlled, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcControlled, A), A\=pfcControlled, genls(A, tPred), A\=tPred), tPred\=pfcControlled->rhs([{get_functor(pfcControlled, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcControlled==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologSingleValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(pfcWatched), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcWatched, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcWatched),  (pfcWatched\==tPred->rhs([{mpred_withdraw(genls(pfcWatched, tPred))}]))), genls(pfcWatched, tPred), pt(genls(pfcWatched, tPred), pt(genls(tPred, pfcWatched),  (pfcWatched\==tPred->rhs([{mpred_withdraw(genls(pfcWatched, tPred))}]))))).
spft(pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))), genls(pfcWatched, tPred), pt(genls(pfcWatched, tPred), pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)]))), arity(pfcWatched, 1), pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, D), D\=pfcWatched, genls(D, tPred), D\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)]))), arity(pfcWatched, 1), pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, D), D\=pfcWatched, genls(D, tPred), D\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)]))), arity(pfcWatched, 1), pt(arity(pfcWatched, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, D), D\=pfcWatched, genls(D, tPred), D\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcWatched, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcWatched, A), A\=pfcWatched, genls(A, tPred), A\=tPred), tPred\=pfcWatched->rhs([{get_functor(pfcWatched, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcWatched==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcCreates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcCreates, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcCreates),  (pfcCreates\==tPred->rhs([{mpred_withdraw(genls(pfcCreates, tPred))}]))), genls(pfcCreates, tPred), pt(genls(pfcCreates, tPred), pt(genls(tPred, pfcCreates),  (pfcCreates\==tPred->rhs([{mpred_withdraw(genls(pfcCreates, tPred))}]))))).
spft(pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))), genls(pfcCreates, tPred), pt(genls(pfcCreates, tPred), pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)]))), arity(pfcCreates, 1), pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, D), D\=pfcCreates, genls(D, tPred), D\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)]))), arity(pfcCreates, 1), pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, D), D\=pfcCreates, genls(D, tPred), D\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)]))), arity(pfcCreates, 1), pt(arity(pfcCreates, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, D), D\=pfcCreates, genls(D, tPred), D\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcCreates, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcCreates, A), A\=pfcCreates, genls(A, tPred), A\=tPred), tPred\=pfcCreates->rhs([{get_functor(pfcCreates, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcCreates==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcNegTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcNegTrigger, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcNegTrigger),  (pfcNegTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcNegTrigger, tPred))}]))), genls(pfcNegTrigger, tPred), pt(genls(pfcNegTrigger, tPred), pt(genls(tPred, pfcNegTrigger),  (pfcNegTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcNegTrigger, tPred))}]))))).
spft(pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))), genls(pfcNegTrigger, tPred), pt(genls(pfcNegTrigger, tPred), pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, D), D\=pfcNegTrigger, genls(D, tPred), D\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, D), D\=pfcNegTrigger, genls(D, tPred), D\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcNegTrigger, 1), pt(arity(pfcNegTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, D), D\=pfcNegTrigger, genls(D, tPred), D\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcNegTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcNegTrigger, A), A\=pfcNegTrigger, genls(A, tPred), A\=tPred), tPred\=pfcNegTrigger->rhs([{get_functor(pfcNegTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcNegTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcPosTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcPosTrigger, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcPosTrigger),  (pfcPosTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcPosTrigger, tPred))}]))), genls(pfcPosTrigger, tPred), pt(genls(pfcPosTrigger, tPred), pt(genls(tPred, pfcPosTrigger),  (pfcPosTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcPosTrigger, tPred))}]))))).
spft(pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))), genls(pfcPosTrigger, tPred), pt(genls(pfcPosTrigger, tPred), pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, D), D\=pfcPosTrigger, genls(D, tPred), D\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, D), D\=pfcPosTrigger, genls(D, tPred), D\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcPosTrigger, 1), pt(arity(pfcPosTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, D), D\=pfcPosTrigger, genls(D, tPred), D\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcPosTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcPosTrigger, A), A\=pfcPosTrigger, genls(A, tPred), A\=tPred), tPred\=pfcPosTrigger->rhs([{get_functor(pfcPosTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcPosTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcBcTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcBcTrigger, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcBcTrigger),  (pfcBcTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcBcTrigger, tPred))}]))), genls(pfcBcTrigger, tPred), pt(genls(pfcBcTrigger, tPred), pt(genls(tPred, pfcBcTrigger),  (pfcBcTrigger\==tPred->rhs([{mpred_withdraw(genls(pfcBcTrigger, tPred))}]))))).
spft(pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))), genls(pfcBcTrigger, tPred), pt(genls(pfcBcTrigger, tPred), pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, D), D\=pfcBcTrigger, genls(D, tPred), D\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, D), D\=pfcBcTrigger, genls(D, tPred), D\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)]))), arity(pfcBcTrigger, 1), pt(arity(pfcBcTrigger, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, D), D\=pfcBcTrigger, genls(D, tPred), D\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcBcTrigger, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcBcTrigger, A), A\=pfcBcTrigger, genls(A, tPred), A\=tPred), tPred\=pfcBcTrigger->rhs([{get_functor(pfcBcTrigger, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcBcTrigger==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcRHS), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcRHS, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcRHS),  (pfcRHS\==tPred->rhs([{mpred_withdraw(genls(pfcRHS, tPred))}]))), genls(pfcRHS, tPred), pt(genls(pfcRHS, tPred), pt(genls(tPred, pfcRHS),  (pfcRHS\==tPred->rhs([{mpred_withdraw(genls(pfcRHS, tPred))}]))))).
spft(pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))), genls(pfcRHS, tPred), pt(genls(pfcRHS, tPred), pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)]))), arity(pfcRHS, 1), pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, D), D\=pfcRHS, genls(D, tPred), D\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)]))), arity(pfcRHS, 1), pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, D), D\=pfcRHS, genls(D, tPred), D\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)]))), arity(pfcRHS, 1), pt(arity(pfcRHS, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, D), D\=pfcRHS, genls(D, tPred), D\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcRHS, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcRHS, A), A\=pfcRHS, genls(A, tPred), A\=tPred), tPred\=pfcRHS->rhs([{get_functor(pfcRHS, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcRHS==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(pfcMustFC), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(pfcMustFC, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, pfcMustFC),  (pfcMustFC\==tPred->rhs([{mpred_withdraw(genls(pfcMustFC, tPred))}]))), genls(pfcMustFC, tPred), pt(genls(pfcMustFC, tPred), pt(genls(tPred, pfcMustFC),  (pfcMustFC\==tPred->rhs([{mpred_withdraw(genls(pfcMustFC, tPred))}]))))).
spft(pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))), genls(pfcMustFC, tPred), pt(genls(pfcMustFC, tPred), pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)]))), arity(pfcMustFC, 1), pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, D), D\=pfcMustFC, genls(D, tPred), D\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)]))), arity(pfcMustFC, 1), pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, D), D\=pfcMustFC, genls(D, tPred), D\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)]))), arity(pfcMustFC, 1), pt(arity(pfcMustFC, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, D), D\=pfcMustFC, genls(D, tPred), D\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(pfcMustFC, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(pfcMustFC, A), A\=pfcMustFC, genls(A, tPred), A\=tPred), tPred\=pfcMustFC->rhs([{get_functor(pfcMustFC, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((pfcMustFC==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(predCanHaveSingletons, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, predCanHaveSingletons),  (predCanHaveSingletons\==tPred->rhs([{mpred_withdraw(genls(predCanHaveSingletons, tPred))}]))), genls(predCanHaveSingletons, tPred), pt(genls(predCanHaveSingletons, tPred), pt(genls(tPred, predCanHaveSingletons),  (predCanHaveSingletons\==tPred->rhs([{mpred_withdraw(genls(predCanHaveSingletons, tPred))}]))))).
spft(pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))), genls(predCanHaveSingletons, tPred), pt(genls(predCanHaveSingletons, tPred), pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)]))), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, D), D\=predCanHaveSingletons, genls(D, tPred), D\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)]))), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, D), D\=predCanHaveSingletons, genls(D, tPred), D\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)]))), arity(predCanHaveSingletons, 1), pt(arity(predCanHaveSingletons, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, D), D\=predCanHaveSingletons, genls(D, tPred), D\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predCanHaveSingletons, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predCanHaveSingletons, A), A\=predCanHaveSingletons, genls(A, tPred), A\=tPred), tPred\=predCanHaveSingletons->rhs([{get_functor(predCanHaveSingletons, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predCanHaveSingletons==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologSideEffects, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, prologSideEffects),  (prologSideEffects\==tPred->rhs([{mpred_withdraw(genls(prologSideEffects, tPred))}]))), genls(prologSideEffects, tPred), pt(genls(prologSideEffects, tPred), pt(genls(tPred, prologSideEffects),  (prologSideEffects\==tPred->rhs([{mpred_withdraw(genls(prologSideEffects, tPred))}]))))).
spft(pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))), genls(prologSideEffects, tPred), pt(genls(prologSideEffects, tPred), pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)]))), arity(prologSideEffects, 1), pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, D), D\=prologSideEffects, genls(D, tPred), D\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)]))), arity(prologSideEffects, 1), pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, D), D\=prologSideEffects, genls(D, tPred), D\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)]))), arity(prologSideEffects, 1), pt(arity(prologSideEffects, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, D), D\=prologSideEffects, genls(D, tPred), D\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologSideEffects, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologSideEffects, A), A\=prologSideEffects, genls(A, tPred), A\=tPred), tPred\=prologSideEffects->rhs([{get_functor(prologSideEffects, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologSideEffects==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(meta_argtypes, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, meta_argtypes),  (meta_argtypes\==tPred->rhs([{mpred_withdraw(genls(meta_argtypes, tPred))}]))), genls(meta_argtypes, tPred), pt(genls(meta_argtypes, tPred), pt(genls(tPred, meta_argtypes),  (meta_argtypes\==tPred->rhs([{mpred_withdraw(genls(meta_argtypes, tPred))}]))))).
spft(pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))), genls(meta_argtypes, tPred), pt(genls(meta_argtypes, tPred), pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)]))), arity(meta_argtypes, 1), pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, D), D\=meta_argtypes, genls(D, tPred), D\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)]))), arity(meta_argtypes, 1), pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, D), D\=meta_argtypes, genls(D, tPred), D\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)]))), arity(meta_argtypes, 1), pt(arity(meta_argtypes, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, D), D\=meta_argtypes, genls(D, tPred), D\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(meta_argtypes, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(meta_argtypes, A), A\=meta_argtypes, genls(A, tPred), A\=tPred), tPred\=meta_argtypes->rhs([{get_functor(meta_argtypes, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((meta_argtypes==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(predIsFlag, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, predIsFlag),  (predIsFlag\==tPred->rhs([{mpred_withdraw(genls(predIsFlag, tPred))}]))), genls(predIsFlag, tPred), pt(genls(predIsFlag, tPred), pt(genls(tPred, predIsFlag),  (predIsFlag\==tPred->rhs([{mpred_withdraw(genls(predIsFlag, tPred))}]))))).
spft(pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))), genls(predIsFlag, tPred), pt(genls(predIsFlag, tPred), pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)]))), arity(predIsFlag, 1), pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, D), D\=predIsFlag, genls(D, tPred), D\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)]))), arity(predIsFlag, 1), pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, D), D\=predIsFlag, genls(D, tPred), D\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)]))), arity(predIsFlag, 1), pt(arity(predIsFlag, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, D), D\=predIsFlag, genls(D, tPred), D\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(predIsFlag, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(predIsFlag, A), A\=predIsFlag, genls(A, tPred), A\=tPred), tPred\=predIsFlag->rhs([{get_functor(predIsFlag, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((predIsFlag==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(tPred, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, tPred),  (tPred\==tPred->rhs([{mpred_withdraw(genls(tPred, tPred))}]))), genls(tPred, tPred), pt(genls(tPred, tPred), pt(genls(tPred, tPred),  (tPred\==tPred->rhs([{mpred_withdraw(genls(tPred, tPred))}]))))).
spft(pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)])))), genls(tPred, tPred), pt(genls(tPred, tPred), pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)]))), arity(tPred, 1), pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, D), D\=tPred, genls(D, tPred), D\=tPred), tPred\=tPred->rhs([{get_functor(tPred, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(E, F)]))))).
spft(pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)]))), arity(tPred, 1), pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, D), D\=tPred, genls(D, tPred), D\=tPred), tPred\=tPred->rhs([{get_functor(tPred, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(E, F)]))))).
spft(pt(arity(tPred, 1),  (\+ (genls(tPred, A), A\=tPred, genls(A, tPred), A\=tPred), tPred\=tPred->rhs([{get_functor(tPred, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(B, C)]))), arity(tPred, 1), pt(arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(tPred, D), D\=tPred, genls(D, tPred), D\=tPred), tPred\=tPred->rhs([{get_functor(tPred, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((tPred==>tPred))))}, nearestGenls(E, F)]))))).
spft(functorDeclares(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologMultiValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologMacroHead, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(notAssertable), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(notAssertable, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, notAssertable),  (notAssertable\==tPred->rhs([{mpred_withdraw(genls(notAssertable, tPred))}]))), genls(notAssertable, tPred), pt(genls(notAssertable, tPred), pt(genls(tPred, notAssertable),  (notAssertable\==tPred->rhs([{mpred_withdraw(genls(notAssertable, tPred))}]))))).
spft(pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))), genls(notAssertable, tPred), pt(genls(notAssertable, tPred), pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)]))), arity(notAssertable, 1), pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, D), D\=notAssertable, genls(D, tPred), D\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)]))), arity(notAssertable, 1), pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, D), D\=notAssertable, genls(D, tPred), D\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)]))), arity(notAssertable, 1), pt(arity(notAssertable, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, D), D\=notAssertable, genls(D, tPred), D\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(notAssertable, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(notAssertable, A), A\=notAssertable, genls(A, tPred), A\=tPred), tPred\=notAssertable->rhs([{get_functor(notAssertable, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((notAssertable==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologBuiltin, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologDynamic, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologOrdered, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologNegByFailure, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologPTTP, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologKIF), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologKIF, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologEquality, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(pt(genls(tPred, prologEquality),  (prologEquality\==tPred->rhs([{mpred_withdraw(genls(prologEquality, tPred))}]))), genls(prologEquality, tPred), pt(genls(prologEquality, tPred), pt(genls(tPred, prologEquality),  (prologEquality\==tPred->rhs([{mpred_withdraw(genls(prologEquality, tPred))}]))))).
spft(pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))), genls(prologEquality, tPred), pt(genls(prologEquality, tPred), pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)]))), arity(prologEquality, 1), pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, D), D\=prologEquality, genls(D, tPred), D\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)]))), arity(prologEquality, 1), pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, D), D\=prologEquality, genls(D, tPred), D\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)]))), arity(prologEquality, 1), pt(arity(prologEquality, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, D), D\=prologEquality, genls(D, tPred), D\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, E), get_functor(tPred, F), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(nearestGenls(prologEquality, tPred), arity(tPred, 1), pt(arity(tPred, 1),  (\+ (genls(prologEquality, A), A\=prologEquality, genls(A, tPred), A\=tPred), tPred\=prologEquality->rhs([{get_functor(prologEquality, B), get_functor(tPred, C), nop(dmsg(wishing_to_add((prologEquality==>tPred))))}, nearestGenls(B, C)])))).
spft(functorDeclares(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologHybrid, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(functorDeclares(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(genls(prologListValued, tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 841), ax).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(formatted_resultIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(formatted_resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, A)])))), tPred(formatted_resultIsa), pt(tPred(formatted_resultIsa), pt(arity(formatted_resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, A)])))))).
spft(pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, 2)])), arity(formatted_resultIsa, 2), pt(arity(formatted_resultIsa, A),  (integer(A), A>1->pt(~prologBuiltin(formatted_resultIsa), rhs([~tCol(formatted_resultIsa), support_hilog(formatted_resultIsa, A)]))))).
spft(arity(localityOfObject, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(localityOfObject), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(localityOfObject, A), rhs([hybrid_support(localityOfObject, A)])), prologHybrid(localityOfObject), pt(prologHybrid(localityOfObject), pt(arity(localityOfObject, A), rhs([hybrid_support(localityOfObject, A)])))).
spft(hybrid_support(localityOfObject, 2), arity(localityOfObject, 2), pt(arity(localityOfObject, A), rhs([hybrid_support(localityOfObject, A)]))).
spft(prologHybrid(localityOfObject), hybrid_support(localityOfObject, 2), pt(hybrid_support(localityOfObject, 2),  (localityOfObject\='$VAR', atom(localityOfObject), integer(2), \+prologDynamic(localityOfObject), \+static_predicate(localityOfObject/2)->rhs([{functor(localityOfObject(A, B), localityOfObject, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(localityOfObject, baseKB:localityOfObject(A, B)), \+predicate_property(baseKB:localityOfObject(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:localityOfObject(A, B), exported);true), kb_dynamic(baseKB:localityOfObject/2), show_failure(hybrid_support, \+static_predicate(localityOfObject/2))}, prologHybrid(localityOfObject), arity(localityOfObject, 2)])))).
spft(arity(localityOfObject, 2), hybrid_support(localityOfObject, 2), pt(hybrid_support(localityOfObject, 2),  (localityOfObject\='$VAR', atom(localityOfObject), integer(2), \+prologDynamic(localityOfObject), \+static_predicate(localityOfObject/2)->rhs([{functor(localityOfObject(A, B), localityOfObject, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(localityOfObject, baseKB:localityOfObject(A, B)), \+predicate_property(baseKB:localityOfObject(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:localityOfObject(A, B), exported);true), kb_dynamic(baseKB:localityOfObject/2), show_failure(hybrid_support, \+static_predicate(localityOfObject/2))}, prologHybrid(localityOfObject), arity(localityOfObject, 2)])))).
spft(prologHybrid(localityOfObject), hybrid_support(localityOfObject, 2), pt(hybrid_support(localityOfObject, 2), rhs([prologHybrid(localityOfObject), arity(localityOfObject, 2)]))).
spft(arity(localityOfObject, 2), hybrid_support(localityOfObject, 2), pt(hybrid_support(localityOfObject, 2), rhs([prologHybrid(localityOfObject), arity(localityOfObject, 2)]))).
spft(tPred(localityOfObject), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(localityOfObject, A),  (integer(A), A>1->pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, A)])))), tPred(localityOfObject), pt(tPred(localityOfObject), pt(arity(localityOfObject, A),  (integer(A), A>1->pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, A)])))))).
spft(pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, 2)])), arity(localityOfObject, 2), pt(arity(localityOfObject, A),  (integer(A), A>1->pt(~prologBuiltin(localityOfObject), rhs([~tCol(localityOfObject), support_hilog(localityOfObject, A)]))))).
spft(arity(subFormat, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(subFormat, A), rhs([hybrid_support(subFormat, A)])), prologHybrid(subFormat), pt(prologHybrid(subFormat), pt(arity(subFormat, A), rhs([hybrid_support(subFormat, A)])))).
spft(hybrid_support(subFormat, 2), arity(subFormat, 2), pt(arity(subFormat, A), rhs([hybrid_support(subFormat, A)]))).
spft(prologHybrid(subFormat), hybrid_support(subFormat, 2), pt(hybrid_support(subFormat, 2),  (subFormat\='$VAR', atom(subFormat), integer(2), \+prologDynamic(subFormat), \+static_predicate(subFormat/2)->rhs([{functor(subFormat(A, B), subFormat, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(subFormat, baseKB:subFormat(A, B)), \+predicate_property(baseKB:subFormat(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:subFormat(A, B), exported);true), kb_dynamic(baseKB:subFormat/2), show_failure(hybrid_support, \+static_predicate(subFormat/2))}, prologHybrid(subFormat), arity(subFormat, 2)])))).
spft(arity(subFormat, 2), hybrid_support(subFormat, 2), pt(hybrid_support(subFormat, 2),  (subFormat\='$VAR', atom(subFormat), integer(2), \+prologDynamic(subFormat), \+static_predicate(subFormat/2)->rhs([{functor(subFormat(A, B), subFormat, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(subFormat, baseKB:subFormat(A, B)), \+predicate_property(baseKB:subFormat(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:subFormat(A, B), exported);true), kb_dynamic(baseKB:subFormat/2), show_failure(hybrid_support, \+static_predicate(subFormat/2))}, prologHybrid(subFormat), arity(subFormat, 2)])))).
spft(prologHybrid(subFormat), hybrid_support(subFormat, 2), pt(hybrid_support(subFormat, 2), rhs([prologHybrid(subFormat), arity(subFormat, 2)]))).
spft(arity(subFormat, 2), hybrid_support(subFormat, 2), pt(hybrid_support(subFormat, 2), rhs([prologHybrid(subFormat), arity(subFormat, 2)]))).
spft(tPred(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(subFormat, A),  (integer(A), A>1->pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, A)])))), tPred(subFormat), pt(tPred(subFormat), pt(arity(subFormat, A),  (integer(A), A>1->pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, A)])))))).
spft(pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, 2)])), arity(subFormat, 2), pt(arity(subFormat, A),  (integer(A), A>1->pt(~prologBuiltin(subFormat), rhs([~tCol(subFormat), support_hilog(subFormat, A)]))))).
spft(arity(isa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(genls, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(genls), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(pddlSomethingIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(pddlSomethingIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(pddlSomethingIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(resultIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(subFormat, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(tCol, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(arity(tRegion, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(tRegion), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(tRegion, A), rhs([hybrid_support(tRegion, A)])), prologHybrid(tRegion), pt(prologHybrid(tRegion), pt(arity(tRegion, A), rhs([hybrid_support(tRegion, A)])))).
spft(hybrid_support(tRegion, 1), arity(tRegion, 1), pt(arity(tRegion, A), rhs([hybrid_support(tRegion, A)]))).
spft(prologHybrid(tRegion), hybrid_support(tRegion, 1), pt(hybrid_support(tRegion, 1),  (tRegion\='$VAR', atom(tRegion), integer(1), \+prologDynamic(tRegion), \+static_predicate(tRegion/1)->rhs([{functor(tRegion(A), tRegion, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tRegion, baseKB:tRegion(A)), \+predicate_property(baseKB:tRegion(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tRegion(A), exported);true), kb_dynamic(baseKB:tRegion/1), show_failure(hybrid_support, \+static_predicate(tRegion/1))}, prologHybrid(tRegion), arity(tRegion, 1)])))).
spft(arity(tRegion, 1), hybrid_support(tRegion, 1), pt(hybrid_support(tRegion, 1),  (tRegion\='$VAR', atom(tRegion), integer(1), \+prologDynamic(tRegion), \+static_predicate(tRegion/1)->rhs([{functor(tRegion(A), tRegion, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tRegion, baseKB:tRegion(A)), \+predicate_property(baseKB:tRegion(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tRegion(A), exported);true), kb_dynamic(baseKB:tRegion/1), show_failure(hybrid_support, \+static_predicate(tRegion/1))}, prologHybrid(tRegion), arity(tRegion, 1)])))).
spft(prologHybrid(tRegion), hybrid_support(tRegion, 1), pt(hybrid_support(tRegion, 1), rhs([prologHybrid(tRegion), arity(tRegion, 1)]))).
spft(arity(tRegion, 1), hybrid_support(tRegion, 1), pt(hybrid_support(tRegion, 1), rhs([prologHybrid(tRegion), arity(tRegion, 1)]))).
spft(hybrid_support(tRegion, 1), arity(tRegion, 1), pt(arity(tRegion, A), rhs([hybrid_support(tRegion, A)]))).
spft(tPred(tRegion), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(tRegion, A),  (integer(A), A>1->pt(~prologBuiltin(tRegion), rhs([~tCol(tRegion), support_hilog(tRegion, A)])))), tPred(tRegion), pt(tPred(tRegion), pt(arity(tRegion, A),  (integer(A), A>1->pt(~prologBuiltin(tRegion), rhs([~tCol(tRegion), support_hilog(tRegion, A)])))))).
spft(arity(completelyAssertedCollection, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(completelyAssertedCollection, A),  (integer(A), A>1->pt(~prologBuiltin(completelyAssertedCollection), rhs([~tCol(completelyAssertedCollection), support_hilog(completelyAssertedCollection, A)])))), tPred(completelyAssertedCollection), pt(tPred(completelyAssertedCollection), pt(arity(completelyAssertedCollection, A),  (integer(A), A>1->pt(~prologBuiltin(completelyAssertedCollection), rhs([~tCol(completelyAssertedCollection), support_hilog(completelyAssertedCollection, A)])))))).
spft(arity(ttFormatType, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(pt(arity(ttFormatType, A),  (integer(A), A>1->pt(~prologBuiltin(ttFormatType), rhs([~tCol(ttFormatType), support_hilog(ttFormatType, A)])))), tPred(ttFormatType), pt(tPred(ttFormatType), pt(arity(ttFormatType, A),  (integer(A), A>1->pt(~prologBuiltin(ttFormatType), rhs([~tCol(ttFormatType), support_hilog(ttFormatType, A)])))))).
spft(arity(typeProps, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(prologHybrid(typeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(tPred(typeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 854), ax).
spft(ttAbstractType(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 858), ax).
spft(subFormat(ftDeplictsFn(tCol), ftSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 865), ax).
spft(subFormat(ftDeplictsFn(meta_argtypes), ftSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 866), ax).
spft(subFormat(ftVoprop, ftSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 867), ax).
spft(tFunction(ftRest(ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 869), ax).
spft(meta_argtypes(ftRest(ftTerm)), tFunction(ftRest(ftTerm)), pt(tFunction(ftRest(ftTerm)),  (is_declarations(ftRest(ftTerm))->rhs([meta_argtypes(ftRest(ftTerm))])))).
spft(arity(ftRest, 1), meta_argtypes(ftRest(ftTerm)), pt(meta_argtypes(ftRest(ftTerm)),  (is_ftCompound(ftRest(ftTerm))->rhs([{get_functor(ftRest(ftTerm), ftRest, 1)}, arity(ftRest, 1)])))).
spft(pt(genls(ftRest(ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftRest(ftTerm), A)])))), meta_argtypes(ftRest(ftTerm)), pt(meta_argtypes(ftRest(ftTerm)),  (dif:dif(ftRest(ftTerm), A)->pt(genls(ftRest(ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftRest(ftTerm), A)]))))))).
spft(tFunction(isRandom(tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 870), ax).
spft(meta_argtypes(isRandom(tCol)), tFunction(isRandom(tCol)), pt(tFunction(isRandom(tCol)),  (is_declarations(isRandom(tCol))->rhs([meta_argtypes(isRandom(tCol))])))).
spft(arity(isRandom, 1), meta_argtypes(isRandom(tCol)), pt(meta_argtypes(isRandom(tCol)),  (is_ftCompound(isRandom(tCol))->rhs([{get_functor(isRandom(tCol), isRandom, 1)}, arity(isRandom, 1)])))).
spft(pt(genls(isRandom(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(isRandom(tCol), A)])))), meta_argtypes(isRandom(tCol)), pt(meta_argtypes(isRandom(tCol)),  (dif:dif(isRandom(tCol), A)->pt(genls(isRandom(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(isRandom(tCol), A)]))))))).
spft(tFunction(isAnd(ftRest(ftSpec))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 871), ax).
spft(tFunction(isMost(ftRest(ftSpec))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 872), ax).
spft(tFunction(isOneOf(ftRest(ftSpec))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 873), ax).
spft(tFunction(isNot(ftSpec)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 874), ax).
spft(tFunction(isOptional(ftSpec, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 875), ax).
spft(tFunction(isOptionalStr(ftString)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 876), ax).
spft(tFunction(exactStr(ftString)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 877), ax).
spft((resultIsa(A, B)==>tFunction(A), ftSpec(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879), ax).
spft(mpred_mark(pfcLHS, p, resultIsa, 2), s(((resultIsa(A, B)==>tFunction(A), ftSpec(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879))), ax).
spft(arity(resultIsa, 2), mpred_mark(pfcLHS, p, resultIsa, 2), pt(mpred_mark(pfcLHS, p, resultIsa, 2),  (ground(pfcLHS:p)->rhs([arity(resultIsa, 2)])))).
spft(mpred_mark(pfcCreates, p, tFunction, 1), s(((resultIsa(A, B)==>tFunction(A), ftSpec(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879))), ax).
spft(arity(tFunction, 1), mpred_mark(pfcCreates, p, tFunction, 1), pt(mpred_mark(pfcCreates, p, tFunction, 1),  (ground(pfcCreates:p)->rhs([arity(tFunction, 1)])))).
spft(marker_supported(tFunction, 1), mpred_mark(pfcCreates, p, tFunction, 1), pt(mpred_mark(pfcCreates, p, tFunction, 1),  (ground(p:tFunction:1)->rhs([marker_supported(tFunction, 1)])))).
spft(mpred_mark(pfcCreates, p, ftSpec, 1), s(((resultIsa(A, B)==>tFunction(A), ftSpec(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879))), ax).
spft(arity(ftSpec, 1), mpred_mark(pfcCreates, p, ftSpec, 1), pt(mpred_mark(pfcCreates, p, ftSpec, 1),  (ground(pfcCreates:p)->rhs([arity(ftSpec, 1)])))).
spft(marker_supported(ftSpec, 1), mpred_mark(pfcCreates, p, ftSpec, 1), pt(mpred_mark(pfcCreates, p, ftSpec, 1),  (ground(p:ftSpec:1)->rhs([marker_supported(ftSpec, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, resultIsa, 2), s(((resultIsa(A, B)==>tFunction(A), ftSpec(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879))), ax).
spft(arity(resultIsa, 2), mpred_mark(pfcPosTrigger, p, resultIsa, 2), pt(mpred_mark(pfcPosTrigger, p, resultIsa, 2),  (ground(pfcPosTrigger:p)->rhs([arity(resultIsa, 2)])))).
spft(marker_supported(resultIsa, 2), mpred_mark(pfcPosTrigger, p, resultIsa, 2), pt(mpred_mark(pfcPosTrigger, p, resultIsa, 2),  (ground(p:resultIsa:2)->rhs([marker_supported(resultIsa, 2)])))).
spft(hybrid_support(resultIsa, 2), marker_supported(resultIsa, 2), pt(marker_supported(resultIsa, 2), rhs([hybrid_support(resultIsa, 2)]))).
spft(pt(resultIsa(A, B), rhs([tFunction(A), ftSpec(B)])),  (resultIsa(C, D)==>tFunction(C), ftSpec(D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 879)).
spft(resultIsa(ftDeplictsFn, ftSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 880), ax).
spft(tFunction(ftDeplictsFn), resultIsa(ftDeplictsFn, ftSpec), pt(resultIsa(ftDeplictsFn, ftSpec), rhs([tFunction(ftDeplictsFn), ftSpec(ftSpec)]))).
spft(ftSpec(ftSpec), resultIsa(ftDeplictsFn, ftSpec), pt(resultIsa(ftDeplictsFn, ftSpec), rhs([tFunction(ftDeplictsFn), ftSpec(ftSpec)]))).
spft(tPred(quotedDefnIff/2, prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 882), ax).
spft(prologHybrid(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 884), ax).
spft(prologMultiValued(determinerString), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 885), ax).
spft(completeExtentAsserted(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 886), ax).
spft(ttFormatType(ftInt), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 887), ax).
spft(~completelyAssertedCollection(ftInt), ttFormatType(ftInt), pt(ttFormatType(ftInt), rhs([~completelyAssertedCollection(ftInt)]))).
spft(~functorDeclares(ftInt), ttFormatType(ftInt), pt(ttFormatType(ftInt), rhs([{get_functor(ftInt, ftInt), functor(ftInt(A), ftInt, 1),  (\+predicate_property(ftInt(A), B)->kb_dynamic(ftInt/1);true), ftInt(A)=..[ftInt, A], nop(B),  (predicate_property(ftInt(A), dynamic)->true;show_pred_info(ftInt(A)))}, ~functorDeclares(ftInt), arity(ftInt, 1),  (ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}),  (isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))})]))).
spft(arity(ftInt, 1), ttFormatType(ftInt), pt(ttFormatType(ftInt), rhs([{get_functor(ftInt, ftInt), functor(ftInt(A), ftInt, 1),  (\+predicate_property(ftInt(A), B)->kb_dynamic(ftInt/1);true), ftInt(A)=..[ftInt, A], nop(B),  (predicate_property(ftInt(A), dynamic)->true;show_pred_info(ftInt(A)))}, ~functorDeclares(ftInt), arity(ftInt, 1),  (ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}),  (isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))})]))).
spft((ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}), ttFormatType(ftInt), pt(ttFormatType(ftInt), rhs([{get_functor(ftInt, ftInt), functor(ftInt(A), ftInt, 1),  (\+predicate_property(ftInt(A), B)->kb_dynamic(ftInt/1);true), ftInt(A)=..[ftInt, A], nop(B),  (predicate_property(ftInt(A), dynamic)->true;show_pred_info(ftInt(A)))}, ~functorDeclares(ftInt), arity(ftInt, 1),  (ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}),  (isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))})]))).
spft(mpred_mark(pfcLHS, p, ftInt, 1), s(((ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 887))), ax).
spft(arity(ftInt, 1), mpred_mark(pfcLHS, p, ftInt, 1), pt(mpred_mark(pfcLHS, p, ftInt, 1),  (ground(pfcLHS:p)->rhs([arity(ftInt, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftInt, 1), s(((ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 887))), ax).
spft(arity(ftInt, 1), mpred_mark(pfcPosTrigger, p, ftInt, 1), pt(mpred_mark(pfcPosTrigger, p, ftInt, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftInt, 1)])))).
spft(marker_supported(ftInt, 1), mpred_mark(pfcPosTrigger, p, ftInt, 1), pt(mpred_mark(pfcPosTrigger, p, ftInt, 1),  (ground(p:ftInt:1)->rhs([marker_supported(ftInt, 1)])))).
spft(hybrid_support(ftInt, 1), marker_supported(ftInt, 1), pt(marker_supported(ftInt, 1), rhs([hybrid_support(ftInt, 1)]))).
spft(prologHybrid(ftInt), hybrid_support(ftInt, 1), pt(hybrid_support(ftInt, 1),  (ftInt\='$VAR', atom(ftInt), integer(1), \+prologDynamic(ftInt), \+static_predicate(ftInt/1)->rhs([{functor(ftInt(A), ftInt, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftInt, baseKB:ftInt(A)), \+predicate_property(baseKB:ftInt(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftInt(A), exported);true), kb_dynamic(baseKB:ftInt/1), show_failure(hybrid_support, \+static_predicate(ftInt/1))}, prologHybrid(ftInt), arity(ftInt, 1)])))).
spft(pt(arity(ftInt, A), rhs([hybrid_support(ftInt, A)])), prologHybrid(ftInt), pt(prologHybrid(ftInt), pt(arity(ftInt, A), rhs([hybrid_support(ftInt, A)])))).
spft(hybrid_support(ftInt, 1), arity(ftInt, 1), pt(arity(ftInt, A), rhs([hybrid_support(ftInt, A)]))).
spft(hybrid_support(ftInt, 1), arity(ftInt, 1), pt(arity(ftInt, A), rhs([hybrid_support(ftInt, A)]))).
spft(arity(ftInt, 1), hybrid_support(ftInt, 1), pt(hybrid_support(ftInt, 1),  (ftInt\='$VAR', atom(ftInt), integer(1), \+prologDynamic(ftInt), \+static_predicate(ftInt/1)->rhs([{functor(ftInt(A), ftInt, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftInt, baseKB:ftInt(A)), \+predicate_property(baseKB:ftInt(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftInt(A), exported);true), kb_dynamic(baseKB:ftInt/1), show_failure(hybrid_support, \+static_predicate(ftInt/1))}, prologHybrid(ftInt), arity(ftInt, 1)])))).
spft(prologHybrid(ftInt), hybrid_support(ftInt, 1), pt(hybrid_support(ftInt, 1), rhs([prologHybrid(ftInt), arity(ftInt, 1)]))).
spft(arity(ftInt, 1), hybrid_support(ftInt, 1), pt(hybrid_support(ftInt, 1), rhs([prologHybrid(ftInt), arity(ftInt, 1)]))).
spft(pt(ftInt(A),  (predicate_property(ftInt(A), dynamic)->rhs([{ignore(retract(ftInt(A)))}]))),  (ftInt(B)/predicate_property(ftInt(B), dynamic)==>{ignore(retract(ftInt(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 887)).
spft((isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))}), ttFormatType(ftInt), pt(ttFormatType(ftInt), rhs([{get_functor(ftInt, ftInt), functor(ftInt(A), ftInt, 1),  (\+predicate_property(ftInt(A), B)->kb_dynamic(ftInt/1);true), ftInt(A)=..[ftInt, A], nop(B),  (predicate_property(ftInt(A), dynamic)->true;show_pred_info(ftInt(A)))}, ~functorDeclares(ftInt), arity(ftInt, 1),  (ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}),  (isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))})]))).
spft(pt(isa(A, ftInt), rhs([{ignore(retract(isa(A, ftInt)))}])),  (isa(B, ftInt)==>{ignore(retract(isa(B, ftInt)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 887)).
spft(ttFormatType(ftNumber), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 888), ax).
spft(~completelyAssertedCollection(ftNumber), ttFormatType(ftNumber), pt(ttFormatType(ftNumber), rhs([~completelyAssertedCollection(ftNumber)]))).
spft(~functorDeclares(ftNumber), ttFormatType(ftNumber), pt(ttFormatType(ftNumber), rhs([{get_functor(ftNumber, ftNumber), functor(ftNumber(A), ftNumber, 1),  (\+predicate_property(ftNumber(A), B)->kb_dynamic(ftNumber/1);true), ftNumber(A)=..[ftNumber, A], nop(B),  (predicate_property(ftNumber(A), dynamic)->true;show_pred_info(ftNumber(A)))}, ~functorDeclares(ftNumber), arity(ftNumber, 1),  (ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}),  (isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))})]))).
spft(arity(ftNumber, 1), ttFormatType(ftNumber), pt(ttFormatType(ftNumber), rhs([{get_functor(ftNumber, ftNumber), functor(ftNumber(A), ftNumber, 1),  (\+predicate_property(ftNumber(A), B)->kb_dynamic(ftNumber/1);true), ftNumber(A)=..[ftNumber, A], nop(B),  (predicate_property(ftNumber(A), dynamic)->true;show_pred_info(ftNumber(A)))}, ~functorDeclares(ftNumber), arity(ftNumber, 1),  (ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}),  (isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))})]))).
spft((ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}), ttFormatType(ftNumber), pt(ttFormatType(ftNumber), rhs([{get_functor(ftNumber, ftNumber), functor(ftNumber(A), ftNumber, 1),  (\+predicate_property(ftNumber(A), B)->kb_dynamic(ftNumber/1);true), ftNumber(A)=..[ftNumber, A], nop(B),  (predicate_property(ftNumber(A), dynamic)->true;show_pred_info(ftNumber(A)))}, ~functorDeclares(ftNumber), arity(ftNumber, 1),  (ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}),  (isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))})]))).
spft(mpred_mark(pfcLHS, p, ftNumber, 1), s(((ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 888))), ax).
spft(arity(ftNumber, 1), mpred_mark(pfcLHS, p, ftNumber, 1), pt(mpred_mark(pfcLHS, p, ftNumber, 1),  (ground(pfcLHS:p)->rhs([arity(ftNumber, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftNumber, 1), s(((ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 888))), ax).
spft(arity(ftNumber, 1), mpred_mark(pfcPosTrigger, p, ftNumber, 1), pt(mpred_mark(pfcPosTrigger, p, ftNumber, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftNumber, 1)])))).
spft(marker_supported(ftNumber, 1), mpred_mark(pfcPosTrigger, p, ftNumber, 1), pt(mpred_mark(pfcPosTrigger, p, ftNumber, 1),  (ground(p:ftNumber:1)->rhs([marker_supported(ftNumber, 1)])))).
spft(hybrid_support(ftNumber, 1), marker_supported(ftNumber, 1), pt(marker_supported(ftNumber, 1), rhs([hybrid_support(ftNumber, 1)]))).
spft(prologHybrid(ftNumber), hybrid_support(ftNumber, 1), pt(hybrid_support(ftNumber, 1),  (ftNumber\='$VAR', atom(ftNumber), integer(1), \+prologDynamic(ftNumber), \+static_predicate(ftNumber/1)->rhs([{functor(ftNumber(A), ftNumber, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftNumber, baseKB:ftNumber(A)), \+predicate_property(baseKB:ftNumber(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftNumber(A), exported);true), kb_dynamic(baseKB:ftNumber/1), show_failure(hybrid_support, \+static_predicate(ftNumber/1))}, prologHybrid(ftNumber), arity(ftNumber, 1)])))).
spft(pt(arity(ftNumber, A), rhs([hybrid_support(ftNumber, A)])), prologHybrid(ftNumber), pt(prologHybrid(ftNumber), pt(arity(ftNumber, A), rhs([hybrid_support(ftNumber, A)])))).
spft(hybrid_support(ftNumber, 1), arity(ftNumber, 1), pt(arity(ftNumber, A), rhs([hybrid_support(ftNumber, A)]))).
spft(hybrid_support(ftNumber, 1), arity(ftNumber, 1), pt(arity(ftNumber, A), rhs([hybrid_support(ftNumber, A)]))).
spft(arity(ftNumber, 1), hybrid_support(ftNumber, 1), pt(hybrid_support(ftNumber, 1),  (ftNumber\='$VAR', atom(ftNumber), integer(1), \+prologDynamic(ftNumber), \+static_predicate(ftNumber/1)->rhs([{functor(ftNumber(A), ftNumber, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftNumber, baseKB:ftNumber(A)), \+predicate_property(baseKB:ftNumber(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftNumber(A), exported);true), kb_dynamic(baseKB:ftNumber/1), show_failure(hybrid_support, \+static_predicate(ftNumber/1))}, prologHybrid(ftNumber), arity(ftNumber, 1)])))).
spft(prologHybrid(ftNumber), hybrid_support(ftNumber, 1), pt(hybrid_support(ftNumber, 1), rhs([prologHybrid(ftNumber), arity(ftNumber, 1)]))).
spft(arity(ftNumber, 1), hybrid_support(ftNumber, 1), pt(hybrid_support(ftNumber, 1), rhs([prologHybrid(ftNumber), arity(ftNumber, 1)]))).
spft(pt(ftNumber(A),  (predicate_property(ftNumber(A), dynamic)->rhs([{ignore(retract(ftNumber(A)))}]))),  (ftNumber(B)/predicate_property(ftNumber(B), dynamic)==>{ignore(retract(ftNumber(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 888)).
spft((isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))}), ttFormatType(ftNumber), pt(ttFormatType(ftNumber), rhs([{get_functor(ftNumber, ftNumber), functor(ftNumber(A), ftNumber, 1),  (\+predicate_property(ftNumber(A), B)->kb_dynamic(ftNumber/1);true), ftNumber(A)=..[ftNumber, A], nop(B),  (predicate_property(ftNumber(A), dynamic)->true;show_pred_info(ftNumber(A)))}, ~functorDeclares(ftNumber), arity(ftNumber, 1),  (ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}),  (isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))})]))).
spft(pt(isa(A, ftNumber), rhs([{ignore(retract(isa(A, ftNumber)))}])),  (isa(B, ftNumber)==>{ignore(retract(isa(B, ftNumber)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 888)).
spft(ttFormatType(ftString), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 889), ax).
spft(tFunction(isInstFn), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 890), ax).
spft(tFunction(isKappaFn), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 891), ax).
spft(tCol(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 892), ax).
spft(arity(ftListFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 893), ax).
spft(arity(isLikeFn, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 894), ax).
spft(arity(ftDeplictsFn, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 895), ax).
spft(tFunction(ftDice(ftInt, ftInt, ftInt)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 896), ax).
spft(meta_argtypes(ftDice(ftInt, ftInt, ftInt)), tFunction(ftDice(ftInt, ftInt, ftInt)), pt(tFunction(ftDice(ftInt, ftInt, ftInt)),  (is_declarations(ftDice(ftInt, ftInt, ftInt))->rhs([meta_argtypes(ftDice(ftInt, ftInt, ftInt))])))).
spft(arity(ftDice, 3), meta_argtypes(ftDice(ftInt, ftInt, ftInt)), pt(meta_argtypes(ftDice(ftInt, ftInt, ftInt)),  (is_ftCompound(ftDice(ftInt, ftInt, ftInt))->rhs([{get_functor(ftDice(ftInt, ftInt, ftInt), ftDice, 3)}, arity(ftDice, 3)])))).
spft(pt(genls(ftDice(ftInt, ftInt, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDice(ftInt, ftInt, ftInt), A)])))), meta_argtypes(ftDice(ftInt, ftInt, ftInt)), pt(meta_argtypes(ftDice(ftInt, ftInt, ftInt)),  (dif:dif(ftDice(ftInt, ftInt, ftInt), A)->pt(genls(ftDice(ftInt, ftInt, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDice(ftInt, ftInt, ftInt), A)]))))))).
spft(tFunction(ftListFn(ftRest)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 897), ax).
spft(tFunction(ftDeplictsFn(tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 898), ax).
spft(meta_argtypes(ftDeplictsFn(tCol)), tFunction(ftDeplictsFn(tCol)), pt(tFunction(ftDeplictsFn(tCol)),  (is_declarations(ftDeplictsFn(tCol))->rhs([meta_argtypes(ftDeplictsFn(tCol))])))).
spft(arity(ftDeplictsFn, 1), meta_argtypes(ftDeplictsFn(tCol)), pt(meta_argtypes(ftDeplictsFn(tCol)),  (is_ftCompound(ftDeplictsFn(tCol))->rhs([{get_functor(ftDeplictsFn(tCol), ftDeplictsFn, 1)}, arity(ftDeplictsFn, 1)])))).
spft(pt(genls(ftDeplictsFn(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDeplictsFn(tCol), A)])))), meta_argtypes(ftDeplictsFn(tCol)), pt(meta_argtypes(ftDeplictsFn(tCol)),  (dif:dif(ftDeplictsFn(tCol), A)->pt(genls(ftDeplictsFn(tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(ftDeplictsFn(tCol), A)]))))))).
spft(completelyAssertedCollection(tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 900), ax).
spft(tCol(tAvoidForwardChain), completelyAssertedCollection(tAvoidForwardChain), pt(completelyAssertedCollection(tAvoidForwardChain), rhs([tCol(tAvoidForwardChain)]))).
spft(arity(tAvoidForwardChain, 1), tCol(tAvoidForwardChain), pt(tCol(tAvoidForwardChain),  (atom(tAvoidForwardChain), tAvoidForwardChain(A)=..[tAvoidForwardChain, A]->rhs([{decl_type(tAvoidForwardChain)}, arity(tAvoidForwardChain, 1), mpred_univ(tAvoidForwardChain, A, tAvoidForwardChain(A))])))).
spft(mpred_univ(tAvoidForwardChain, A, tAvoidForwardChain(A)), tCol(tAvoidForwardChain), pt(tCol(tAvoidForwardChain),  (atom(tAvoidForwardChain), tAvoidForwardChain(A)=..[tAvoidForwardChain, A]->rhs([{decl_type(tAvoidForwardChain)}, arity(tAvoidForwardChain, 1), mpred_univ(tAvoidForwardChain, A, tAvoidForwardChain(A))])))).
spft(isa(tAvoidForwardChain, tCol), tCol(tAvoidForwardChain), pt(tCol(tAvoidForwardChain),  (isa_from_morphology(tAvoidForwardChain, tCol)->rhs([isa(tAvoidForwardChain, tCol)])))).
spft(arity(tAvoidForwardChain, 1), tCol(tAvoidForwardChain), pt(tCol(tAvoidForwardChain), rhs([arity(tAvoidForwardChain, 1)]))).
spft(completeExtentAsserted(tAvoidForwardChain), completelyAssertedCollection(tAvoidForwardChain), pt(completelyAssertedCollection(tAvoidForwardChain), rhs([completeExtentAsserted(tAvoidForwardChain)]))).
spft(completelyAssertedCollection('SententialOperator'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 901), ax).
spft(tCol('SententialOperator'), completelyAssertedCollection('SententialOperator'), pt(completelyAssertedCollection('SententialOperator'), rhs([tCol('SententialOperator')]))).
spft(arity('SententialOperator', 1), tCol('SententialOperator'), pt(tCol('SententialOperator'),  (atom('SententialOperator'), 'SententialOperator'(A)=..['SententialOperator', A]->rhs([{decl_type('SententialOperator')}, arity('SententialOperator', 1), mpred_univ('SententialOperator', A, 'SententialOperator'(A))])))).
spft(mpred_univ('SententialOperator', A, 'SententialOperator'(A)), tCol('SententialOperator'), pt(tCol('SententialOperator'),  (atom('SententialOperator'), 'SententialOperator'(A)=..['SententialOperator', A]->rhs([{decl_type('SententialOperator')}, arity('SententialOperator', 1), mpred_univ('SententialOperator', A, 'SententialOperator'(A))])))).
spft(arity('SententialOperator', 1), tCol('SententialOperator'), pt(tCol('SententialOperator'), rhs([arity('SententialOperator', 1)]))).
spft(completeExtentAsserted('SententialOperator'), completelyAssertedCollection('SententialOperator'), pt(completelyAssertedCollection('SententialOperator'), rhs([completeExtentAsserted('SententialOperator')]))).
spft(tCol(tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 903), ax).
spft(tCol('SententialOperator'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 904), ax).
spft(tAvoidForwardChain('FunctionToArg'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(holds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(equals), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(different), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(evaluate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(trueSentence), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain('TINYKB-ASSERTION'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(tAvoidForwardChain(termOfUnit), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 907), ax).
spft(genls('SententialRelation', 'SententialOperator'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 908), ax).
spft(pt(genls('SententialOperator', 'SententialRelation'),  ('SententialRelation'\=='SententialOperator'->rhs([{mpred_withdraw(genls('SententialRelation', 'SententialOperator'))}]))), genls('SententialRelation', 'SententialOperator'), pt(genls('SententialRelation', 'SententialOperator'), pt(genls('SententialOperator', 'SententialRelation'),  ('SententialRelation'\=='SententialOperator'->rhs([{mpred_withdraw(genls('SententialRelation', 'SententialOperator'))}]))))).
spft(pt(arity('SententialRelation', 1), pt(arity('SententialOperator', 1),  (\+ (genls('SententialRelation', A), A\='SententialRelation', genls(A, 'SententialOperator'), A\='SententialOperator'), 'SententialOperator'\='SententialRelation'->rhs([{get_functor('SententialRelation', B), get_functor('SententialOperator', C), nop(dmsg(wishing_to_add(('SententialRelation'==>'SententialOperator'))))}, nearestGenls(B, C)])))), genls('SententialRelation', 'SententialOperator'), pt(genls('SententialRelation', 'SententialOperator'), pt(arity('SententialRelation', 1), pt(arity('SententialOperator', 1),  (\+ (genls('SententialRelation', A), A\='SententialRelation', genls(A, 'SententialOperator'), A\='SententialOperator'), 'SententialOperator'\='SententialRelation'->rhs([{get_functor('SententialRelation', B), get_functor('SententialOperator', C), nop(dmsg(wishing_to_add(('SententialRelation'==>'SententialOperator'))))}, nearestGenls(B, C)])))))).
spft(genls('SententialOperator', tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 909), ax).
spft(pt(genls(tAvoidForwardChain, 'SententialOperator'),  ('SententialOperator'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('SententialOperator', tAvoidForwardChain))}]))), genls('SententialOperator', tAvoidForwardChain), pt(genls('SententialOperator', tAvoidForwardChain), pt(genls(tAvoidForwardChain, 'SententialOperator'),  ('SententialOperator'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('SententialOperator', tAvoidForwardChain))}]))))).
spft(pt(arity('SententialOperator', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))), genls('SententialOperator', tAvoidForwardChain), pt(genls('SententialOperator', tAvoidForwardChain), pt(arity('SententialOperator', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)]))), arity('SententialOperator', 1), pt(arity('SententialOperator', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', D), D\='SententialOperator', genls(D, tAvoidForwardChain), D\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', E), get_functor(tAvoidForwardChain, F), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(E, F)]))))).
spft(nearestGenls('SententialOperator', tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(nearestGenls('SententialOperator', tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)]))), arity('SententialOperator', 1), pt(arity('SententialOperator', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', D), D\='SententialOperator', genls(D, tAvoidForwardChain), D\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', E), get_functor(tAvoidForwardChain, F), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(E, F)]))))).
spft(nearestGenls('SententialOperator', tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(nearestGenls('SententialOperator', tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('SententialOperator', A), A\='SententialOperator', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='SententialOperator'->rhs([{get_functor('SententialOperator', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('SententialOperator'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(genls('VariableArityRelation', tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 910), ax).
spft(pt(genls(tAvoidForwardChain, 'VariableArityRelation'),  ('VariableArityRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('VariableArityRelation', tAvoidForwardChain))}]))), genls('VariableArityRelation', tAvoidForwardChain), pt(genls('VariableArityRelation', tAvoidForwardChain), pt(genls(tAvoidForwardChain, 'VariableArityRelation'),  ('VariableArityRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('VariableArityRelation', tAvoidForwardChain))}]))))).
spft(pt(arity('VariableArityRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('VariableArityRelation', A), A\='VariableArityRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='VariableArityRelation'->rhs([{get_functor('VariableArityRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('VariableArityRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))), genls('VariableArityRelation', tAvoidForwardChain), pt(genls('VariableArityRelation', tAvoidForwardChain), pt(arity('VariableArityRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('VariableArityRelation', A), A\='VariableArityRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='VariableArityRelation'->rhs([{get_functor('VariableArityRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('VariableArityRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))))).
spft(genls('CommutativeRelation', tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 911), ax).
spft(pt(genls(tAvoidForwardChain, 'CommutativeRelation'),  ('CommutativeRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('CommutativeRelation', tAvoidForwardChain))}]))), genls('CommutativeRelation', tAvoidForwardChain), pt(genls('CommutativeRelation', tAvoidForwardChain), pt(genls(tAvoidForwardChain, 'CommutativeRelation'),  ('CommutativeRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('CommutativeRelation', tAvoidForwardChain))}]))))).
spft(pt(arity('CommutativeRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('CommutativeRelation', A), A\='CommutativeRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='CommutativeRelation'->rhs([{get_functor('CommutativeRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('CommutativeRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))), genls('CommutativeRelation', tAvoidForwardChain), pt(genls('CommutativeRelation', tAvoidForwardChain), pt(arity('CommutativeRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('CommutativeRelation', A), A\='CommutativeRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='CommutativeRelation'->rhs([{get_functor('CommutativeRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('CommutativeRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))))).
spft(genls(tFunction, tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 912), ax).
spft(pt(genls(tAvoidForwardChain, tFunction),  (tFunction\==tAvoidForwardChain->rhs([{mpred_withdraw(genls(tFunction, tAvoidForwardChain))}]))), genls(tFunction, tAvoidForwardChain), pt(genls(tFunction, tAvoidForwardChain), pt(genls(tAvoidForwardChain, tFunction),  (tFunction\==tAvoidForwardChain->rhs([{mpred_withdraw(genls(tFunction, tAvoidForwardChain))}]))))).
spft(pt(arity(tFunction, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))), genls(tFunction, tAvoidForwardChain), pt(genls(tFunction, tAvoidForwardChain), pt(arity(tFunction, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))))).
spft(pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)]))), arity(tFunction, 1), pt(arity(tFunction, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, D), D\=tFunction, genls(D, tAvoidForwardChain), D\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, E), get_functor(tAvoidForwardChain, F), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(tFunction, tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(nearestGenls(tFunction, tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)]))), arity(tFunction, 1), pt(arity(tFunction, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, D), D\=tFunction, genls(D, tAvoidForwardChain), D\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, E), get_functor(tAvoidForwardChain, F), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(E, F)]))))).
spft(nearestGenls(tFunction, tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(nearestGenls(tFunction, tAvoidForwardChain), arity(tAvoidForwardChain, 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls(tFunction, A), A\=tFunction, genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\=tFunction->rhs([{get_functor(tFunction, B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add((tFunction==>tAvoidForwardChain))))}, nearestGenls(B, C)])))).
spft(genls('EvaluatableRelation', tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 913), ax).
spft(pt(genls(tAvoidForwardChain, 'EvaluatableRelation'),  ('EvaluatableRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('EvaluatableRelation', tAvoidForwardChain))}]))), genls('EvaluatableRelation', tAvoidForwardChain), pt(genls('EvaluatableRelation', tAvoidForwardChain), pt(genls(tAvoidForwardChain, 'EvaluatableRelation'),  ('EvaluatableRelation'\==tAvoidForwardChain->rhs([{mpred_withdraw(genls('EvaluatableRelation', tAvoidForwardChain))}]))))).
spft(pt(arity('EvaluatableRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('EvaluatableRelation', A), A\='EvaluatableRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='EvaluatableRelation'->rhs([{get_functor('EvaluatableRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('EvaluatableRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))), genls('EvaluatableRelation', tAvoidForwardChain), pt(genls('EvaluatableRelation', tAvoidForwardChain), pt(arity('EvaluatableRelation', 1), pt(arity(tAvoidForwardChain, 1),  (\+ (genls('EvaluatableRelation', A), A\='EvaluatableRelation', genls(A, tAvoidForwardChain), A\=tAvoidForwardChain), tAvoidForwardChain\='EvaluatableRelation'->rhs([{get_functor('EvaluatableRelation', B), get_functor(tAvoidForwardChain, C), nop(dmsg(wishing_to_add(('EvaluatableRelation'==>tAvoidForwardChain))))}, nearestGenls(B, C)])))))).
spft(tCol(completeIsaAsserted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 916), ax).
spft(completeExtentAsserted(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 918), ax).
spft(completeExtentAsserted(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 919), ax).
spft(completelyAssertedCollection(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 920), ax).
spft(ttFormatType(ftString), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 921), ax).
spft(ttFormatType(ftVar), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 922), ax).
spft(ttFormatType(ftVoprop), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 923), ax).
spft(~completelyAssertedCollection(ftVoprop), ttFormatType(ftVoprop), pt(ttFormatType(ftVoprop), rhs([~completelyAssertedCollection(ftVoprop)]))).
spft(~functorDeclares(ftVoprop), ttFormatType(ftVoprop), pt(ttFormatType(ftVoprop), rhs([{get_functor(ftVoprop, ftVoprop), functor(ftVoprop(A), ftVoprop, 1),  (\+predicate_property(ftVoprop(A), B)->kb_dynamic(ftVoprop/1);true), ftVoprop(A)=..[ftVoprop, A], nop(B),  (predicate_property(ftVoprop(A), dynamic)->true;show_pred_info(ftVoprop(A)))}, ~functorDeclares(ftVoprop), arity(ftVoprop, 1),  (ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}),  (isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))})]))).
spft(arity(ftVoprop, 1), ttFormatType(ftVoprop), pt(ttFormatType(ftVoprop), rhs([{get_functor(ftVoprop, ftVoprop), functor(ftVoprop(A), ftVoprop, 1),  (\+predicate_property(ftVoprop(A), B)->kb_dynamic(ftVoprop/1);true), ftVoprop(A)=..[ftVoprop, A], nop(B),  (predicate_property(ftVoprop(A), dynamic)->true;show_pred_info(ftVoprop(A)))}, ~functorDeclares(ftVoprop), arity(ftVoprop, 1),  (ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}),  (isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))})]))).
spft((ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}), ttFormatType(ftVoprop), pt(ttFormatType(ftVoprop), rhs([{get_functor(ftVoprop, ftVoprop), functor(ftVoprop(A), ftVoprop, 1),  (\+predicate_property(ftVoprop(A), B)->kb_dynamic(ftVoprop/1);true), ftVoprop(A)=..[ftVoprop, A], nop(B),  (predicate_property(ftVoprop(A), dynamic)->true;show_pred_info(ftVoprop(A)))}, ~functorDeclares(ftVoprop), arity(ftVoprop, 1),  (ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}),  (isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))})]))).
spft(mpred_mark(pfcLHS, p, ftVoprop, 1), s(((ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 923))), ax).
spft(arity(ftVoprop, 1), mpred_mark(pfcLHS, p, ftVoprop, 1), pt(mpred_mark(pfcLHS, p, ftVoprop, 1),  (ground(pfcLHS:p)->rhs([arity(ftVoprop, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftVoprop, 1), s(((ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 923))), ax).
spft(arity(ftVoprop, 1), mpred_mark(pfcPosTrigger, p, ftVoprop, 1), pt(mpred_mark(pfcPosTrigger, p, ftVoprop, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftVoprop, 1)])))).
spft(marker_supported(ftVoprop, 1), mpred_mark(pfcPosTrigger, p, ftVoprop, 1), pt(mpred_mark(pfcPosTrigger, p, ftVoprop, 1),  (ground(p:ftVoprop:1)->rhs([marker_supported(ftVoprop, 1)])))).
spft(hybrid_support(ftVoprop, 1), marker_supported(ftVoprop, 1), pt(marker_supported(ftVoprop, 1), rhs([hybrid_support(ftVoprop, 1)]))).
spft(prologHybrid(ftVoprop), hybrid_support(ftVoprop, 1), pt(hybrid_support(ftVoprop, 1),  (ftVoprop\='$VAR', atom(ftVoprop), integer(1), \+prologDynamic(ftVoprop), \+static_predicate(ftVoprop/1)->rhs([{functor(ftVoprop(A), ftVoprop, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftVoprop, baseKB:ftVoprop(A)), \+predicate_property(baseKB:ftVoprop(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftVoprop(A), exported);true), kb_dynamic(baseKB:ftVoprop/1), show_failure(hybrid_support, \+static_predicate(ftVoprop/1))}, prologHybrid(ftVoprop), arity(ftVoprop, 1)])))).
spft(pt(arity(ftVoprop, A), rhs([hybrid_support(ftVoprop, A)])), prologHybrid(ftVoprop), pt(prologHybrid(ftVoprop), pt(arity(ftVoprop, A), rhs([hybrid_support(ftVoprop, A)])))).
spft(hybrid_support(ftVoprop, 1), arity(ftVoprop, 1), pt(arity(ftVoprop, A), rhs([hybrid_support(ftVoprop, A)]))).
spft(hybrid_support(ftVoprop, 1), arity(ftVoprop, 1), pt(arity(ftVoprop, A), rhs([hybrid_support(ftVoprop, A)]))).
spft(arity(ftVoprop, 1), hybrid_support(ftVoprop, 1), pt(hybrid_support(ftVoprop, 1),  (ftVoprop\='$VAR', atom(ftVoprop), integer(1), \+prologDynamic(ftVoprop), \+static_predicate(ftVoprop/1)->rhs([{functor(ftVoprop(A), ftVoprop, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftVoprop, baseKB:ftVoprop(A)), \+predicate_property(baseKB:ftVoprop(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftVoprop(A), exported);true), kb_dynamic(baseKB:ftVoprop/1), show_failure(hybrid_support, \+static_predicate(ftVoprop/1))}, prologHybrid(ftVoprop), arity(ftVoprop, 1)])))).
spft(prologHybrid(ftVoprop), hybrid_support(ftVoprop, 1), pt(hybrid_support(ftVoprop, 1), rhs([prologHybrid(ftVoprop), arity(ftVoprop, 1)]))).
spft(arity(ftVoprop, 1), hybrid_support(ftVoprop, 1), pt(hybrid_support(ftVoprop, 1), rhs([prologHybrid(ftVoprop), arity(ftVoprop, 1)]))).
spft(pt(ftVoprop(A),  (predicate_property(ftVoprop(A), dynamic)->rhs([{ignore(retract(ftVoprop(A)))}]))),  (ftVoprop(B)/predicate_property(ftVoprop(B), dynamic)==>{ignore(retract(ftVoprop(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 923)).
spft((isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))}), ttFormatType(ftVoprop), pt(ttFormatType(ftVoprop), rhs([{get_functor(ftVoprop, ftVoprop), functor(ftVoprop(A), ftVoprop, 1),  (\+predicate_property(ftVoprop(A), B)->kb_dynamic(ftVoprop/1);true), ftVoprop(A)=..[ftVoprop, A], nop(B),  (predicate_property(ftVoprop(A), dynamic)->true;show_pred_info(ftVoprop(A)))}, ~functorDeclares(ftVoprop), arity(ftVoprop, 1),  (ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}),  (isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))})]))).
spft(pt(isa(A, ftVoprop), rhs([{ignore(retract(isa(A, ftVoprop)))}])),  (isa(B, ftVoprop)==>{ignore(retract(isa(B, ftVoprop)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 923)).
spft(arity(argQuotedIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 936), ax).
spft(meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 936), ax).
spft(arity(argQuotedIsa, 3), meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)), pt(meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)),  (is_ftCompound(argQuotedIsa(tRelation, ftInt, ttFormatType))->rhs([{get_functor(argQuotedIsa(tRelation, ftInt, ttFormatType), argQuotedIsa, 3)}, arity(argQuotedIsa, 3)])))).
spft(pt(genls(argQuotedIsa(tRelation, ftInt, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argQuotedIsa(tRelation, ftInt, ttFormatType), A)])))), meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)), pt(meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)),  (dif:dif(argQuotedIsa(tRelation, ftInt, ttFormatType), A)->pt(genls(argQuotedIsa(tRelation, ftInt, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argQuotedIsa(tRelation, ftInt, ttFormatType), A)]))))))).
spft(prologHybrid(argQuotedIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 936), ax).
spft(tPred(argQuotedIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 936), ax).
spft(pt(arity(argQuotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, A)])))), tPred(argQuotedIsa), pt(tPred(argQuotedIsa), pt(arity(argQuotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, A)])))))).
spft(pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, 3)])), arity(argQuotedIsa, 3), pt(arity(argQuotedIsa, A),  (integer(A), A>1->pt(~prologBuiltin(argQuotedIsa), rhs([~tCol(argQuotedIsa), support_hilog(argQuotedIsa, A)]))))).
spft(arity(argIsa, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 937), ax).
spft(meta_argtypes(argIsa(tRelation, ftInt, tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 937), ax).
spft(arity(argIsa, 3), meta_argtypes(argIsa(tRelation, ftInt, tCol)), pt(meta_argtypes(argIsa(tRelation, ftInt, tCol)),  (is_ftCompound(argIsa(tRelation, ftInt, tCol))->rhs([{get_functor(argIsa(tRelation, ftInt, tCol), argIsa, 3)}, arity(argIsa, 3)])))).
spft(pt(genls(argIsa(tRelation, ftInt, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argIsa(tRelation, ftInt, tCol), A)])))), meta_argtypes(argIsa(tRelation, ftInt, tCol)), pt(meta_argtypes(argIsa(tRelation, ftInt, tCol)),  (dif:dif(argIsa(tRelation, ftInt, tCol), A)->pt(genls(argIsa(tRelation, ftInt, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(argIsa(tRelation, ftInt, tCol), A)]))))))).
spft(prologHybrid(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 937), ax).
spft(tPred(argIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 937), ax).
spft(arity(formatted_resultIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 938), ax).
spft(meta_argtypes(formatted_resultIsa(ttFormatType, tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 938), ax).
spft(arity(formatted_resultIsa, 2), meta_argtypes(formatted_resultIsa(ttFormatType, tCol)), pt(meta_argtypes(formatted_resultIsa(ttFormatType, tCol)),  (is_ftCompound(formatted_resultIsa(ttFormatType, tCol))->rhs([{get_functor(formatted_resultIsa(ttFormatType, tCol), formatted_resultIsa, 2)}, arity(formatted_resultIsa, 2)])))).
spft(pt(genls(formatted_resultIsa(ttFormatType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(formatted_resultIsa(ttFormatType, tCol), A)])))), meta_argtypes(formatted_resultIsa(ttFormatType, tCol)), pt(meta_argtypes(formatted_resultIsa(ttFormatType, tCol)),  (dif:dif(formatted_resultIsa(ttFormatType, tCol), A)->pt(genls(formatted_resultIsa(ttFormatType, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(formatted_resultIsa(ttFormatType, tCol), A)]))))))).
spft(prologHybrid(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 938), ax).
spft(tPred(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 938), ax).
spft(arity(quotedDefnIff, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 942), ax).
spft(meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 942), ax).
spft(arity(quotedDefnIff, 2), meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)), pt(meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)),  (is_ftCompound(quotedDefnIff(ttFormatType, ftTerm))->rhs([{get_functor(quotedDefnIff(ttFormatType, ftTerm), quotedDefnIff, 2)}, arity(quotedDefnIff, 2)])))).
spft(pt(genls(quotedDefnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedDefnIff(ttFormatType, ftTerm), A)])))), meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)), pt(meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)),  (dif:dif(quotedDefnIff(ttFormatType, ftTerm), A)->pt(genls(quotedDefnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(quotedDefnIff(ttFormatType, ftTerm), A)]))))))).
spft(prologHybrid(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 942), ax).
spft(pt(arity(quotedDefnIff, A), rhs([hybrid_support(quotedDefnIff, A)])), prologHybrid(quotedDefnIff), pt(prologHybrid(quotedDefnIff), pt(arity(quotedDefnIff, A), rhs([hybrid_support(quotedDefnIff, A)])))).
spft(hybrid_support(quotedDefnIff, 2), arity(quotedDefnIff, 2), pt(arity(quotedDefnIff, A), rhs([hybrid_support(quotedDefnIff, A)]))).
spft(prologHybrid(quotedDefnIff), hybrid_support(quotedDefnIff, 2), pt(hybrid_support(quotedDefnIff, 2),  (quotedDefnIff\='$VAR', atom(quotedDefnIff), integer(2), \+prologDynamic(quotedDefnIff), \+static_predicate(quotedDefnIff/2)->rhs([{functor(quotedDefnIff(A, B), quotedDefnIff, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(quotedDefnIff, baseKB:quotedDefnIff(A, B)), \+predicate_property(baseKB:quotedDefnIff(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:quotedDefnIff(A, B), exported);true), kb_dynamic(baseKB:quotedDefnIff/2), show_failure(hybrid_support, \+static_predicate(quotedDefnIff/2))}, prologHybrid(quotedDefnIff), arity(quotedDefnIff, 2)])))).
spft(arity(quotedDefnIff, 2), hybrid_support(quotedDefnIff, 2), pt(hybrid_support(quotedDefnIff, 2),  (quotedDefnIff\='$VAR', atom(quotedDefnIff), integer(2), \+prologDynamic(quotedDefnIff), \+static_predicate(quotedDefnIff/2)->rhs([{functor(quotedDefnIff(A, B), quotedDefnIff, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(quotedDefnIff, baseKB:quotedDefnIff(A, B)), \+predicate_property(baseKB:quotedDefnIff(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:quotedDefnIff(A, B), exported);true), kb_dynamic(baseKB:quotedDefnIff/2), show_failure(hybrid_support, \+static_predicate(quotedDefnIff/2))}, prologHybrid(quotedDefnIff), arity(quotedDefnIff, 2)])))).
spft(prologHybrid(quotedDefnIff), hybrid_support(quotedDefnIff, 2), pt(hybrid_support(quotedDefnIff, 2), rhs([prologHybrid(quotedDefnIff), arity(quotedDefnIff, 2)]))).
spft(arity(quotedDefnIff, 2), hybrid_support(quotedDefnIff, 2), pt(hybrid_support(quotedDefnIff, 2), rhs([prologHybrid(quotedDefnIff), arity(quotedDefnIff, 2)]))).
spft(tPred(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 942), ax).
spft(pt(arity(quotedDefnIff, A),  (integer(A), A>1->pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, A)])))), tPred(quotedDefnIff), pt(tPred(quotedDefnIff), pt(arity(quotedDefnIff, A),  (integer(A), A>1->pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, A)])))))).
spft(pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, 2)])), arity(quotedDefnIff, 2), pt(arity(quotedDefnIff, A),  (integer(A), A>1->pt(~prologBuiltin(quotedDefnIff), rhs([~tCol(quotedDefnIff), support_hilog(quotedDefnIff, A)]))))).
spft(arity(defnNecessary, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 943), ax).
spft(meta_argtypes(defnNecessary(ttFormatType, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 943), ax).
spft(arity(defnNecessary, 2), meta_argtypes(defnNecessary(ttFormatType, ftTerm)), pt(meta_argtypes(defnNecessary(ttFormatType, ftTerm)),  (is_ftCompound(defnNecessary(ttFormatType, ftTerm))->rhs([{get_functor(defnNecessary(ttFormatType, ftTerm), defnNecessary, 2)}, arity(defnNecessary, 2)])))).
spft(pt(genls(defnNecessary(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnNecessary(ttFormatType, ftTerm), A)])))), meta_argtypes(defnNecessary(ttFormatType, ftTerm)), pt(meta_argtypes(defnNecessary(ttFormatType, ftTerm)),  (dif:dif(defnNecessary(ttFormatType, ftTerm), A)->pt(genls(defnNecessary(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnNecessary(ttFormatType, ftTerm), A)]))))))).
spft(prologHybrid(defnNecessary), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 943), ax).
spft(pt(arity(defnNecessary, A), rhs([hybrid_support(defnNecessary, A)])), prologHybrid(defnNecessary), pt(prologHybrid(defnNecessary), pt(arity(defnNecessary, A), rhs([hybrid_support(defnNecessary, A)])))).
spft(hybrid_support(defnNecessary, 2), arity(defnNecessary, 2), pt(arity(defnNecessary, A), rhs([hybrid_support(defnNecessary, A)]))).
spft(prologHybrid(defnNecessary), hybrid_support(defnNecessary, 2), pt(hybrid_support(defnNecessary, 2),  (defnNecessary\='$VAR', atom(defnNecessary), integer(2), \+prologDynamic(defnNecessary), \+static_predicate(defnNecessary/2)->rhs([{functor(defnNecessary(A, B), defnNecessary, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(defnNecessary, baseKB:defnNecessary(A, B)), \+predicate_property(baseKB:defnNecessary(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:defnNecessary(A, B), exported);true), kb_dynamic(baseKB:defnNecessary/2), show_failure(hybrid_support, \+static_predicate(defnNecessary/2))}, prologHybrid(defnNecessary), arity(defnNecessary, 2)])))).
spft(arity(defnNecessary, 2), hybrid_support(defnNecessary, 2), pt(hybrid_support(defnNecessary, 2),  (defnNecessary\='$VAR', atom(defnNecessary), integer(2), \+prologDynamic(defnNecessary), \+static_predicate(defnNecessary/2)->rhs([{functor(defnNecessary(A, B), defnNecessary, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(defnNecessary, baseKB:defnNecessary(A, B)), \+predicate_property(baseKB:defnNecessary(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:defnNecessary(A, B), exported);true), kb_dynamic(baseKB:defnNecessary/2), show_failure(hybrid_support, \+static_predicate(defnNecessary/2))}, prologHybrid(defnNecessary), arity(defnNecessary, 2)])))).
spft(prologHybrid(defnNecessary), hybrid_support(defnNecessary, 2), pt(hybrid_support(defnNecessary, 2), rhs([prologHybrid(defnNecessary), arity(defnNecessary, 2)]))).
spft(arity(defnNecessary, 2), hybrid_support(defnNecessary, 2), pt(hybrid_support(defnNecessary, 2), rhs([prologHybrid(defnNecessary), arity(defnNecessary, 2)]))).
spft(tPred(defnNecessary), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 943), ax).
spft(pt(arity(defnNecessary, A),  (integer(A), A>1->pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, A)])))), tPred(defnNecessary), pt(tPred(defnNecessary), pt(arity(defnNecessary, A),  (integer(A), A>1->pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, A)])))))).
spft(pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, 2)])), arity(defnNecessary, 2), pt(arity(defnNecessary, A),  (integer(A), A>1->pt(~prologBuiltin(defnNecessary), rhs([~tCol(defnNecessary), support_hilog(defnNecessary, A)]))))).
spft(arity(defnIff, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 944), ax).
spft(meta_argtypes(defnIff(ttFormatType, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 944), ax).
spft(arity(defnIff, 2), meta_argtypes(defnIff(ttFormatType, ftTerm)), pt(meta_argtypes(defnIff(ttFormatType, ftTerm)),  (is_ftCompound(defnIff(ttFormatType, ftTerm))->rhs([{get_functor(defnIff(ttFormatType, ftTerm), defnIff, 2)}, arity(defnIff, 2)])))).
spft(pt(genls(defnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnIff(ttFormatType, ftTerm), A)])))), meta_argtypes(defnIff(ttFormatType, ftTerm)), pt(meta_argtypes(defnIff(ttFormatType, ftTerm)),  (dif:dif(defnIff(ttFormatType, ftTerm), A)->pt(genls(defnIff(ttFormatType, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(defnIff(ttFormatType, ftTerm), A)]))))))).
spft(prologHybrid(defnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 944), ax).
spft(pt(arity(defnIff, A), rhs([hybrid_support(defnIff, A)])), prologHybrid(defnIff), pt(prologHybrid(defnIff), pt(arity(defnIff, A), rhs([hybrid_support(defnIff, A)])))).
spft(hybrid_support(defnIff, 2), arity(defnIff, 2), pt(arity(defnIff, A), rhs([hybrid_support(defnIff, A)]))).
spft(prologHybrid(defnIff), hybrid_support(defnIff, 2), pt(hybrid_support(defnIff, 2),  (defnIff\='$VAR', atom(defnIff), integer(2), \+prologDynamic(defnIff), \+static_predicate(defnIff/2)->rhs([{functor(defnIff(A, B), defnIff, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(defnIff, baseKB:defnIff(A, B)), \+predicate_property(baseKB:defnIff(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:defnIff(A, B), exported);true), kb_dynamic(baseKB:defnIff/2), show_failure(hybrid_support, \+static_predicate(defnIff/2))}, prologHybrid(defnIff), arity(defnIff, 2)])))).
spft(arity(defnIff, 2), hybrid_support(defnIff, 2), pt(hybrid_support(defnIff, 2),  (defnIff\='$VAR', atom(defnIff), integer(2), \+prologDynamic(defnIff), \+static_predicate(defnIff/2)->rhs([{functor(defnIff(A, B), defnIff, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(defnIff, baseKB:defnIff(A, B)), \+predicate_property(baseKB:defnIff(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:defnIff(A, B), exported);true), kb_dynamic(baseKB:defnIff/2), show_failure(hybrid_support, \+static_predicate(defnIff/2))}, prologHybrid(defnIff), arity(defnIff, 2)])))).
spft(prologHybrid(defnIff), hybrid_support(defnIff, 2), pt(hybrid_support(defnIff, 2), rhs([prologHybrid(defnIff), arity(defnIff, 2)]))).
spft(arity(defnIff, 2), hybrid_support(defnIff, 2), pt(hybrid_support(defnIff, 2), rhs([prologHybrid(defnIff), arity(defnIff, 2)]))).
spft(tPred(defnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 944), ax).
spft(pt(arity(defnIff, A),  (integer(A), A>1->pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, A)])))), tPred(defnIff), pt(tPred(defnIff), pt(arity(defnIff, A),  (integer(A), A>1->pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, A)])))))).
spft(pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, 2)])), arity(defnIff, 2), pt(arity(defnIff, A),  (integer(A), A>1->pt(~prologBuiltin(defnIff), rhs([~tCol(defnIff), support_hilog(defnIff, A)]))))).
spft(arity(quotedDefnIff, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 945), ax).
spft(meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 945), ax).
spft(prologHybrid(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 945), ax).
spft(tPred(quotedDefnIff), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 945), ax).
spft(tFuncton(isLikeFn(tPred, tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 948), ax).
spft(tRelation((ftAskable==>ftAssertable)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 949), ax).
spft(arity(instTypeProps, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 950), ax).
spft(meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 950), ax).
spft(arity(instTypeProps, 3), meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))), pt(meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))),  (is_ftCompound(instTypeProps(ftID, tCol, ftRest(ftVoprop)))->rhs([{get_functor(instTypeProps(ftID, tCol, ftRest(ftVoprop)), instTypeProps, 3)}, arity(instTypeProps, 3)])))).
spft(pt(genls(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A)])))), meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))), pt(meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))),  (dif:dif(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A)->pt(genls(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(instTypeProps(ftID, tCol, ftRest(ftVoprop)), A)]))))))).
spft(prologHybrid(instTypeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 950), ax).
spft(tPred(instTypeProps), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 950), ax).
spft(arity(subFormat, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 951), ax).
spft(meta_argtypes(subFormat(ttFormatType, ttFormatType)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 951), ax).
spft(arity(subFormat, 2), meta_argtypes(subFormat(ttFormatType, ttFormatType)), pt(meta_argtypes(subFormat(ttFormatType, ttFormatType)),  (is_ftCompound(subFormat(ttFormatType, ttFormatType))->rhs([{get_functor(subFormat(ttFormatType, ttFormatType), subFormat, 2)}, arity(subFormat, 2)])))).
spft(pt(genls(subFormat(ttFormatType, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(subFormat(ttFormatType, ttFormatType), A)])))), meta_argtypes(subFormat(ttFormatType, ttFormatType)), pt(meta_argtypes(subFormat(ttFormatType, ttFormatType)),  (dif:dif(subFormat(ttFormatType, ttFormatType), A)->pt(genls(subFormat(ttFormatType, ttFormatType), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(subFormat(ttFormatType, ttFormatType), A)]))))))).
spft(prologHybrid(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 951), ax).
spft(tPred(subFormat), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 951), ax).
spft(arity(macroSomethingDescription, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 952), ax).
spft(meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 952), ax).
spft(arity(macroSomethingDescription, 2), meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))), pt(meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))),  (is_ftCompound(macroSomethingDescription(ftTerm, ftListFn(ftString)))->rhs([{get_functor(macroSomethingDescription(ftTerm, ftListFn(ftString)), macroSomethingDescription, 2)}, arity(macroSomethingDescription, 2)])))).
spft(pt(genls(macroSomethingDescription(ftTerm, ftListFn(ftString)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(macroSomethingDescription(ftTerm, ftListFn(ftString)), A)])))), meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))), pt(meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))),  (dif:dif(macroSomethingDescription(ftTerm, ftListFn(ftString)), A)->pt(genls(macroSomethingDescription(ftTerm, ftListFn(ftString)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(macroSomethingDescription(ftTerm, ftListFn(ftString)), A)]))))))).
spft(prologMacroHead(macroSomethingDescription), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 952), ax).
spft(tRelation(macroSomethingDescription), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 952), ax).
spft(arity(pddlObjects, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 953), ax).
spft(meta_argtypes(pddlObjects(tCol, ftListFn(ftID))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 953), ax).
spft(arity(pddlObjects, 2), meta_argtypes(pddlObjects(tCol, ftListFn(ftID))), pt(meta_argtypes(pddlObjects(tCol, ftListFn(ftID))),  (is_ftCompound(pddlObjects(tCol, ftListFn(ftID)))->rhs([{get_functor(pddlObjects(tCol, ftListFn(ftID)), pddlObjects, 2)}, arity(pddlObjects, 2)])))).
spft(pt(genls(pddlObjects(tCol, ftListFn(ftID)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlObjects(tCol, ftListFn(ftID)), A)])))), meta_argtypes(pddlObjects(tCol, ftListFn(ftID))), pt(meta_argtypes(pddlObjects(tCol, ftListFn(ftID))),  (dif:dif(pddlObjects(tCol, ftListFn(ftID)), A)->pt(genls(pddlObjects(tCol, ftListFn(ftID)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlObjects(tCol, ftListFn(ftID)), A)]))))))).
spft(prologMacroHead(pddlObjects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 953), ax).
spft(tRelation(pddlObjects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 953), ax).
spft(arity(pddlPredicates, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 954), ax).
spft(meta_argtypes(pddlPredicates(ftListFn(ftVoprop))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 954), ax).
spft(arity(pddlPredicates, 1), meta_argtypes(pddlPredicates(ftListFn(ftVoprop))), pt(meta_argtypes(pddlPredicates(ftListFn(ftVoprop))),  (is_ftCompound(pddlPredicates(ftListFn(ftVoprop)))->rhs([{get_functor(pddlPredicates(ftListFn(ftVoprop)), pddlPredicates, 1)}, arity(pddlPredicates, 1)])))).
spft(pt(genls(pddlPredicates(ftListFn(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlPredicates(ftListFn(ftVoprop)), A)])))), meta_argtypes(pddlPredicates(ftListFn(ftVoprop))), pt(meta_argtypes(pddlPredicates(ftListFn(ftVoprop))),  (dif:dif(pddlPredicates(ftListFn(ftVoprop)), A)->pt(genls(pddlPredicates(ftListFn(ftVoprop)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlPredicates(ftListFn(ftVoprop)), A)]))))))).
spft(prologMacroHead(pddlPredicates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 954), ax).
spft(tRelation(pddlPredicates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 954), ax).
spft(arity(pddlSorts, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 955), ax).
spft(meta_argtypes(pddlSorts(tCol, ftListFn(tCol))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 955), ax).
spft(arity(pddlSorts, 2), meta_argtypes(pddlSorts(tCol, ftListFn(tCol))), pt(meta_argtypes(pddlSorts(tCol, ftListFn(tCol))),  (is_ftCompound(pddlSorts(tCol, ftListFn(tCol)))->rhs([{get_functor(pddlSorts(tCol, ftListFn(tCol)), pddlSorts, 2)}, arity(pddlSorts, 2)])))).
spft(pt(genls(pddlSorts(tCol, ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlSorts(tCol, ftListFn(tCol)), A)])))), meta_argtypes(pddlSorts(tCol, ftListFn(tCol))), pt(meta_argtypes(pddlSorts(tCol, ftListFn(tCol))),  (dif:dif(pddlSorts(tCol, ftListFn(tCol)), A)->pt(genls(pddlSorts(tCol, ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlSorts(tCol, ftListFn(tCol)), A)]))))))).
spft(prologMacroHead(pddlSorts), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 955), ax).
spft(tRelation(pddlSorts), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 955), ax).
spft(arity(pddlTypes, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 956), ax).
spft(meta_argtypes(pddlTypes(ftListFn(tCol))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 956), ax).
spft(arity(pddlTypes, 1), meta_argtypes(pddlTypes(ftListFn(tCol))), pt(meta_argtypes(pddlTypes(ftListFn(tCol))),  (is_ftCompound(pddlTypes(ftListFn(tCol)))->rhs([{get_functor(pddlTypes(ftListFn(tCol)), pddlTypes, 1)}, arity(pddlTypes, 1)])))).
spft(pt(genls(pddlTypes(ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlTypes(ftListFn(tCol)), A)])))), meta_argtypes(pddlTypes(ftListFn(tCol))), pt(meta_argtypes(pddlTypes(ftListFn(tCol))),  (dif:dif(pddlTypes(ftListFn(tCol)), A)->pt(genls(pddlTypes(ftListFn(tCol)), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(pddlTypes(ftListFn(tCol)), A)]))))))).
spft(prologMacroHead(pddlTypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 956), ax).
spft(tRelation(pddlTypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 956), ax).
spft(arity(comment, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 957), ax).
spft(meta_argtypes(comment(ftTerm, ftString)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 957), ax).
spft(arity(comment, 2), meta_argtypes(comment(ftTerm, ftString)), pt(meta_argtypes(comment(ftTerm, ftString)),  (is_ftCompound(comment(ftTerm, ftString))->rhs([{get_functor(comment(ftTerm, ftString), comment, 2)}, arity(comment, 2)])))).
spft(pt(genls(comment(ftTerm, ftString), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(comment(ftTerm, ftString), A)])))), meta_argtypes(comment(ftTerm, ftString)), pt(meta_argtypes(comment(ftTerm, ftString)),  (dif:dif(comment(ftTerm, ftString), A)->pt(genls(comment(ftTerm, ftString), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(comment(ftTerm, ftString), A)]))))))).
spft(prologMultiValued(comment), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 957), ax).
spft(tPred(comment), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 957), ax).
spft(pt(arity(comment, A),  (integer(A), A>1->pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, A)])))), tPred(comment), pt(tPred(comment), pt(arity(comment, A),  (integer(A), A>1->pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, A)])))))).
spft(pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, 2)])), arity(comment, 2), pt(arity(comment, A),  (integer(A), A>1->pt(~prologBuiltin(comment), rhs([~tCol(comment), support_hilog(comment, A)]))))).
spft(arity(genlInverse, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 958), ax).
spft(meta_argtypes(genlInverse(tPred, tPred)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 958), ax).
spft(arity(genlInverse, 2), meta_argtypes(genlInverse(tPred, tPred)), pt(meta_argtypes(genlInverse(tPred, tPred)),  (is_ftCompound(genlInverse(tPred, tPred))->rhs([{get_functor(genlInverse(tPred, tPred), genlInverse, 2)}, arity(genlInverse, 2)])))).
spft(pt(genls(genlInverse(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlInverse(tPred, tPred), A)])))), meta_argtypes(genlInverse(tPred, tPred)), pt(meta_argtypes(genlInverse(tPred, tPred)),  (dif:dif(genlInverse(tPred, tPred), A)->pt(genls(genlInverse(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlInverse(tPred, tPred), A)]))))))).
spft(prologMultiValued(genlInverse), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 958), ax).
spft(tPred(genlInverse), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 958), ax).
spft(arity(genlPreds, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 959), ax).
spft(meta_argtypes(genlPreds(tPred, tPred)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 959), ax).
spft(arity(genlPreds, 2), meta_argtypes(genlPreds(tPred, tPred)), pt(meta_argtypes(genlPreds(tPred, tPred)),  (is_ftCompound(genlPreds(tPred, tPred))->rhs([{get_functor(genlPreds(tPred, tPred), genlPreds, 2)}, arity(genlPreds, 2)])))).
spft(pt(genls(genlPreds(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlPreds(tPred, tPred), A)])))), meta_argtypes(genlPreds(tPred, tPred)), pt(meta_argtypes(genlPreds(tPred, tPred)),  (dif:dif(genlPreds(tPred, tPred), A)->pt(genls(genlPreds(tPred, tPred), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(genlPreds(tPred, tPred), A)]))))))).
spft(prologMultiValued(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 959), ax).
spft(tPred(genlPreds), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 959), ax).
spft(arity(predProxyAssert, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 960), ax).
spft(meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 960), ax).
spft(arity(predProxyAssert, 2), meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)), pt(meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)),  (is_ftCompound(predProxyAssert(prologMultiValued, ftTerm))->rhs([{get_functor(predProxyAssert(prologMultiValued, ftTerm), predProxyAssert, 2)}, arity(predProxyAssert, 2)])))).
spft(pt(genls(predProxyAssert(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyAssert(prologMultiValued, ftTerm), A)])))), meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)), pt(meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)),  (dif:dif(predProxyAssert(prologMultiValued, ftTerm), A)->pt(genls(predProxyAssert(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyAssert(prologMultiValued, ftTerm), A)]))))))).
spft(prologMultiValued(predProxyAssert), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 960), ax).
spft(tPred(predProxyAssert), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 960), ax).
spft(arity(predProxyQuery, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 961), ax).
spft(meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 961), ax).
spft(arity(predProxyQuery, 2), meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)), pt(meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)),  (is_ftCompound(predProxyQuery(prologMultiValued, ftTerm))->rhs([{get_functor(predProxyQuery(prologMultiValued, ftTerm), predProxyQuery, 2)}, arity(predProxyQuery, 2)])))).
spft(pt(genls(predProxyQuery(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyQuery(prologMultiValued, ftTerm), A)])))), meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)), pt(meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)),  (dif:dif(predProxyQuery(prologMultiValued, ftTerm), A)->pt(genls(predProxyQuery(prologMultiValued, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predProxyQuery(prologMultiValued, ftTerm), A)]))))))).
spft(prologMultiValued(predProxyQuery), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 961), ax).
spft(tPred(predProxyQuery), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 961), ax).
spft(arity(<-, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 963), ax).
spft(meta_argtypes((ftAssertable<-ftAskable)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 963), ax).
spft(arity(<-, 2), meta_argtypes((ftAssertable<-ftAskable)), pt(meta_argtypes((ftAssertable<-ftAskable)),  (is_ftCompound((ftAssertable<-ftAskable))->rhs([{get_functor((ftAssertable<-ftAskable), <-, 2)}, arity(<-, 2)])))).
spft(pt(genls((ftAssertable<-ftAskable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAssertable<-ftAskable), A)])))), meta_argtypes((ftAssertable<-ftAskable)), pt(meta_argtypes((ftAssertable<-ftAskable)),  (dif:dif((ftAssertable<-ftAskable), A)->pt(genls((ftAssertable<-ftAskable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAssertable<-ftAskable), A)]))))))).
spft(prologMultiValued(<-), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 963), ax).
spft(tPred(<-), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 963), ax).
spft(pt(arity(<-, A),  (integer(A), A>1->pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, A)])))), tPred(<-), pt(tPred(<-), pt(arity(<-, A),  (integer(A), A>1->pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, A)])))))).
spft(pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, 2)])), arity(<-, 2), pt(arity(<-, A),  (integer(A), A>1->pt(~prologBuiltin(<-), rhs([~tCol(<-), support_hilog(<-, A)]))))).
spft(arity(==>, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 964), ax).
spft(meta_argtypes((ftAskable==>ftAssertable)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 964), ax).
spft(arity(==>, 2), meta_argtypes((ftAskable==>ftAssertable)), pt(meta_argtypes((ftAskable==>ftAssertable)),  (is_ftCompound((ftAskable==>ftAssertable))->rhs([{get_functor((ftAskable==>ftAssertable), ==>, 2)}, arity(==>, 2)])))).
spft(pt(genls((ftAskable==>ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAskable==>ftAssertable), A)])))), meta_argtypes((ftAskable==>ftAssertable)), pt(meta_argtypes((ftAskable==>ftAssertable)),  (dif:dif((ftAskable==>ftAssertable), A)->pt(genls((ftAskable==>ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa((ftAskable==>ftAssertable), A)]))))))).
spft(prologMultiValued(==>), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 964), ax).
spft(tPred(==>), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 964), ax).
spft(pt(arity(==>, A),  (integer(A), A>1->pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, A)])))), tPred(==>), pt(tPred(==>), pt(arity(==>, A),  (integer(A), A>1->pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, A)])))))).
spft(pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, 2)])), arity(==>, 2), pt(arity(==>, A),  (integer(A), A>1->pt(~prologBuiltin(==>), rhs([~tCol(==>), support_hilog(==>, A)]))))).
spft(arity(predArgMulti, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 965), ax).
spft(meta_argtypes(predArgMulti(prologMultiValued, ftInt)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 965), ax).
spft(arity(predArgMulti, 2), meta_argtypes(predArgMulti(prologMultiValued, ftInt)), pt(meta_argtypes(predArgMulti(prologMultiValued, ftInt)),  (is_ftCompound(predArgMulti(prologMultiValued, ftInt))->rhs([{get_functor(predArgMulti(prologMultiValued, ftInt), predArgMulti, 2)}, arity(predArgMulti, 2)])))).
spft(pt(genls(predArgMulti(prologMultiValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predArgMulti(prologMultiValued, ftInt), A)])))), meta_argtypes(predArgMulti(prologMultiValued, ftInt)), pt(meta_argtypes(predArgMulti(prologMultiValued, ftInt)),  (dif:dif(predArgMulti(prologMultiValued, ftInt), A)->pt(genls(predArgMulti(prologMultiValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predArgMulti(prologMultiValued, ftInt), A)]))))))).
spft(prologNegByFailure(predArgMulti), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 965), ax).
spft(tPred(predArgMulti), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 965), ax).
spft(pt(arity(predArgMulti, A),  (integer(A), A>1->pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, A)])))), tPred(predArgMulti), pt(tPred(predArgMulti), pt(arity(predArgMulti, A),  (integer(A), A>1->pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, A)])))))).
spft(pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, 2)])), arity(predArgMulti, 2), pt(arity(predArgMulti, A),  (integer(A), A>1->pt(~prologBuiltin(predArgMulti), rhs([~tCol(predArgMulti), support_hilog(predArgMulti, A)]))))).
spft(arity(tDeleted, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 966), ax).
spft(meta_argtypes(tDeleted(ftID)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 966), ax).
spft(arity(tDeleted, 1), meta_argtypes(tDeleted(ftID)), pt(meta_argtypes(tDeleted(ftID)),  (is_ftCompound(tDeleted(ftID))->rhs([{get_functor(tDeleted(ftID), tDeleted, 1)}, arity(tDeleted, 1)])))).
spft(pt(genls(tDeleted(ftID), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(tDeleted(ftID), A)])))), meta_argtypes(tDeleted(ftID)), pt(meta_argtypes(tDeleted(ftID)),  (dif:dif(tDeleted(ftID), A)->pt(genls(tDeleted(ftID), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(tDeleted(ftID), A)]))))))).
spft(prologNegByFailure(tDeleted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 966), ax).
spft(tPred(tDeleted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 966), ax).
spft(pt(arity(tDeleted, A),  (integer(A), A>1->pt(~prologBuiltin(tDeleted), rhs([~tCol(tDeleted), support_hilog(tDeleted, A)])))), tPred(tDeleted), pt(tPred(tDeleted), pt(arity(tDeleted, A),  (integer(A), A>1->pt(~prologBuiltin(tDeleted), rhs([~tCol(tDeleted), support_hilog(tDeleted, A)])))))).
spft(arity(predInstMax, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 974), ax).
spft(meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 974), ax).
spft(arity(predInstMax, 3), meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)), pt(meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)),  (is_ftCompound(predInstMax(ftID, prologSingleValued, ftInt))->rhs([{get_functor(predInstMax(ftID, prologSingleValued, ftInt), predInstMax, 3)}, arity(predInstMax, 3)])))).
spft(pt(genls(predInstMax(ftID, prologSingleValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predInstMax(ftID, prologSingleValued, ftInt), A)])))), meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)), pt(meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)),  (dif:dif(predInstMax(ftID, prologSingleValued, ftInt), A)->pt(genls(predInstMax(ftID, prologSingleValued, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predInstMax(ftID, prologSingleValued, ftInt), A)]))))))).
spft(prologSingleValued(predInstMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 974), ax).
spft(tPred(predInstMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 974), ax).
spft(pt(arity(predInstMax, A),  (integer(A), A>1->pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, A)])))), tPred(predInstMax), pt(tPred(predInstMax), pt(arity(predInstMax, A),  (integer(A), A>1->pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, A)])))))).
spft(pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, 3)])), arity(predInstMax, 3), pt(arity(predInstMax, A),  (integer(A), A>1->pt(~prologBuiltin(predInstMax), rhs([~tCol(predInstMax), support_hilog(predInstMax, A)]))))).
spft(prologHybrid(predInstMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 974), ax).
spft(pt(arity(predInstMax, A), rhs([hybrid_support(predInstMax, A)])), prologHybrid(predInstMax), pt(prologHybrid(predInstMax), pt(arity(predInstMax, A), rhs([hybrid_support(predInstMax, A)])))).
spft(hybrid_support(predInstMax, 3), arity(predInstMax, 3), pt(arity(predInstMax, A), rhs([hybrid_support(predInstMax, A)]))).
spft(prologHybrid(predInstMax), hybrid_support(predInstMax, 3), pt(hybrid_support(predInstMax, 3),  (predInstMax\='$VAR', atom(predInstMax), integer(3), \+prologDynamic(predInstMax), \+static_predicate(predInstMax/3)->rhs([{functor(predInstMax(A, B, C), predInstMax, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predInstMax, baseKB:predInstMax(A, B, C)), \+predicate_property(baseKB:predInstMax(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predInstMax(A, B, C), exported);true), kb_dynamic(baseKB:predInstMax/3), show_failure(hybrid_support, \+static_predicate(predInstMax/3))}, prologHybrid(predInstMax), arity(predInstMax, 3)])))).
spft(arity(predInstMax, 3), hybrid_support(predInstMax, 3), pt(hybrid_support(predInstMax, 3),  (predInstMax\='$VAR', atom(predInstMax), integer(3), \+prologDynamic(predInstMax), \+static_predicate(predInstMax/3)->rhs([{functor(predInstMax(A, B, C), predInstMax, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(predInstMax, baseKB:predInstMax(A, B, C)), \+predicate_property(baseKB:predInstMax(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:predInstMax(A, B, C), exported);true), kb_dynamic(baseKB:predInstMax/3), show_failure(hybrid_support, \+static_predicate(predInstMax/3))}, prologHybrid(predInstMax), arity(predInstMax, 3)])))).
spft(prologHybrid(predInstMax), hybrid_support(predInstMax, 3), pt(hybrid_support(predInstMax, 3), rhs([prologHybrid(predInstMax), arity(predInstMax, 3)]))).
spft(arity(predInstMax, 3), hybrid_support(predInstMax, 3), pt(hybrid_support(predInstMax, 3), rhs([prologHybrid(predInstMax), arity(predInstMax, 3)]))).
spft(arity(predTypeMax, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 975), ax).
spft(meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 975), ax).
spft(arity(predTypeMax, 3), meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)), pt(meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)),  (is_ftCompound(predTypeMax(prologSingleValued, tCol, ftInt))->rhs([{get_functor(predTypeMax(prologSingleValued, tCol, ftInt), predTypeMax, 3)}, arity(predTypeMax, 3)])))).
spft(pt(genls(predTypeMax(prologSingleValued, tCol, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predTypeMax(prologSingleValued, tCol, ftInt), A)])))), meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)), pt(meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)),  (dif:dif(predTypeMax(prologSingleValued, tCol, ftInt), A)->pt(genls(predTypeMax(prologSingleValued, tCol, ftInt), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(predTypeMax(prologSingleValued, tCol, ftInt), A)]))))))).
spft(prologSingleValued(predTypeMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 975), ax).
spft(tPred(predTypeMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 975), ax).
spft(prologHybrid(predTypeMax), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 975), ax).
spft(resultIsa(txtFormatFn, ftText), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 976), ax).
spft(tFunction(txtFormatFn), resultIsa(txtFormatFn, ftText), pt(resultIsa(txtFormatFn, ftText), rhs([tFunction(txtFormatFn), ftSpec(ftText)]))).
spft(ftSpec(ftText), resultIsa(txtFormatFn, ftText), pt(resultIsa(txtFormatFn, ftText), rhs([tFunction(txtFormatFn), ftSpec(ftText)]))).
spft(subFormat(ftAtom, ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 979), ax).
spft(subFormat(ftCallable, ftProlog), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 980), ax).
spft(resultIsa(ftDice, ftInt), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 981), ax).
spft(tFunction(ftDice), resultIsa(ftDice, ftInt), pt(resultIsa(ftDice, ftInt), rhs([tFunction(ftDice), ftSpec(ftInt)]))).
spft(ftSpec(ftInt), resultIsa(ftDice, ftInt), pt(resultIsa(ftDice, ftInt), rhs([tFunction(ftDice), ftSpec(ftInt)]))).
spft(subFormat(ftID, ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 982), ax).
spft(subFormat(ftInt, ftNumber), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 983), ax).
spft(subFormat(ftInteger, ftNumber), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 984), ax).
spft(subFormat(ftNumber, ftPercent), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 985), ax).
spft(subFormat(ftPercent, ftNumber), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 986), ax).
spft(subFormat(ftString, ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 987), ax).
spft(subFormat(ftString, ftText), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 988), ax).
spft(subFormat(ftTerm, ftProlog), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 989), ax).
spft(subFormat(ftText, ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 990), ax).
spft(subFormat(ftVar, ftProlog), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 991), ax).
spft(subFormat(ftVoprop, ftRest(ftVoprop)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 992), ax).
spft(subFormat(ftVoprop, ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 993), ax).
spft((tCol(A)==>{guess_supertypes(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(mpred_mark(pfcCallCode, p, guess_supertypes, 1), s(((tCol(A)==>{guess_supertypes(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996))), ax).
spft(arity(guess_supertypes, 1), mpred_mark(pfcCallCode, p, guess_supertypes, 1), pt(mpred_mark(pfcCallCode, p, guess_supertypes, 1),  (ground(pfcCallCode:p)->rhs([arity(guess_supertypes, 1)])))).
spft(pt(tCol(A), rhs([{guess_supertypes(A)}])),  (tCol(B)==>{guess_supertypes(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996)).
spft(tried_guess_types_from_name(ttValueType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tNotForUnboundPredicates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(completelyAssertedCollection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologNegByFailure), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tSpec), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tSet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tRelation), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tFunction), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologMacroHead), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttPredType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(functorDeclares), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologMultiValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologOrdered), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttNonGenled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(meta_argtypes), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologHybrid), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologPTTP), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologKIF), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologBuiltin), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologListValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologSingleValued), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcControlled), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(predCanHaveSingletons), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tTemporalThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologSideEffects), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tInferInstanceFromArgType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttNotTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttSpatialType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttTemporalType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttTypeType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ttUnverifiableType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcDatabaseTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcWatched), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcCreates), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcNegTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcPosTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcBcTrigger), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcRHS), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(pfcMustFC), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(notAssertable), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(prologEquality), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(ftInt), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(vtDirection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(completeIsaAsserted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tSpatialThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(completeExtentAsserted), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(vtValue), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(vtColor), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name(tAvoidForwardChain), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tried_guess_types_from_name('SententialOperator'), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 996), ax).
spft(tCol(tNewlyCreated), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 999), ax).
spft(arity(tNewlyCreated, 1), tCol(tNewlyCreated), pt(tCol(tNewlyCreated),  (atom(tNewlyCreated), tNewlyCreated(A)=..[tNewlyCreated, A]->rhs([{decl_type(tNewlyCreated)}, arity(tNewlyCreated, 1), mpred_univ(tNewlyCreated, A, tNewlyCreated(A))])))).
spft(mpred_univ(tNewlyCreated, A, tNewlyCreated(A)), tCol(tNewlyCreated), pt(tCol(tNewlyCreated),  (atom(tNewlyCreated), tNewlyCreated(A)=..[tNewlyCreated, A]->rhs([{decl_type(tNewlyCreated)}, arity(tNewlyCreated, 1), mpred_univ(tNewlyCreated, A, tNewlyCreated(A))])))).
spft((tNewlyCreated(A):-cwc, lazy(\+ ~tNewlyCreated(A)), isa_backchaing(A, tNewlyCreated)), tCol(tNewlyCreated), pt(tCol(tNewlyCreated),  (atom(tNewlyCreated), tNewlyCreated(A)=..[tNewlyCreated, A], \+static_predicate(tNewlyCreated/1), \+completelyAssertedCollection(tNewlyCreated)->rhs([(tNewlyCreated(A):-cwc, lazy(\+ ~tNewlyCreated(A)), isa_backchaing(A, tNewlyCreated))])))).
spft(isa(tNewlyCreated, tCol), tCol(tNewlyCreated), pt(tCol(tNewlyCreated),  (isa_from_morphology(tNewlyCreated, tCol)->rhs([isa(tNewlyCreated, tCol)])))).
spft(arity(tNewlyCreated, 1), tCol(tNewlyCreated), pt(tCol(tNewlyCreated), rhs([arity(tNewlyCreated, 1)]))).
spft(tried_guess_types_from_name(tNewlyCreated), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 999), ax).
spft(tCol(ttTypeFacet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1000), ax).
spft(arity(ttTypeFacet, 1), tCol(ttTypeFacet), pt(tCol(ttTypeFacet),  (atom(ttTypeFacet), ttTypeFacet(A)=..[ttTypeFacet, A]->rhs([{decl_type(ttTypeFacet)}, arity(ttTypeFacet, 1), mpred_univ(ttTypeFacet, A, ttTypeFacet(A))])))).
spft(mpred_univ(ttTypeFacet, A, ttTypeFacet(A)), tCol(ttTypeFacet), pt(tCol(ttTypeFacet),  (atom(ttTypeFacet), ttTypeFacet(A)=..[ttTypeFacet, A]->rhs([{decl_type(ttTypeFacet)}, arity(ttTypeFacet, 1), mpred_univ(ttTypeFacet, A, ttTypeFacet(A))])))).
spft((ttTypeFacet(A):-cwc, lazy(\+ ~ttTypeFacet(A)), isa_backchaing(A, ttTypeFacet)), tCol(ttTypeFacet), pt(tCol(ttTypeFacet),  (atom(ttTypeFacet), ttTypeFacet(A)=..[ttTypeFacet, A], \+static_predicate(ttTypeFacet/1), \+completelyAssertedCollection(ttTypeFacet)->rhs([(ttTypeFacet(A):-cwc, lazy(\+ ~ttTypeFacet(A)), isa_backchaing(A, ttTypeFacet))])))).
spft(isa(ttTypeFacet, ttTypeType), tCol(ttTypeFacet), pt(tCol(ttTypeFacet),  (isa_from_morphology(ttTypeFacet, ttTypeType)->rhs([isa(ttTypeFacet, ttTypeType)])))).
spft(arity(ttTypeFacet, 1), tCol(ttTypeFacet), pt(tCol(ttTypeFacet), rhs([arity(ttTypeFacet, 1)]))).
spft(tried_guess_types_from_name(ttTypeFacet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1000), ax).
spft((tNewlyCreated(A)==>{guess_types(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1002), ax).
spft(mpred_mark(pfcLHS, p, tNewlyCreated, 1), s(((tNewlyCreated(A)==>{guess_types(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1002))), ax).
spft(arity(tNewlyCreated, 1), mpred_mark(pfcLHS, p, tNewlyCreated, 1), pt(mpred_mark(pfcLHS, p, tNewlyCreated, 1),  (ground(pfcLHS:p)->rhs([arity(tNewlyCreated, 1)])))).
spft(mpred_mark(pfcCallCode, p, guess_types, 1), s(((tNewlyCreated(A)==>{guess_types(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1002))), ax).
spft(arity(guess_types, 1), mpred_mark(pfcCallCode, p, guess_types, 1), pt(mpred_mark(pfcCallCode, p, guess_types, 1),  (ground(pfcCallCode:p)->rhs([arity(guess_types, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1), s(((tNewlyCreated(A)==>{guess_types(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1002))), ax).
spft(arity(tNewlyCreated, 1), mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1), pt(mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1),  (ground(pfcPosTrigger:p)->rhs([arity(tNewlyCreated, 1)])))).
spft(marker_supported(tNewlyCreated, 1), mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1), pt(mpred_mark(pfcPosTrigger, p, tNewlyCreated, 1),  (ground(p:tNewlyCreated:1)->rhs([marker_supported(tNewlyCreated, 1)])))).
spft(hybrid_support(tNewlyCreated, 1), marker_supported(tNewlyCreated, 1), pt(marker_supported(tNewlyCreated, 1), rhs([hybrid_support(tNewlyCreated, 1)]))).
spft(prologHybrid(tNewlyCreated), hybrid_support(tNewlyCreated, 1), pt(hybrid_support(tNewlyCreated, 1),  (tNewlyCreated\='$VAR', atom(tNewlyCreated), integer(1), \+prologDynamic(tNewlyCreated), \+static_predicate(tNewlyCreated/1)->rhs([{functor(tNewlyCreated(A), tNewlyCreated, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tNewlyCreated, baseKB:tNewlyCreated(A)), \+predicate_property(baseKB:tNewlyCreated(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tNewlyCreated(A), exported);true), kb_dynamic(baseKB:tNewlyCreated/1), show_failure(hybrid_support, \+static_predicate(tNewlyCreated/1))}, prologHybrid(tNewlyCreated), arity(tNewlyCreated, 1)])))).
spft(pt(arity(tNewlyCreated, A), rhs([hybrid_support(tNewlyCreated, A)])), prologHybrid(tNewlyCreated), pt(prologHybrid(tNewlyCreated), pt(arity(tNewlyCreated, A), rhs([hybrid_support(tNewlyCreated, A)])))).
spft(hybrid_support(tNewlyCreated, 1), arity(tNewlyCreated, 1), pt(arity(tNewlyCreated, A), rhs([hybrid_support(tNewlyCreated, A)]))).
spft(hybrid_support(tNewlyCreated, 1), arity(tNewlyCreated, 1), pt(arity(tNewlyCreated, A), rhs([hybrid_support(tNewlyCreated, A)]))).
spft(arity(tNewlyCreated, 1), hybrid_support(tNewlyCreated, 1), pt(hybrid_support(tNewlyCreated, 1),  (tNewlyCreated\='$VAR', atom(tNewlyCreated), integer(1), \+prologDynamic(tNewlyCreated), \+static_predicate(tNewlyCreated/1)->rhs([{functor(tNewlyCreated(A), tNewlyCreated, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(tNewlyCreated, baseKB:tNewlyCreated(A)), \+predicate_property(baseKB:tNewlyCreated(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:tNewlyCreated(A), exported);true), kb_dynamic(baseKB:tNewlyCreated/1), show_failure(hybrid_support, \+static_predicate(tNewlyCreated/1))}, prologHybrid(tNewlyCreated), arity(tNewlyCreated, 1)])))).
spft(prologHybrid(tNewlyCreated), hybrid_support(tNewlyCreated, 1), pt(hybrid_support(tNewlyCreated, 1), rhs([prologHybrid(tNewlyCreated), arity(tNewlyCreated, 1)]))).
spft(arity(tNewlyCreated, 1), hybrid_support(tNewlyCreated, 1), pt(hybrid_support(tNewlyCreated, 1), rhs([prologHybrid(tNewlyCreated), arity(tNewlyCreated, 1)]))).
spft(pt(tNewlyCreated(A), rhs([{guess_types(A)}])),  (tNewlyCreated(B)==>{guess_types(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1002)).
spft(ttTypeFacet(tNewlyCreated), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1004), ax).
spft(ttTypeFacet(ttTypeFacet), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1005), ax).
spft(ttTypeFacet(ttUnverifiableType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1006), ax).
spft(typeGenls(ttFormatTypeType, ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1010), ax).
spft(typeGenls(ttTemporalType, tTemporalThing), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1011), ax).
spft(typeGenls(ttTypeFacet, tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1012), ax).
spft(typeGenls(ttTypeType, tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1013), ax).
spft(ttTypeFacet(ttUnverifiableType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1017), ax).
spft(ttUnverifiableType(ftDice), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1018), ax).
spft(ttUnverifiableType(ftID), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1019), ax).
spft(ttUnverifiableType(ftListFn(ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1020), ax).
spft(ttUnverifiableType(ftString), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1021), ax).
spft(ttUnverifiableType(ftTerm), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1022), ax).
spft(ttUnverifiableType(ftText), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1023), ax).
spft(ttUnverifiableType(ftVoprop), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1024), ax).
spft(ttUnverifiableType(tCol), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1025), ax).
spft(ttUnverifiableType(tFunction), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1026), ax).
spft(ttUnverifiableType(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1027), ax).
spft(ttUnverifiableType(ttFormatType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1028), ax).
spft(ttUnverifiableType(vtDirection), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1029), ax).
spft((disjointWith(B, A)==>disjointWith(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1043), ax).
spft(disjointWith(ttTemporalType, ttAbstractType), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1046), ax).
spft(arity(dividesBetween, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1048), ax).
spft(meta_argtypes(dividesBetween(tCol, tCol, tCol)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1048), ax).
spft(arity(dividesBetween, 3), meta_argtypes(dividesBetween(tCol, tCol, tCol)), pt(meta_argtypes(dividesBetween(tCol, tCol, tCol)),  (is_ftCompound(dividesBetween(tCol, tCol, tCol))->rhs([{get_functor(dividesBetween(tCol, tCol, tCol), dividesBetween, 3)}, arity(dividesBetween, 3)])))).
spft(pt(genls(dividesBetween(tCol, tCol, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(dividesBetween(tCol, tCol, tCol), A)])))), meta_argtypes(dividesBetween(tCol, tCol, tCol)), pt(meta_argtypes(dividesBetween(tCol, tCol, tCol)),  (dif:dif(dividesBetween(tCol, tCol, tCol), A)->pt(genls(dividesBetween(tCol, tCol, tCol), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(dividesBetween(tCol, tCol, tCol), A)]))))))).
spft(prologHybrid(dividesBetween), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1048), ax).
spft(pt(arity(dividesBetween, A), rhs([hybrid_support(dividesBetween, A)])), prologHybrid(dividesBetween), pt(prologHybrid(dividesBetween), pt(arity(dividesBetween, A), rhs([hybrid_support(dividesBetween, A)])))).
spft(hybrid_support(dividesBetween, 3), arity(dividesBetween, 3), pt(arity(dividesBetween, A), rhs([hybrid_support(dividesBetween, A)]))).
spft(prologHybrid(dividesBetween), hybrid_support(dividesBetween, 3), pt(hybrid_support(dividesBetween, 3),  (dividesBetween\='$VAR', atom(dividesBetween), integer(3), \+prologDynamic(dividesBetween), \+static_predicate(dividesBetween/3)->rhs([{functor(dividesBetween(A, B, C), dividesBetween, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(dividesBetween, baseKB:dividesBetween(A, B, C)), \+predicate_property(baseKB:dividesBetween(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:dividesBetween(A, B, C), exported);true), kb_dynamic(baseKB:dividesBetween/3), show_failure(hybrid_support, \+static_predicate(dividesBetween/3))}, prologHybrid(dividesBetween), arity(dividesBetween, 3)])))).
spft(arity(dividesBetween, 3), hybrid_support(dividesBetween, 3), pt(hybrid_support(dividesBetween, 3),  (dividesBetween\='$VAR', atom(dividesBetween), integer(3), \+prologDynamic(dividesBetween), \+static_predicate(dividesBetween/3)->rhs([{functor(dividesBetween(A, B, C), dividesBetween, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(dividesBetween, baseKB:dividesBetween(A, B, C)), \+predicate_property(baseKB:dividesBetween(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:dividesBetween(A, B, C), exported);true), kb_dynamic(baseKB:dividesBetween/3), show_failure(hybrid_support, \+static_predicate(dividesBetween/3))}, prologHybrid(dividesBetween), arity(dividesBetween, 3)])))).
spft(prologHybrid(dividesBetween), hybrid_support(dividesBetween, 3), pt(hybrid_support(dividesBetween, 3), rhs([prologHybrid(dividesBetween), arity(dividesBetween, 3)]))).
spft(arity(dividesBetween, 3), hybrid_support(dividesBetween, 3), pt(hybrid_support(dividesBetween, 3), rhs([prologHybrid(dividesBetween), arity(dividesBetween, 3)]))).
spft(tPred(dividesBetween), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1048), ax).
spft(pt(arity(dividesBetween, A),  (integer(A), A>1->pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, A)])))), tPred(dividesBetween), pt(tPred(dividesBetween), pt(arity(dividesBetween, A),  (integer(A), A>1->pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, A)])))))).
spft(pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, 3)])), arity(dividesBetween, 3), pt(arity(dividesBetween, A),  (integer(A), A>1->pt(~prologBuiltin(dividesBetween), rhs([~tCol(dividesBetween), support_hilog(dividesBetween, A)]))))).
spft((quotedDefnIff(A, _)==>ttFormatType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1050), ax).
spft(mpred_mark(pfcLHS, p, quotedDefnIff, 2), s(((quotedDefnIff(A, _)==>ttFormatType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1050))), ax).
spft(arity(quotedDefnIff, 2), mpred_mark(pfcLHS, p, quotedDefnIff, 2), pt(mpred_mark(pfcLHS, p, quotedDefnIff, 2),  (ground(pfcLHS:p)->rhs([arity(quotedDefnIff, 2)])))).
spft(mpred_mark(pfcCreates, p, ttFormatType, 1), s(((quotedDefnIff(A, _)==>ttFormatType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1050))), ax).
spft(arity(ttFormatType, 1), mpred_mark(pfcCreates, p, ttFormatType, 1), pt(mpred_mark(pfcCreates, p, ttFormatType, 1),  (ground(pfcCreates:p)->rhs([arity(ttFormatType, 1)])))).
spft(marker_supported(ttFormatType, 1), mpred_mark(pfcCreates, p, ttFormatType, 1), pt(mpred_mark(pfcCreates, p, ttFormatType, 1),  (ground(p:ttFormatType:1)->rhs([marker_supported(ttFormatType, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2), s(((quotedDefnIff(A, _)==>ttFormatType(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1050))), ax).
spft(arity(quotedDefnIff, 2), mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2), pt(mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2),  (ground(pfcPosTrigger:p)->rhs([arity(quotedDefnIff, 2)])))).
spft(marker_supported(quotedDefnIff, 2), mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2), pt(mpred_mark(pfcPosTrigger, p, quotedDefnIff, 2),  (ground(p:quotedDefnIff:2)->rhs([marker_supported(quotedDefnIff, 2)])))).
spft(hybrid_support(quotedDefnIff, 2), marker_supported(quotedDefnIff, 2), pt(marker_supported(quotedDefnIff, 2), rhs([hybrid_support(quotedDefnIff, 2)]))).
spft(pt(quotedDefnIff(A, _), rhs([ttFormatType(A)])),  (quotedDefnIff(B, _)==>ttFormatType(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1050)).
spft(quotedDefnIff(ftInt, integer), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1052), ax).
spft(ttFormatType(ftInt), quotedDefnIff(ftInt, integer), pt(quotedDefnIff(ftInt, integer), rhs([ttFormatType(ftInt)]))).
spft(quotedDefnIff(ftFloat, float), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1053), ax).
spft(ttFormatType(ftFloat), quotedDefnIff(ftFloat, float), pt(quotedDefnIff(ftFloat, float), rhs([ttFormatType(ftFloat)]))).
spft(~completelyAssertedCollection(ftFloat), ttFormatType(ftFloat), pt(ttFormatType(ftFloat), rhs([~completelyAssertedCollection(ftFloat)]))).
spft(~functorDeclares(ftFloat), ttFormatType(ftFloat), pt(ttFormatType(ftFloat), rhs([{get_functor(ftFloat, ftFloat), functor(ftFloat(A), ftFloat, 1),  (\+predicate_property(ftFloat(A), B)->kb_dynamic(ftFloat/1);true), ftFloat(A)=..[ftFloat, A], nop(B),  (predicate_property(ftFloat(A), dynamic)->true;show_pred_info(ftFloat(A)))}, ~functorDeclares(ftFloat), arity(ftFloat, 1),  (ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}),  (isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))})]))).
spft(arity(ftFloat, 1), ttFormatType(ftFloat), pt(ttFormatType(ftFloat), rhs([{get_functor(ftFloat, ftFloat), functor(ftFloat(A), ftFloat, 1),  (\+predicate_property(ftFloat(A), B)->kb_dynamic(ftFloat/1);true), ftFloat(A)=..[ftFloat, A], nop(B),  (predicate_property(ftFloat(A), dynamic)->true;show_pred_info(ftFloat(A)))}, ~functorDeclares(ftFloat), arity(ftFloat, 1),  (ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}),  (isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))})]))).
spft((ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}), ttFormatType(ftFloat), pt(ttFormatType(ftFloat), rhs([{get_functor(ftFloat, ftFloat), functor(ftFloat(A), ftFloat, 1),  (\+predicate_property(ftFloat(A), B)->kb_dynamic(ftFloat/1);true), ftFloat(A)=..[ftFloat, A], nop(B),  (predicate_property(ftFloat(A), dynamic)->true;show_pred_info(ftFloat(A)))}, ~functorDeclares(ftFloat), arity(ftFloat, 1),  (ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}),  (isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))})]))).
spft(mpred_mark(pfcLHS, p, ftFloat, 1), s(((ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1053))), ax).
spft(arity(ftFloat, 1), mpred_mark(pfcLHS, p, ftFloat, 1), pt(mpred_mark(pfcLHS, p, ftFloat, 1),  (ground(pfcLHS:p)->rhs([arity(ftFloat, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftFloat, 1), s(((ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1053))), ax).
spft(arity(ftFloat, 1), mpred_mark(pfcPosTrigger, p, ftFloat, 1), pt(mpred_mark(pfcPosTrigger, p, ftFloat, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftFloat, 1)])))).
spft(marker_supported(ftFloat, 1), mpred_mark(pfcPosTrigger, p, ftFloat, 1), pt(mpred_mark(pfcPosTrigger, p, ftFloat, 1),  (ground(p:ftFloat:1)->rhs([marker_supported(ftFloat, 1)])))).
spft(hybrid_support(ftFloat, 1), marker_supported(ftFloat, 1), pt(marker_supported(ftFloat, 1), rhs([hybrid_support(ftFloat, 1)]))).
spft(prologHybrid(ftFloat), hybrid_support(ftFloat, 1), pt(hybrid_support(ftFloat, 1),  (ftFloat\='$VAR', atom(ftFloat), integer(1), \+prologDynamic(ftFloat), \+static_predicate(ftFloat/1)->rhs([{functor(ftFloat(A), ftFloat, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftFloat, baseKB:ftFloat(A)), \+predicate_property(baseKB:ftFloat(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftFloat(A), exported);true), kb_dynamic(baseKB:ftFloat/1), show_failure(hybrid_support, \+static_predicate(ftFloat/1))}, prologHybrid(ftFloat), arity(ftFloat, 1)])))).
spft(pt(arity(ftFloat, A), rhs([hybrid_support(ftFloat, A)])), prologHybrid(ftFloat), pt(prologHybrid(ftFloat), pt(arity(ftFloat, A), rhs([hybrid_support(ftFloat, A)])))).
spft(hybrid_support(ftFloat, 1), arity(ftFloat, 1), pt(arity(ftFloat, A), rhs([hybrid_support(ftFloat, A)]))).
spft(hybrid_support(ftFloat, 1), arity(ftFloat, 1), pt(arity(ftFloat, A), rhs([hybrid_support(ftFloat, A)]))).
spft(arity(ftFloat, 1), hybrid_support(ftFloat, 1), pt(hybrid_support(ftFloat, 1),  (ftFloat\='$VAR', atom(ftFloat), integer(1), \+prologDynamic(ftFloat), \+static_predicate(ftFloat/1)->rhs([{functor(ftFloat(A), ftFloat, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftFloat, baseKB:ftFloat(A)), \+predicate_property(baseKB:ftFloat(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftFloat(A), exported);true), kb_dynamic(baseKB:ftFloat/1), show_failure(hybrid_support, \+static_predicate(ftFloat/1))}, prologHybrid(ftFloat), arity(ftFloat, 1)])))).
spft(prologHybrid(ftFloat), hybrid_support(ftFloat, 1), pt(hybrid_support(ftFloat, 1), rhs([prologHybrid(ftFloat), arity(ftFloat, 1)]))).
spft(arity(ftFloat, 1), hybrid_support(ftFloat, 1), pt(hybrid_support(ftFloat, 1), rhs([prologHybrid(ftFloat), arity(ftFloat, 1)]))).
spft(pt(ftFloat(A),  (predicate_property(ftFloat(A), dynamic)->rhs([{ignore(retract(ftFloat(A)))}]))),  (ftFloat(B)/predicate_property(ftFloat(B), dynamic)==>{ignore(retract(ftFloat(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1053)).
spft((isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))}), ttFormatType(ftFloat), pt(ttFormatType(ftFloat), rhs([{get_functor(ftFloat, ftFloat), functor(ftFloat(A), ftFloat, 1),  (\+predicate_property(ftFloat(A), B)->kb_dynamic(ftFloat/1);true), ftFloat(A)=..[ftFloat, A], nop(B),  (predicate_property(ftFloat(A), dynamic)->true;show_pred_info(ftFloat(A)))}, ~functorDeclares(ftFloat), arity(ftFloat, 1),  (ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}),  (isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))})]))).
spft(pt(isa(A, ftFloat), rhs([{ignore(retract(isa(A, ftFloat)))}])),  (isa(B, ftFloat)==>{ignore(retract(isa(B, ftFloat)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1053)).
spft(quotedDefnIff(ftAtom, atom), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1054), ax).
spft(ttFormatType(ftAtom), quotedDefnIff(ftAtom, atom), pt(quotedDefnIff(ftAtom, atom), rhs([ttFormatType(ftAtom)]))).
spft(~completelyAssertedCollection(ftAtom), ttFormatType(ftAtom), pt(ttFormatType(ftAtom), rhs([~completelyAssertedCollection(ftAtom)]))).
spft(~functorDeclares(ftAtom), ttFormatType(ftAtom), pt(ttFormatType(ftAtom), rhs([{get_functor(ftAtom, ftAtom), functor(ftAtom(A), ftAtom, 1),  (\+predicate_property(ftAtom(A), B)->kb_dynamic(ftAtom/1);true), ftAtom(A)=..[ftAtom, A], nop(B),  (predicate_property(ftAtom(A), dynamic)->true;show_pred_info(ftAtom(A)))}, ~functorDeclares(ftAtom), arity(ftAtom, 1),  (ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}),  (isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))})]))).
spft(arity(ftAtom, 1), ttFormatType(ftAtom), pt(ttFormatType(ftAtom), rhs([{get_functor(ftAtom, ftAtom), functor(ftAtom(A), ftAtom, 1),  (\+predicate_property(ftAtom(A), B)->kb_dynamic(ftAtom/1);true), ftAtom(A)=..[ftAtom, A], nop(B),  (predicate_property(ftAtom(A), dynamic)->true;show_pred_info(ftAtom(A)))}, ~functorDeclares(ftAtom), arity(ftAtom, 1),  (ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}),  (isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))})]))).
spft((ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}), ttFormatType(ftAtom), pt(ttFormatType(ftAtom), rhs([{get_functor(ftAtom, ftAtom), functor(ftAtom(A), ftAtom, 1),  (\+predicate_property(ftAtom(A), B)->kb_dynamic(ftAtom/1);true), ftAtom(A)=..[ftAtom, A], nop(B),  (predicate_property(ftAtom(A), dynamic)->true;show_pred_info(ftAtom(A)))}, ~functorDeclares(ftAtom), arity(ftAtom, 1),  (ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}),  (isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))})]))).
spft(mpred_mark(pfcLHS, p, ftAtom, 1), s(((ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1054))), ax).
spft(arity(ftAtom, 1), mpred_mark(pfcLHS, p, ftAtom, 1), pt(mpred_mark(pfcLHS, p, ftAtom, 1),  (ground(pfcLHS:p)->rhs([arity(ftAtom, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftAtom, 1), s(((ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1054))), ax).
spft(arity(ftAtom, 1), mpred_mark(pfcPosTrigger, p, ftAtom, 1), pt(mpred_mark(pfcPosTrigger, p, ftAtom, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftAtom, 1)])))).
spft(marker_supported(ftAtom, 1), mpred_mark(pfcPosTrigger, p, ftAtom, 1), pt(mpred_mark(pfcPosTrigger, p, ftAtom, 1),  (ground(p:ftAtom:1)->rhs([marker_supported(ftAtom, 1)])))).
spft(hybrid_support(ftAtom, 1), marker_supported(ftAtom, 1), pt(marker_supported(ftAtom, 1), rhs([hybrid_support(ftAtom, 1)]))).
spft(prologHybrid(ftAtom), hybrid_support(ftAtom, 1), pt(hybrid_support(ftAtom, 1),  (ftAtom\='$VAR', atom(ftAtom), integer(1), \+prologDynamic(ftAtom), \+static_predicate(ftAtom/1)->rhs([{functor(ftAtom(A), ftAtom, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftAtom, baseKB:ftAtom(A)), \+predicate_property(baseKB:ftAtom(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftAtom(A), exported);true), kb_dynamic(baseKB:ftAtom/1), show_failure(hybrid_support, \+static_predicate(ftAtom/1))}, prologHybrid(ftAtom), arity(ftAtom, 1)])))).
spft(pt(arity(ftAtom, A), rhs([hybrid_support(ftAtom, A)])), prologHybrid(ftAtom), pt(prologHybrid(ftAtom), pt(arity(ftAtom, A), rhs([hybrid_support(ftAtom, A)])))).
spft(hybrid_support(ftAtom, 1), arity(ftAtom, 1), pt(arity(ftAtom, A), rhs([hybrid_support(ftAtom, A)]))).
spft(hybrid_support(ftAtom, 1), arity(ftAtom, 1), pt(arity(ftAtom, A), rhs([hybrid_support(ftAtom, A)]))).
spft(arity(ftAtom, 1), hybrid_support(ftAtom, 1), pt(hybrid_support(ftAtom, 1),  (ftAtom\='$VAR', atom(ftAtom), integer(1), \+prologDynamic(ftAtom), \+static_predicate(ftAtom/1)->rhs([{functor(ftAtom(A), ftAtom, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftAtom, baseKB:ftAtom(A)), \+predicate_property(baseKB:ftAtom(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftAtom(A), exported);true), kb_dynamic(baseKB:ftAtom/1), show_failure(hybrid_support, \+static_predicate(ftAtom/1))}, prologHybrid(ftAtom), arity(ftAtom, 1)])))).
spft(prologHybrid(ftAtom), hybrid_support(ftAtom, 1), pt(hybrid_support(ftAtom, 1), rhs([prologHybrid(ftAtom), arity(ftAtom, 1)]))).
spft(arity(ftAtom, 1), hybrid_support(ftAtom, 1), pt(hybrid_support(ftAtom, 1), rhs([prologHybrid(ftAtom), arity(ftAtom, 1)]))).
spft(pt(ftAtom(A),  (predicate_property(ftAtom(A), dynamic)->rhs([{ignore(retract(ftAtom(A)))}]))),  (ftAtom(B)/predicate_property(ftAtom(B), dynamic)==>{ignore(retract(ftAtom(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1054)).
spft((isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))}), ttFormatType(ftAtom), pt(ttFormatType(ftAtom), rhs([{get_functor(ftAtom, ftAtom), functor(ftAtom(A), ftAtom, 1),  (\+predicate_property(ftAtom(A), B)->kb_dynamic(ftAtom/1);true), ftAtom(A)=..[ftAtom, A], nop(B),  (predicate_property(ftAtom(A), dynamic)->true;show_pred_info(ftAtom(A)))}, ~functorDeclares(ftAtom), arity(ftAtom, 1),  (ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}),  (isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))})]))).
spft(pt(isa(A, ftAtom), rhs([{ignore(retract(isa(A, ftAtom)))}])),  (isa(B, ftAtom)==>{ignore(retract(isa(B, ftAtom)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1054)).
spft(quotedDefnIff(ftString, string), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1055), ax).
spft(ttFormatType(ftString), quotedDefnIff(ftString, string), pt(quotedDefnIff(ftString, string), rhs([ttFormatType(ftString)]))).
spft(quotedDefnIff(ftCallable, is_callable), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1056), ax).
spft(ttFormatType(ftCallable), quotedDefnIff(ftCallable, is_callable), pt(quotedDefnIff(ftCallable, is_callable), rhs([ttFormatType(ftCallable)]))).
spft(quotedDefnIff(ftCompound, is_ftCompound), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1057), ax).
spft(ttFormatType(ftCompound), quotedDefnIff(ftCompound, is_ftCompound), pt(quotedDefnIff(ftCompound, is_ftCompound), rhs([ttFormatType(ftCompound)]))).
spft(~completelyAssertedCollection(ftCompound), ttFormatType(ftCompound), pt(ttFormatType(ftCompound), rhs([~completelyAssertedCollection(ftCompound)]))).
spft(~functorDeclares(ftCompound), ttFormatType(ftCompound), pt(ttFormatType(ftCompound), rhs([{get_functor(ftCompound, ftCompound), functor(ftCompound(A), ftCompound, 1),  (\+predicate_property(ftCompound(A), B)->kb_dynamic(ftCompound/1);true), ftCompound(A)=..[ftCompound, A], nop(B),  (predicate_property(ftCompound(A), dynamic)->true;show_pred_info(ftCompound(A)))}, ~functorDeclares(ftCompound), arity(ftCompound, 1),  (ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}),  (isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))})]))).
spft(arity(ftCompound, 1), ttFormatType(ftCompound), pt(ttFormatType(ftCompound), rhs([{get_functor(ftCompound, ftCompound), functor(ftCompound(A), ftCompound, 1),  (\+predicate_property(ftCompound(A), B)->kb_dynamic(ftCompound/1);true), ftCompound(A)=..[ftCompound, A], nop(B),  (predicate_property(ftCompound(A), dynamic)->true;show_pred_info(ftCompound(A)))}, ~functorDeclares(ftCompound), arity(ftCompound, 1),  (ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}),  (isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))})]))).
spft((ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}), ttFormatType(ftCompound), pt(ttFormatType(ftCompound), rhs([{get_functor(ftCompound, ftCompound), functor(ftCompound(A), ftCompound, 1),  (\+predicate_property(ftCompound(A), B)->kb_dynamic(ftCompound/1);true), ftCompound(A)=..[ftCompound, A], nop(B),  (predicate_property(ftCompound(A), dynamic)->true;show_pred_info(ftCompound(A)))}, ~functorDeclares(ftCompound), arity(ftCompound, 1),  (ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}),  (isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))})]))).
spft(mpred_mark(pfcLHS, p, ftCompound, 1), s(((ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1057))), ax).
spft(arity(ftCompound, 1), mpred_mark(pfcLHS, p, ftCompound, 1), pt(mpred_mark(pfcLHS, p, ftCompound, 1),  (ground(pfcLHS:p)->rhs([arity(ftCompound, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftCompound, 1), s(((ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1057))), ax).
spft(arity(ftCompound, 1), mpred_mark(pfcPosTrigger, p, ftCompound, 1), pt(mpred_mark(pfcPosTrigger, p, ftCompound, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftCompound, 1)])))).
spft(marker_supported(ftCompound, 1), mpred_mark(pfcPosTrigger, p, ftCompound, 1), pt(mpred_mark(pfcPosTrigger, p, ftCompound, 1),  (ground(p:ftCompound:1)->rhs([marker_supported(ftCompound, 1)])))).
spft(hybrid_support(ftCompound, 1), marker_supported(ftCompound, 1), pt(marker_supported(ftCompound, 1), rhs([hybrid_support(ftCompound, 1)]))).
spft(prologHybrid(ftCompound), hybrid_support(ftCompound, 1), pt(hybrid_support(ftCompound, 1),  (ftCompound\='$VAR', atom(ftCompound), integer(1), \+prologDynamic(ftCompound), \+static_predicate(ftCompound/1)->rhs([{functor(ftCompound(A), ftCompound, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftCompound, baseKB:ftCompound(A)), \+predicate_property(baseKB:ftCompound(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftCompound(A), exported);true), kb_dynamic(baseKB:ftCompound/1), show_failure(hybrid_support, \+static_predicate(ftCompound/1))}, prologHybrid(ftCompound), arity(ftCompound, 1)])))).
spft(pt(arity(ftCompound, A), rhs([hybrid_support(ftCompound, A)])), prologHybrid(ftCompound), pt(prologHybrid(ftCompound), pt(arity(ftCompound, A), rhs([hybrid_support(ftCompound, A)])))).
spft(hybrid_support(ftCompound, 1), arity(ftCompound, 1), pt(arity(ftCompound, A), rhs([hybrid_support(ftCompound, A)]))).
spft(hybrid_support(ftCompound, 1), arity(ftCompound, 1), pt(arity(ftCompound, A), rhs([hybrid_support(ftCompound, A)]))).
spft(arity(ftCompound, 1), hybrid_support(ftCompound, 1), pt(hybrid_support(ftCompound, 1),  (ftCompound\='$VAR', atom(ftCompound), integer(1), \+prologDynamic(ftCompound), \+static_predicate(ftCompound/1)->rhs([{functor(ftCompound(A), ftCompound, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftCompound, baseKB:ftCompound(A)), \+predicate_property(baseKB:ftCompound(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftCompound(A), exported);true), kb_dynamic(baseKB:ftCompound/1), show_failure(hybrid_support, \+static_predicate(ftCompound/1))}, prologHybrid(ftCompound), arity(ftCompound, 1)])))).
spft(prologHybrid(ftCompound), hybrid_support(ftCompound, 1), pt(hybrid_support(ftCompound, 1), rhs([prologHybrid(ftCompound), arity(ftCompound, 1)]))).
spft(arity(ftCompound, 1), hybrid_support(ftCompound, 1), pt(hybrid_support(ftCompound, 1), rhs([prologHybrid(ftCompound), arity(ftCompound, 1)]))).
spft(pt(ftCompound(A),  (predicate_property(ftCompound(A), dynamic)->rhs([{ignore(retract(ftCompound(A)))}]))),  (ftCompound(B)/predicate_property(ftCompound(B), dynamic)==>{ignore(retract(ftCompound(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1057)).
spft((isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))}), ttFormatType(ftCompound), pt(ttFormatType(ftCompound), rhs([{get_functor(ftCompound, ftCompound), functor(ftCompound(A), ftCompound, 1),  (\+predicate_property(ftCompound(A), B)->kb_dynamic(ftCompound/1);true), ftCompound(A)=..[ftCompound, A], nop(B),  (predicate_property(ftCompound(A), dynamic)->true;show_pred_info(ftCompound(A)))}, ~functorDeclares(ftCompound), arity(ftCompound, 1),  (ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}),  (isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))})]))).
spft(pt(isa(A, ftCompound), rhs([{ignore(retract(isa(A, ftCompound)))}])),  (isa(B, ftCompound)==>{ignore(retract(isa(B, ftCompound)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1057)).
spft(quotedDefnIff(ftGround, ground), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1058), ax).
spft(ttFormatType(ftGround), quotedDefnIff(ftGround, ground), pt(quotedDefnIff(ftGround, ground), rhs([ttFormatType(ftGround)]))).
spft(~completelyAssertedCollection(ftGround), ttFormatType(ftGround), pt(ttFormatType(ftGround), rhs([~completelyAssertedCollection(ftGround)]))).
spft(~functorDeclares(ftGround), ttFormatType(ftGround), pt(ttFormatType(ftGround), rhs([{get_functor(ftGround, ftGround), functor(ftGround(A), ftGround, 1),  (\+predicate_property(ftGround(A), B)->kb_dynamic(ftGround/1);true), ftGround(A)=..[ftGround, A], nop(B),  (predicate_property(ftGround(A), dynamic)->true;show_pred_info(ftGround(A)))}, ~functorDeclares(ftGround), arity(ftGround, 1),  (ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}),  (isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))})]))).
spft(arity(ftGround, 1), ttFormatType(ftGround), pt(ttFormatType(ftGround), rhs([{get_functor(ftGround, ftGround), functor(ftGround(A), ftGround, 1),  (\+predicate_property(ftGround(A), B)->kb_dynamic(ftGround/1);true), ftGround(A)=..[ftGround, A], nop(B),  (predicate_property(ftGround(A), dynamic)->true;show_pred_info(ftGround(A)))}, ~functorDeclares(ftGround), arity(ftGround, 1),  (ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}),  (isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))})]))).
spft((ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}), ttFormatType(ftGround), pt(ttFormatType(ftGround), rhs([{get_functor(ftGround, ftGround), functor(ftGround(A), ftGround, 1),  (\+predicate_property(ftGround(A), B)->kb_dynamic(ftGround/1);true), ftGround(A)=..[ftGround, A], nop(B),  (predicate_property(ftGround(A), dynamic)->true;show_pred_info(ftGround(A)))}, ~functorDeclares(ftGround), arity(ftGround, 1),  (ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}),  (isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))})]))).
spft(mpred_mark(pfcLHS, p, ftGround, 1), s(((ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1058))), ax).
spft(arity(ftGround, 1), mpred_mark(pfcLHS, p, ftGround, 1), pt(mpred_mark(pfcLHS, p, ftGround, 1),  (ground(pfcLHS:p)->rhs([arity(ftGround, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftGround, 1), s(((ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1058))), ax).
spft(arity(ftGround, 1), mpred_mark(pfcPosTrigger, p, ftGround, 1), pt(mpred_mark(pfcPosTrigger, p, ftGround, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftGround, 1)])))).
spft(marker_supported(ftGround, 1), mpred_mark(pfcPosTrigger, p, ftGround, 1), pt(mpred_mark(pfcPosTrigger, p, ftGround, 1),  (ground(p:ftGround:1)->rhs([marker_supported(ftGround, 1)])))).
spft(hybrid_support(ftGround, 1), marker_supported(ftGround, 1), pt(marker_supported(ftGround, 1), rhs([hybrid_support(ftGround, 1)]))).
spft(prologHybrid(ftGround), hybrid_support(ftGround, 1), pt(hybrid_support(ftGround, 1),  (ftGround\='$VAR', atom(ftGround), integer(1), \+prologDynamic(ftGround), \+static_predicate(ftGround/1)->rhs([{functor(ftGround(A), ftGround, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftGround, baseKB:ftGround(A)), \+predicate_property(baseKB:ftGround(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftGround(A), exported);true), kb_dynamic(baseKB:ftGround/1), show_failure(hybrid_support, \+static_predicate(ftGround/1))}, prologHybrid(ftGround), arity(ftGround, 1)])))).
spft(pt(arity(ftGround, A), rhs([hybrid_support(ftGround, A)])), prologHybrid(ftGround), pt(prologHybrid(ftGround), pt(arity(ftGround, A), rhs([hybrid_support(ftGround, A)])))).
spft(hybrid_support(ftGround, 1), arity(ftGround, 1), pt(arity(ftGround, A), rhs([hybrid_support(ftGround, A)]))).
spft(hybrid_support(ftGround, 1), arity(ftGround, 1), pt(arity(ftGround, A), rhs([hybrid_support(ftGround, A)]))).
spft(arity(ftGround, 1), hybrid_support(ftGround, 1), pt(hybrid_support(ftGround, 1),  (ftGround\='$VAR', atom(ftGround), integer(1), \+prologDynamic(ftGround), \+static_predicate(ftGround/1)->rhs([{functor(ftGround(A), ftGround, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftGround, baseKB:ftGround(A)), \+predicate_property(baseKB:ftGround(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftGround(A), exported);true), kb_dynamic(baseKB:ftGround/1), show_failure(hybrid_support, \+static_predicate(ftGround/1))}, prologHybrid(ftGround), arity(ftGround, 1)])))).
spft(prologHybrid(ftGround), hybrid_support(ftGround, 1), pt(hybrid_support(ftGround, 1), rhs([prologHybrid(ftGround), arity(ftGround, 1)]))).
spft(arity(ftGround, 1), hybrid_support(ftGround, 1), pt(hybrid_support(ftGround, 1), rhs([prologHybrid(ftGround), arity(ftGround, 1)]))).
spft(pt(ftGround(A),  (predicate_property(ftGround(A), dynamic)->rhs([{ignore(retract(ftGround(A)))}]))),  (ftGround(B)/predicate_property(ftGround(B), dynamic)==>{ignore(retract(ftGround(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1058)).
spft((isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))}), ttFormatType(ftGround), pt(ttFormatType(ftGround), rhs([{get_functor(ftGround, ftGround), functor(ftGround(A), ftGround, 1),  (\+predicate_property(ftGround(A), B)->kb_dynamic(ftGround/1);true), ftGround(A)=..[ftGround, A], nop(B),  (predicate_property(ftGround(A), dynamic)->true;show_pred_info(ftGround(A)))}, ~functorDeclares(ftGround), arity(ftGround, 1),  (ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}),  (isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))})]))).
spft(pt(isa(A, ftGround), rhs([{ignore(retract(isa(A, ftGround)))}])),  (isa(B, ftGround)==>{ignore(retract(isa(B, ftGround)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1058)).
spft(quotedDefnIff(ftID, is_id), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1059), ax).
spft(ttFormatType(ftID), quotedDefnIff(ftID, is_id), pt(quotedDefnIff(ftID, is_id), rhs([ttFormatType(ftID)]))).
spft(~completelyAssertedCollection(ftID), ttFormatType(ftID), pt(ttFormatType(ftID), rhs([~completelyAssertedCollection(ftID)]))).
spft(~functorDeclares(ftID), ttFormatType(ftID), pt(ttFormatType(ftID), rhs([{get_functor(ftID, ftID), functor(ftID(A), ftID, 1),  (\+predicate_property(ftID(A), B)->kb_dynamic(ftID/1);true), ftID(A)=..[ftID, A], nop(B),  (predicate_property(ftID(A), dynamic)->true;show_pred_info(ftID(A)))}, ~functorDeclares(ftID), arity(ftID, 1),  (ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}),  (isa(A, ftID)==>{ignore(retract(isa(A, ftID)))})]))).
spft(arity(ftID, 1), ttFormatType(ftID), pt(ttFormatType(ftID), rhs([{get_functor(ftID, ftID), functor(ftID(A), ftID, 1),  (\+predicate_property(ftID(A), B)->kb_dynamic(ftID/1);true), ftID(A)=..[ftID, A], nop(B),  (predicate_property(ftID(A), dynamic)->true;show_pred_info(ftID(A)))}, ~functorDeclares(ftID), arity(ftID, 1),  (ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}),  (isa(A, ftID)==>{ignore(retract(isa(A, ftID)))})]))).
spft((ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}), ttFormatType(ftID), pt(ttFormatType(ftID), rhs([{get_functor(ftID, ftID), functor(ftID(A), ftID, 1),  (\+predicate_property(ftID(A), B)->kb_dynamic(ftID/1);true), ftID(A)=..[ftID, A], nop(B),  (predicate_property(ftID(A), dynamic)->true;show_pred_info(ftID(A)))}, ~functorDeclares(ftID), arity(ftID, 1),  (ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}),  (isa(A, ftID)==>{ignore(retract(isa(A, ftID)))})]))).
spft(mpred_mark(pfcLHS, p, ftID, 1), s(((ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1059))), ax).
spft(arity(ftID, 1), mpred_mark(pfcLHS, p, ftID, 1), pt(mpred_mark(pfcLHS, p, ftID, 1),  (ground(pfcLHS:p)->rhs([arity(ftID, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftID, 1), s(((ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1059))), ax).
spft(arity(ftID, 1), mpred_mark(pfcPosTrigger, p, ftID, 1), pt(mpred_mark(pfcPosTrigger, p, ftID, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftID, 1)])))).
spft(marker_supported(ftID, 1), mpred_mark(pfcPosTrigger, p, ftID, 1), pt(mpred_mark(pfcPosTrigger, p, ftID, 1),  (ground(p:ftID:1)->rhs([marker_supported(ftID, 1)])))).
spft(hybrid_support(ftID, 1), marker_supported(ftID, 1), pt(marker_supported(ftID, 1), rhs([hybrid_support(ftID, 1)]))).
spft(prologHybrid(ftID), hybrid_support(ftID, 1), pt(hybrid_support(ftID, 1),  (ftID\='$VAR', atom(ftID), integer(1), \+prologDynamic(ftID), \+static_predicate(ftID/1)->rhs([{functor(ftID(A), ftID, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftID, baseKB:ftID(A)), \+predicate_property(baseKB:ftID(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftID(A), exported);true), kb_dynamic(baseKB:ftID/1), show_failure(hybrid_support, \+static_predicate(ftID/1))}, prologHybrid(ftID), arity(ftID, 1)])))).
spft(pt(arity(ftID, A), rhs([hybrid_support(ftID, A)])), prologHybrid(ftID), pt(prologHybrid(ftID), pt(arity(ftID, A), rhs([hybrid_support(ftID, A)])))).
spft(hybrid_support(ftID, 1), arity(ftID, 1), pt(arity(ftID, A), rhs([hybrid_support(ftID, A)]))).
spft(hybrid_support(ftID, 1), arity(ftID, 1), pt(arity(ftID, A), rhs([hybrid_support(ftID, A)]))).
spft(arity(ftID, 1), hybrid_support(ftID, 1), pt(hybrid_support(ftID, 1),  (ftID\='$VAR', atom(ftID), integer(1), \+prologDynamic(ftID), \+static_predicate(ftID/1)->rhs([{functor(ftID(A), ftID, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftID, baseKB:ftID(A)), \+predicate_property(baseKB:ftID(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftID(A), exported);true), kb_dynamic(baseKB:ftID/1), show_failure(hybrid_support, \+static_predicate(ftID/1))}, prologHybrid(ftID), arity(ftID, 1)])))).
spft(prologHybrid(ftID), hybrid_support(ftID, 1), pt(hybrid_support(ftID, 1), rhs([prologHybrid(ftID), arity(ftID, 1)]))).
spft(arity(ftID, 1), hybrid_support(ftID, 1), pt(hybrid_support(ftID, 1), rhs([prologHybrid(ftID), arity(ftID, 1)]))).
spft(pt(ftID(A),  (predicate_property(ftID(A), dynamic)->rhs([{ignore(retract(ftID(A)))}]))),  (ftID(B)/predicate_property(ftID(B), dynamic)==>{ignore(retract(ftID(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1059)).
spft((isa(A, ftID)==>{ignore(retract(isa(A, ftID)))}), ttFormatType(ftID), pt(ttFormatType(ftID), rhs([{get_functor(ftID, ftID), functor(ftID(A), ftID, 1),  (\+predicate_property(ftID(A), B)->kb_dynamic(ftID/1);true), ftID(A)=..[ftID, A], nop(B),  (predicate_property(ftID(A), dynamic)->true;show_pred_info(ftID(A)))}, ~functorDeclares(ftID), arity(ftID, 1),  (ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}),  (isa(A, ftID)==>{ignore(retract(isa(A, ftID)))})]))).
spft(pt(isa(A, ftID), rhs([{ignore(retract(isa(A, ftID)))}])),  (isa(B, ftID)==>{ignore(retract(isa(B, ftID)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1059)).
spft(quotedDefnIff(ftTerm, is_ftNonvar), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1060), ax).
spft(ttFormatType(ftTerm), quotedDefnIff(ftTerm, is_ftNonvar), pt(quotedDefnIff(ftTerm, is_ftNonvar), rhs([ttFormatType(ftTerm)]))).
spft(~completelyAssertedCollection(ftTerm), ttFormatType(ftTerm), pt(ttFormatType(ftTerm), rhs([~completelyAssertedCollection(ftTerm)]))).
spft(~functorDeclares(ftTerm), ttFormatType(ftTerm), pt(ttFormatType(ftTerm), rhs([{get_functor(ftTerm, ftTerm), functor(ftTerm(A), ftTerm, 1),  (\+predicate_property(ftTerm(A), B)->kb_dynamic(ftTerm/1);true), ftTerm(A)=..[ftTerm, A], nop(B),  (predicate_property(ftTerm(A), dynamic)->true;show_pred_info(ftTerm(A)))}, ~functorDeclares(ftTerm), arity(ftTerm, 1),  (ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}),  (isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))})]))).
spft(arity(ftTerm, 1), ttFormatType(ftTerm), pt(ttFormatType(ftTerm), rhs([{get_functor(ftTerm, ftTerm), functor(ftTerm(A), ftTerm, 1),  (\+predicate_property(ftTerm(A), B)->kb_dynamic(ftTerm/1);true), ftTerm(A)=..[ftTerm, A], nop(B),  (predicate_property(ftTerm(A), dynamic)->true;show_pred_info(ftTerm(A)))}, ~functorDeclares(ftTerm), arity(ftTerm, 1),  (ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}),  (isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))})]))).
spft((ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}), ttFormatType(ftTerm), pt(ttFormatType(ftTerm), rhs([{get_functor(ftTerm, ftTerm), functor(ftTerm(A), ftTerm, 1),  (\+predicate_property(ftTerm(A), B)->kb_dynamic(ftTerm/1);true), ftTerm(A)=..[ftTerm, A], nop(B),  (predicate_property(ftTerm(A), dynamic)->true;show_pred_info(ftTerm(A)))}, ~functorDeclares(ftTerm), arity(ftTerm, 1),  (ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}),  (isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))})]))).
spft(mpred_mark(pfcLHS, p, ftTerm, 1), s(((ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1060))), ax).
spft(arity(ftTerm, 1), mpred_mark(pfcLHS, p, ftTerm, 1), pt(mpred_mark(pfcLHS, p, ftTerm, 1),  (ground(pfcLHS:p)->rhs([arity(ftTerm, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftTerm, 1), s(((ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1060))), ax).
spft(arity(ftTerm, 1), mpred_mark(pfcPosTrigger, p, ftTerm, 1), pt(mpred_mark(pfcPosTrigger, p, ftTerm, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftTerm, 1)])))).
spft(marker_supported(ftTerm, 1), mpred_mark(pfcPosTrigger, p, ftTerm, 1), pt(mpred_mark(pfcPosTrigger, p, ftTerm, 1),  (ground(p:ftTerm:1)->rhs([marker_supported(ftTerm, 1)])))).
spft(hybrid_support(ftTerm, 1), marker_supported(ftTerm, 1), pt(marker_supported(ftTerm, 1), rhs([hybrid_support(ftTerm, 1)]))).
spft(prologHybrid(ftTerm), hybrid_support(ftTerm, 1), pt(hybrid_support(ftTerm, 1),  (ftTerm\='$VAR', atom(ftTerm), integer(1), \+prologDynamic(ftTerm), \+static_predicate(ftTerm/1)->rhs([{functor(ftTerm(A), ftTerm, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftTerm, baseKB:ftTerm(A)), \+predicate_property(baseKB:ftTerm(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftTerm(A), exported);true), kb_dynamic(baseKB:ftTerm/1), show_failure(hybrid_support, \+static_predicate(ftTerm/1))}, prologHybrid(ftTerm), arity(ftTerm, 1)])))).
spft(pt(arity(ftTerm, A), rhs([hybrid_support(ftTerm, A)])), prologHybrid(ftTerm), pt(prologHybrid(ftTerm), pt(arity(ftTerm, A), rhs([hybrid_support(ftTerm, A)])))).
spft(hybrid_support(ftTerm, 1), arity(ftTerm, 1), pt(arity(ftTerm, A), rhs([hybrid_support(ftTerm, A)]))).
spft(hybrid_support(ftTerm, 1), arity(ftTerm, 1), pt(arity(ftTerm, A), rhs([hybrid_support(ftTerm, A)]))).
spft(arity(ftTerm, 1), hybrid_support(ftTerm, 1), pt(hybrid_support(ftTerm, 1),  (ftTerm\='$VAR', atom(ftTerm), integer(1), \+prologDynamic(ftTerm), \+static_predicate(ftTerm/1)->rhs([{functor(ftTerm(A), ftTerm, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftTerm, baseKB:ftTerm(A)), \+predicate_property(baseKB:ftTerm(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftTerm(A), exported);true), kb_dynamic(baseKB:ftTerm/1), show_failure(hybrid_support, \+static_predicate(ftTerm/1))}, prologHybrid(ftTerm), arity(ftTerm, 1)])))).
spft(prologHybrid(ftTerm), hybrid_support(ftTerm, 1), pt(hybrid_support(ftTerm, 1), rhs([prologHybrid(ftTerm), arity(ftTerm, 1)]))).
spft(arity(ftTerm, 1), hybrid_support(ftTerm, 1), pt(hybrid_support(ftTerm, 1), rhs([prologHybrid(ftTerm), arity(ftTerm, 1)]))).
spft(pt(ftTerm(A),  (predicate_property(ftTerm(A), dynamic)->rhs([{ignore(retract(ftTerm(A)))}]))),  (ftTerm(B)/predicate_property(ftTerm(B), dynamic)==>{ignore(retract(ftTerm(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1060)).
spft((isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))}), ttFormatType(ftTerm), pt(ttFormatType(ftTerm), rhs([{get_functor(ftTerm, ftTerm), functor(ftTerm(A), ftTerm, 1),  (\+predicate_property(ftTerm(A), B)->kb_dynamic(ftTerm/1);true), ftTerm(A)=..[ftTerm, A], nop(B),  (predicate_property(ftTerm(A), dynamic)->true;show_pred_info(ftTerm(A)))}, ~functorDeclares(ftTerm), arity(ftTerm, 1),  (ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}),  (isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))})]))).
spft(pt(isa(A, ftTerm), rhs([{ignore(retract(isa(A, ftTerm)))}])),  (isa(B, ftTerm)==>{ignore(retract(isa(B, ftTerm)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1060)).
spft(quotedDefnIff(ftVar, is_ftVar), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1061), ax).
spft(ttFormatType(ftVar), quotedDefnIff(ftVar, is_ftVar), pt(quotedDefnIff(ftVar, is_ftVar), rhs([ttFormatType(ftVar)]))).
spft(quotedDefnIff(ftNonvar, is_ftNonvar), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1062), ax).
spft(ttFormatType(ftNonvar), quotedDefnIff(ftNonvar, is_ftNonvar), pt(quotedDefnIff(ftNonvar, is_ftNonvar), rhs([ttFormatType(ftNonvar)]))).
spft(~completelyAssertedCollection(ftNonvar), ttFormatType(ftNonvar), pt(ttFormatType(ftNonvar), rhs([~completelyAssertedCollection(ftNonvar)]))).
spft(~functorDeclares(ftNonvar), ttFormatType(ftNonvar), pt(ttFormatType(ftNonvar), rhs([{get_functor(ftNonvar, ftNonvar), functor(ftNonvar(A), ftNonvar, 1),  (\+predicate_property(ftNonvar(A), B)->kb_dynamic(ftNonvar/1);true), ftNonvar(A)=..[ftNonvar, A], nop(B),  (predicate_property(ftNonvar(A), dynamic)->true;show_pred_info(ftNonvar(A)))}, ~functorDeclares(ftNonvar), arity(ftNonvar, 1),  (ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}),  (isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))})]))).
spft(arity(ftNonvar, 1), ttFormatType(ftNonvar), pt(ttFormatType(ftNonvar), rhs([{get_functor(ftNonvar, ftNonvar), functor(ftNonvar(A), ftNonvar, 1),  (\+predicate_property(ftNonvar(A), B)->kb_dynamic(ftNonvar/1);true), ftNonvar(A)=..[ftNonvar, A], nop(B),  (predicate_property(ftNonvar(A), dynamic)->true;show_pred_info(ftNonvar(A)))}, ~functorDeclares(ftNonvar), arity(ftNonvar, 1),  (ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}),  (isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))})]))).
spft((ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}), ttFormatType(ftNonvar), pt(ttFormatType(ftNonvar), rhs([{get_functor(ftNonvar, ftNonvar), functor(ftNonvar(A), ftNonvar, 1),  (\+predicate_property(ftNonvar(A), B)->kb_dynamic(ftNonvar/1);true), ftNonvar(A)=..[ftNonvar, A], nop(B),  (predicate_property(ftNonvar(A), dynamic)->true;show_pred_info(ftNonvar(A)))}, ~functorDeclares(ftNonvar), arity(ftNonvar, 1),  (ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}),  (isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))})]))).
spft(mpred_mark(pfcLHS, p, ftNonvar, 1), s(((ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1062))), ax).
spft(arity(ftNonvar, 1), mpred_mark(pfcLHS, p, ftNonvar, 1), pt(mpred_mark(pfcLHS, p, ftNonvar, 1),  (ground(pfcLHS:p)->rhs([arity(ftNonvar, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftNonvar, 1), s(((ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1062))), ax).
spft(arity(ftNonvar, 1), mpred_mark(pfcPosTrigger, p, ftNonvar, 1), pt(mpred_mark(pfcPosTrigger, p, ftNonvar, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftNonvar, 1)])))).
spft(marker_supported(ftNonvar, 1), mpred_mark(pfcPosTrigger, p, ftNonvar, 1), pt(mpred_mark(pfcPosTrigger, p, ftNonvar, 1),  (ground(p:ftNonvar:1)->rhs([marker_supported(ftNonvar, 1)])))).
spft(hybrid_support(ftNonvar, 1), marker_supported(ftNonvar, 1), pt(marker_supported(ftNonvar, 1), rhs([hybrid_support(ftNonvar, 1)]))).
spft(prologHybrid(ftNonvar), hybrid_support(ftNonvar, 1), pt(hybrid_support(ftNonvar, 1),  (ftNonvar\='$VAR', atom(ftNonvar), integer(1), \+prologDynamic(ftNonvar), \+static_predicate(ftNonvar/1)->rhs([{functor(ftNonvar(A), ftNonvar, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftNonvar, baseKB:ftNonvar(A)), \+predicate_property(baseKB:ftNonvar(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftNonvar(A), exported);true), kb_dynamic(baseKB:ftNonvar/1), show_failure(hybrid_support, \+static_predicate(ftNonvar/1))}, prologHybrid(ftNonvar), arity(ftNonvar, 1)])))).
spft(pt(arity(ftNonvar, A), rhs([hybrid_support(ftNonvar, A)])), prologHybrid(ftNonvar), pt(prologHybrid(ftNonvar), pt(arity(ftNonvar, A), rhs([hybrid_support(ftNonvar, A)])))).
spft(hybrid_support(ftNonvar, 1), arity(ftNonvar, 1), pt(arity(ftNonvar, A), rhs([hybrid_support(ftNonvar, A)]))).
spft(hybrid_support(ftNonvar, 1), arity(ftNonvar, 1), pt(arity(ftNonvar, A), rhs([hybrid_support(ftNonvar, A)]))).
spft(arity(ftNonvar, 1), hybrid_support(ftNonvar, 1), pt(hybrid_support(ftNonvar, 1),  (ftNonvar\='$VAR', atom(ftNonvar), integer(1), \+prologDynamic(ftNonvar), \+static_predicate(ftNonvar/1)->rhs([{functor(ftNonvar(A), ftNonvar, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftNonvar, baseKB:ftNonvar(A)), \+predicate_property(baseKB:ftNonvar(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftNonvar(A), exported);true), kb_dynamic(baseKB:ftNonvar/1), show_failure(hybrid_support, \+static_predicate(ftNonvar/1))}, prologHybrid(ftNonvar), arity(ftNonvar, 1)])))).
spft(prologHybrid(ftNonvar), hybrid_support(ftNonvar, 1), pt(hybrid_support(ftNonvar, 1), rhs([prologHybrid(ftNonvar), arity(ftNonvar, 1)]))).
spft(arity(ftNonvar, 1), hybrid_support(ftNonvar, 1), pt(hybrid_support(ftNonvar, 1), rhs([prologHybrid(ftNonvar), arity(ftNonvar, 1)]))).
spft(pt(ftNonvar(A),  (predicate_property(ftNonvar(A), dynamic)->rhs([{ignore(retract(ftNonvar(A)))}]))),  (ftNonvar(B)/predicate_property(ftNonvar(B), dynamic)==>{ignore(retract(ftNonvar(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1062)).
spft((isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))}), ttFormatType(ftNonvar), pt(ttFormatType(ftNonvar), rhs([{get_functor(ftNonvar, ftNonvar), functor(ftNonvar(A), ftNonvar, 1),  (\+predicate_property(ftNonvar(A), B)->kb_dynamic(ftNonvar/1);true), ftNonvar(A)=..[ftNonvar, A], nop(B),  (predicate_property(ftNonvar(A), dynamic)->true;show_pred_info(ftNonvar(A)))}, ~functorDeclares(ftNonvar), arity(ftNonvar, 1),  (ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}),  (isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))})]))).
spft(pt(isa(A, ftNonvar), rhs([{ignore(retract(isa(A, ftNonvar)))}])),  (isa(B, ftNonvar)==>{ignore(retract(isa(B, ftNonvar)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1062)).
spft(quotedDefnIff(ftNumber, number), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1063), ax).
spft(ttFormatType(ftNumber), quotedDefnIff(ftNumber, number), pt(quotedDefnIff(ftNumber, number), rhs([ttFormatType(ftNumber)]))).
spft(quotedDefnIff(ftList, is_list), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1064), ax).
spft(ttFormatType(ftList), quotedDefnIff(ftList, is_list), pt(quotedDefnIff(ftList, is_list), rhs([ttFormatType(ftList)]))).
spft(~completelyAssertedCollection(ftList), ttFormatType(ftList), pt(ttFormatType(ftList), rhs([~completelyAssertedCollection(ftList)]))).
spft(~functorDeclares(ftList), ttFormatType(ftList), pt(ttFormatType(ftList), rhs([{get_functor(ftList, ftList), functor(ftList(A), ftList, 1),  (\+predicate_property(ftList(A), B)->kb_dynamic(ftList/1);true), ftList(A)=..[ftList, A], nop(B),  (predicate_property(ftList(A), dynamic)->true;show_pred_info(ftList(A)))}, ~functorDeclares(ftList), arity(ftList, 1),  (ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}),  (isa(A, ftList)==>{ignore(retract(isa(A, ftList)))})]))).
spft(arity(ftList, 1), ttFormatType(ftList), pt(ttFormatType(ftList), rhs([{get_functor(ftList, ftList), functor(ftList(A), ftList, 1),  (\+predicate_property(ftList(A), B)->kb_dynamic(ftList/1);true), ftList(A)=..[ftList, A], nop(B),  (predicate_property(ftList(A), dynamic)->true;show_pred_info(ftList(A)))}, ~functorDeclares(ftList), arity(ftList, 1),  (ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}),  (isa(A, ftList)==>{ignore(retract(isa(A, ftList)))})]))).
spft((ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}), ttFormatType(ftList), pt(ttFormatType(ftList), rhs([{get_functor(ftList, ftList), functor(ftList(A), ftList, 1),  (\+predicate_property(ftList(A), B)->kb_dynamic(ftList/1);true), ftList(A)=..[ftList, A], nop(B),  (predicate_property(ftList(A), dynamic)->true;show_pred_info(ftList(A)))}, ~functorDeclares(ftList), arity(ftList, 1),  (ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}),  (isa(A, ftList)==>{ignore(retract(isa(A, ftList)))})]))).
spft(mpred_mark(pfcLHS, p, ftList, 1), s(((ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1064))), ax).
spft(arity(ftList, 1), mpred_mark(pfcLHS, p, ftList, 1), pt(mpred_mark(pfcLHS, p, ftList, 1),  (ground(pfcLHS:p)->rhs([arity(ftList, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftList, 1), s(((ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1064))), ax).
spft(arity(ftList, 1), mpred_mark(pfcPosTrigger, p, ftList, 1), pt(mpred_mark(pfcPosTrigger, p, ftList, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftList, 1)])))).
spft(marker_supported(ftList, 1), mpred_mark(pfcPosTrigger, p, ftList, 1), pt(mpred_mark(pfcPosTrigger, p, ftList, 1),  (ground(p:ftList:1)->rhs([marker_supported(ftList, 1)])))).
spft(hybrid_support(ftList, 1), marker_supported(ftList, 1), pt(marker_supported(ftList, 1), rhs([hybrid_support(ftList, 1)]))).
spft(prologHybrid(ftList), hybrid_support(ftList, 1), pt(hybrid_support(ftList, 1),  (ftList\='$VAR', atom(ftList), integer(1), \+prologDynamic(ftList), \+static_predicate(ftList/1)->rhs([{functor(ftList(A), ftList, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftList, baseKB:ftList(A)), \+predicate_property(baseKB:ftList(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftList(A), exported);true), kb_dynamic(baseKB:ftList/1), show_failure(hybrid_support, \+static_predicate(ftList/1))}, prologHybrid(ftList), arity(ftList, 1)])))).
spft(pt(arity(ftList, A), rhs([hybrid_support(ftList, A)])), prologHybrid(ftList), pt(prologHybrid(ftList), pt(arity(ftList, A), rhs([hybrid_support(ftList, A)])))).
spft(hybrid_support(ftList, 1), arity(ftList, 1), pt(arity(ftList, A), rhs([hybrid_support(ftList, A)]))).
spft(hybrid_support(ftList, 1), arity(ftList, 1), pt(arity(ftList, A), rhs([hybrid_support(ftList, A)]))).
spft(arity(ftList, 1), hybrid_support(ftList, 1), pt(hybrid_support(ftList, 1),  (ftList\='$VAR', atom(ftList), integer(1), \+prologDynamic(ftList), \+static_predicate(ftList/1)->rhs([{functor(ftList(A), ftList, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftList, baseKB:ftList(A)), \+predicate_property(baseKB:ftList(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftList(A), exported);true), kb_dynamic(baseKB:ftList/1), show_failure(hybrid_support, \+static_predicate(ftList/1))}, prologHybrid(ftList), arity(ftList, 1)])))).
spft(prologHybrid(ftList), hybrid_support(ftList, 1), pt(hybrid_support(ftList, 1), rhs([prologHybrid(ftList), arity(ftList, 1)]))).
spft(arity(ftList, 1), hybrid_support(ftList, 1), pt(hybrid_support(ftList, 1), rhs([prologHybrid(ftList), arity(ftList, 1)]))).
spft(pt(ftList(A),  (predicate_property(ftList(A), dynamic)->rhs([{ignore(retract(ftList(A)))}]))),  (ftList(B)/predicate_property(ftList(B), dynamic)==>{ignore(retract(ftList(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1064)).
spft((isa(A, ftList)==>{ignore(retract(isa(A, ftList)))}), ttFormatType(ftList), pt(ttFormatType(ftList), rhs([{get_functor(ftList, ftList), functor(ftList(A), ftList, 1),  (\+predicate_property(ftList(A), B)->kb_dynamic(ftList/1);true), ftList(A)=..[ftList, A], nop(B),  (predicate_property(ftList(A), dynamic)->true;show_pred_info(ftList(A)))}, ~functorDeclares(ftList), arity(ftList, 1),  (ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}),  (isa(A, ftList)==>{ignore(retract(isa(A, ftList)))})]))).
spft(pt(isa(A, ftList), rhs([{ignore(retract(isa(A, ftList)))}])),  (isa(B, ftList)==>{ignore(retract(isa(B, ftList)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1064)).
spft(quotedDefnIff(ftRest, is_rest), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1065), ax).
spft(ttFormatType(ftRest), quotedDefnIff(ftRest, is_rest), pt(quotedDefnIff(ftRest, is_rest), rhs([ttFormatType(ftRest)]))).
spft(~completelyAssertedCollection(ftRest), ttFormatType(ftRest), pt(ttFormatType(ftRest), rhs([~completelyAssertedCollection(ftRest)]))).
spft(~functorDeclares(ftRest), ttFormatType(ftRest), pt(ttFormatType(ftRest), rhs([{get_functor(ftRest, ftRest), functor(ftRest(A), ftRest, 1),  (\+predicate_property(ftRest(A), B)->kb_dynamic(ftRest/1);true), ftRest(A)=..[ftRest, A], nop(B),  (predicate_property(ftRest(A), dynamic)->true;show_pred_info(ftRest(A)))}, ~functorDeclares(ftRest), arity(ftRest, 1),  (ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}),  (isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))})]))).
spft(arity(ftRest, 1), ttFormatType(ftRest), pt(ttFormatType(ftRest), rhs([{get_functor(ftRest, ftRest), functor(ftRest(A), ftRest, 1),  (\+predicate_property(ftRest(A), B)->kb_dynamic(ftRest/1);true), ftRest(A)=..[ftRest, A], nop(B),  (predicate_property(ftRest(A), dynamic)->true;show_pred_info(ftRest(A)))}, ~functorDeclares(ftRest), arity(ftRest, 1),  (ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}),  (isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))})]))).
spft((ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}), ttFormatType(ftRest), pt(ttFormatType(ftRest), rhs([{get_functor(ftRest, ftRest), functor(ftRest(A), ftRest, 1),  (\+predicate_property(ftRest(A), B)->kb_dynamic(ftRest/1);true), ftRest(A)=..[ftRest, A], nop(B),  (predicate_property(ftRest(A), dynamic)->true;show_pred_info(ftRest(A)))}, ~functorDeclares(ftRest), arity(ftRest, 1),  (ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}),  (isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))})]))).
spft(mpred_mark(pfcLHS, p, ftRest, 1), s(((ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1065))), ax).
spft(arity(ftRest, 1), mpred_mark(pfcLHS, p, ftRest, 1), pt(mpred_mark(pfcLHS, p, ftRest, 1),  (ground(pfcLHS:p)->rhs([arity(ftRest, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftRest, 1), s(((ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1065))), ax).
spft(arity(ftRest, 1), mpred_mark(pfcPosTrigger, p, ftRest, 1), pt(mpred_mark(pfcPosTrigger, p, ftRest, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftRest, 1)])))).
spft(marker_supported(ftRest, 1), mpred_mark(pfcPosTrigger, p, ftRest, 1), pt(mpred_mark(pfcPosTrigger, p, ftRest, 1),  (ground(p:ftRest:1)->rhs([marker_supported(ftRest, 1)])))).
spft(hybrid_support(ftRest, 1), marker_supported(ftRest, 1), pt(marker_supported(ftRest, 1), rhs([hybrid_support(ftRest, 1)]))).
spft(prologHybrid(ftRest), hybrid_support(ftRest, 1), pt(hybrid_support(ftRest, 1),  (ftRest\='$VAR', atom(ftRest), integer(1), \+prologDynamic(ftRest), \+static_predicate(ftRest/1)->rhs([{functor(ftRest(A), ftRest, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftRest, baseKB:ftRest(A)), \+predicate_property(baseKB:ftRest(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftRest(A), exported);true), kb_dynamic(baseKB:ftRest/1), show_failure(hybrid_support, \+static_predicate(ftRest/1))}, prologHybrid(ftRest), arity(ftRest, 1)])))).
spft(pt(arity(ftRest, A), rhs([hybrid_support(ftRest, A)])), prologHybrid(ftRest), pt(prologHybrid(ftRest), pt(arity(ftRest, A), rhs([hybrid_support(ftRest, A)])))).
spft(hybrid_support(ftRest, 1), arity(ftRest, 1), pt(arity(ftRest, A), rhs([hybrid_support(ftRest, A)]))).
spft(hybrid_support(ftRest, 1), arity(ftRest, 1), pt(arity(ftRest, A), rhs([hybrid_support(ftRest, A)]))).
spft(arity(ftRest, 1), hybrid_support(ftRest, 1), pt(hybrid_support(ftRest, 1),  (ftRest\='$VAR', atom(ftRest), integer(1), \+prologDynamic(ftRest), \+static_predicate(ftRest/1)->rhs([{functor(ftRest(A), ftRest, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftRest, baseKB:ftRest(A)), \+predicate_property(baseKB:ftRest(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftRest(A), exported);true), kb_dynamic(baseKB:ftRest/1), show_failure(hybrid_support, \+static_predicate(ftRest/1))}, prologHybrid(ftRest), arity(ftRest, 1)])))).
spft(prologHybrid(ftRest), hybrid_support(ftRest, 1), pt(hybrid_support(ftRest, 1), rhs([prologHybrid(ftRest), arity(ftRest, 1)]))).
spft(arity(ftRest, 1), hybrid_support(ftRest, 1), pt(hybrid_support(ftRest, 1), rhs([prologHybrid(ftRest), arity(ftRest, 1)]))).
spft(pt(ftRest(A),  (predicate_property(ftRest(A), dynamic)->rhs([{ignore(retract(ftRest(A)))}]))),  (ftRest(B)/predicate_property(ftRest(B), dynamic)==>{ignore(retract(ftRest(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1065)).
spft((isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))}), ttFormatType(ftRest), pt(ttFormatType(ftRest), rhs([{get_functor(ftRest, ftRest), functor(ftRest(A), ftRest, 1),  (\+predicate_property(ftRest(A), B)->kb_dynamic(ftRest/1);true), ftRest(A)=..[ftRest, A], nop(B),  (predicate_property(ftRest(A), dynamic)->true;show_pred_info(ftRest(A)))}, ~functorDeclares(ftRest), arity(ftRest, 1),  (ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}),  (isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))})]))).
spft(pt(isa(A, ftRest), rhs([{ignore(retract(isa(A, ftRest)))}])),  (isa(B, ftRest)==>{ignore(retract(isa(B, ftRest)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1065)).
spft(quotedDefnIff(ftBoolean, is_boolean), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1066), ax).
spft(ttFormatType(ftBoolean), quotedDefnIff(ftBoolean, is_boolean), pt(quotedDefnIff(ftBoolean, is_boolean), rhs([ttFormatType(ftBoolean)]))).
spft(~completelyAssertedCollection(ftBoolean), ttFormatType(ftBoolean), pt(ttFormatType(ftBoolean), rhs([~completelyAssertedCollection(ftBoolean)]))).
spft(~functorDeclares(ftBoolean), ttFormatType(ftBoolean), pt(ttFormatType(ftBoolean), rhs([{get_functor(ftBoolean, ftBoolean), functor(ftBoolean(A), ftBoolean, 1),  (\+predicate_property(ftBoolean(A), B)->kb_dynamic(ftBoolean/1);true), ftBoolean(A)=..[ftBoolean, A], nop(B),  (predicate_property(ftBoolean(A), dynamic)->true;show_pred_info(ftBoolean(A)))}, ~functorDeclares(ftBoolean), arity(ftBoolean, 1),  (ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}),  (isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))})]))).
spft(arity(ftBoolean, 1), ttFormatType(ftBoolean), pt(ttFormatType(ftBoolean), rhs([{get_functor(ftBoolean, ftBoolean), functor(ftBoolean(A), ftBoolean, 1),  (\+predicate_property(ftBoolean(A), B)->kb_dynamic(ftBoolean/1);true), ftBoolean(A)=..[ftBoolean, A], nop(B),  (predicate_property(ftBoolean(A), dynamic)->true;show_pred_info(ftBoolean(A)))}, ~functorDeclares(ftBoolean), arity(ftBoolean, 1),  (ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}),  (isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))})]))).
spft((ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}), ttFormatType(ftBoolean), pt(ttFormatType(ftBoolean), rhs([{get_functor(ftBoolean, ftBoolean), functor(ftBoolean(A), ftBoolean, 1),  (\+predicate_property(ftBoolean(A), B)->kb_dynamic(ftBoolean/1);true), ftBoolean(A)=..[ftBoolean, A], nop(B),  (predicate_property(ftBoolean(A), dynamic)->true;show_pred_info(ftBoolean(A)))}, ~functorDeclares(ftBoolean), arity(ftBoolean, 1),  (ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}),  (isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))})]))).
spft(mpred_mark(pfcLHS, p, ftBoolean, 1), s(((ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1066))), ax).
spft(arity(ftBoolean, 1), mpred_mark(pfcLHS, p, ftBoolean, 1), pt(mpred_mark(pfcLHS, p, ftBoolean, 1),  (ground(pfcLHS:p)->rhs([arity(ftBoolean, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftBoolean, 1), s(((ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1066))), ax).
spft(arity(ftBoolean, 1), mpred_mark(pfcPosTrigger, p, ftBoolean, 1), pt(mpred_mark(pfcPosTrigger, p, ftBoolean, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftBoolean, 1)])))).
spft(marker_supported(ftBoolean, 1), mpred_mark(pfcPosTrigger, p, ftBoolean, 1), pt(mpred_mark(pfcPosTrigger, p, ftBoolean, 1),  (ground(p:ftBoolean:1)->rhs([marker_supported(ftBoolean, 1)])))).
spft(hybrid_support(ftBoolean, 1), marker_supported(ftBoolean, 1), pt(marker_supported(ftBoolean, 1), rhs([hybrid_support(ftBoolean, 1)]))).
spft(prologHybrid(ftBoolean), hybrid_support(ftBoolean, 1), pt(hybrid_support(ftBoolean, 1),  (ftBoolean\='$VAR', atom(ftBoolean), integer(1), \+prologDynamic(ftBoolean), \+static_predicate(ftBoolean/1)->rhs([{functor(ftBoolean(A), ftBoolean, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftBoolean, baseKB:ftBoolean(A)), \+predicate_property(baseKB:ftBoolean(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftBoolean(A), exported);true), kb_dynamic(baseKB:ftBoolean/1), show_failure(hybrid_support, \+static_predicate(ftBoolean/1))}, prologHybrid(ftBoolean), arity(ftBoolean, 1)])))).
spft(pt(arity(ftBoolean, A), rhs([hybrid_support(ftBoolean, A)])), prologHybrid(ftBoolean), pt(prologHybrid(ftBoolean), pt(arity(ftBoolean, A), rhs([hybrid_support(ftBoolean, A)])))).
spft(hybrid_support(ftBoolean, 1), arity(ftBoolean, 1), pt(arity(ftBoolean, A), rhs([hybrid_support(ftBoolean, A)]))).
spft(hybrid_support(ftBoolean, 1), arity(ftBoolean, 1), pt(arity(ftBoolean, A), rhs([hybrid_support(ftBoolean, A)]))).
spft(arity(ftBoolean, 1), hybrid_support(ftBoolean, 1), pt(hybrid_support(ftBoolean, 1),  (ftBoolean\='$VAR', atom(ftBoolean), integer(1), \+prologDynamic(ftBoolean), \+static_predicate(ftBoolean/1)->rhs([{functor(ftBoolean(A), ftBoolean, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftBoolean, baseKB:ftBoolean(A)), \+predicate_property(baseKB:ftBoolean(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftBoolean(A), exported);true), kb_dynamic(baseKB:ftBoolean/1), show_failure(hybrid_support, \+static_predicate(ftBoolean/1))}, prologHybrid(ftBoolean), arity(ftBoolean, 1)])))).
spft(prologHybrid(ftBoolean), hybrid_support(ftBoolean, 1), pt(hybrid_support(ftBoolean, 1), rhs([prologHybrid(ftBoolean), arity(ftBoolean, 1)]))).
spft(arity(ftBoolean, 1), hybrid_support(ftBoolean, 1), pt(hybrid_support(ftBoolean, 1), rhs([prologHybrid(ftBoolean), arity(ftBoolean, 1)]))).
spft(pt(ftBoolean(A),  (predicate_property(ftBoolean(A), dynamic)->rhs([{ignore(retract(ftBoolean(A)))}]))),  (ftBoolean(B)/predicate_property(ftBoolean(B), dynamic)==>{ignore(retract(ftBoolean(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1066)).
spft((isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))}), ttFormatType(ftBoolean), pt(ttFormatType(ftBoolean), rhs([{get_functor(ftBoolean, ftBoolean), functor(ftBoolean(A), ftBoolean, 1),  (\+predicate_property(ftBoolean(A), B)->kb_dynamic(ftBoolean/1);true), ftBoolean(A)=..[ftBoolean, A], nop(B),  (predicate_property(ftBoolean(A), dynamic)->true;show_pred_info(ftBoolean(A)))}, ~functorDeclares(ftBoolean), arity(ftBoolean, 1),  (ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}),  (isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))})]))).
spft(pt(isa(A, ftBoolean), rhs([{ignore(retract(isa(A, ftBoolean)))}])),  (isa(B, ftBoolean)==>{ignore(retract(isa(B, ftBoolean)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1066)).
spft(quotedDefnIff(ftText, is_string), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1067), ax).
spft(ttFormatType(ftText), quotedDefnIff(ftText, is_string), pt(quotedDefnIff(ftText, is_string), rhs([ttFormatType(ftText)]))).
spft(~completelyAssertedCollection(ftText), ttFormatType(ftText), pt(ttFormatType(ftText), rhs([~completelyAssertedCollection(ftText)]))).
spft(~functorDeclares(ftText), ttFormatType(ftText), pt(ttFormatType(ftText), rhs([{get_functor(ftText, ftText), functor(ftText(A), ftText, 1),  (\+predicate_property(ftText(A), B)->kb_dynamic(ftText/1);true), ftText(A)=..[ftText, A], nop(B),  (predicate_property(ftText(A), dynamic)->true;show_pred_info(ftText(A)))}, ~functorDeclares(ftText), arity(ftText, 1),  (ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}),  (isa(A, ftText)==>{ignore(retract(isa(A, ftText)))})]))).
spft(arity(ftText, 1), ttFormatType(ftText), pt(ttFormatType(ftText), rhs([{get_functor(ftText, ftText), functor(ftText(A), ftText, 1),  (\+predicate_property(ftText(A), B)->kb_dynamic(ftText/1);true), ftText(A)=..[ftText, A], nop(B),  (predicate_property(ftText(A), dynamic)->true;show_pred_info(ftText(A)))}, ~functorDeclares(ftText), arity(ftText, 1),  (ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}),  (isa(A, ftText)==>{ignore(retract(isa(A, ftText)))})]))).
spft((ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}), ttFormatType(ftText), pt(ttFormatType(ftText), rhs([{get_functor(ftText, ftText), functor(ftText(A), ftText, 1),  (\+predicate_property(ftText(A), B)->kb_dynamic(ftText/1);true), ftText(A)=..[ftText, A], nop(B),  (predicate_property(ftText(A), dynamic)->true;show_pred_info(ftText(A)))}, ~functorDeclares(ftText), arity(ftText, 1),  (ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}),  (isa(A, ftText)==>{ignore(retract(isa(A, ftText)))})]))).
spft(mpred_mark(pfcLHS, p, ftText, 1), s(((ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1067))), ax).
spft(arity(ftText, 1), mpred_mark(pfcLHS, p, ftText, 1), pt(mpred_mark(pfcLHS, p, ftText, 1),  (ground(pfcLHS:p)->rhs([arity(ftText, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ftText, 1), s(((ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1067))), ax).
spft(arity(ftText, 1), mpred_mark(pfcPosTrigger, p, ftText, 1), pt(mpred_mark(pfcPosTrigger, p, ftText, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ftText, 1)])))).
spft(marker_supported(ftText, 1), mpred_mark(pfcPosTrigger, p, ftText, 1), pt(mpred_mark(pfcPosTrigger, p, ftText, 1),  (ground(p:ftText:1)->rhs([marker_supported(ftText, 1)])))).
spft(hybrid_support(ftText, 1), marker_supported(ftText, 1), pt(marker_supported(ftText, 1), rhs([hybrid_support(ftText, 1)]))).
spft(prologHybrid(ftText), hybrid_support(ftText, 1), pt(hybrid_support(ftText, 1),  (ftText\='$VAR', atom(ftText), integer(1), \+prologDynamic(ftText), \+static_predicate(ftText/1)->rhs([{functor(ftText(A), ftText, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftText, baseKB:ftText(A)), \+predicate_property(baseKB:ftText(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftText(A), exported);true), kb_dynamic(baseKB:ftText/1), show_failure(hybrid_support, \+static_predicate(ftText/1))}, prologHybrid(ftText), arity(ftText, 1)])))).
spft(pt(arity(ftText, A), rhs([hybrid_support(ftText, A)])), prologHybrid(ftText), pt(prologHybrid(ftText), pt(arity(ftText, A), rhs([hybrid_support(ftText, A)])))).
spft(hybrid_support(ftText, 1), arity(ftText, 1), pt(arity(ftText, A), rhs([hybrid_support(ftText, A)]))).
spft(hybrid_support(ftText, 1), arity(ftText, 1), pt(arity(ftText, A), rhs([hybrid_support(ftText, A)]))).
spft(arity(ftText, 1), hybrid_support(ftText, 1), pt(hybrid_support(ftText, 1),  (ftText\='$VAR', atom(ftText), integer(1), \+prologDynamic(ftText), \+static_predicate(ftText/1)->rhs([{functor(ftText(A), ftText, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ftText, baseKB:ftText(A)), \+predicate_property(baseKB:ftText(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ftText(A), exported);true), kb_dynamic(baseKB:ftText/1), show_failure(hybrid_support, \+static_predicate(ftText/1))}, prologHybrid(ftText), arity(ftText, 1)])))).
spft(prologHybrid(ftText), hybrid_support(ftText, 1), pt(hybrid_support(ftText, 1), rhs([prologHybrid(ftText), arity(ftText, 1)]))).
spft(arity(ftText, 1), hybrid_support(ftText, 1), pt(hybrid_support(ftText, 1), rhs([prologHybrid(ftText), arity(ftText, 1)]))).
spft(pt(ftText(A),  (predicate_property(ftText(A), dynamic)->rhs([{ignore(retract(ftText(A)))}]))),  (ftText(B)/predicate_property(ftText(B), dynamic)==>{ignore(retract(ftText(B)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1067)).
spft((isa(A, ftText)==>{ignore(retract(isa(A, ftText)))}), ttFormatType(ftText), pt(ttFormatType(ftText), rhs([{get_functor(ftText, ftText), functor(ftText(A), ftText, 1),  (\+predicate_property(ftText(A), B)->kb_dynamic(ftText/1);true), ftText(A)=..[ftText, A], nop(B),  (predicate_property(ftText(A), dynamic)->true;show_pred_info(ftText(A)))}, ~functorDeclares(ftText), arity(ftText, 1),  (ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}),  (isa(A, ftText)==>{ignore(retract(isa(A, ftText)))})]))).
spft(pt(isa(A, ftText), rhs([{ignore(retract(isa(A, ftText)))}])),  (isa(B, ftText)==>{ignore(retract(isa(B, ftText)))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1067)).
spft((quotedDefnIff(ftRest(A), is_rest_of(A)):-cwc, is_ftNonvar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1068), ax).
spft((quotedDefnIff(ftListFn(A), is_list_of(A)):-cwc, is_ftNonvar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1069), ax).
spft((quotedDefnIff(ftCodeIs(A), A):-cwc, is_ftNonvar(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1070), ax).
spft(tCol(ptBinaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1081), ax).
spft(arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate), pt(tCol(ptBinaryPredicate),  (atom(ptBinaryPredicate), ptBinaryPredicate(A)=..[ptBinaryPredicate, A]->rhs([{decl_type(ptBinaryPredicate)}, arity(ptBinaryPredicate, 1), mpred_univ(ptBinaryPredicate, A, ptBinaryPredicate(A))])))).
spft(mpred_univ(ptBinaryPredicate, A, ptBinaryPredicate(A)), tCol(ptBinaryPredicate), pt(tCol(ptBinaryPredicate),  (atom(ptBinaryPredicate), ptBinaryPredicate(A)=..[ptBinaryPredicate, A]->rhs([{decl_type(ptBinaryPredicate)}, arity(ptBinaryPredicate, 1), mpred_univ(ptBinaryPredicate, A, ptBinaryPredicate(A))])))).
spft((ptBinaryPredicate(A):-cwc, lazy(\+ ~ptBinaryPredicate(A)), isa_backchaing(A, ptBinaryPredicate)), tCol(ptBinaryPredicate), pt(tCol(ptBinaryPredicate),  (atom(ptBinaryPredicate), ptBinaryPredicate(A)=..[ptBinaryPredicate, A], \+static_predicate(ptBinaryPredicate/1), \+completelyAssertedCollection(ptBinaryPredicate)->rhs([(ptBinaryPredicate(A):-cwc, lazy(\+ ~ptBinaryPredicate(A)), isa_backchaing(A, ptBinaryPredicate))])))).
spft(arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate), pt(tCol(ptBinaryPredicate), rhs([arity(ptBinaryPredicate, 1)]))).
spft(tried_guess_types_from_name(ptBinaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1081), ax).
spft(ttPredType(ptBinaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1082), ax).
spft(tCol(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([tCol(ptBinaryPredicate)]))).
spft(arity(ptBinaryPredicate, 1), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate),  (atom(ptBinaryPredicate)->rhs([arity(ptBinaryPredicate, 1), pfcControlled(ptBinaryPredicate)])))).
spft(pfcControlled(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate),  (atom(ptBinaryPredicate)->rhs([arity(ptBinaryPredicate, 1), pfcControlled(ptBinaryPredicate)])))).
spft(pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)])), pfcControlled(ptBinaryPredicate), pt(pfcControlled(ptBinaryPredicate), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)])))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(prologHybrid(ptBinaryPredicate), hybrid_support(ptBinaryPredicate, 1), pt(hybrid_support(ptBinaryPredicate, 1),  (ptBinaryPredicate\='$VAR', atom(ptBinaryPredicate), integer(1), \+prologDynamic(ptBinaryPredicate), \+static_predicate(ptBinaryPredicate/1)->rhs([{functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ptBinaryPredicate, baseKB:ptBinaryPredicate(A)), \+predicate_property(baseKB:ptBinaryPredicate(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ptBinaryPredicate(A), exported);true), kb_dynamic(baseKB:ptBinaryPredicate/1), show_failure(hybrid_support, \+static_predicate(ptBinaryPredicate/1))}, prologHybrid(ptBinaryPredicate), arity(ptBinaryPredicate, 1)])))).
spft(pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)])), prologHybrid(ptBinaryPredicate), pt(prologHybrid(ptBinaryPredicate), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)])))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(arity(ptBinaryPredicate, 1), hybrid_support(ptBinaryPredicate, 1), pt(hybrid_support(ptBinaryPredicate, 1),  (ptBinaryPredicate\='$VAR', atom(ptBinaryPredicate), integer(1), \+prologDynamic(ptBinaryPredicate), \+static_predicate(ptBinaryPredicate/1)->rhs([{functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(ptBinaryPredicate, baseKB:ptBinaryPredicate(A)), \+predicate_property(baseKB:ptBinaryPredicate(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:ptBinaryPredicate(A), exported);true), kb_dynamic(baseKB:ptBinaryPredicate/1), show_failure(hybrid_support, \+static_predicate(ptBinaryPredicate/1))}, prologHybrid(ptBinaryPredicate), arity(ptBinaryPredicate, 1)])))).
spft(prologHybrid(ptBinaryPredicate), hybrid_support(ptBinaryPredicate, 1), pt(hybrid_support(ptBinaryPredicate, 1), rhs([prologHybrid(ptBinaryPredicate), arity(ptBinaryPredicate, 1)]))).
spft(arity(ptBinaryPredicate, 1), hybrid_support(ptBinaryPredicate, 1), pt(hybrid_support(ptBinaryPredicate, 1), rhs([prologHybrid(ptBinaryPredicate), arity(ptBinaryPredicate, 1)]))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(hybrid_support(ptBinaryPredicate, 1), arity(ptBinaryPredicate, 1), pt(arity(ptBinaryPredicate, A), rhs([hybrid_support(ptBinaryPredicate, A)]))).
spft(support_hilog(ptBinaryPredicate, 1), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate),  (atom(ptBinaryPredicate)->rhs([support_hilog(ptBinaryPredicate, 1)])))).
spft(hybrid_support(ptBinaryPredicate, 1), support_hilog(ptBinaryPredicate, 1), pt(support_hilog(ptBinaryPredicate, 1),  (ptBinaryPredicate\='$VAR', atom(ptBinaryPredicate), integer(1), \+static_predicate(ptBinaryPredicate/1), \+prologDynamic(ptBinaryPredicate)->rhs([hybrid_support(ptBinaryPredicate, 1), {A=arity(ptBinaryPredicate, 1)}, A])))).
spft(arity(ptBinaryPredicate, 1), support_hilog(ptBinaryPredicate, 1), pt(support_hilog(ptBinaryPredicate, 1),  (ptBinaryPredicate\='$VAR', atom(ptBinaryPredicate), integer(1), \+static_predicate(ptBinaryPredicate/1), \+prologDynamic(ptBinaryPredicate)->rhs([hybrid_support(ptBinaryPredicate, 1), {arity(ptBinaryPredicate, 1)=arity(ptBinaryPredicate, 1)}, arity(ptBinaryPredicate, 1)])))).
spft(tSet(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([tSet(ptBinaryPredicate), completelyAssertedCollection(ptBinaryPredicate)]))).
spft(completelyAssertedCollection(ptBinaryPredicate), tSet(ptBinaryPredicate), pt(tSet(ptBinaryPredicate), rhs([completelyAssertedCollection(ptBinaryPredicate)]))).
spft(tCol(ptBinaryPredicate), completelyAssertedCollection(ptBinaryPredicate), pt(completelyAssertedCollection(ptBinaryPredicate), rhs([tCol(ptBinaryPredicate)]))).
spft(completeExtentAsserted(ptBinaryPredicate), completelyAssertedCollection(ptBinaryPredicate), pt(completelyAssertedCollection(ptBinaryPredicate), rhs([completeExtentAsserted(ptBinaryPredicate)]))).
spft(functorDeclares(ptBinaryPredicate), tSet(ptBinaryPredicate), pt(tSet(ptBinaryPredicate), rhs([{atom(ptBinaryPredicate), functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (\+predicate_property(ptBinaryPredicate(A), B)->kb_dynamic(ptBinaryPredicate/1);true), ptBinaryPredicate(A)=..[ptBinaryPredicate, A], nop(B:A),  (predicate_property(ptBinaryPredicate(A), dynamic)->true;show_pred_info(ptBinaryPredicate(A)))}, functorDeclares(ptBinaryPredicate), pfcControlled(ptBinaryPredicate), arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate)]))).
spft(tSet(ptBinaryPredicate), functorDeclares(ptBinaryPredicate), pt(functorDeclares(ptBinaryPredicate), rhs([tSet(ptBinaryPredicate)]))).
spft(tCol(ptBinaryPredicate), functorDeclares(ptBinaryPredicate), pt(functorDeclares(ptBinaryPredicate), rhs([tCol(ptBinaryPredicate)]))).
spft(pfcControlled(ptBinaryPredicate), tSet(ptBinaryPredicate), pt(tSet(ptBinaryPredicate), rhs([{atom(ptBinaryPredicate), functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (\+predicate_property(ptBinaryPredicate(A), B)->kb_dynamic(ptBinaryPredicate/1);true), ptBinaryPredicate(A)=..[ptBinaryPredicate, A], nop(B:A),  (predicate_property(ptBinaryPredicate(A), dynamic)->true;show_pred_info(ptBinaryPredicate(A)))}, functorDeclares(ptBinaryPredicate), pfcControlled(ptBinaryPredicate), arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate)]))).
spft(arity(ptBinaryPredicate, 1), tSet(ptBinaryPredicate), pt(tSet(ptBinaryPredicate), rhs([{atom(ptBinaryPredicate), functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (\+predicate_property(ptBinaryPredicate(A), B)->kb_dynamic(ptBinaryPredicate/1);true), ptBinaryPredicate(A)=..[ptBinaryPredicate, A], nop(B:A),  (predicate_property(ptBinaryPredicate(A), dynamic)->true;show_pred_info(ptBinaryPredicate(A)))}, functorDeclares(ptBinaryPredicate), pfcControlled(ptBinaryPredicate), arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate)]))).
spft(tCol(ptBinaryPredicate), tSet(ptBinaryPredicate), pt(tSet(ptBinaryPredicate), rhs([{atom(ptBinaryPredicate), functor(ptBinaryPredicate(A), ptBinaryPredicate, 1),  (\+predicate_property(ptBinaryPredicate(A), B)->kb_dynamic(ptBinaryPredicate/1);true), ptBinaryPredicate(A)=..[ptBinaryPredicate, A], nop(B:A),  (predicate_property(ptBinaryPredicate(A), dynamic)->true;show_pred_info(ptBinaryPredicate(A)))}, functorDeclares(ptBinaryPredicate), pfcControlled(ptBinaryPredicate), arity(ptBinaryPredicate, 1), tCol(ptBinaryPredicate)]))).
spft(completelyAssertedCollection(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([tSet(ptBinaryPredicate), completelyAssertedCollection(ptBinaryPredicate)]))).
spft(completelyAssertedCollection(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([completelyAssertedCollection(ptBinaryPredicate)]))).
spft(functorDeclares(ptBinaryPredicate), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([functorDeclares(ptBinaryPredicate)]))).
spft((ptBinaryPredicate(A):-cwc, is_ftCompound(A), get_functor(A, B), call(ptBinaryPredicate, B)), ttPredType(ptBinaryPredicate), pt(ttPredType(ptBinaryPredicate), rhs([{atom(ptBinaryPredicate), ptBinaryPredicate(A)=..[ptBinaryPredicate, A]},  (ptBinaryPredicate(A):-cwc, is_ftCompound(A), get_functor(A, B), call(ptBinaryPredicate, B))]))).
spft(tCol(ptUnaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1084), ax).
spft(arity(ptUnaryPredicate, 1), tCol(ptUnaryPredicate), pt(tCol(ptUnaryPredicate),  (atom(ptUnaryPredicate), ptUnaryPredicate(A)=..[ptUnaryPredicate, A]->rhs([{decl_type(ptUnaryPredicate)}, arity(ptUnaryPredicate, 1), mpred_univ(ptUnaryPredicate, A, ptUnaryPredicate(A))])))).
spft(mpred_univ(ptUnaryPredicate, A, ptUnaryPredicate(A)), tCol(ptUnaryPredicate), pt(tCol(ptUnaryPredicate),  (atom(ptUnaryPredicate), ptUnaryPredicate(A)=..[ptUnaryPredicate, A]->rhs([{decl_type(ptUnaryPredicate)}, arity(ptUnaryPredicate, 1), mpred_univ(ptUnaryPredicate, A, ptUnaryPredicate(A))])))).
spft((ptUnaryPredicate(A):-cwc, lazy(\+ ~ptUnaryPredicate(A)), isa_backchaing(A, ptUnaryPredicate)), tCol(ptUnaryPredicate), pt(tCol(ptUnaryPredicate),  (atom(ptUnaryPredicate), ptUnaryPredicate(A)=..[ptUnaryPredicate, A], \+static_predicate(ptUnaryPredicate/1), \+completelyAssertedCollection(ptUnaryPredicate)->rhs([(ptUnaryPredicate(A):-cwc, lazy(\+ ~ptUnaryPredicate(A)), isa_backchaing(A, ptUnaryPredicate))])))).
spft(arity(ptUnaryPredicate, 1), tCol(ptUnaryPredicate), pt(tCol(ptUnaryPredicate), rhs([arity(ptUnaryPredicate, 1)]))).
spft(tried_guess_types_from_name(ptUnaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1084), ax).
spft(ptBinaryPredicate(arity), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1086), ax).
spft((pfcControlled(A)/ (get_arity(A, B, C), arity(B, C))==>support_hilog(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1089), ax).
spft(mpred_mark(pfcCallCode, p, get_arity, 3), s(((pfcControlled(A)/ (get_arity(A, B, C), arity(B, C))==>support_hilog(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1089))), ax).
spft(arity(get_arity, 3), mpred_mark(pfcCallCode, p, get_arity, 3), pt(mpred_mark(pfcCallCode, p, get_arity, 3),  (ground(pfcCallCode:p)->rhs([arity(get_arity, 3)])))).
spft(pt(pfcControlled(A),  (get_arity(A, B, C), arity(B, C)->rhs([support_hilog(B, C)]))),  (pfcControlled(D)/ (get_arity(D, E, F), arity(E, F))==>support_hilog(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1089)).
spft((pfcControlled(A)/has_functor(A)==>{kb_dynamic(A), get_functor(A, B, C)}, arity(B, C), pfcControlled(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1091), ax).
spft(mpred_mark(pfcCallCode, p, has_functor, 1), s(((pfcControlled(A)/has_functor(A)==>{kb_dynamic(A), get_functor(A, B, C)}, arity(B, C), pfcControlled(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1091))), ax).
spft(arity(has_functor, 1), mpred_mark(pfcCallCode, p, has_functor, 1), pt(mpred_mark(pfcCallCode, p, has_functor, 1),  (ground(pfcCallCode:p)->rhs([arity(has_functor, 1)])))).
spft(pt(pfcControlled(A),  (has_functor(A)->rhs([{kb_dynamic(A), get_functor(A, B, C)}, arity(B, C), pfcControlled(B)]))),  (pfcControlled(D)/has_functor(D)==>{kb_dynamic(D), get_functor(D, E, F)}, arity(E, F), pfcControlled(E)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1091)).
spft((pfcMustFC(A)==>pfcControlled(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1092), ax).
spft(mpred_mark(pfcLHS, p, pfcMustFC, 1), s(((pfcMustFC(A)==>pfcControlled(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1092))), ax).
spft(arity(pfcMustFC, 1), mpred_mark(pfcLHS, p, pfcMustFC, 1), pt(mpred_mark(pfcLHS, p, pfcMustFC, 1),  (ground(pfcLHS:p)->rhs([arity(pfcMustFC, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, pfcMustFC, 1), s(((pfcMustFC(A)==>pfcControlled(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1092))), ax).
spft(arity(pfcMustFC, 1), mpred_mark(pfcPosTrigger, p, pfcMustFC, 1), pt(mpred_mark(pfcPosTrigger, p, pfcMustFC, 1),  (ground(pfcPosTrigger:p)->rhs([arity(pfcMustFC, 1)])))).
spft(marker_supported(pfcMustFC, 1), mpred_mark(pfcPosTrigger, p, pfcMustFC, 1), pt(mpred_mark(pfcPosTrigger, p, pfcMustFC, 1),  (ground(p:pfcMustFC:1)->rhs([marker_supported(pfcMustFC, 1)])))).
spft(hybrid_support(pfcMustFC, 1), marker_supported(pfcMustFC, 1), pt(marker_supported(pfcMustFC, 1), rhs([hybrid_support(pfcMustFC, 1)]))).
spft(pt(pfcMustFC(A), rhs([pfcControlled(A)])),  (pfcMustFC(B)==>pfcControlled(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1092)).
spft((tCol(A), ~ttFormatType(A)==>tSet(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1094), ax).
spft(mpred_mark(pfcLHS, n, ttFormatType, 1), s(((tCol(A), ~ttFormatType(A)==>tSet(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1094))), ax).
spft(arity(ttFormatType, 1), mpred_mark(pfcLHS, n, ttFormatType, 1), pt(mpred_mark(pfcLHS, n, ttFormatType, 1),  (ground(pfcLHS:n)->rhs([arity(ttFormatType, 1)])))).
spft(pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)]))),  (tCol(B), ~ttFormatType(B)==>tSet(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1094)).
spft(mpred_mark(pfcPosTrigger, n, ttFormatType, 1), s((tCol(ttValueType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)]))))), ax).
spft(arity(ttFormatType, 1), mpred_mark(pfcPosTrigger, n, ttFormatType, 1), pt(mpred_mark(pfcPosTrigger, n, ttFormatType, 1),  (ground(pfcPosTrigger:n)->rhs([arity(ttFormatType, 1)])))).
spft(marker_supported(ttFormatType, 1), mpred_mark(pfcPosTrigger, n, ttFormatType, 1), pt(mpred_mark(pfcPosTrigger, n, ttFormatType, 1),  (ground(n:ttFormatType:1)->rhs([marker_supported(ttFormatType, 1)])))).
spft(pt(~ttFormatType(ttValueType), rhs([tSet(ttValueType)])), tCol(ttValueType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tNotForUnboundPredicates), rhs([tSet(tNotForUnboundPredicates)])), tCol(tNotForUnboundPredicates), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(completelyAssertedCollection), rhs([tSet(completelyAssertedCollection)])), tCol(completelyAssertedCollection), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologNegByFailure), rhs([tSet(prologNegByFailure)])), tCol(prologNegByFailure), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tCol), rhs([tSet(tCol)])), tCol(tCol), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tSpec), rhs([tSet(tSpec)])), tCol(tSpec), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttFormatType), rhs([tSet(ttFormatType)])), tCol(ttFormatType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tSet), rhs([tSet(tSet)])), tCol(tSet), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tRelation), rhs([tSet(tRelation)])), tCol(tRelation), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tPred), rhs([tSet(tPred)])), tCol(tPred), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tFunction), rhs([tSet(tFunction)])), tCol(tFunction), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologMacroHead), rhs([tSet(prologMacroHead)])), tCol(prologMacroHead), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttPredType), rhs([tSet(ttPredType)])), tCol(ttPredType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(functorDeclares), rhs([tSet(functorDeclares)])), tCol(functorDeclares), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologMultiValued), rhs([tSet(prologMultiValued)])), tCol(prologMultiValued), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologOrdered), rhs([tSet(prologOrdered)])), tCol(prologOrdered), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(predIsFlag), rhs([tSet(predIsFlag)])), tCol(predIsFlag), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttNonGenled), rhs([tSet(ttNonGenled)])), tCol(ttNonGenled), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(meta_argtypes), rhs([tSet(meta_argtypes)])), tCol(meta_argtypes), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologHybrid), rhs([tSet(prologHybrid)])), tCol(prologHybrid), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologPTTP), rhs([tSet(prologPTTP)])), tCol(prologPTTP), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologDynamic), rhs([tSet(prologDynamic)])), tCol(prologDynamic), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologKIF), rhs([tSet(prologKIF)])), tCol(prologKIF), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologBuiltin), rhs([tSet(prologBuiltin)])), tCol(prologBuiltin), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologListValued), rhs([tSet(prologListValued)])), tCol(prologListValued), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologSingleValued), rhs([tSet(prologSingleValued)])), tCol(prologSingleValued), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcControlled), rhs([tSet(pfcControlled)])), tCol(pfcControlled), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(predCanHaveSingletons), rhs([tSet(predCanHaveSingletons)])), tCol(predCanHaveSingletons), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tTemporalThing), rhs([tSet(tTemporalThing)])), tCol(tTemporalThing), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologSideEffects), rhs([tSet(prologSideEffects)])), tCol(prologSideEffects), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tInferInstanceFromArgType), rhs([tSet(tInferInstanceFromArgType)])), tCol(tInferInstanceFromArgType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttNotTemporalType), rhs([tSet(ttNotTemporalType)])), tCol(ttNotTemporalType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttSpatialType), rhs([tSet(ttSpatialType)])), tCol(ttSpatialType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttTemporalType), rhs([tSet(ttTemporalType)])), tCol(ttTemporalType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttTypeType), rhs([tSet(ttTypeType)])), tCol(ttTypeType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttUnverifiableType), rhs([tSet(ttUnverifiableType)])), tCol(ttUnverifiableType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcDatabaseTerm), rhs([tSet(pfcDatabaseTerm)])), tCol(pfcDatabaseTerm), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcWatched), rhs([tSet(pfcWatched)])), tCol(pfcWatched), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcCreates), rhs([tSet(pfcCreates)])), tCol(pfcCreates), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcNegTrigger), rhs([tSet(pfcNegTrigger)])), tCol(pfcNegTrigger), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcPosTrigger), rhs([tSet(pfcPosTrigger)])), tCol(pfcPosTrigger), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcBcTrigger), rhs([tSet(pfcBcTrigger)])), tCol(pfcBcTrigger), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcRHS), rhs([tSet(pfcRHS)])), tCol(pfcRHS), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(pfcMustFC), rhs([tSet(pfcMustFC)])), tCol(pfcMustFC), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(notAssertable), rhs([tSet(notAssertable)])), tCol(notAssertable), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(prologEquality), rhs([tSet(prologEquality)])), tCol(prologEquality), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(tSet(prologEquality), ~ttFormatType(prologEquality), pt(~ttFormatType(prologEquality), rhs([tSet(prologEquality)]))).
spft(pt(~ttFormatType(ftInt), rhs([tSet(ftInt)])), tCol(ftInt), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(vtDirection), rhs([tSet(vtDirection)])), tCol(vtDirection), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(completeIsaAsserted), rhs([tSet(completeIsaAsserted)])), tCol(completeIsaAsserted), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tFormatType), rhs([tSet(tFormatType)])), tCol(tFormatType), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tSpatialThing), rhs([tSet(tSpatialThing)])), tCol(tSpatialThing), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(completeExtentAsserted), rhs([tSet(completeExtentAsserted)])), tCol(completeExtentAsserted), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(vtValue), rhs([tSet(vtValue)])), tCol(vtValue), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(vtColor), rhs([tSet(vtColor)])), tCol(vtColor), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tAvoidForwardChain), rhs([tSet(tAvoidForwardChain)])), tCol(tAvoidForwardChain), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType('SententialOperator'), rhs([tSet('SententialOperator')])), tCol('SententialOperator'), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(tNewlyCreated), rhs([tSet(tNewlyCreated)])), tCol(tNewlyCreated), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ttTypeFacet), rhs([tSet(ttTypeFacet)])), tCol(ttTypeFacet), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ptBinaryPredicate), rhs([tSet(ptBinaryPredicate)])), tCol(ptBinaryPredicate), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft(pt(~ttFormatType(ptUnaryPredicate), rhs([tSet(ptUnaryPredicate)])), tCol(ptUnaryPredicate), pt(tCol(A), pt(~ttFormatType(A), rhs([tSet(A)])))).
spft((prologHybrid(A)/has_functor(A)==>{kb_dynamic(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1096), ax).
spft(pt(prologHybrid(A),  (has_functor(A)->rhs([{kb_dynamic(A)}]))),  (prologHybrid(B)/has_functor(B)==>{kb_dynamic(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1096)).
spft((prologDynamic(A)/has_functor(A)==>{decl_mpred_prolog(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1097), ax).
spft(mpred_mark(pfcLHS, p, prologDynamic, 1), s(((prologDynamic(A)/has_functor(A)==>{decl_mpred_prolog(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1097))), ax).
spft(arity(prologDynamic, 1), mpred_mark(pfcLHS, p, prologDynamic, 1), pt(mpred_mark(pfcLHS, p, prologDynamic, 1),  (ground(pfcLHS:p)->rhs([arity(prologDynamic, 1)])))).
spft(mpred_mark(pfcCallCode, p, decl_mpred_prolog, 1), s(((prologDynamic(A)/has_functor(A)==>{decl_mpred_prolog(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1097))), ax).
spft(arity(decl_mpred_prolog, 1), mpred_mark(pfcCallCode, p, decl_mpred_prolog, 1), pt(mpred_mark(pfcCallCode, p, decl_mpred_prolog, 1),  (ground(pfcCallCode:p)->rhs([arity(decl_mpred_prolog, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, prologDynamic, 1), s(((prologDynamic(A)/has_functor(A)==>{decl_mpred_prolog(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1097))), ax).
spft(arity(prologDynamic, 1), mpred_mark(pfcPosTrigger, p, prologDynamic, 1), pt(mpred_mark(pfcPosTrigger, p, prologDynamic, 1),  (ground(pfcPosTrigger:p)->rhs([arity(prologDynamic, 1)])))).
spft(marker_supported(prologDynamic, 1), mpred_mark(pfcPosTrigger, p, prologDynamic, 1), pt(mpred_mark(pfcPosTrigger, p, prologDynamic, 1),  (ground(p:prologDynamic:1)->rhs([marker_supported(prologDynamic, 1)])))).
spft(hybrid_support(prologDynamic, 1), marker_supported(prologDynamic, 1), pt(marker_supported(prologDynamic, 1), rhs([hybrid_support(prologDynamic, 1)]))).
spft(pt(prologDynamic(A),  (has_functor(A)->rhs([{decl_mpred_prolog(A)}]))),  (prologDynamic(B)/has_functor(B)==>{decl_mpred_prolog(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1097)).
spft((prologBuiltin(A)/has_functor(A)==>{decl_mpred_prolog(A)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1098), ax).
spft(pt(prologBuiltin(A),  (has_functor(A)->rhs([{decl_mpred_prolog(A)}]))),  (prologBuiltin(B)/has_functor(B)==>{decl_mpred_prolog(B)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1098)).
spft((pfcControlled(A)/is_ftCompound(A)==>{once((A=B/C;get_functor(A, B, C))), kb_dynamic(B/C)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1099), ax).
spft(mpred_mark(pfcCallCode, p, once, 1), s(((pfcControlled(A)/is_ftCompound(A)==>{once((A=B/C;get_functor(A, B, C))), kb_dynamic(B/C)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1099))), ax).
spft(arity(once, 1), mpred_mark(pfcCallCode, p, once, 1), pt(mpred_mark(pfcCallCode, p, once, 1),  (ground(pfcCallCode:p)->rhs([arity(once, 1)])))).
spft(pt(pfcControlled(A),  (is_ftCompound(A)->rhs([{once((A=B/C;get_functor(A, B, C))), kb_dynamic(B/C)}]))),  (pfcControlled(D)/is_ftCompound(D)==>{once((D=E/F;get_functor(D, E, F))), kb_dynamic(E/F)}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1099)).
spft((pfcControlled(A)==>prologHybrid(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1102), ax).
spft(pt(pfcControlled(A), rhs([prologHybrid(A)])),  (pfcControlled(B)==>prologHybrid(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1102)).
spft(prologHybrid(pfcDatabaseTerm), pfcControlled(pfcDatabaseTerm), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcControlled), pfcControlled(pfcControlled), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologSingleValued), pfcControlled(prologSingleValued), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcWatched), pfcControlled(pfcWatched), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcCreates), pfcControlled(pfcCreates), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcNegTrigger), pfcControlled(pfcNegTrigger), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcPosTrigger), pfcControlled(pfcPosTrigger), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcBcTrigger), pfcControlled(pfcBcTrigger), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcRHS), pfcControlled(pfcRHS), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(pfcMustFC), pfcControlled(pfcMustFC), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(predCanHaveSingletons), pfcControlled(predCanHaveSingletons), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologSideEffects), pfcControlled(prologSideEffects), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(meta_argtypes), pfcControlled(meta_argtypes), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(predIsFlag), pfcControlled(predIsFlag), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(tPred), pfcControlled(tPred), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologMultiValued), pfcControlled(prologMultiValued), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologMacroHead), pfcControlled(prologMacroHead), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(notAssertable), pfcControlled(notAssertable), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologBuiltin), pfcControlled(prologBuiltin), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologDynamic), pfcControlled(prologDynamic), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologOrdered), pfcControlled(prologOrdered), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologNegByFailure), pfcControlled(prologNegByFailure), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologPTTP), pfcControlled(prologPTTP), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologKIF), pfcControlled(prologKIF), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologEquality), pfcControlled(prologEquality), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologHybrid), pfcControlled(prologHybrid), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(prologListValued), pfcControlled(prologListValued), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(genlPreds), pfcControlled(genlPreds), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(isa), pfcControlled(isa), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(argIsa), pfcControlled(argIsa), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(ttFormatType), pfcControlled(ttFormatType), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(tSet), pfcControlled(tSet), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(prologHybrid(ptBinaryPredicate), pfcControlled(ptBinaryPredicate), pt(pfcControlled(A), rhs([prologHybrid(A)]))).
spft(specialFunctor(\+), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1106), ax).
spft(specialFunctor(/), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1107), ax).
spft((arity(A, 2), tPred(A)<==>ptBinaryPredicate(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118), ax).
spft(mpred_mark(pfcCreates, p, ptBinaryPredicate, 1), s(((arity(A, 2), tPred(A)<==>ptBinaryPredicate(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118))), ax).
spft(arity(ptBinaryPredicate, 1), mpred_mark(pfcCreates, p, ptBinaryPredicate, 1), pt(mpred_mark(pfcCreates, p, ptBinaryPredicate, 1),  (ground(pfcCreates:p)->rhs([arity(ptBinaryPredicate, 1)])))).
spft(marker_supported(ptBinaryPredicate, 1), mpred_mark(pfcCreates, p, ptBinaryPredicate, 1), pt(mpred_mark(pfcCreates, p, ptBinaryPredicate, 1),  (ground(p:ptBinaryPredicate:1)->rhs([marker_supported(ptBinaryPredicate, 1)])))).
spft(hybrid_support(ptBinaryPredicate, 1), marker_supported(ptBinaryPredicate, 1), pt(marker_supported(ptBinaryPredicate, 1), rhs([hybrid_support(ptBinaryPredicate, 1)]))).
spft(pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)]))),  (arity(B, 2), tPred(B)<==>ptBinaryPredicate(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118)).
spft(pt(tPred(apathFn), rhs([ptBinaryPredicate(apathFn)])), arity(apathFn, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(isKappaFn), rhs([ptBinaryPredicate(isKappaFn)])), arity(isKappaFn, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(arity), rhs([ptBinaryPredicate(arity)])), arity(arity, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(arity), tPred(arity), pt(tPred(arity), rhs([ptBinaryPredicate(arity)]))).
spft(ptBinaryPredicate(arity), tPred(arity), pt(tPred(arity), rhs([ptBinaryPredicate(arity)]))).
spft(pt(tPred(<=>), rhs([ptBinaryPredicate(<=>)])), arity(<=>, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(mpred_select), rhs([ptBinaryPredicate(mpred_select)])), arity(mpred_select, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(mpred_select), tPred(mpred_select), pt(tPred(mpred_select), rhs([ptBinaryPredicate(mpred_select)]))).
spft(ptBinaryPredicate(mpred_select), tPred(mpred_select), pt(tPred(mpred_select), rhs([ptBinaryPredicate(mpred_select)]))).
spft(pt(tPred(pddlObjects), rhs([ptBinaryPredicate(pddlObjects)])), arity(pddlObjects, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(pddlObjects), tPred(pddlObjects), pt(tPred(pddlObjects), rhs([ptBinaryPredicate(pddlObjects)]))).
spft(pt(tPred(genls), rhs([ptBinaryPredicate(genls)])), arity(genls, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(genls), tPred(genls), pt(tPred(genls), rhs([ptBinaryPredicate(genls)]))).
spft(ptBinaryPredicate(genls), tPred(genls), pt(tPred(genls), rhs([ptBinaryPredicate(genls)]))).
spft(pt(tPred(type_prefix), rhs([ptBinaryPredicate(type_prefix)])), arity(type_prefix, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(mpred_do_and_undo_method), rhs([ptBinaryPredicate(mpred_do_and_undo_method)])), arity(mpred_do_and_undo_method, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(mpred_do_and_undo_method), tPred(mpred_do_and_undo_method), pt(tPred(mpred_do_and_undo_method), rhs([ptBinaryPredicate(mpred_do_and_undo_method)]))).
spft(pt(tPred(>), rhs([ptBinaryPredicate(>)])), arity(>, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(support_hilog), rhs([ptBinaryPredicate(support_hilog)])), arity(support_hilog, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(support_hilog), tPred(support_hilog), pt(tPred(support_hilog), rhs([ptBinaryPredicate(support_hilog)]))).
spft(pt(tPred(\=), rhs([ptBinaryPredicate(\=)])), arity(\=, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(hybrid_support), rhs([ptBinaryPredicate(hybrid_support)])), arity(hybrid_support, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(hybrid_support), tPred(hybrid_support), pt(tPred(hybrid_support), rhs([ptBinaryPredicate(hybrid_support)]))).
spft(pt(tPred(=), rhs([ptBinaryPredicate(=)])), arity(=, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(=), tPred(=), pt(tPred(=), rhs([ptBinaryPredicate(=)]))).
spft(ptBinaryPredicate(=), tPred(=), pt(tPred(=), rhs([ptBinaryPredicate(=)]))).
spft(pt(tPred(->), rhs([ptBinaryPredicate(->)])), arity(->, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(show_failure), rhs([ptBinaryPredicate(show_failure)])), arity(show_failure, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(predicate_property), rhs([ptBinaryPredicate(predicate_property)])), arity(predicate_property, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(marker_supported), rhs([ptBinaryPredicate(marker_supported)])), arity(marker_supported, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(marker_supported), tPred(marker_supported), pt(tPred(marker_supported), rhs([ptBinaryPredicate(marker_supported)]))).
spft(pt(tPred(predicate_is_undefined_fa), rhs([ptBinaryPredicate(predicate_is_undefined_fa)])), arity(predicate_is_undefined_fa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(\==), rhs([ptBinaryPredicate(\==)])), arity(\==, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)])), arity(genlPreds, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(genlPreds), tPred(genlPreds), pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)]))).
spft(ptBinaryPredicate(genlPreds), tPred(genlPreds), pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)]))).
spft(ptBinaryPredicate(genlPreds), tPred(genlPreds), pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)]))).
spft(ptBinaryPredicate(genlPreds), tPred(genlPreds), pt(tPred(genlPreds), rhs([ptBinaryPredicate(genlPreds)]))).
spft(pt(tPred(=..), rhs([ptBinaryPredicate(=..)])), arity(=.., 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(isa_backchaing), rhs([ptBinaryPredicate(isa_backchaing)])), arity(isa_backchaing, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(get_functor), rhs([ptBinaryPredicate(get_functor)])), arity(get_functor, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(call), rhs([ptBinaryPredicate(call)])), arity(call, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(pddlSomethingIsa), rhs([ptBinaryPredicate(pddlSomethingIsa)])), arity(pddlSomethingIsa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(pddlSomethingIsa), tPred(pddlSomethingIsa), pt(tPred(pddlSomethingIsa), rhs([ptBinaryPredicate(pddlSomethingIsa)]))).
spft(ptBinaryPredicate(pddlSomethingIsa), tPred(pddlSomethingIsa), pt(tPred(pddlSomethingIsa), rhs([ptBinaryPredicate(pddlSomethingIsa)]))).
spft(pt(tPred(disjointWith), rhs([ptBinaryPredicate(disjointWith)])), arity(disjointWith, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(disjointWith), tPred(disjointWith), pt(tPred(disjointWith), rhs([ptBinaryPredicate(disjointWith)]))).
spft(ptBinaryPredicate(disjointWith), tPred(disjointWith), pt(tPred(disjointWith), rhs([ptBinaryPredicate(disjointWith)]))).
spft(pt(tPred(isa_from_morphology), rhs([ptBinaryPredicate(isa_from_morphology)])), arity(isa_from_morphology, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(nearestGenls), rhs([ptBinaryPredicate(nearestGenls)])), arity(nearestGenls, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(nearestGenls), tPred(nearestGenls), pt(tPred(nearestGenls), rhs([ptBinaryPredicate(nearestGenls)]))).
spft(pt(tPred(dif), rhs([ptBinaryPredicate(dif)])), arity(dif, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(formatted_resultIsa), rhs([ptBinaryPredicate(formatted_resultIsa)])), arity(formatted_resultIsa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(formatted_resultIsa), tPred(formatted_resultIsa), pt(tPred(formatted_resultIsa), rhs([ptBinaryPredicate(formatted_resultIsa)]))).
spft(ptBinaryPredicate(formatted_resultIsa), tPred(formatted_resultIsa), pt(tPred(formatted_resultIsa), rhs([ptBinaryPredicate(formatted_resultIsa)]))).
spft(pt(tPred(quotedIsa), rhs([ptBinaryPredicate(quotedIsa)])), arity(quotedIsa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(quotedIsa), tPred(quotedIsa), pt(tPred(quotedIsa), rhs([ptBinaryPredicate(quotedIsa)]))).
spft(ptBinaryPredicate(quotedIsa), tPred(quotedIsa), pt(tPred(quotedIsa), rhs([ptBinaryPredicate(quotedIsa)]))).
spft(pt(tPred(typeGenls), rhs([ptBinaryPredicate(typeGenls)])), arity(typeGenls, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(typeGenls), tPred(typeGenls), pt(tPred(typeGenls), rhs([ptBinaryPredicate(typeGenls)]))).
spft(ptBinaryPredicate(typeGenls), tPred(typeGenls), pt(tPred(typeGenls), rhs([ptBinaryPredicate(typeGenls)]))).
spft(pt(tPred(mpred_module), rhs([ptBinaryPredicate(mpred_module)])), arity(mpred_module, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(mpred_module), tPred(mpred_module), pt(tPred(mpred_module), rhs([ptBinaryPredicate(mpred_module)]))).
spft(ptBinaryPredicate(mpred_module), tPred(mpred_module), pt(tPred(mpred_module), rhs([ptBinaryPredicate(mpred_module)]))).
spft(ptBinaryPredicate(mpred_module), tPred(mpred_module), pt(tPred(mpred_module), rhs([ptBinaryPredicate(mpred_module)]))).
spft(pt(tPred(either), rhs([ptBinaryPredicate(either)])), arity(either, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(either), tPred(either), pt(tPred(either), rhs([ptBinaryPredicate(either)]))).
spft(pt(tPred(<==>), rhs([ptBinaryPredicate(<==>)])), arity(<==>, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(<==>), tPred(<==>), pt(tPred(<==>), rhs([ptBinaryPredicate(<==>)]))).
spft(pt(tPred(typeProps), rhs([ptBinaryPredicate(typeProps)])), arity(typeProps, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(typeProps), tPred(typeProps), pt(tPred(typeProps), rhs([ptBinaryPredicate(typeProps)]))).
spft(ptBinaryPredicate(typeProps), tPred(typeProps), pt(tPred(typeProps), rhs([ptBinaryPredicate(typeProps)]))).
spft(pt(tPred(genlInverse), rhs([ptBinaryPredicate(genlInverse)])), arity(genlInverse, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(genlInverse), tPred(genlInverse), pt(tPred(genlInverse), rhs([ptBinaryPredicate(genlInverse)]))).
spft(ptBinaryPredicate(genlInverse), tPred(genlInverse), pt(tPred(genlInverse), rhs([ptBinaryPredicate(genlInverse)]))).
spft(ptBinaryPredicate(genlInverse), tPred(genlInverse), pt(tPred(genlInverse), rhs([ptBinaryPredicate(genlInverse)]))).
spft(pt(tPred(predProxyAssert), rhs([ptBinaryPredicate(predProxyAssert)])), arity(predProxyAssert, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(predProxyAssert), tPred(predProxyAssert), pt(tPred(predProxyAssert), rhs([ptBinaryPredicate(predProxyAssert)]))).
spft(ptBinaryPredicate(predProxyAssert), tPred(predProxyAssert), pt(tPred(predProxyAssert), rhs([ptBinaryPredicate(predProxyAssert)]))).
spft(ptBinaryPredicate(predProxyAssert), tPred(predProxyAssert), pt(tPred(predProxyAssert), rhs([ptBinaryPredicate(predProxyAssert)]))).
spft(pt(tPred(predProxyQuery), rhs([ptBinaryPredicate(predProxyQuery)])), arity(predProxyQuery, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(predProxyQuery), tPred(predProxyQuery), pt(tPred(predProxyQuery), rhs([ptBinaryPredicate(predProxyQuery)]))).
spft(ptBinaryPredicate(predProxyQuery), tPred(predProxyQuery), pt(tPred(predProxyQuery), rhs([ptBinaryPredicate(predProxyQuery)]))).
spft(ptBinaryPredicate(predProxyQuery), tPred(predProxyQuery), pt(tPred(predProxyQuery), rhs([ptBinaryPredicate(predProxyQuery)]))).
spft(pt(tPred(predProxyRetract), rhs([ptBinaryPredicate(predProxyRetract)])), arity(predProxyRetract, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(predProxyRetract), tPred(predProxyRetract), pt(tPred(predProxyRetract), rhs([ptBinaryPredicate(predProxyRetract)]))).
spft(ptBinaryPredicate(predProxyRetract), tPred(predProxyRetract), pt(tPred(predProxyRetract), rhs([ptBinaryPredicate(predProxyRetract)]))).
spft(pt(tPred(resultIsa), rhs([ptBinaryPredicate(resultIsa)])), arity(resultIsa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(resultIsa), tPred(resultIsa), pt(tPred(resultIsa), rhs([ptBinaryPredicate(resultIsa)]))).
spft(ptBinaryPredicate(resultIsa), tPred(resultIsa), pt(tPred(resultIsa), rhs([ptBinaryPredicate(resultIsa)]))).
spft(pt(tPred(isa), rhs([ptBinaryPredicate(isa)])), arity(isa, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(isa), tPred(isa), pt(tPred(isa), rhs([ptBinaryPredicate(isa)]))).
spft(ptBinaryPredicate(isa), tPred(isa), pt(tPred(isa), rhs([ptBinaryPredicate(isa)]))).
spft(ptBinaryPredicate(isa), tPred(isa), pt(tPred(isa), rhs([ptBinaryPredicate(isa)]))).
spft(pt(tPred(localityOfObject), rhs([ptBinaryPredicate(localityOfObject)])), arity(localityOfObject, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(localityOfObject), tPred(localityOfObject), pt(tPred(localityOfObject), rhs([ptBinaryPredicate(localityOfObject)]))).
spft(ptBinaryPredicate(localityOfObject), tPred(localityOfObject), pt(tPred(localityOfObject), rhs([ptBinaryPredicate(localityOfObject)]))).
spft(pt(tPred(subFormat), rhs([ptBinaryPredicate(subFormat)])), arity(subFormat, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(subFormat), tPred(subFormat), pt(tPred(subFormat), rhs([ptBinaryPredicate(subFormat)]))).
spft(ptBinaryPredicate(subFormat), tPred(subFormat), pt(tPred(subFormat), rhs([ptBinaryPredicate(subFormat)]))).
spft(pt(tPred(isLikeFn), rhs([ptBinaryPredicate(isLikeFn)])), arity(isLikeFn, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(pt(tPred(quotedDefnIff), rhs([ptBinaryPredicate(quotedDefnIff)])), arity(quotedDefnIff, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(quotedDefnIff), tPred(quotedDefnIff), pt(tPred(quotedDefnIff), rhs([ptBinaryPredicate(quotedDefnIff)]))).
spft(ptBinaryPredicate(quotedDefnIff), tPred(quotedDefnIff), pt(tPred(quotedDefnIff), rhs([ptBinaryPredicate(quotedDefnIff)]))).
spft(pt(tPred(defnNecessary), rhs([ptBinaryPredicate(defnNecessary)])), arity(defnNecessary, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(defnNecessary), tPred(defnNecessary), pt(tPred(defnNecessary), rhs([ptBinaryPredicate(defnNecessary)]))).
spft(ptBinaryPredicate(defnNecessary), tPred(defnNecessary), pt(tPred(defnNecessary), rhs([ptBinaryPredicate(defnNecessary)]))).
spft(pt(tPred(defnIff), rhs([ptBinaryPredicate(defnIff)])), arity(defnIff, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(defnIff), tPred(defnIff), pt(tPred(defnIff), rhs([ptBinaryPredicate(defnIff)]))).
spft(ptBinaryPredicate(defnIff), tPred(defnIff), pt(tPred(defnIff), rhs([ptBinaryPredicate(defnIff)]))).
spft(pt(tPred(macroSomethingDescription), rhs([ptBinaryPredicate(macroSomethingDescription)])), arity(macroSomethingDescription, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(macroSomethingDescription), tPred(macroSomethingDescription), pt(tPred(macroSomethingDescription), rhs([ptBinaryPredicate(macroSomethingDescription)]))).
spft(pt(tPred(pddlSorts), rhs([ptBinaryPredicate(pddlSorts)])), arity(pddlSorts, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(pddlSorts), tPred(pddlSorts), pt(tPred(pddlSorts), rhs([ptBinaryPredicate(pddlSorts)]))).
spft(pt(tPred(comment), rhs([ptBinaryPredicate(comment)])), arity(comment, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(comment), tPred(comment), pt(tPred(comment), rhs([ptBinaryPredicate(comment)]))).
spft(ptBinaryPredicate(comment), tPred(comment), pt(tPred(comment), rhs([ptBinaryPredicate(comment)]))).
spft(pt(tPred(<-), rhs([ptBinaryPredicate(<-)])), arity(<-, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(<-), tPred(<-), pt(tPred(<-), rhs([ptBinaryPredicate(<-)]))).
spft(ptBinaryPredicate(<-), tPred(<-), pt(tPred(<-), rhs([ptBinaryPredicate(<-)]))).
spft(pt(tPred(==>), rhs([ptBinaryPredicate(==>)])), arity(==>, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(==>), tPred(==>), pt(tPred(==>), rhs([ptBinaryPredicate(==>)]))).
spft(ptBinaryPredicate(==>), tPred(==>), pt(tPred(==>), rhs([ptBinaryPredicate(==>)]))).
spft(pt(tPred(predArgMulti), rhs([ptBinaryPredicate(predArgMulti)])), arity(predArgMulti, 2), pt(arity(A, 2), pt(tPred(A), rhs([ptBinaryPredicate(A)])))).
spft(ptBinaryPredicate(predArgMulti), tPred(predArgMulti), pt(tPred(predArgMulti), rhs([ptBinaryPredicate(predArgMulti)]))).
spft(ptBinaryPredicate(predArgMulti), tPred(predArgMulti), pt(tPred(predArgMulti), rhs([ptBinaryPredicate(predArgMulti)]))).
spft(mpred_mark(pfcLHS, p, ptBinaryPredicate, 1), s(((arity(A, 2), tPred(A)<==>ptBinaryPredicate(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118))), ax).
spft(arity(ptBinaryPredicate, 1), mpred_mark(pfcLHS, p, ptBinaryPredicate, 1), pt(mpred_mark(pfcLHS, p, ptBinaryPredicate, 1),  (ground(pfcLHS:p)->rhs([arity(ptBinaryPredicate, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1), s(((arity(A, 2), tPred(A)<==>ptBinaryPredicate(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118))), ax).
spft(arity(ptBinaryPredicate, 1), mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1), pt(mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1),  (ground(pfcPosTrigger:p)->rhs([arity(ptBinaryPredicate, 1)])))).
spft(marker_supported(ptBinaryPredicate, 1), mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1), pt(mpred_mark(pfcPosTrigger, p, ptBinaryPredicate, 1),  (ground(p:ptBinaryPredicate:1)->rhs([marker_supported(ptBinaryPredicate, 1)])))).
spft(pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)])),  (arity(B, 2), tPred(B)<==>ptBinaryPredicate(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1118)).
spft(arity(arity, 2), ptBinaryPredicate(arity), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(arity), ptBinaryPredicate(arity), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_select, 2), ptBinaryPredicate(mpred_select), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_select), ptBinaryPredicate(mpred_select), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(pddlObjects, 2), ptBinaryPredicate(pddlObjects), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlObjects), ptBinaryPredicate(pddlObjects), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(pddlObjects, A),  (integer(A), A>1->pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, A)])))), tPred(pddlObjects), pt(tPred(pddlObjects), pt(arity(pddlObjects, A),  (integer(A), A>1->pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, A)])))))).
spft(pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, 2)])), arity(pddlObjects, 2), pt(arity(pddlObjects, A),  (integer(A), A>1->pt(~prologBuiltin(pddlObjects), rhs([~tCol(pddlObjects), support_hilog(pddlObjects, A)]))))).
spft(ptBinaryPredicate(pddlObjects), tPred(pddlObjects), pt(tPred(pddlObjects), rhs([ptBinaryPredicate(pddlObjects)]))).
spft(arity(genls, 2), ptBinaryPredicate(genls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genls), ptBinaryPredicate(genls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_do_and_undo_method, 2), ptBinaryPredicate(mpred_do_and_undo_method), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_do_and_undo_method), ptBinaryPredicate(mpred_do_and_undo_method), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(mpred_do_and_undo_method, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, A)])))), tPred(mpred_do_and_undo_method), pt(tPred(mpred_do_and_undo_method), pt(arity(mpred_do_and_undo_method, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, A)])))))).
spft(pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, 2)])), arity(mpred_do_and_undo_method, 2), pt(arity(mpred_do_and_undo_method, A),  (integer(A), A>1->pt(~prologBuiltin(mpred_do_and_undo_method), rhs([~tCol(mpred_do_and_undo_method), support_hilog(mpred_do_and_undo_method, A)]))))).
spft(ptBinaryPredicate(mpred_do_and_undo_method), tPred(mpred_do_and_undo_method), pt(tPred(mpred_do_and_undo_method), rhs([ptBinaryPredicate(mpred_do_and_undo_method)]))).
spft(arity(support_hilog, 2), ptBinaryPredicate(support_hilog), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(support_hilog), ptBinaryPredicate(support_hilog), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(support_hilog, A),  (integer(A), A>1->pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, A)])))), tPred(support_hilog), pt(tPred(support_hilog), pt(arity(support_hilog, A),  (integer(A), A>1->pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, A)])))))).
spft(pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, 2)])), arity(support_hilog, 2), pt(arity(support_hilog, A),  (integer(A), A>1->pt(~prologBuiltin(support_hilog), rhs([~tCol(support_hilog), support_hilog(support_hilog, A)]))))).
spft(ptBinaryPredicate(support_hilog), tPred(support_hilog), pt(tPred(support_hilog), rhs([ptBinaryPredicate(support_hilog)]))).
spft(arity(hybrid_support, 2), ptBinaryPredicate(hybrid_support), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(hybrid_support), ptBinaryPredicate(hybrid_support), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(hybrid_support, A),  (integer(A), A>1->pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, A)])))), tPred(hybrid_support), pt(tPred(hybrid_support), pt(arity(hybrid_support, A),  (integer(A), A>1->pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, A)])))))).
spft(pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, 2)])), arity(hybrid_support, 2), pt(arity(hybrid_support, A),  (integer(A), A>1->pt(~prologBuiltin(hybrid_support), rhs([~tCol(hybrid_support), support_hilog(hybrid_support, A)]))))).
spft(ptBinaryPredicate(hybrid_support), tPred(hybrid_support), pt(tPred(hybrid_support), rhs([ptBinaryPredicate(hybrid_support)]))).
spft(arity(=, 2), ptBinaryPredicate(=), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(=), ptBinaryPredicate(=), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(=, A),  (integer(A), A>1->pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, A)])))), tPred(=), pt(tPred(=), pt(arity(=, A),  (integer(A), A>1->pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, A)])))))).
spft(pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, 2)])), arity(=, 2), pt(arity(=, A),  (integer(A), A>1->pt(~prologBuiltin(=), rhs([~tCol(=), support_hilog(=, A)]))))).
spft(ptBinaryPredicate(=), tPred(=), pt(tPred(=), rhs([ptBinaryPredicate(=)]))).
spft(arity(marker_supported, 2), ptBinaryPredicate(marker_supported), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(marker_supported), ptBinaryPredicate(marker_supported), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(marker_supported, A),  (integer(A), A>1->pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, A)])))), tPred(marker_supported), pt(tPred(marker_supported), pt(arity(marker_supported, A),  (integer(A), A>1->pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, A)])))))).
spft(pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, 2)])), arity(marker_supported, 2), pt(arity(marker_supported, A),  (integer(A), A>1->pt(~prologBuiltin(marker_supported), rhs([~tCol(marker_supported), support_hilog(marker_supported, A)]))))).
spft(ptBinaryPredicate(marker_supported), tPred(marker_supported), pt(tPred(marker_supported), rhs([ptBinaryPredicate(marker_supported)]))).
spft(arity(genlPreds, 2), ptBinaryPredicate(genlPreds), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genlPreds), ptBinaryPredicate(genlPreds), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(pddlSomethingIsa, 2), ptBinaryPredicate(pddlSomethingIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlSomethingIsa), ptBinaryPredicate(pddlSomethingIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(disjointWith, 2), ptBinaryPredicate(disjointWith), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(disjointWith), ptBinaryPredicate(disjointWith), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(nearestGenls, 2), ptBinaryPredicate(nearestGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(nearestGenls), ptBinaryPredicate(nearestGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(nearestGenls, A),  (integer(A), A>1->pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, A)])))), tPred(nearestGenls), pt(tPred(nearestGenls), pt(arity(nearestGenls, A),  (integer(A), A>1->pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, A)])))))).
spft(pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, 2)])), arity(nearestGenls, 2), pt(arity(nearestGenls, A),  (integer(A), A>1->pt(~prologBuiltin(nearestGenls), rhs([~tCol(nearestGenls), support_hilog(nearestGenls, A)]))))).
spft(ptBinaryPredicate(nearestGenls), tPred(nearestGenls), pt(tPred(nearestGenls), rhs([ptBinaryPredicate(nearestGenls)]))).
spft(arity(formatted_resultIsa, 2), ptBinaryPredicate(formatted_resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(formatted_resultIsa), ptBinaryPredicate(formatted_resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(quotedIsa, 2), ptBinaryPredicate(quotedIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(quotedIsa), ptBinaryPredicate(quotedIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(typeGenls, 2), ptBinaryPredicate(typeGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(typeGenls), ptBinaryPredicate(typeGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_module, 2), ptBinaryPredicate(mpred_module), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_module), ptBinaryPredicate(mpred_module), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(either, 2), ptBinaryPredicate(either), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(either), ptBinaryPredicate(either), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(either, A),  (integer(A), A>1->pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, A)])))), tPred(either), pt(tPred(either), pt(arity(either, A),  (integer(A), A>1->pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, A)])))))).
spft(pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, 2)])), arity(either, 2), pt(arity(either, A),  (integer(A), A>1->pt(~prologBuiltin(either), rhs([~tCol(either), support_hilog(either, A)]))))).
spft(ptBinaryPredicate(either), tPred(either), pt(tPred(either), rhs([ptBinaryPredicate(either)]))).
spft(arity(<==>, 2), ptBinaryPredicate(<==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(<==>), ptBinaryPredicate(<==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(<==>, A),  (integer(A), A>1->pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, A)])))), tPred(<==>), pt(tPred(<==>), pt(arity(<==>, A),  (integer(A), A>1->pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, A)])))))).
spft(pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, 2)])), arity(<==>, 2), pt(arity(<==>, A),  (integer(A), A>1->pt(~prologBuiltin(<==>), rhs([~tCol(<==>), support_hilog(<==>, A)]))))).
spft(ptBinaryPredicate(<==>), tPred(<==>), pt(tPred(<==>), rhs([ptBinaryPredicate(<==>)]))).
spft(arity(typeProps, 2), ptBinaryPredicate(typeProps), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(typeProps), ptBinaryPredicate(typeProps), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(genlInverse, 2), ptBinaryPredicate(genlInverse), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genlInverse), ptBinaryPredicate(genlInverse), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyAssert, 2), ptBinaryPredicate(predProxyAssert), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyAssert), ptBinaryPredicate(predProxyAssert), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyQuery, 2), ptBinaryPredicate(predProxyQuery), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyQuery), ptBinaryPredicate(predProxyQuery), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyRetract, 2), ptBinaryPredicate(predProxyRetract), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyRetract), ptBinaryPredicate(predProxyRetract), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(resultIsa, 2), ptBinaryPredicate(resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(resultIsa), ptBinaryPredicate(resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(isa, 2), ptBinaryPredicate(isa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(isa), ptBinaryPredicate(isa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(localityOfObject, 2), ptBinaryPredicate(localityOfObject), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(localityOfObject), ptBinaryPredicate(localityOfObject), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(subFormat, 2), ptBinaryPredicate(subFormat), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(subFormat), ptBinaryPredicate(subFormat), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(quotedDefnIff, 2), ptBinaryPredicate(quotedDefnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(quotedDefnIff), ptBinaryPredicate(quotedDefnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(defnNecessary, 2), ptBinaryPredicate(defnNecessary), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(defnNecessary), ptBinaryPredicate(defnNecessary), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(defnIff, 2), ptBinaryPredicate(defnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(defnIff), ptBinaryPredicate(defnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(macroSomethingDescription, 2), ptBinaryPredicate(macroSomethingDescription), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(macroSomethingDescription), ptBinaryPredicate(macroSomethingDescription), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(macroSomethingDescription, A),  (integer(A), A>1->pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, A)])))), tPred(macroSomethingDescription), pt(tPred(macroSomethingDescription), pt(arity(macroSomethingDescription, A),  (integer(A), A>1->pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, A)])))))).
spft(pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, 2)])), arity(macroSomethingDescription, 2), pt(arity(macroSomethingDescription, A),  (integer(A), A>1->pt(~prologBuiltin(macroSomethingDescription), rhs([~tCol(macroSomethingDescription), support_hilog(macroSomethingDescription, A)]))))).
spft(ptBinaryPredicate(macroSomethingDescription), tPred(macroSomethingDescription), pt(tPred(macroSomethingDescription), rhs([ptBinaryPredicate(macroSomethingDescription)]))).
spft(arity(pddlSorts, 2), ptBinaryPredicate(pddlSorts), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlSorts), ptBinaryPredicate(pddlSorts), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(pt(arity(pddlSorts, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, A)])))), tPred(pddlSorts), pt(tPred(pddlSorts), pt(arity(pddlSorts, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, A)])))))).
spft(pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, 2)])), arity(pddlSorts, 2), pt(arity(pddlSorts, A),  (integer(A), A>1->pt(~prologBuiltin(pddlSorts), rhs([~tCol(pddlSorts), support_hilog(pddlSorts, A)]))))).
spft(ptBinaryPredicate(pddlSorts), tPred(pddlSorts), pt(tPred(pddlSorts), rhs([ptBinaryPredicate(pddlSorts)]))).
spft(arity(comment, 2), ptBinaryPredicate(comment), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(comment), ptBinaryPredicate(comment), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(<-, 2), ptBinaryPredicate(<-), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(<-), ptBinaryPredicate(<-), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(==>, 2), ptBinaryPredicate(==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(==>), ptBinaryPredicate(==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predArgMulti, 2), ptBinaryPredicate(predArgMulti), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predArgMulti), ptBinaryPredicate(predArgMulti), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(arity, 2), ptBinaryPredicate(arity), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(arity), ptBinaryPredicate(arity), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_select, 2), ptBinaryPredicate(mpred_select), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_select), ptBinaryPredicate(mpred_select), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(pddlObjects, 2), ptBinaryPredicate(pddlObjects), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlObjects), ptBinaryPredicate(pddlObjects), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(genls, 2), ptBinaryPredicate(genls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genls), ptBinaryPredicate(genls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_do_and_undo_method, 2), ptBinaryPredicate(mpred_do_and_undo_method), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_do_and_undo_method), ptBinaryPredicate(mpred_do_and_undo_method), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(support_hilog, 2), ptBinaryPredicate(support_hilog), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(support_hilog), ptBinaryPredicate(support_hilog), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(hybrid_support, 2), ptBinaryPredicate(hybrid_support), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(hybrid_support), ptBinaryPredicate(hybrid_support), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(=, 2), ptBinaryPredicate(=), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(=), ptBinaryPredicate(=), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(marker_supported, 2), ptBinaryPredicate(marker_supported), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(marker_supported), ptBinaryPredicate(marker_supported), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(genlPreds, 2), ptBinaryPredicate(genlPreds), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genlPreds), ptBinaryPredicate(genlPreds), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(pddlSomethingIsa, 2), ptBinaryPredicate(pddlSomethingIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlSomethingIsa), ptBinaryPredicate(pddlSomethingIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(disjointWith, 2), ptBinaryPredicate(disjointWith), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(disjointWith), ptBinaryPredicate(disjointWith), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(nearestGenls, 2), ptBinaryPredicate(nearestGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(nearestGenls), ptBinaryPredicate(nearestGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(formatted_resultIsa, 2), ptBinaryPredicate(formatted_resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(formatted_resultIsa), ptBinaryPredicate(formatted_resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(quotedIsa, 2), ptBinaryPredicate(quotedIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(quotedIsa), ptBinaryPredicate(quotedIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(typeGenls, 2), ptBinaryPredicate(typeGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(typeGenls), ptBinaryPredicate(typeGenls), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(mpred_module, 2), ptBinaryPredicate(mpred_module), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(mpred_module), ptBinaryPredicate(mpred_module), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(either, 2), ptBinaryPredicate(either), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(either), ptBinaryPredicate(either), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(<==>, 2), ptBinaryPredicate(<==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(<==>), ptBinaryPredicate(<==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(typeProps, 2), ptBinaryPredicate(typeProps), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(typeProps), ptBinaryPredicate(typeProps), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(genlInverse, 2), ptBinaryPredicate(genlInverse), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(genlInverse), ptBinaryPredicate(genlInverse), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyAssert, 2), ptBinaryPredicate(predProxyAssert), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyAssert), ptBinaryPredicate(predProxyAssert), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyQuery, 2), ptBinaryPredicate(predProxyQuery), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyQuery), ptBinaryPredicate(predProxyQuery), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predProxyRetract, 2), ptBinaryPredicate(predProxyRetract), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predProxyRetract), ptBinaryPredicate(predProxyRetract), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(resultIsa, 2), ptBinaryPredicate(resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(resultIsa), ptBinaryPredicate(resultIsa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(isa, 2), ptBinaryPredicate(isa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(isa), ptBinaryPredicate(isa), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(localityOfObject, 2), ptBinaryPredicate(localityOfObject), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(localityOfObject), ptBinaryPredicate(localityOfObject), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(subFormat, 2), ptBinaryPredicate(subFormat), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(subFormat), ptBinaryPredicate(subFormat), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(quotedDefnIff, 2), ptBinaryPredicate(quotedDefnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(quotedDefnIff), ptBinaryPredicate(quotedDefnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(defnNecessary, 2), ptBinaryPredicate(defnNecessary), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(defnNecessary), ptBinaryPredicate(defnNecessary), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(defnIff, 2), ptBinaryPredicate(defnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(defnIff), ptBinaryPredicate(defnIff), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(macroSomethingDescription, 2), ptBinaryPredicate(macroSomethingDescription), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(macroSomethingDescription), ptBinaryPredicate(macroSomethingDescription), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(pddlSorts, 2), ptBinaryPredicate(pddlSorts), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(pddlSorts), ptBinaryPredicate(pddlSorts), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(comment, 2), ptBinaryPredicate(comment), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(comment), ptBinaryPredicate(comment), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(<-, 2), ptBinaryPredicate(<-), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(<-), ptBinaryPredicate(<-), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(==>, 2), ptBinaryPredicate(==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(==>), ptBinaryPredicate(==>), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(arity(predArgMulti, 2), ptBinaryPredicate(predArgMulti), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(tPred(predArgMulti), ptBinaryPredicate(predArgMulti), pt(ptBinaryPredicate(A), rhs([arity(A, 2), tPred(A)]))).
spft(completelyAssertedCollection(ptBinaryPredicate), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1123), ax).
spft(tCol(tPred), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1136), ax).
spft(arity(isa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1137), ax).
spft(prologHybrid(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1137), ax).
spft(tPred(isa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1137), ax).
spft(tCol(predIsFlag), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1142), ax).
spft(tCol(prologDynamic), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1143), ax).
spft(arity(formatted_resultIsa, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1144), ax).
spft(prologHybrid(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1144), ax).
spft(tPred(formatted_resultIsa), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 1144), ax).
spft(pfcControlled(if_missing(ftAskable, ftAssertable)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 7), ax).
spft(pt(arity(if_missing(ftAskable, ftAssertable), A), rhs([hybrid_support(if_missing(ftAskable, ftAssertable), A)])), pfcControlled(if_missing(ftAskable, ftAssertable)), pt(pfcControlled(if_missing(ftAskable, ftAssertable)), pt(arity(if_missing(ftAskable, ftAssertable), A), rhs([hybrid_support(if_missing(ftAskable, ftAssertable), A)])))).
spft(support_hilog(if_missing, 2), pfcControlled(if_missing(ftAskable, ftAssertable)), pt(pfcControlled(if_missing(ftAskable, ftAssertable)),  (get_arity(if_missing(ftAskable, ftAssertable), if_missing, 2), arity(if_missing, 2)->rhs([support_hilog(if_missing, 2)])))).
spft(hybrid_support(if_missing, 2), support_hilog(if_missing, 2), pt(support_hilog(if_missing, 2),  (if_missing\='$VAR', atom(if_missing), integer(2), \+static_predicate(if_missing/2), \+prologDynamic(if_missing)->rhs([hybrid_support(if_missing, 2), {A=arity(if_missing, 2)}, A])))).
spft(prologHybrid(if_missing), hybrid_support(if_missing, 2), pt(hybrid_support(if_missing, 2),  (if_missing\='$VAR', atom(if_missing), integer(2), \+prologDynamic(if_missing), \+static_predicate(if_missing/2)->rhs([{functor(if_missing(A, B), if_missing, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(if_missing, baseKB:if_missing(A, B)), \+predicate_property(baseKB:if_missing(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:if_missing(A, B), exported);true), kb_dynamic(baseKB:if_missing/2), show_failure(hybrid_support, \+static_predicate(if_missing/2))}, prologHybrid(if_missing), arity(if_missing, 2)])))).
spft(pt(arity(if_missing, A), rhs([hybrid_support(if_missing, A)])), prologHybrid(if_missing), pt(prologHybrid(if_missing), pt(arity(if_missing, A), rhs([hybrid_support(if_missing, A)])))).
spft(arity(if_missing, 2), hybrid_support(if_missing, 2), pt(hybrid_support(if_missing, 2),  (if_missing\='$VAR', atom(if_missing), integer(2), \+prologDynamic(if_missing), \+static_predicate(if_missing/2)->rhs([{functor(if_missing(A, B), if_missing, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(if_missing, baseKB:if_missing(A, B)), \+predicate_property(baseKB:if_missing(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:if_missing(A, B), exported);true), kb_dynamic(baseKB:if_missing/2), show_failure(hybrid_support, \+static_predicate(if_missing/2))}, prologHybrid(if_missing), arity(if_missing, 2)])))).
spft(pt(tPred(if_missing), rhs([ptBinaryPredicate(if_missing)])), arity(if_missing, 2), pt(arity(if_missing, 2), pt(tPred(if_missing), rhs([ptBinaryPredicate(if_missing)])))).
spft(ptBinaryPredicate(if_missing), tPred(if_missing), pt(tPred(if_missing), rhs([ptBinaryPredicate(if_missing)]))).
spft(arity(if_missing, 2), ptBinaryPredicate(if_missing), pt(ptBinaryPredicate(if_missing), rhs([arity(if_missing, 2), tPred(if_missing)]))).
spft(tPred(if_missing), ptBinaryPredicate(if_missing), pt(ptBinaryPredicate(if_missing), rhs([arity(if_missing, 2), tPred(if_missing)]))).
spft(pt(arity(if_missing, A),  (integer(A), A>1->pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, A)])))), tPred(if_missing), pt(tPred(if_missing), pt(arity(if_missing, A),  (integer(A), A>1->pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, A)])))))).
spft(pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, 2)])), arity(if_missing, 2), pt(arity(if_missing, A),  (integer(A), A>1->pt(~prologBuiltin(if_missing), rhs([~tCol(if_missing), support_hilog(if_missing, A)]))))).
spft(ptBinaryPredicate(if_missing), tPred(if_missing), pt(tPred(if_missing), rhs([ptBinaryPredicate(if_missing)]))).
spft(hybrid_support(if_missing, 2), arity(if_missing, 2), pt(arity(if_missing, 2), rhs([hybrid_support(if_missing, 2)]))).
spft(prologHybrid(if_missing), hybrid_support(if_missing, 2), pt(hybrid_support(if_missing, 2), rhs([prologHybrid(if_missing), arity(if_missing, 2)]))).
spft(arity(if_missing, 2), hybrid_support(if_missing, 2), pt(hybrid_support(if_missing, 2), rhs([prologHybrid(if_missing), arity(if_missing, 2)]))).
spft(arity(if_missing, 2), support_hilog(if_missing, 2), pt(support_hilog(if_missing, 2),  (if_missing\='$VAR', atom(if_missing), integer(2), \+static_predicate(if_missing/2), \+prologDynamic(if_missing)->rhs([hybrid_support(if_missing, 2), {arity(if_missing, 2)=arity(if_missing, 2)}, arity(if_missing, 2)])))).
spft(prologHybrid(if_missing(ftAskable, ftAssertable)), pfcControlled(if_missing(ftAskable, ftAssertable)), pt(pfcControlled(if_missing(ftAskable, ftAssertable)), rhs([prologHybrid(if_missing(ftAskable, ftAssertable))]))).
spft(pt(arity(if_missing(ftAskable, ftAssertable), A), rhs([hybrid_support(if_missing(ftAskable, ftAssertable), A)])), prologHybrid(if_missing(ftAskable, ftAssertable)), pt(prologHybrid(if_missing(ftAskable, ftAssertable)), pt(arity(if_missing(ftAskable, ftAssertable), A), rhs([hybrid_support(if_missing(ftAskable, ftAssertable), A)])))).
spft(arity(if_missing, 2), prologHybrid(if_missing(ftAskable, ftAssertable)), pt(prologHybrid(if_missing(ftAskable, ftAssertable)),  (get_functor(if_missing(ftAskable, ftAssertable), if_missing, 2), if_missing(ftAskable, ftAssertable)\=if_missing->rhs([arity(if_missing, 2)])))).
spft((if_missing(A, B)==> (\+A/ (A\=@=B)==>B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 11), ax).
spft(mpred_mark(pfcLHS, p, if_missing, 2), s(((if_missing(A, B)==> (\+A/ (A\=@=B)==>B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 11))), ax).
spft(arity(if_missing, 2), mpred_mark(pfcLHS, p, if_missing, 2), pt(mpred_mark(pfcLHS, p, if_missing, 2),  (ground(pfcLHS:p)->rhs([arity(if_missing, 2)])))).
spft(mpred_mark(pfcCallCode, n, \=@=, 2), s(((if_missing(A, B)==> (\+A/ (A\=@=B)==>B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 11))), ax).
spft(arity(\=@=, 2), mpred_mark(pfcCallCode, n, \=@=, 2), pt(mpred_mark(pfcCallCode, n, \=@=, 2),  (ground(pfcCallCode:n)->rhs([arity(\=@=, 2)])))).
spft(pt(tPred(\=@=), rhs([ptBinaryPredicate(\=@=)])), arity(\=@=, 2), pt(arity(\=@=, 2), pt(tPred(\=@=), rhs([ptBinaryPredicate(\=@=)])))).
spft(mpred_mark(pfcPosTrigger, p, if_missing, 2), s(((if_missing(A, B)==> (\+A/ (A\=@=B)==>B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 11))), ax).
spft(arity(if_missing, 2), mpred_mark(pfcPosTrigger, p, if_missing, 2), pt(mpred_mark(pfcPosTrigger, p, if_missing, 2),  (ground(pfcPosTrigger:p)->rhs([arity(if_missing, 2)])))).
spft(marker_supported(if_missing, 2), mpred_mark(pfcPosTrigger, p, if_missing, 2), pt(mpred_mark(pfcPosTrigger, p, if_missing, 2),  (ground(p:if_missing:2)->rhs([marker_supported(if_missing, 2)])))).
spft(hybrid_support(if_missing, 2), marker_supported(if_missing, 2), pt(marker_supported(if_missing, 2), rhs([hybrid_support(if_missing, 2)]))).
spft(pt(if_missing(A, B), rhs([(\+A/ (A\=@=B)==>B)])),  (if_missing(C, D)==> (\+C/ (C\=@=D)==>D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', 11)).
spft(meta_argtypes(mdefault(ftAssertable)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 41), ax).
spft(arity(mdefault, 1), meta_argtypes(mdefault(ftAssertable)), pt(meta_argtypes(mdefault(ftAssertable)),  (is_ftCompound(mdefault(ftAssertable))->rhs([{get_functor(mdefault(ftAssertable), mdefault, 1)}, arity(mdefault, 1)])))).
spft(pt(genls(mdefault(ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mdefault(ftAssertable), A)])))), meta_argtypes(mdefault(ftAssertable)), pt(meta_argtypes(mdefault(ftAssertable)),  (dif:dif(mdefault(ftAssertable), A)->pt(genls(mdefault(ftAssertable), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(mdefault(ftAssertable), A)]))))))).
spft((mdefault((A<-B))/mpred_literal(A)==> (A<-B, \+ ~A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 44), ax).
spft(mpred_mark(pfcLHS, p, mdefault, 1), s(((mdefault((A<-B))/mpred_literal(A)==> (A<-B, \+ ~A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 44))), ax).
spft(arity(mdefault, 1), mpred_mark(pfcLHS, p, mdefault, 1), pt(mpred_mark(pfcLHS, p, mdefault, 1),  (ground(pfcLHS:p)->rhs([arity(mdefault, 1)])))).
spft(mpred_mark(pfcCallCode, p, mpred_literal, 1), s(((mdefault((A<-B))/mpred_literal(A)==> (A<-B, \+ ~A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 44))), ax).
spft(arity(mpred_literal, 1), mpred_mark(pfcCallCode, p, mpred_literal, 1), pt(mpred_mark(pfcCallCode, p, mpred_literal, 1),  (ground(pfcCallCode:p)->rhs([arity(mpred_literal, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, mdefault, 1), s(((mdefault((A<-B))/mpred_literal(A)==> (A<-B, \+ ~A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 44))), ax).
spft(arity(mdefault, 1), mpred_mark(pfcPosTrigger, p, mdefault, 1), pt(mpred_mark(pfcPosTrigger, p, mdefault, 1),  (ground(pfcPosTrigger:p)->rhs([arity(mdefault, 1)])))).
spft(marker_supported(mdefault, 1), mpred_mark(pfcPosTrigger, p, mdefault, 1), pt(mpred_mark(pfcPosTrigger, p, mdefault, 1),  (ground(p:mdefault:1)->rhs([marker_supported(mdefault, 1)])))).
spft(hybrid_support(mdefault, 1), marker_supported(mdefault, 1), pt(marker_supported(mdefault, 1), rhs([hybrid_support(mdefault, 1)]))).
spft(prologHybrid(mdefault), hybrid_support(mdefault, 1), pt(hybrid_support(mdefault, 1),  (mdefault\='$VAR', atom(mdefault), integer(1), \+prologDynamic(mdefault), \+static_predicate(mdefault/1)->rhs([{functor(mdefault(A), mdefault, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mdefault, baseKB:mdefault(A)), \+predicate_property(baseKB:mdefault(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mdefault(A), exported);true), kb_dynamic(baseKB:mdefault/1), show_failure(hybrid_support, \+static_predicate(mdefault/1))}, prologHybrid(mdefault), arity(mdefault, 1)])))).
spft(pt(arity(mdefault, A), rhs([hybrid_support(mdefault, A)])), prologHybrid(mdefault), pt(prologHybrid(mdefault), pt(arity(mdefault, A), rhs([hybrid_support(mdefault, A)])))).
spft(hybrid_support(mdefault, 1), arity(mdefault, 1), pt(arity(mdefault, A), rhs([hybrid_support(mdefault, A)]))).
spft(hybrid_support(mdefault, 1), arity(mdefault, 1), pt(arity(mdefault, A), rhs([hybrid_support(mdefault, A)]))).
spft(arity(mdefault, 1), hybrid_support(mdefault, 1), pt(hybrid_support(mdefault, 1),  (mdefault\='$VAR', atom(mdefault), integer(1), \+prologDynamic(mdefault), \+static_predicate(mdefault/1)->rhs([{functor(mdefault(A), mdefault, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mdefault, baseKB:mdefault(A)), \+predicate_property(baseKB:mdefault(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mdefault(A), exported);true), kb_dynamic(baseKB:mdefault/1), show_failure(hybrid_support, \+static_predicate(mdefault/1))}, prologHybrid(mdefault), arity(mdefault, 1)])))).
spft(prologHybrid(mdefault), hybrid_support(mdefault, 1), pt(hybrid_support(mdefault, 1), rhs([prologHybrid(mdefault), arity(mdefault, 1)]))).
spft(arity(mdefault, 1), hybrid_support(mdefault, 1), pt(hybrid_support(mdefault, 1), rhs([prologHybrid(mdefault), arity(mdefault, 1)]))).
spft(pt(mdefault((A<-B)),  (mpred_literal(A)->rhs([(A<-B, \+ ~A)]))),  (mdefault((C<-D))/mpred_literal(C)==> (C<-D, \+ ~C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 44)).
spft((mdefault((B==>A))/nonvar(A)==> (B==>mdefault(A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 47), ax).
spft(mpred_mark(pfcRHS, p, mdefault, 1), s(((mdefault((B==>A))/nonvar(A)==> (B==>mdefault(A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 47))), ax).
spft(arity(mdefault, 1), mpred_mark(pfcRHS, p, mdefault, 1), pt(mpred_mark(pfcRHS, p, mdefault, 1),  (ground(pfcRHS:p)->rhs([arity(mdefault, 1)])))).
spft(marker_supported(mdefault, 1), mpred_mark(pfcRHS, p, mdefault, 1), pt(mpred_mark(pfcRHS, p, mdefault, 1),  (ground(p:mdefault:1)->rhs([marker_supported(mdefault, 1)])))).
spft(tPred(mdefault), mpred_mark(pfcRHS, p, mdefault, 1), pt(mpred_mark(pfcRHS, p, mdefault, 1),  (atom(mdefault), integer(1), mdefault\==arity->rhs([tPred(mdefault), arity(mdefault, 1), pfcControlled(mdefault/1)])))).
spft(pt(arity(mdefault, A),  (integer(A), A>1->pt(~prologBuiltin(mdefault), rhs([~tCol(mdefault), support_hilog(mdefault, A)])))), tPred(mdefault), pt(tPred(mdefault), pt(arity(mdefault, A),  (integer(A), A>1->pt(~prologBuiltin(mdefault), rhs([~tCol(mdefault), support_hilog(mdefault, A)])))))).
spft(arity(mdefault, 1), mpred_mark(pfcRHS, p, mdefault, 1), pt(mpred_mark(pfcRHS, p, mdefault, 1),  (atom(mdefault), integer(1), mdefault\==arity->rhs([tPred(mdefault), arity(mdefault, 1), pfcControlled(mdefault/1)])))).
spft(pfcControlled(mdefault/1), mpred_mark(pfcRHS, p, mdefault, 1), pt(mpred_mark(pfcRHS, p, mdefault, 1),  (atom(mdefault), integer(1), mdefault\==arity->rhs([tPred(mdefault), arity(mdefault, 1), pfcControlled(mdefault/1)])))).
spft(pt(arity(mdefault/1, A), rhs([hybrid_support(mdefault/1, A)])), pfcControlled(mdefault/1), pt(pfcControlled(mdefault/1), pt(arity(mdefault/1, A), rhs([hybrid_support(mdefault/1, A)])))).
spft(support_hilog(mdefault, 1), pfcControlled(mdefault/1), pt(pfcControlled(mdefault/1),  (get_arity(mdefault/1, mdefault, 1), arity(mdefault, 1)->rhs([support_hilog(mdefault, 1)])))).
spft(hybrid_support(mdefault, 1), support_hilog(mdefault, 1), pt(support_hilog(mdefault, 1),  (mdefault\='$VAR', atom(mdefault), integer(1), \+static_predicate(mdefault/1), \+prologDynamic(mdefault)->rhs([hybrid_support(mdefault, 1), {A=arity(mdefault, 1)}, A])))).
spft(arity(mdefault, 1), support_hilog(mdefault, 1), pt(support_hilog(mdefault, 1),  (mdefault\='$VAR', atom(mdefault), integer(1), \+static_predicate(mdefault/1), \+prologDynamic(mdefault)->rhs([hybrid_support(mdefault, 1), {arity(mdefault, 1)=arity(mdefault, 1)}, arity(mdefault, 1)])))).
spft(support_hilog(mdefault, 1), pfcControlled(mdefault/1), pt(pfcControlled(mdefault/1),  (get_arity(mdefault/1, mdefault, 1), arity(mdefault, 1)->rhs([support_hilog(mdefault, 1)])))).
spft(prologHybrid(mdefault/1), pfcControlled(mdefault/1), pt(pfcControlled(mdefault/1), rhs([prologHybrid(mdefault/1)]))).
spft(pt(arity(mdefault/1, A), rhs([hybrid_support(mdefault/1, A)])), prologHybrid(mdefault/1), pt(prologHybrid(mdefault/1), pt(arity(mdefault/1, A), rhs([hybrid_support(mdefault/1, A)])))).
spft(arity(/, 2), prologHybrid(mdefault/1), pt(prologHybrid(mdefault/1),  (get_functor(mdefault/1, /, 2), mdefault/1\= (/)->rhs([arity(/, 2)])))).
spft(pt(tPred(/), rhs([ptBinaryPredicate(/)])), arity(/, 2), pt(arity(/, 2), pt(tPred(/), rhs([ptBinaryPredicate(/)])))).
spft(pt(mdefault((B==>A)),  (nonvar(A)->rhs([(B==>mdefault(A))]))),  (mdefault((D==>C))/nonvar(C)==> (D==>mdefault(C))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 47)).
spft((mdefault(~A)/nonvar(A)==> (\+A==> ~A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 51), ax).
spft(pt(mdefault(~A),  (nonvar(A)->rhs([(\+A==> ~A)]))),  (mdefault(~B)/nonvar(B)==> (\+B==> ~B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 51)).
spft((mdefault(A)/mpred_positive_literal(A)==> (\+ ~A==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 54), ax).
spft(mpred_mark(pfcCallCode, p, mpred_positive_literal, 1), s(((mdefault(A)/mpred_positive_literal(A)==> (\+ ~A==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 54))), ax).
spft(arity(mpred_positive_literal, 1), mpred_mark(pfcCallCode, p, mpred_positive_literal, 1), pt(mpred_mark(pfcCallCode, p, mpred_positive_literal, 1),  (ground(pfcCallCode:p)->rhs([arity(mpred_positive_literal, 1)])))).
spft(pt(mdefault(A),  (mpred_positive_literal(A)->rhs([(\+ ~A==>A)]))),  (mdefault(B)/mpred_positive_literal(B)==> (\+ ~B==>B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 54)).
spft((mdefault(A)/ (mpred_literal_nv(A), if_missing_mask(A, B, C))==> (\ +B/C==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 55), ax).
spft(mpred_mark(pfcCallCode, p, mpred_literal_nv, 1), s(((mdefault(A)/ (mpred_literal_nv(A), if_missing_mask(A, B, C))==> (\ +B/C==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 55))), ax).
spft(arity(mpred_literal_nv, 1), mpred_mark(pfcCallCode, p, mpred_literal_nv, 1), pt(mpred_mark(pfcCallCode, p, mpred_literal_nv, 1),  (ground(pfcCallCode:p)->rhs([arity(mpred_literal_nv, 1)])))).
spft(mpred_mark(pfcCallCode, p, if_missing_mask, 3), s(((mdefault(A)/ (mpred_literal_nv(A), if_missing_mask(A, B, C))==> (\ +B/C==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 55))), ax).
spft(arity(if_missing_mask, 3), mpred_mark(pfcCallCode, p, if_missing_mask, 3), pt(mpred_mark(pfcCallCode, p, if_missing_mask, 3),  (ground(pfcCallCode:p)->rhs([arity(if_missing_mask, 3)])))).
spft(mpred_mark(pfcCreates, p, \, 1), s(((mdefault(A)/ (mpred_literal_nv(A), if_missing_mask(A, B, C))==> (\ +B/C==>A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 55))), ax).
spft(arity(\, 1), mpred_mark(pfcCreates, p, \, 1), pt(mpred_mark(pfcCreates, p, \, 1),  (ground(pfcCreates:p)->rhs([arity(\, 1)])))).
spft(marker_supported(\, 1), mpred_mark(pfcCreates, p, \, 1), pt(mpred_mark(pfcCreates, p, \, 1),  (ground(p: (\):1)->rhs([marker_supported(\, 1)])))).
spft(hybrid_support(\, 1), marker_supported(\, 1), pt(marker_supported(\, 1), rhs([hybrid_support(\, 1)]))).
spft(prologHybrid(\), hybrid_support(\, 1), pt(hybrid_support(\, 1),  ((\)\='$VAR', atom(\), integer(1), \+prologDynamic(\), \+static_predicate((\)/1)->rhs([{functor(\A, \, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(\, baseKB: \A), \+predicate_property(baseKB: \A, imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB: \A, exported);true), kb_dynamic(baseKB: (\)/1), show_failure(hybrid_support, \+static_predicate((\)/1))}, prologHybrid(\), arity(\, 1)])))).
spft(pt(arity(\, A), rhs([hybrid_support(\, A)])), prologHybrid(\), pt(prologHybrid(\), pt(arity(\, A), rhs([hybrid_support(\, A)])))).
spft(hybrid_support(\, 1), arity(\, 1), pt(arity(\, A), rhs([hybrid_support(\, A)]))).
spft(hybrid_support(\, 1), arity(\, 1), pt(arity(\, A), rhs([hybrid_support(\, A)]))).
spft(arity(\, 1), hybrid_support(\, 1), pt(hybrid_support(\, 1),  ((\)\='$VAR', atom(\), integer(1), \+prologDynamic(\), \+static_predicate((\)/1)->rhs([{functor(\A, \, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(\, baseKB: \A), \+predicate_property(baseKB: \A, imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB: \A, exported);true), kb_dynamic(baseKB: (\)/1), show_failure(hybrid_support, \+static_predicate((\)/1))}, prologHybrid(\), arity(\, 1)])))).
spft(prologHybrid(\), hybrid_support(\, 1), pt(hybrid_support(\, 1), rhs([prologHybrid(\), arity(\, 1)]))).
spft(arity(\, 1), hybrid_support(\, 1), pt(hybrid_support(\, 1), rhs([prologHybrid(\), arity(\, 1)]))).
spft(pt(mdefault(A),  (mpred_literal_nv(A), if_missing_mask(A, B, C)->rhs([(\ +B/C==>A)]))),  (mdefault(D)/ (mpred_literal_nv(D), if_missing_mask(D, E, F))==> (\ +E/F==>D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', 55)).
spft((prologSingleValued(A):-cwc, is_ftCompound(A), functor(A, B, _), !, prologSingleValued(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 9), ax).
spft((mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14), ax).
spft(mpred_mark(pfcLHS, p, mpred_sv, 2), s(((mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14))), ax).
spft(arity(mpred_sv, 2), mpred_mark(pfcLHS, p, mpred_sv, 2), pt(mpred_mark(pfcLHS, p, mpred_sv, 2),  (ground(pfcLHS:p)->rhs([arity(mpred_sv, 2)])))).
spft(pt(tPred(mpred_sv), rhs([ptBinaryPredicate(mpred_sv)])), arity(mpred_sv, 2), pt(arity(mpred_sv, 2), pt(tPred(mpred_sv), rhs([ptBinaryPredicate(mpred_sv)])))).
spft(mpred_mark(pfcCreates, p, prologSingleValued, 1), s(((mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14))), ax).
spft(arity(prologSingleValued, 1), mpred_mark(pfcCreates, p, prologSingleValued, 1), pt(mpred_mark(pfcCreates, p, prologSingleValued, 1),  (ground(pfcCreates:p)->rhs([arity(prologSingleValued, 1)])))).
spft(marker_supported(prologSingleValued, 1), mpred_mark(pfcCreates, p, prologSingleValued, 1), pt(mpred_mark(pfcCreates, p, prologSingleValued, 1),  (ground(p:prologSingleValued:1)->rhs([marker_supported(prologSingleValued, 1)])))).
spft(hybrid_support(prologSingleValued, 1), marker_supported(prologSingleValued, 1), pt(marker_supported(prologSingleValued, 1), rhs([hybrid_support(prologSingleValued, 1)]))).
spft(mpred_mark(pfcCreates, p, singleValuedInArg, 2), s(((mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14))), ax).
spft(arity(singleValuedInArg, 2), mpred_mark(pfcCreates, p, singleValuedInArg, 2), pt(mpred_mark(pfcCreates, p, singleValuedInArg, 2),  (ground(pfcCreates:p)->rhs([arity(singleValuedInArg, 2)])))).
spft(pt(tPred(singleValuedInArg), rhs([ptBinaryPredicate(singleValuedInArg)])), arity(singleValuedInArg, 2), pt(arity(singleValuedInArg, 2), pt(tPred(singleValuedInArg), rhs([ptBinaryPredicate(singleValuedInArg)])))).
spft(marker_supported(singleValuedInArg, 2), mpred_mark(pfcCreates, p, singleValuedInArg, 2), pt(mpred_mark(pfcCreates, p, singleValuedInArg, 2),  (ground(p:singleValuedInArg:2)->rhs([marker_supported(singleValuedInArg, 2)])))).
spft(hybrid_support(singleValuedInArg, 2), marker_supported(singleValuedInArg, 2), pt(marker_supported(singleValuedInArg, 2), rhs([hybrid_support(singleValuedInArg, 2)]))).
spft(prologHybrid(singleValuedInArg), hybrid_support(singleValuedInArg, 2), pt(hybrid_support(singleValuedInArg, 2),  (singleValuedInArg\='$VAR', atom(singleValuedInArg), integer(2), \+prologDynamic(singleValuedInArg), \+static_predicate(singleValuedInArg/2)->rhs([{functor(singleValuedInArg(A, B), singleValuedInArg, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(singleValuedInArg, baseKB:singleValuedInArg(A, B)), \+predicate_property(baseKB:singleValuedInArg(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:singleValuedInArg(A, B), exported);true), kb_dynamic(baseKB:singleValuedInArg/2), show_failure(hybrid_support, \+static_predicate(singleValuedInArg/2))}, prologHybrid(singleValuedInArg), arity(singleValuedInArg, 2)])))).
spft(pt(arity(singleValuedInArg, A), rhs([hybrid_support(singleValuedInArg, A)])), prologHybrid(singleValuedInArg), pt(prologHybrid(singleValuedInArg), pt(arity(singleValuedInArg, A), rhs([hybrid_support(singleValuedInArg, A)])))).
spft(hybrid_support(singleValuedInArg, 2), arity(singleValuedInArg, 2), pt(arity(singleValuedInArg, A), rhs([hybrid_support(singleValuedInArg, A)]))).
spft(arity(singleValuedInArg, 2), hybrid_support(singleValuedInArg, 2), pt(hybrid_support(singleValuedInArg, 2),  (singleValuedInArg\='$VAR', atom(singleValuedInArg), integer(2), \+prologDynamic(singleValuedInArg), \+static_predicate(singleValuedInArg/2)->rhs([{functor(singleValuedInArg(A, B), singleValuedInArg, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(singleValuedInArg, baseKB:singleValuedInArg(A, B)), \+predicate_property(baseKB:singleValuedInArg(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:singleValuedInArg(A, B), exported);true), kb_dynamic(baseKB:singleValuedInArg/2), show_failure(hybrid_support, \+static_predicate(singleValuedInArg/2))}, prologHybrid(singleValuedInArg), arity(singleValuedInArg, 2)])))).
spft(prologHybrid(singleValuedInArg), hybrid_support(singleValuedInArg, 2), pt(hybrid_support(singleValuedInArg, 2), rhs([prologHybrid(singleValuedInArg), arity(singleValuedInArg, 2)]))).
spft(arity(singleValuedInArg, 2), hybrid_support(singleValuedInArg, 2), pt(hybrid_support(singleValuedInArg, 2), rhs([prologHybrid(singleValuedInArg), arity(singleValuedInArg, 2)]))).
spft(mpred_mark(pfcPosTrigger, p, mpred_sv, 2), s(((mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14))), ax).
spft(arity(mpred_sv, 2), mpred_mark(pfcPosTrigger, p, mpred_sv, 2), pt(mpred_mark(pfcPosTrigger, p, mpred_sv, 2),  (ground(pfcPosTrigger:p)->rhs([arity(mpred_sv, 2)])))).
spft(marker_supported(mpred_sv, 2), mpred_mark(pfcPosTrigger, p, mpred_sv, 2), pt(mpred_mark(pfcPosTrigger, p, mpred_sv, 2),  (ground(p:mpred_sv:2)->rhs([marker_supported(mpred_sv, 2)])))).
spft(hybrid_support(mpred_sv, 2), marker_supported(mpred_sv, 2), pt(marker_supported(mpred_sv, 2), rhs([hybrid_support(mpred_sv, 2)]))).
spft(prologHybrid(mpred_sv), hybrid_support(mpred_sv, 2), pt(hybrid_support(mpred_sv, 2),  (mpred_sv\='$VAR', atom(mpred_sv), integer(2), \+prologDynamic(mpred_sv), \+static_predicate(mpred_sv/2)->rhs([{functor(mpred_sv(A, B), mpred_sv, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_sv, baseKB:mpred_sv(A, B)), \+predicate_property(baseKB:mpred_sv(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_sv(A, B), exported);true), kb_dynamic(baseKB:mpred_sv/2), show_failure(hybrid_support, \+static_predicate(mpred_sv/2))}, prologHybrid(mpred_sv), arity(mpred_sv, 2)])))).
spft(pt(arity(mpred_sv, A), rhs([hybrid_support(mpred_sv, A)])), prologHybrid(mpred_sv), pt(prologHybrid(mpred_sv), pt(arity(mpred_sv, A), rhs([hybrid_support(mpred_sv, A)])))).
spft(hybrid_support(mpred_sv, 2), arity(mpred_sv, 2), pt(arity(mpred_sv, A), rhs([hybrid_support(mpred_sv, A)]))).
spft(arity(mpred_sv, 2), hybrid_support(mpred_sv, 2), pt(hybrid_support(mpred_sv, 2),  (mpred_sv\='$VAR', atom(mpred_sv), integer(2), \+prologDynamic(mpred_sv), \+static_predicate(mpred_sv/2)->rhs([{functor(mpred_sv(A, B), mpred_sv, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(mpred_sv, baseKB:mpred_sv(A, B)), \+predicate_property(baseKB:mpred_sv(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:mpred_sv(A, B), exported);true), kb_dynamic(baseKB:mpred_sv/2), show_failure(hybrid_support, \+static_predicate(mpred_sv/2))}, prologHybrid(mpred_sv), arity(mpred_sv, 2)])))).
spft(prologHybrid(mpred_sv), hybrid_support(mpred_sv, 2), pt(hybrid_support(mpred_sv, 2), rhs([prologHybrid(mpred_sv), arity(mpred_sv, 2)]))).
spft(arity(mpred_sv, 2), hybrid_support(mpred_sv, 2), pt(hybrid_support(mpred_sv, 2), rhs([prologHybrid(mpred_sv), arity(mpred_sv, 2)]))).
spft(pt(mpred_sv(A, B), rhs([prologSingleValued(A), arity(A, B), singleValuedInArg(A, B)])),  (mpred_sv(C, D)==>prologSingleValued(C), arity(C, D), singleValuedInArg(C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 14)).
spft(mdefault((prologSingleValued(A), arity(A, B)==>singleValuedInArg(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 19), ax).
spft((prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B))), mdefault((prologSingleValued(C), arity(C, D)==>singleValuedInArg(C, D))), pt(mdefault((prologSingleValued(A), arity(A, B)==>singleValuedInArg(A, B))),  (nonvar(singleValuedInArg(A, B))->rhs([(prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B)))])))).
spft(mpred_mark(pfcLHS, p, prologSingleValued, 1), s(((prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 19))), ax).
spft(arity(prologSingleValued, 1), mpred_mark(pfcLHS, p, prologSingleValued, 1), pt(mpred_mark(pfcLHS, p, prologSingleValued, 1),  (ground(pfcLHS:p)->rhs([arity(prologSingleValued, 1)])))).
spft(mpred_mark(pfcCreates, p, mdefault, 1), s(((prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 19))), ax).
spft(arity(mdefault, 1), mpred_mark(pfcCreates, p, mdefault, 1), pt(mpred_mark(pfcCreates, p, mdefault, 1),  (ground(pfcCreates:p)->rhs([arity(mdefault, 1)])))).
spft(marker_supported(mdefault, 1), mpred_mark(pfcCreates, p, mdefault, 1), pt(mpred_mark(pfcCreates, p, mdefault, 1),  (ground(p:mdefault:1)->rhs([marker_supported(mdefault, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, prologSingleValued, 1), s(((prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 19))), ax).
spft(arity(prologSingleValued, 1), mpred_mark(pfcPosTrigger, p, prologSingleValued, 1), pt(mpred_mark(pfcPosTrigger, p, prologSingleValued, 1),  (ground(pfcPosTrigger:p)->rhs([arity(prologSingleValued, 1)])))).
spft(marker_supported(prologSingleValued, 1), mpred_mark(pfcPosTrigger, p, prologSingleValued, 1), pt(mpred_mark(pfcPosTrigger, p, prologSingleValued, 1),  (ground(p:prologSingleValued:1)->rhs([marker_supported(prologSingleValued, 1)])))).
spft(pt(prologSingleValued(A), pt(arity(A, B), rhs([mdefault(singleValuedInArg(A, B))]))),  (prologSingleValued(C), arity(C, D)==>mdefault(singleValuedInArg(C, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 19)).
spft(pt(arity(predInstMax, A), rhs([mdefault(singleValuedInArg(predInstMax, A))])), prologSingleValued(predInstMax), pt(prologSingleValued(B), pt(arity(B, C), rhs([mdefault(singleValuedInArg(B, C))])))).
spft(mdefault(singleValuedInArg(predInstMax, 3)), arity(predInstMax, 3), pt(arity(predInstMax, A), rhs([mdefault(singleValuedInArg(predInstMax, A))]))).
spft(pt(arity(predTypeMax, A), rhs([mdefault(singleValuedInArg(predTypeMax, A))])), prologSingleValued(predTypeMax), pt(prologSingleValued(B), pt(arity(B, C), rhs([mdefault(singleValuedInArg(B, C))])))).
spft(mdefault(singleValuedInArg(predTypeMax, 3)), arity(predTypeMax, 3), pt(arity(predTypeMax, A), rhs([mdefault(singleValuedInArg(predTypeMax, A))]))).
spft((singleValuedInArg(A, _)==>prologSingleValued(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 23), ax).
spft(mpred_mark(pfcLHS, p, singleValuedInArg, 2), s(((singleValuedInArg(A, _)==>prologSingleValued(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 23))), ax).
spft(arity(singleValuedInArg, 2), mpred_mark(pfcLHS, p, singleValuedInArg, 2), pt(mpred_mark(pfcLHS, p, singleValuedInArg, 2),  (ground(pfcLHS:p)->rhs([arity(singleValuedInArg, 2)])))).
spft(mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2), s(((singleValuedInArg(A, _)==>prologSingleValued(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 23))), ax).
spft(arity(singleValuedInArg, 2), mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2), pt(mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2),  (ground(pfcPosTrigger:p)->rhs([arity(singleValuedInArg, 2)])))).
spft(marker_supported(singleValuedInArg, 2), mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2), pt(mpred_mark(pfcPosTrigger, p, singleValuedInArg, 2),  (ground(p:singleValuedInArg:2)->rhs([marker_supported(singleValuedInArg, 2)])))).
spft(pt(singleValuedInArg(A, _), rhs([prologSingleValued(A)])),  (singleValuedInArg(B, _)==>prologSingleValued(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 23)).
spft(singleValuedInArg(singleValuedInArg, 2), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26), ax).
spft(prologSingleValued(singleValuedInArg), singleValuedInArg(singleValuedInArg, 2), pt(singleValuedInArg(singleValuedInArg, 2), rhs([prologSingleValued(singleValuedInArg)]))).
spft(pt(arity(singleValuedInArg, A), rhs([mdefault(singleValuedInArg(singleValuedInArg, A))])), prologSingleValued(singleValuedInArg), pt(prologSingleValued(singleValuedInArg), pt(arity(singleValuedInArg, A), rhs([mdefault(singleValuedInArg(singleValuedInArg, A))])))).
spft(mdefault(singleValuedInArg(singleValuedInArg, 2)), arity(singleValuedInArg, 2), pt(arity(singleValuedInArg, A), rhs([mdefault(singleValuedInArg(singleValuedInArg, A))]))).
spft((\+ ~singleValuedInArg(singleValuedInArg, 2)==>singleValuedInArg(singleValuedInArg, 2)), mdefault(singleValuedInArg(singleValuedInArg, 2)), pt(mdefault(singleValuedInArg(singleValuedInArg, 2)),  (mpred_positive_literal(singleValuedInArg(singleValuedInArg, 2))->rhs([(\+ ~singleValuedInArg(singleValuedInArg, 2)==>singleValuedInArg(singleValuedInArg, 2))])))).
spft(mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2), s(((\+ ~singleValuedInArg(singleValuedInArg, 2)==>singleValuedInArg(singleValuedInArg, 2)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26))), ax).
spft(arity(singleValuedInArg, 2), mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2), pt(mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2),  (ground(pfcNegTrigger:n)->rhs([arity(singleValuedInArg, 2)])))).
spft(marker_supported(singleValuedInArg, 2), mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2), pt(mpred_mark(pfcNegTrigger, n, singleValuedInArg, 2),  (ground(n:singleValuedInArg:2)->rhs([marker_supported(singleValuedInArg, 2)])))).
spft(nt(~singleValuedInArg(singleValuedInArg, 2), call_u(~singleValuedInArg(singleValuedInArg, 2)), rhs([singleValuedInArg(singleValuedInArg, 2)])),  (\+ ~singleValuedInArg(singleValuedInArg, 2)==>singleValuedInArg(singleValuedInArg, 2)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26)).
spft(singleValuedInArg(singleValuedInArg, 2), \+ ~singleValuedInArg(singleValuedInArg, 2), nt(~singleValuedInArg(singleValuedInArg, 2), call_u(~singleValuedInArg(singleValuedInArg, 2)), rhs([singleValuedInArg(singleValuedInArg, 2)]))).
spft((\ +singleValuedInArg(singleValuedInArg, A)/ (dif:dif(2, A))==>singleValuedInArg(singleValuedInArg, 2)), mdefault(singleValuedInArg(singleValuedInArg, 2)), pt(mdefault(singleValuedInArg(singleValuedInArg, 2)),  (mpred_literal_nv(singleValuedInArg(singleValuedInArg, 2)), if_missing_mask(singleValuedInArg(singleValuedInArg, 2), singleValuedInArg(singleValuedInArg, A), dif:dif(2, A))->rhs([(\ +singleValuedInArg(singleValuedInArg, A)/ (dif:dif(2, A))==>singleValuedInArg(singleValuedInArg, 2))])))).
spft(mpred_mark(pfcLHS, p, \, 1), s(((\ +singleValuedInArg(singleValuedInArg, A)/ (dif:dif(2, A))==>singleValuedInArg(singleValuedInArg, 2)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26))), ax).
spft(arity(\, 1), mpred_mark(pfcLHS, p, \, 1), pt(mpred_mark(pfcLHS, p, \, 1),  (ground(pfcLHS:p)->rhs([arity(\, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, \, 1), s(((\ +singleValuedInArg(singleValuedInArg, A)/ (dif:dif(2, A))==>singleValuedInArg(singleValuedInArg, 2)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26))), ax).
spft(arity(\, 1), mpred_mark(pfcPosTrigger, p, \, 1), pt(mpred_mark(pfcPosTrigger, p, \, 1),  (ground(pfcPosTrigger:p)->rhs([arity(\, 1)])))).
spft(marker_supported(\, 1), mpred_mark(pfcPosTrigger, p, \, 1), pt(mpred_mark(pfcPosTrigger, p, \, 1),  (ground(p: (\):1)->rhs([marker_supported(\, 1)])))).
spft(pt(\ +singleValuedInArg(singleValuedInArg, A),  (dif:dif(2, A)->rhs([singleValuedInArg(singleValuedInArg, 2)]))),  (\ +singleValuedInArg(singleValuedInArg, B)/ (dif:dif(2, B))==>singleValuedInArg(singleValuedInArg, 2)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 26)).
spft(arity(singleValuedInArgDefault, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 30), ax).
spft(prologHybrid(singleValuedInArgDefault), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 30), ax).
spft(pt(arity(singleValuedInArgDefault, A), rhs([hybrid_support(singleValuedInArgDefault, A)])), prologHybrid(singleValuedInArgDefault), pt(prologHybrid(singleValuedInArgDefault), pt(arity(singleValuedInArgDefault, A), rhs([hybrid_support(singleValuedInArgDefault, A)])))).
spft(hybrid_support(singleValuedInArgDefault, 3), arity(singleValuedInArgDefault, 3), pt(arity(singleValuedInArgDefault, A), rhs([hybrid_support(singleValuedInArgDefault, A)]))).
spft(prologHybrid(singleValuedInArgDefault), hybrid_support(singleValuedInArgDefault, 3), pt(hybrid_support(singleValuedInArgDefault, 3),  (singleValuedInArgDefault\='$VAR', atom(singleValuedInArgDefault), integer(3), \+prologDynamic(singleValuedInArgDefault), \+static_predicate(singleValuedInArgDefault/3)->rhs([{functor(singleValuedInArgDefault(A, B, C), singleValuedInArgDefault, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(singleValuedInArgDefault, baseKB:singleValuedInArgDefault(A, B, C)), \+predicate_property(baseKB:singleValuedInArgDefault(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:singleValuedInArgDefault(A, B, C), exported);true), kb_dynamic(baseKB:singleValuedInArgDefault/3), show_failure(hybrid_support, \+static_predicate(singleValuedInArgDefault/3))}, prologHybrid(singleValuedInArgDefault), arity(singleValuedInArgDefault, 3)])))).
spft(arity(singleValuedInArgDefault, 3), hybrid_support(singleValuedInArgDefault, 3), pt(hybrid_support(singleValuedInArgDefault, 3),  (singleValuedInArgDefault\='$VAR', atom(singleValuedInArgDefault), integer(3), \+prologDynamic(singleValuedInArgDefault), \+static_predicate(singleValuedInArgDefault/3)->rhs([{functor(singleValuedInArgDefault(A, B, C), singleValuedInArgDefault, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(singleValuedInArgDefault, baseKB:singleValuedInArgDefault(A, B, C)), \+predicate_property(baseKB:singleValuedInArgDefault(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:singleValuedInArgDefault(A, B, C), exported);true), kb_dynamic(baseKB:singleValuedInArgDefault/3), show_failure(hybrid_support, \+static_predicate(singleValuedInArgDefault/3))}, prologHybrid(singleValuedInArgDefault), arity(singleValuedInArgDefault, 3)])))).
spft(prologHybrid(singleValuedInArgDefault), hybrid_support(singleValuedInArgDefault, 3), pt(hybrid_support(singleValuedInArgDefault, 3), rhs([prologHybrid(singleValuedInArgDefault), arity(singleValuedInArgDefault, 3)]))).
spft(arity(singleValuedInArgDefault, 3), hybrid_support(singleValuedInArgDefault, 3), pt(hybrid_support(singleValuedInArgDefault, 3), rhs([prologHybrid(singleValuedInArgDefault), arity(singleValuedInArgDefault, 3)]))).
spft(tPred(singleValuedInArgDefault), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 30), ax).
spft(pt(arity(singleValuedInArgDefault, A),  (integer(A), A>1->pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, A)])))), tPred(singleValuedInArgDefault), pt(tPred(singleValuedInArgDefault), pt(arity(singleValuedInArgDefault, A),  (integer(A), A>1->pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, A)])))))).
spft(pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, 3)])), arity(singleValuedInArgDefault, 3), pt(arity(singleValuedInArgDefault, A),  (integer(A), A>1->pt(~prologBuiltin(singleValuedInArgDefault), rhs([~tCol(singleValuedInArgDefault), support_hilog(singleValuedInArgDefault, A)]))))).
spft(arity(singleValuedInArgDefault, 3), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 31), ax).
spft(meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 31), ax).
spft(arity(singleValuedInArgDefault, 3), meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)), pt(meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)),  (is_ftCompound(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm))->rhs([{get_functor(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), singleValuedInArgDefault, 3)}, arity(singleValuedInArgDefault, 3)])))).
spft(pt(genls(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A)])))), meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)), pt(meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)),  (dif:dif(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A)->pt(genls(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A), pt(tCol(A),  (~isa(A, ttFormatType)->rhs([formatted_resultIsa(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm), A)]))))))).
spft(prologHybrid(singleValuedInArgDefault), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 31), ax).
spft(tPred(singleValuedInArgDefault), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 31), ax).
spft((singleValuedInArgDefault(A, 2, C), arity(A, 2), argIsa(A, 1, B)==>relationMostInstance(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 32), ax).
spft(mpred_mark(pfcLHS, p, singleValuedInArgDefault, 3), s(((singleValuedInArgDefault(A, 2, C), arity(A, 2), argIsa(A, 1, B)==>relationMostInstance(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 32))), ax).
spft(arity(singleValuedInArgDefault, 3), mpred_mark(pfcLHS, p, singleValuedInArgDefault, 3), pt(mpred_mark(pfcLHS, p, singleValuedInArgDefault, 3),  (ground(pfcLHS:p)->rhs([arity(singleValuedInArgDefault, 3)])))).
spft(mpred_mark(pfcCreates, p, relationMostInstance, 3), s(((singleValuedInArgDefault(A, 2, C), arity(A, 2), argIsa(A, 1, B)==>relationMostInstance(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 32))), ax).
spft(arity(relationMostInstance, 3), mpred_mark(pfcCreates, p, relationMostInstance, 3), pt(mpred_mark(pfcCreates, p, relationMostInstance, 3),  (ground(pfcCreates:p)->rhs([arity(relationMostInstance, 3)])))).
spft(marker_supported(relationMostInstance, 3), mpred_mark(pfcCreates, p, relationMostInstance, 3), pt(mpred_mark(pfcCreates, p, relationMostInstance, 3),  (ground(p:relationMostInstance:3)->rhs([marker_supported(relationMostInstance, 3)])))).
spft(hybrid_support(relationMostInstance, 3), marker_supported(relationMostInstance, 3), pt(marker_supported(relationMostInstance, 3), rhs([hybrid_support(relationMostInstance, 3)]))).
spft(prologHybrid(relationMostInstance), hybrid_support(relationMostInstance, 3), pt(hybrid_support(relationMostInstance, 3),  (relationMostInstance\='$VAR', atom(relationMostInstance), integer(3), \+prologDynamic(relationMostInstance), \+static_predicate(relationMostInstance/3)->rhs([{functor(relationMostInstance(A, B, C), relationMostInstance, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(relationMostInstance, baseKB:relationMostInstance(A, B, C)), \+predicate_property(baseKB:relationMostInstance(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:relationMostInstance(A, B, C), exported);true), kb_dynamic(baseKB:relationMostInstance/3), show_failure(hybrid_support, \+static_predicate(relationMostInstance/3))}, prologHybrid(relationMostInstance), arity(relationMostInstance, 3)])))).
spft(pt(arity(relationMostInstance, A), rhs([hybrid_support(relationMostInstance, A)])), prologHybrid(relationMostInstance), pt(prologHybrid(relationMostInstance), pt(arity(relationMostInstance, A), rhs([hybrid_support(relationMostInstance, A)])))).
spft(hybrid_support(relationMostInstance, 3), arity(relationMostInstance, 3), pt(arity(relationMostInstance, A), rhs([hybrid_support(relationMostInstance, A)]))).
spft(arity(relationMostInstance, 3), hybrid_support(relationMostInstance, 3), pt(hybrid_support(relationMostInstance, 3),  (relationMostInstance\='$VAR', atom(relationMostInstance), integer(3), \+prologDynamic(relationMostInstance), \+static_predicate(relationMostInstance/3)->rhs([{functor(relationMostInstance(A, B, C), relationMostInstance, 3),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(relationMostInstance, baseKB:relationMostInstance(A, B, C)), \+predicate_property(baseKB:relationMostInstance(A, B, C), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:relationMostInstance(A, B, C), exported);true), kb_dynamic(baseKB:relationMostInstance/3), show_failure(hybrid_support, \+static_predicate(relationMostInstance/3))}, prologHybrid(relationMostInstance), arity(relationMostInstance, 3)])))).
spft(prologHybrid(relationMostInstance), hybrid_support(relationMostInstance, 3), pt(hybrid_support(relationMostInstance, 3), rhs([prologHybrid(relationMostInstance), arity(relationMostInstance, 3)]))).
spft(arity(relationMostInstance, 3), hybrid_support(relationMostInstance, 3), pt(hybrid_support(relationMostInstance, 3), rhs([prologHybrid(relationMostInstance), arity(relationMostInstance, 3)]))).
spft(mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3), s(((singleValuedInArgDefault(A, 2, C), arity(A, 2), argIsa(A, 1, B)==>relationMostInstance(A, B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 32))), ax).
spft(arity(singleValuedInArgDefault, 3), mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3), pt(mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3),  (ground(pfcPosTrigger:p)->rhs([arity(singleValuedInArgDefault, 3)])))).
spft(marker_supported(singleValuedInArgDefault, 3), mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3), pt(mpred_mark(pfcPosTrigger, p, singleValuedInArgDefault, 3),  (ground(p:singleValuedInArgDefault:3)->rhs([marker_supported(singleValuedInArgDefault, 3)])))).
spft(hybrid_support(singleValuedInArgDefault, 3), marker_supported(singleValuedInArgDefault, 3), pt(marker_supported(singleValuedInArgDefault, 3), rhs([hybrid_support(singleValuedInArgDefault, 3)]))).
spft(pt(singleValuedInArgDefault(A, 2, C), pt(arity(A, 2), pt(argIsa(A, 1, B), rhs([relationMostInstance(A, B, C)])))),  (singleValuedInArgDefault(D, 2, F), arity(D, 2), argIsa(D, 1, E)==>relationMostInstance(D, E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 32)).
spft((singleValuedInArgDefault(B, C, A)/ground(A)==>singleValuedInArg(B, C)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 33), ax).
spft(pt(singleValuedInArgDefault(B, C, A),  (ground(A)->rhs([singleValuedInArg(B, C)]))),  (singleValuedInArgDefault(E, F, D)/ground(D)==>singleValuedInArg(E, F)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 33)).
spft(({A=2}, singleValuedInArgDefault(B, A, D), arity(B, A), argIsa(B, 1, C)==>relationMostInstance(B, C, D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 34), ax).
spft(pt(singleValuedInArgDefault(A, 2, C), pt(arity(A, 2), pt(argIsa(A, 1, B), rhs([relationMostInstance(A, B, C)])))),  ({D=2}, singleValuedInArgDefault(E, D, G), arity(E, D), argIsa(E, 1, F)==>relationMostInstance(E, F, G)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 34)).
spft(pt(singleValuedInArgDefault(A, 2, C), pt(arity(A, 2), pt(argIsa(A, 1, B), rhs([relationMostInstance(A, B, C)])))),  ({D=2}, singleValuedInArgDefault(E, D, G), arity(E, D), argIsa(E, 1, F)==>relationMostInstance(E, F, G)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 34)).
spft((singleValuedInArgDefault(B, E, A)/is_ftNonvar(A), arity(B, C), {functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)}==>mdefault((F<-{ground(D)}, ~ (G/nonvar(H))))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 36), ax).
spft(mpred_mark(pfcCallCode, p, replace_arg, 4), s(((singleValuedInArgDefault(B, E, A)/is_ftNonvar(A), arity(B, C), {functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)}==>mdefault((F<-{ground(D)}, ~ (G/nonvar(H))))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 36))), ax).
spft(arity(replace_arg, 4), mpred_mark(pfcCallCode, p, replace_arg, 4), pt(mpred_mark(pfcCallCode, p, replace_arg, 4),  (ground(pfcCallCode:p)->rhs([arity(replace_arg, 4)])))).
spft(pt(singleValuedInArgDefault(B, E, A),  (is_ftNonvar(A)->pt(arity(B, C),  (functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)->rhs([mdefault((F<-{ground(D)}, ~ (G/nonvar(H))))]))))),  (singleValuedInArgDefault(J, M, I)/is_ftNonvar(I), arity(J, K), {functor(L, J, K), replace_arg(L, M, I, N), replace_arg(N, M, P, O)}==>mdefault((N<-{ground(L)}, ~ (O/nonvar(P))))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 36)).
spft(pt(singleValuedInArgDefault(B, E, A),  (is_ftNonvar(A)->pt(arity(B, C),  (functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)->rhs([mdefault((F<-{ground(D)}, ~ (G/nonvar(H))))]))))),  (singleValuedInArgDefault(J, M, I)/is_ftNonvar(I), arity(J, K), {functor(L, J, K), replace_arg(L, M, I, N), replace_arg(N, M, P, O)}==>mdefault((N<-{ground(L)}, ~ (O/nonvar(P))))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', 36)).
spft(arity(clif, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 38), ax).
spft(arity(boxlog, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 39), ax).
spft(arity(pfclog, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 40), ax).
spft(hybrid_support(clif, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 41), ax).
spft(prologHybrid(clif), hybrid_support(clif, 1), pt(hybrid_support(clif, 1),  (clif\='$VAR', atom(clif), integer(1), \+prologDynamic(clif), \+static_predicate(clif/1)->rhs([{functor(clif(A), clif, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(clif, baseKB:clif(A)), \+predicate_property(baseKB:clif(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:clif(A), exported);true), kb_dynamic(baseKB:clif/1), show_failure(hybrid_support, \+static_predicate(clif/1))}, prologHybrid(clif), arity(clif, 1)])))).
spft(pt(arity(clif, A), rhs([hybrid_support(clif, A)])), prologHybrid(clif), pt(prologHybrid(clif), pt(arity(clif, A), rhs([hybrid_support(clif, A)])))).
spft(hybrid_support(clif, 1), arity(clif, 1), pt(arity(clif, A), rhs([hybrid_support(clif, A)]))).
spft(hybrid_support(clif, 1), arity(clif, 1), pt(arity(clif, A), rhs([hybrid_support(clif, A)]))).
spft(arity(clif, 1), hybrid_support(clif, 1), pt(hybrid_support(clif, 1),  (clif\='$VAR', atom(clif), integer(1), \+prologDynamic(clif), \+static_predicate(clif/1)->rhs([{functor(clif(A), clif, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(clif, baseKB:clif(A)), \+predicate_property(baseKB:clif(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:clif(A), exported);true), kb_dynamic(baseKB:clif/1), show_failure(hybrid_support, \+static_predicate(clif/1))}, prologHybrid(clif), arity(clif, 1)])))).
spft(prologHybrid(clif), hybrid_support(clif, 1), pt(hybrid_support(clif, 1), rhs([prologHybrid(clif), arity(clif, 1)]))).
spft(arity(clif, 1), hybrid_support(clif, 1), pt(hybrid_support(clif, 1), rhs([prologHybrid(clif), arity(clif, 1)]))).
spft(hybrid_support(boxlog, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 42), ax).
spft(prologHybrid(boxlog), hybrid_support(boxlog, 1), pt(hybrid_support(boxlog, 1),  (boxlog\='$VAR', atom(boxlog), integer(1), \+prologDynamic(boxlog), \+static_predicate(boxlog/1)->rhs([{functor(boxlog(A), boxlog, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(boxlog, baseKB:boxlog(A)), \+predicate_property(baseKB:boxlog(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:boxlog(A), exported);true), kb_dynamic(baseKB:boxlog/1), show_failure(hybrid_support, \+static_predicate(boxlog/1))}, prologHybrid(boxlog), arity(boxlog, 1)])))).
spft(pt(arity(boxlog, A), rhs([hybrid_support(boxlog, A)])), prologHybrid(boxlog), pt(prologHybrid(boxlog), pt(arity(boxlog, A), rhs([hybrid_support(boxlog, A)])))).
spft(hybrid_support(boxlog, 1), arity(boxlog, 1), pt(arity(boxlog, A), rhs([hybrid_support(boxlog, A)]))).
spft(hybrid_support(boxlog, 1), arity(boxlog, 1), pt(arity(boxlog, A), rhs([hybrid_support(boxlog, A)]))).
spft(arity(boxlog, 1), hybrid_support(boxlog, 1), pt(hybrid_support(boxlog, 1),  (boxlog\='$VAR', atom(boxlog), integer(1), \+prologDynamic(boxlog), \+static_predicate(boxlog/1)->rhs([{functor(boxlog(A), boxlog, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(boxlog, baseKB:boxlog(A)), \+predicate_property(baseKB:boxlog(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:boxlog(A), exported);true), kb_dynamic(baseKB:boxlog/1), show_failure(hybrid_support, \+static_predicate(boxlog/1))}, prologHybrid(boxlog), arity(boxlog, 1)])))).
spft(prologHybrid(boxlog), hybrid_support(boxlog, 1), pt(hybrid_support(boxlog, 1), rhs([prologHybrid(boxlog), arity(boxlog, 1)]))).
spft(arity(boxlog, 1), hybrid_support(boxlog, 1), pt(hybrid_support(boxlog, 1), rhs([prologHybrid(boxlog), arity(boxlog, 1)]))).
spft(hybrid_support(pfclog, 1), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 43), ax).
spft(prologHybrid(pfclog), hybrid_support(pfclog, 1), pt(hybrid_support(pfclog, 1),  (pfclog\='$VAR', atom(pfclog), integer(1), \+prologDynamic(pfclog), \+static_predicate(pfclog/1)->rhs([{functor(pfclog(A), pfclog, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfclog, baseKB:pfclog(A)), \+predicate_property(baseKB:pfclog(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfclog(A), exported);true), kb_dynamic(baseKB:pfclog/1), show_failure(hybrid_support, \+static_predicate(pfclog/1))}, prologHybrid(pfclog), arity(pfclog, 1)])))).
spft(pt(arity(pfclog, A), rhs([hybrid_support(pfclog, A)])), prologHybrid(pfclog), pt(prologHybrid(pfclog), pt(arity(pfclog, A), rhs([hybrid_support(pfclog, A)])))).
spft(hybrid_support(pfclog, 1), arity(pfclog, 1), pt(arity(pfclog, A), rhs([hybrid_support(pfclog, A)]))).
spft(hybrid_support(pfclog, 1), arity(pfclog, 1), pt(arity(pfclog, A), rhs([hybrid_support(pfclog, A)]))).
spft(arity(pfclog, 1), hybrid_support(pfclog, 1), pt(hybrid_support(pfclog, 1),  (pfclog\='$VAR', atom(pfclog), integer(1), \+prologDynamic(pfclog), \+static_predicate(pfclog/1)->rhs([{functor(pfclog(A), pfclog, 1),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(pfclog, baseKB:pfclog(A)), \+predicate_property(baseKB:pfclog(A), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:pfclog(A), exported);true), kb_dynamic(baseKB:pfclog/1), show_failure(hybrid_support, \+static_predicate(pfclog/1))}, prologHybrid(pfclog), arity(pfclog, 1)])))).
spft(prologHybrid(pfclog), hybrid_support(pfclog, 1), pt(hybrid_support(pfclog, 1), rhs([prologHybrid(pfclog), arity(pfclog, 1)]))).
spft(arity(pfclog, 1), hybrid_support(pfclog, 1), pt(hybrid_support(pfclog, 1), rhs([prologHybrid(pfclog), arity(pfclog, 1)]))).
spft((clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49), ax).
spft(mpred_mark(pfcLHS, p, clif, 1), s(((clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49))), ax).
spft(arity(clif, 1), mpred_mark(pfcLHS, p, clif, 1), pt(mpred_mark(pfcLHS, p, clif, 1),  (ground(pfcLHS:p)->rhs([arity(clif, 1)])))).
spft(mpred_mark(pfcCallCode, p, delistify_last_arg, 3), s(((clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49))), ax).
spft(arity(delistify_last_arg, 3), mpred_mark(pfcCallCode, p, delistify_last_arg, 3), pt(mpred_mark(pfcCallCode, p, delistify_last_arg, 3),  (ground(pfcCallCode:p)->rhs([arity(delistify_last_arg, 3)])))).
spft(mpred_mark(pfcCreates, p, boxlog, 1), s(((clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49))), ax).
spft(arity(boxlog, 1), mpred_mark(pfcCreates, p, boxlog, 1), pt(mpred_mark(pfcCreates, p, boxlog, 1),  (ground(pfcCreates:p)->rhs([arity(boxlog, 1)])))).
spft(marker_supported(boxlog, 1), mpred_mark(pfcCreates, p, boxlog, 1), pt(mpred_mark(pfcCreates, p, boxlog, 1),  (ground(p:boxlog:1)->rhs([marker_supported(boxlog, 1)])))).
spft(hybrid_support(boxlog, 1), marker_supported(boxlog, 1), pt(marker_supported(boxlog, 1), rhs([hybrid_support(boxlog, 1)]))).
spft(mpred_mark(pfcPosTrigger, p, clif, 1), s(((clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49))), ax).
spft(arity(clif, 1), mpred_mark(pfcPosTrigger, p, clif, 1), pt(mpred_mark(pfcPosTrigger, p, clif, 1),  (ground(pfcPosTrigger:p)->rhs([arity(clif, 1)])))).
spft(marker_supported(clif, 1), mpred_mark(pfcPosTrigger, p, clif, 1), pt(mpred_mark(pfcPosTrigger, p, clif, 1),  (ground(p:clif:1)->rhs([marker_supported(clif, 1)])))).
spft(hybrid_support(clif, 1), marker_supported(clif, 1), pt(marker_supported(clif, 1), rhs([hybrid_support(clif, 1)]))).
spft(pt(clif(A), rhs([{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}])),  (clif(C)==>{delistify_last_arg(C, kif_to_boxlog, D)}, boxlog(D), {must(is_entailed(D))}), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 49)).
spft((boxlog(A), {delistify_last_arg(A, boxlog_to_pfc, B)}==>pfclog(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51), ax).
spft(mpred_mark(pfcLHS, p, boxlog, 1), s(((boxlog(A), {delistify_last_arg(A, boxlog_to_pfc, B)}==>pfclog(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51))), ax).
spft(arity(boxlog, 1), mpred_mark(pfcLHS, p, boxlog, 1), pt(mpred_mark(pfcLHS, p, boxlog, 1),  (ground(pfcLHS:p)->rhs([arity(boxlog, 1)])))).
spft(mpred_mark(pfcCreates, p, pfclog, 1), s(((boxlog(A), {delistify_last_arg(A, boxlog_to_pfc, B)}==>pfclog(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51))), ax).
spft(arity(pfclog, 1), mpred_mark(pfcCreates, p, pfclog, 1), pt(mpred_mark(pfcCreates, p, pfclog, 1),  (ground(pfcCreates:p)->rhs([arity(pfclog, 1)])))).
spft(marker_supported(pfclog, 1), mpred_mark(pfcCreates, p, pfclog, 1), pt(mpred_mark(pfcCreates, p, pfclog, 1),  (ground(p:pfclog:1)->rhs([marker_supported(pfclog, 1)])))).
spft(hybrid_support(pfclog, 1), marker_supported(pfclog, 1), pt(marker_supported(pfclog, 1), rhs([hybrid_support(pfclog, 1)]))).
spft(mpred_mark(pfcPosTrigger, p, boxlog, 1), s(((boxlog(A), {delistify_last_arg(A, boxlog_to_pfc, B)}==>pfclog(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51))), ax).
spft(arity(boxlog, 1), mpred_mark(pfcPosTrigger, p, boxlog, 1), pt(mpred_mark(pfcPosTrigger, p, boxlog, 1),  (ground(pfcPosTrigger:p)->rhs([arity(boxlog, 1)])))).
spft(marker_supported(boxlog, 1), mpred_mark(pfcPosTrigger, p, boxlog, 1), pt(mpred_mark(pfcPosTrigger, p, boxlog, 1),  (ground(p:boxlog:1)->rhs([marker_supported(boxlog, 1)])))).
spft(pt(boxlog(A),  (delistify_last_arg(A, boxlog_to_pfc, B)->rhs([pfclog(B)]))),  (boxlog(C), {delistify_last_arg(C, boxlog_to_pfc, D)}==>pfclog(D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51)).
spft(pt(boxlog(A),  (delistify_last_arg(A, boxlog_to_pfc, B)->rhs([pfclog(B)]))),  (boxlog(C), {delistify_last_arg(C, boxlog_to_pfc, D)}==>pfclog(D)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 51)).
spft((pfclog(A)==>A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 54), ax).
spft(mpred_mark(pfcLHS, p, pfclog, 1), s(((pfclog(A)==>A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 54))), ax).
spft(arity(pfclog, 1), mpred_mark(pfcLHS, p, pfclog, 1), pt(mpred_mark(pfcLHS, p, pfclog, 1),  (ground(pfcLHS:p)->rhs([arity(pfclog, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, pfclog, 1), s(((pfclog(A)==>A), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 54))), ax).
spft(arity(pfclog, 1), mpred_mark(pfcPosTrigger, p, pfclog, 1), pt(mpred_mark(pfcPosTrigger, p, pfclog, 1),  (ground(pfcPosTrigger:p)->rhs([arity(pfclog, 1)])))).
spft(marker_supported(pfclog, 1), mpred_mark(pfcPosTrigger, p, pfclog, 1), pt(mpred_mark(pfcPosTrigger, p, pfclog, 1),  (ground(p:pfclog:1)->rhs([marker_supported(pfclog, 1)])))).
spft(pt(pfclog(A), rhs([A])),  (pfclog(B)==>B), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 54)).
spft(({is_clif(A)}==> (A/is_clif(A)==>clif(A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74), ax).
spft(mpred_mark(pfcCallCode, p, is_clif, 1), s((({is_clif(A)}==> (A/is_clif(A)==>clif(A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74))), ax).
spft(arity(is_clif, 1), mpred_mark(pfcCallCode, p, is_clif, 1), pt(mpred_mark(pfcCallCode, p, is_clif, 1),  (ground(pfcCallCode:p)->rhs([arity(is_clif, 1)])))).
spft(mpred_mark(pfcRHS, p, clif, 1), s((({is_clif(A)}==> (A/is_clif(A)==>clif(A))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74))), ax).
spft(arity(clif, 1), mpred_mark(pfcRHS, p, clif, 1), pt(mpred_mark(pfcRHS, p, clif, 1),  (ground(pfcRHS:p)->rhs([arity(clif, 1)])))).
spft(marker_supported(clif, 1), mpred_mark(pfcRHS, p, clif, 1), pt(mpred_mark(pfcRHS, p, clif, 1),  (ground(p:clif:1)->rhs([marker_supported(clif, 1)])))).
spft(tPred(clif), mpred_mark(pfcRHS, p, clif, 1), pt(mpred_mark(pfcRHS, p, clif, 1),  (atom(clif), integer(1), clif\==arity->rhs([tPred(clif), arity(clif, 1), pfcControlled(clif/1)])))).
spft(pt(arity(clif, A),  (integer(A), A>1->pt(~prologBuiltin(clif), rhs([~tCol(clif), support_hilog(clif, A)])))), tPred(clif), pt(tPred(clif), pt(arity(clif, A),  (integer(A), A>1->pt(~prologBuiltin(clif), rhs([~tCol(clif), support_hilog(clif, A)])))))).
spft(arity(clif, 1), mpred_mark(pfcRHS, p, clif, 1), pt(mpred_mark(pfcRHS, p, clif, 1),  (atom(clif), integer(1), clif\==arity->rhs([tPred(clif), arity(clif, 1), pfcControlled(clif/1)])))).
spft(pfcControlled(clif/1), mpred_mark(pfcRHS, p, clif, 1), pt(mpred_mark(pfcRHS, p, clif, 1),  (atom(clif), integer(1), clif\==arity->rhs([tPred(clif), arity(clif, 1), pfcControlled(clif/1)])))).
spft(pt(arity(clif/1, A), rhs([hybrid_support(clif/1, A)])), pfcControlled(clif/1), pt(pfcControlled(clif/1), pt(arity(clif/1, A), rhs([hybrid_support(clif/1, A)])))).
spft(support_hilog(clif, 1), pfcControlled(clif/1), pt(pfcControlled(clif/1),  (get_arity(clif/1, clif, 1), arity(clif, 1)->rhs([support_hilog(clif, 1)])))).
spft(hybrid_support(clif, 1), support_hilog(clif, 1), pt(support_hilog(clif, 1),  (clif\='$VAR', atom(clif), integer(1), \+static_predicate(clif/1), \+prologDynamic(clif)->rhs([hybrid_support(clif, 1), {A=arity(clif, 1)}, A])))).
spft(arity(clif, 1), support_hilog(clif, 1), pt(support_hilog(clif, 1),  (clif\='$VAR', atom(clif), integer(1), \+static_predicate(clif/1), \+prologDynamic(clif)->rhs([hybrid_support(clif, 1), {arity(clif, 1)=arity(clif, 1)}, arity(clif, 1)])))).
spft(support_hilog(clif, 1), pfcControlled(clif/1), pt(pfcControlled(clif/1),  (get_arity(clif/1, clif, 1), arity(clif, 1)->rhs([support_hilog(clif, 1)])))).
spft(prologHybrid(clif/1), pfcControlled(clif/1), pt(pfcControlled(clif/1), rhs([prologHybrid(clif/1)]))).
spft(pt(arity(clif/1, A), rhs([hybrid_support(clif/1, A)])), prologHybrid(clif/1), pt(prologHybrid(clif/1), pt(arity(clif/1, A), rhs([hybrid_support(clif/1, A)])))).
spft(arity(/, 2), prologHybrid(clif/1), pt(prologHybrid(clif/1),  (get_functor(clif/1, /, 2), clif/1\= (/)->rhs([arity(/, 2)])))).
spft((if(A, B)/is_clif(if(A, B))==>clif(if(A, B))),  ({is_clif(C)}==> (C/is_clif(C)==>clif(C))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74)).
spft(mpred_mark(pfcLHS, p, if, 2), s(((if(A, B)/is_clif(if(A, B))==>clif(if(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74))), ax).
spft(arity(if, 2), mpred_mark(pfcLHS, p, if, 2), pt(mpred_mark(pfcLHS, p, if, 2),  (ground(pfcLHS:p)->rhs([arity(if, 2)])))).
spft(pt(tPred(if), rhs([ptBinaryPredicate(if)])), arity(if, 2), pt(arity(if, 2), pt(tPred(if), rhs([ptBinaryPredicate(if)])))).
spft(mpred_mark(pfcCreates, p, clif, 1), s(((if(A, B)/is_clif(if(A, B))==>clif(if(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74))), ax).
spft(arity(clif, 1), mpred_mark(pfcCreates, p, clif, 1), pt(mpred_mark(pfcCreates, p, clif, 1),  (ground(pfcCreates:p)->rhs([arity(clif, 1)])))).
spft(marker_supported(clif, 1), mpred_mark(pfcCreates, p, clif, 1), pt(mpred_mark(pfcCreates, p, clif, 1),  (ground(p:clif:1)->rhs([marker_supported(clif, 1)])))).
spft(mpred_mark(pfcPosTrigger, p, if, 2), s(((if(A, B)/is_clif(if(A, B))==>clif(if(A, B))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74))), ax).
spft(arity(if, 2), mpred_mark(pfcPosTrigger, p, if, 2), pt(mpred_mark(pfcPosTrigger, p, if, 2),  (ground(pfcPosTrigger:p)->rhs([arity(if, 2)])))).
spft(marker_supported(if, 2), mpred_mark(pfcPosTrigger, p, if, 2), pt(mpred_mark(pfcPosTrigger, p, if, 2),  (ground(p:if:2)->rhs([marker_supported(if, 2)])))).
spft(hybrid_support(if, 2), marker_supported(if, 2), pt(marker_supported(if, 2), rhs([hybrid_support(if, 2)]))).
spft(prologHybrid(if), hybrid_support(if, 2), pt(hybrid_support(if, 2),  (if\='$VAR', atom(if), integer(2), \+prologDynamic(if), \+static_predicate(if/2)->rhs([{functor(if(A, B), if, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(if, baseKB:if(A, B)), \+predicate_property(baseKB:if(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:if(A, B), exported);true), kb_dynamic(baseKB:if/2), show_failure(hybrid_support, \+static_predicate(if/2))}, prologHybrid(if), arity(if, 2)])))).
spft(pt(arity(if, A), rhs([hybrid_support(if, A)])), prologHybrid(if), pt(prologHybrid(if), pt(arity(if, A), rhs([hybrid_support(if, A)])))).
spft(hybrid_support(if, 2), arity(if, 2), pt(arity(if, A), rhs([hybrid_support(if, A)]))).
spft(arity(if, 2), hybrid_support(if, 2), pt(hybrid_support(if, 2),  (if\='$VAR', atom(if), integer(2), \+prologDynamic(if), \+static_predicate(if/2)->rhs([{functor(if(A, B), if, 2),  (var(baseKB)->t_l:user_abox(baseKB);true),  (var(baseKB)->ignore((current_predicate(if, baseKB:if(A, B)), \+predicate_property(baseKB:if(A, B), imported_from(_))));true),  (var(baseKB)->predicate_property(baseKB:if(A, B), exported);true), kb_dynamic(baseKB:if/2), show_failure(hybrid_support, \+static_predicate(if/2))}, prologHybrid(if), arity(if, 2)])))).
spft(prologHybrid(if), hybrid_support(if, 2), pt(hybrid_support(if, 2), rhs([prologHybrid(if), arity(if, 2)]))).
spft(arity(if, 2), hybrid_support(if, 2), pt(hybrid_support(if, 2), rhs([prologHybrid(if), arity(if, 2)]))).
spft(pt(if(A, B),  (is_clif(if(A, B))->rhs([clif(if(A, B))]))),  (if(C, D)/is_clif(if(C, D))==>clif(if(C, D))), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 74)).
spft((A/is_kif_rule(A)==>clif(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 77), ax).
spft(mpred_mark(pfcCallCode, p, is_kif_rule, 1), s(((A/is_kif_rule(A)==>clif(A)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 77))), ax).
spft(arity(is_kif_rule, 1), mpred_mark(pfcCallCode, p, is_kif_rule, 1), pt(mpred_mark(pfcCallCode, p, is_kif_rule, 1),  (ground(pfcCallCode:p)->rhs([arity(is_kif_rule, 1)])))).
spft(pt(A,  (is_kif_rule(A)->rhs([clif(A)]))),  (B/is_kif_rule(B)==>clif(B)), mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', 77)).
:- multifile(baseKB:(bt)/2).
:- dynamic bt/2.
:- multifile bt/2.

:- multifile(baseKB:(ftNonvar)/1).
:- dynamic ftNonvar/1.
:- multifile ftNonvar/1.
:- module_transparent ftNonvar/1.
:- discontiguous ftNonvar/1.

:- multifile(baseKB:(mpred_warnings)/1).
:- dynamic mpred_warnings/1.
:- multifile mpred_warnings/1.

:- multifile(baseKB:(argQuotedIsa)/3).
:- dynamic argQuotedIsa/3.
:- multifile argQuotedIsa/3.
:- module_transparent argQuotedIsa/3.
:- discontiguous argQuotedIsa/3.

:- multifile(baseKB:(did_learn_from_name)/1).
:- dynamic did_learn_from_name/1.
:- module_transparent did_learn_from_name/1.

:- multifile(baseKB:(ttNonGenled)/1).
:- dynamic ttNonGenled/1.
:- multifile ttNonGenled/1.
:- module_transparent ttNonGenled/1.
:- discontiguous ttNonGenled/1.

ttNonGenled('Thing').
ttNonGenled('CycLTerm').
:- multifile(baseKB:(t)/6).
:- dynamic t/6.
:- meta_predicate t(5,?,?,?,?,?).
:- module_transparent t/6.

:- multifile(baseKB:(asserted_mpred_t)/6).
:- dynamic asserted_mpred_t/6.
:- module_transparent asserted_mpred_t/6.

:- multifile(baseKB:(ftNumber)/1).
:- dynamic ftNumber/1.
:- multifile ftNumber/1.
:- module_transparent ftNumber/1.
:- discontiguous ftNumber/1.

:- multifile(baseKB:(t)/5).
:- dynamic t/5.
:- meta_predicate t(?,?,?,?,?).
:- module_transparent t/5.

:- multifile(baseKB:(ttUnverifiableType)/1).
:- dynamic ttUnverifiableType/1.
:- multifile ttUnverifiableType/1.
:- module_transparent ttUnverifiableType/1.
:- discontiguous ttUnverifiableType/1.

ttUnverifiableType(ftDice).
ttUnverifiableType(ftID).
ttUnverifiableType(ftListFn(ftTerm)).
ttUnverifiableType(ftString).
ttUnverifiableType(ftTerm).
ttUnverifiableType(ftText).
ttUnverifiableType(ftVoprop).
ttUnverifiableType(tCol).
ttUnverifiableType(tFunction).
ttUnverifiableType(tPred).
ttUnverifiableType(ttFormatType).
ttUnverifiableType(vtDirection).
:- multifile(baseKB:(mpred_select_hook)/1).
:- dynamic mpred_select_hook/1.
:- multifile mpred_select_hook/1.

:- multifile(baseKB:(asserted_mpred_f)/4).
:- dynamic asserted_mpred_f/4.
:- module_transparent asserted_mpred_f/4.

:- multifile(baseKB:(tCol)/1).
:- dynamic tCol/1.
:- multifile tCol/1.
:- module_transparent tCol/1.
:- discontiguous tCol/1.

tCol(ttValueType).
tCol(tNotForUnboundPredicates).
tCol(completelyAssertedCollection).
tCol(prologNegByFailure).
tCol(tCol).
tCol(tSpec).
tCol(ttFormatType).
tCol(tSet).
tCol(tRelation).
tCol(tPred).
tCol(tFunction).
tCol(prologMacroHead).
tCol(ttPredType).
tCol(functorDeclares).
tCol(prologMultiValued).
tCol(prologOrdered).
tCol(predIsFlag).
tCol(ttNonGenled).
tCol(meta_argtypes).
tCol(prologHybrid).
tCol(prologPTTP).
tCol(prologDynamic).
tCol(prologKIF).
tCol(prologBuiltin).
tCol(prologListValued).
tCol(prologSingleValued).
tCol(pfcControlled).
tCol(predCanHaveSingletons).
tCol(tTemporalThing).
tCol(prologSideEffects).
tCol(tInferInstanceFromArgType).
tCol(ttNotTemporalType).
tCol(ttSpatialType).
tCol(ttTemporalType).
tCol(ttTypeType).
tCol(ttUnverifiableType).
tCol(pfcDatabaseTerm).
tCol(pfcWatched).
tCol(pfcCreates).
tCol(pfcNegTrigger).
tCol(pfcPosTrigger).
tCol(pfcBcTrigger).
tCol(pfcRHS).
tCol(pfcMustFC).
tCol(notAssertable).
tCol(prologEquality).
tCol(ftInt).
tCol(vtDirection).
tCol(completeIsaAsserted).
tCol(tFormatType).
tCol(tSpatialThing).
tCol(completeExtentAsserted).
tCol(vtValue).
tCol(vtColor).
tCol(tAvoidForwardChain).
tCol('SententialOperator').
tCol(tNewlyCreated).
tCol(ttTypeFacet).
tCol(ptBinaryPredicate).
tCol(ptUnaryPredicate).
:- multifile(baseKB:(ftGround)/1).
:- dynamic ftGround/1.
:- multifile ftGround/1.
:- module_transparent ftGround/1.
:- discontiguous ftGround/1.

:- multifile(baseKB:(asserted_mpred_f)/3).
:- dynamic asserted_mpred_f/3.
:- module_transparent asserted_mpred_f/3.

:- multifile(baseKB:(repl_writer)/2).
:- thread_local repl_writer/2.
:- dynamic repl_writer/2.
:- volatile repl_writer/2.

:- multifile(baseKB:(ttNotTemporalType)/1).
:- dynamic ttNotTemporalType/1.
:- multifile ttNotTemporalType/1.
:- module_transparent ttNotTemporalType/1.
:- discontiguous ttNotTemporalType/1.

ttNotTemporalType(ftInt).
ttNotTemporalType(tCol).
ttNotTemporalType(ttFormatType).
ttNotTemporalType(ttValueType).
:- multifile(baseKB:(elInverse)/2).
:- dynamic elInverse/2.
:- module_transparent elInverse/2.

:- multifile(baseKB:(deduceFromArgTypes)/1).
:- dynamic deduceFromArgTypes/1.
:- module_transparent deduceFromArgTypes/1.

:- multifile(baseKB:(now_unused)/1).
:- dynamic now_unused/1.
:- module_transparent now_unused/1.

:- multifile(baseKB:(type_action_info)/3).
:- dynamic type_action_info/3.
:- module_transparent type_action_info/3.

:- multifile(baseKB:(ftCompound)/1).
:- dynamic ftCompound/1.
:- multifile ftCompound/1.
:- module_transparent ftCompound/1.
:- discontiguous ftCompound/1.

:- multifile(baseKB:(tTemporalThing)/1).
:- dynamic tTemporalThing/1.
:- multifile tTemporalThing/1.
:- module_transparent tTemporalThing/1.
:- discontiguous tTemporalThing/1.

tTemporalThing(A) :-
	loop_check(tSpatialThing(A)).
:- multifile(baseKB:(do_and_undo)/2).
:- dynamic do_and_undo/2.
:- multifile do_and_undo/2.

:- multifile(baseKB:(mpred_sv)/2).
:- dynamic mpred_sv/2.
:- multifile mpred_sv/2.
:- module_transparent mpred_sv/2.
:- discontiguous mpred_sv/2.

:- multifile(baseKB:(lambda)/5).
:- dynamic lambda/5.
:- module_transparent lambda/5.

:- multifile(baseKB:(quotedIsa)/2).
:- dynamic quotedIsa/2.
:- multifile quotedIsa/2.
:- module_transparent quotedIsa/2.
:- discontiguous quotedIsa/2.

quotedIsa(A, B) :-
	cwc,
	term_is_ft(A, B).
:- multifile(baseKB:(asserted_mpred_t)/5).
:- dynamic asserted_mpred_t/5.
:- module_transparent asserted_mpred_t/5.

:- multifile(baseKB:(repl_to_string)/2).
:- thread_local repl_to_string/2.
:- dynamic repl_to_string/2.
:- volatile repl_to_string/2.

:- multifile(baseKB:(tChannel)/1).
:- dynamic tChannel/1.
:- multifile tChannel/1.
:- module_transparent tChannel/1.
:- discontiguous tChannel/1.

:- multifile(baseKB:(formatted_resultIsa)/2).
:- dynamic formatted_resultIsa/2.
:- multifile formatted_resultIsa/2.
:- module_transparent formatted_resultIsa/2.
:- discontiguous formatted_resultIsa/2.

:- multifile(baseKB:(never_retract_u)/1).
:- dynamic never_retract_u/1.
:- module_transparent never_retract_u/1.

:- multifile(baseKB:(search)/7).
:- dynamic search/7.
:- module_transparent search/7.

:- multifile(baseKB:(ftAtom)/1).
:- dynamic ftAtom/1.
:- multifile ftAtom/1.
:- module_transparent ftAtom/1.
:- discontiguous ftAtom/1.

:- multifile(baseKB:(mpred_is_tracing_exec)/0).
:- dynamic mpred_is_tracing_exec/0.
:- multifile mpred_is_tracing_exec/0.

:- multifile(baseKB:(tInferInstanceFromArgType)/1).
:- dynamic tInferInstanceFromArgType/1.
:- multifile tInferInstanceFromArgType/1.
:- module_transparent tInferInstanceFromArgType/1.
:- discontiguous tInferInstanceFromArgType/1.

:- multifile(baseKB:(dif_in_arg)/3).
:- dynamic dif_in_arg/3.

dif_in_arg(A, B, C) :-
	cwc,
	ground(A),
	A=..[D|E],
	arg(B, A, G),
	C=..[D|E],
	nb_setarg(B, C, F),
	dif(F, G).
:- multifile(baseKB:(predInstMax)/3).
:- dynamic predInstMax/3.
:- multifile predInstMax/3.
:- module_transparent predInstMax/3.
:- discontiguous predInstMax/3.

:- multifile(baseKB:(mudLabelTypeProps)/3).
:- dynamic mudLabelTypeProps/3.
:- multifile mudLabelTypeProps/3.
:- module_transparent mudLabelTypeProps/3.
:- discontiguous mudLabelTypeProps/3.

:- multifile(baseKB:(support_hilog)/2).
:- dynamic support_hilog/2.
:- multifile support_hilog/2.
:- module_transparent support_hilog/2.
:- discontiguous support_hilog/2.

support_hilog(pfcDatabaseTerm, 1).
support_hilog(pfcControlled, 1).
support_hilog(prologSingleValued, 1).
support_hilog(pfcWatched, 1).
support_hilog(pfcCreates, 1).
support_hilog(pfcNegTrigger, 1).
support_hilog(pfcPosTrigger, 1).
support_hilog(pfcBcTrigger, 1).
support_hilog(pfcRHS, 1).
support_hilog(pfcMustFC, 1).
support_hilog(predCanHaveSingletons, 1).
support_hilog(prologSideEffects, 1).
support_hilog(meta_argtypes, 1).
support_hilog(predIsFlag, 1).
support_hilog(tPred, 1).
support_hilog(prologMultiValued, 1).
support_hilog(prologMacroHead, 1).
support_hilog(notAssertable, 1).
support_hilog(prologBuiltin, 1).
support_hilog(prologDynamic, 1).
support_hilog(prologOrdered, 1).
support_hilog(prologNegByFailure, 1).
support_hilog(prologPTTP, 1).
support_hilog(prologKIF, 1).
support_hilog(prologEquality, 1).
support_hilog(prologHybrid, 1).
support_hilog(prologListValued, 1).
support_hilog(ptBinaryPredicate, 1).
support_hilog(if_missing, 2).
support_hilog(mdefault, 1).
support_hilog(clif, 1).
:- multifile(baseKB:(notAssertable)/1).
:- dynamic notAssertable/1.
:- multifile notAssertable/1.
:- module_transparent notAssertable/1.
:- discontiguous notAssertable/1.

notAssertable(A) :-
	cwc,
	lazy(\+ ~notAssertable(A)),
	isa_backchaing(A, notAssertable).
notAssertable(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(notAssertable, B).
:- multifile(baseKB:(ftRest)/1).
:- dynamic ftRest/1.
:- multifile ftRest/1.
:- module_transparent ftRest/1.
:- discontiguous ftRest/1.

:- multifile(baseKB:(base_kb_pred_list)/1).
:- dynamic base_kb_pred_list/1.
:- module_transparent base_kb_pred_list/1.

:- multifile(baseKB:(localityOfObject)/2).
:- dynamic localityOfObject/2.
:- multifile localityOfObject/2.
:- module_transparent localityOfObject/2.
:- discontiguous localityOfObject/2.

:- multifile(baseKB:(predIsFlag)/1).
:- dynamic predIsFlag/1.
:- multifile predIsFlag/1.
:- module_transparent predIsFlag/1.
:- discontiguous predIsFlag/1.

predIsFlag(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(predIsFlag, B).
:- multifile(baseKB:(ttSpatialType)/1).
:- dynamic ttSpatialType/1.
:- multifile ttSpatialType/1.
:- module_transparent ttSpatialType/1.
:- discontiguous ttSpatialType/1.

:- multifile(baseKB:(ptReformulatorDirectivePredicate)/1).
:- dynamic ptReformulatorDirectivePredicate/1.
:- multifile ptReformulatorDirectivePredicate/1.
:- module_transparent ptReformulatorDirectivePredicate/1.
:- discontiguous ptReformulatorDirectivePredicate/1.

:- multifile(baseKB:(asserted_mpred_t)/2).
:- dynamic asserted_mpred_t/2.
:- module_transparent asserted_mpred_t/2.

:- multifile(baseKB:(nearestGenls)/2).
:- dynamic nearestGenls/2.
:- multifile nearestGenls/2.
:- module_transparent nearestGenls/2.
:- discontiguous nearestGenls/2.

nearestGenls(ttSpatialType, ttTemporalType).
nearestGenls(tSpatialThing, tTemporalThing).
nearestGenls(prologMultiValued, tPred).
nearestGenls(prologOrdered, tPred).
nearestGenls(prologNegByFailure, tPred).
nearestGenls(prologHybrid, tPred).
nearestGenls(prologPTTP, tPred).
nearestGenls(prologDynamic, tPred).
nearestGenls(prologBuiltin, tPred).
nearestGenls(prologKIF, tPred).
nearestGenls(prologMacroHead, tPred).
nearestGenls(prologListValued, tPred).
nearestGenls(prologSingleValued, tPred).
nearestGenls(vtColor, vtValue).
nearestGenls(pfcDatabaseTerm, tPred).
nearestGenls(pfcControlled, tPred).
nearestGenls(pfcWatched, tPred).
nearestGenls(pfcCreates, tPred).
nearestGenls(pfcNegTrigger, tPred).
nearestGenls(pfcPosTrigger, tPred).
nearestGenls(pfcBcTrigger, tPred).
nearestGenls(pfcRHS, tPred).
nearestGenls(pfcMustFC, tPred).
nearestGenls(predCanHaveSingletons, tPred).
nearestGenls(prologSideEffects, tPred).
nearestGenls(meta_argtypes, tPred).
nearestGenls(predIsFlag, tPred).
nearestGenls(notAssertable, tPred).
nearestGenls(prologEquality, tPred).
nearestGenls('SententialOperator', tAvoidForwardChain).
nearestGenls(tFunction, tAvoidForwardChain).
:- multifile(baseKB:(t)/10).
:- dynamic t/10.
:- module_transparent t/10.

:- multifile(baseKB:('SententialOperator')/1).
:- dynamic'SententialOperator'/1.
:- multifile'SententialOperator'/1.
:- module_transparent'SententialOperator'/1.
:- discontiguous'SententialOperator'/1.

:- multifile(baseKB:(mpred_action)/1).
:- dynamic mpred_action/1.
:- module_transparent mpred_action/1.

:- multifile(baseKB:(if)/2).
:- dynamic if/2.
:- multifile if/2.
:- module_transparent if/2.
:- discontiguous if/2.

:- multifile(baseKB:(is_edited_clause)/3).
:- dynamic is_edited_clause/3.
:- module_transparent is_edited_clause/3.

:- multifile(baseKB:(tAvoidForwardChain)/1).
:- dynamic tAvoidForwardChain/1.
:- multifile tAvoidForwardChain/1.
:- module_transparent tAvoidForwardChain/1.
:- discontiguous tAvoidForwardChain/1.

tAvoidForwardChain(A) :-
	loop_check(tFunction(A)).
tAvoidForwardChain(A) :-
	loop_check('SententialOperator'(A)).
tAvoidForwardChain('FunctionToArg').
tAvoidForwardChain(holds).
tAvoidForwardChain(equals).
tAvoidForwardChain(different).
tAvoidForwardChain(evaluate).
tAvoidForwardChain(trueSentence).
tAvoidForwardChain('TINYKB-ASSERTION').
tAvoidForwardChain(termOfUnit).
:- multifile(baseKB:(mpred_mark_C)/1).
:- dynamic mpred_mark_C/1.
:- multifile mpred_mark_C/1.
:- module_transparent mpred_mark_C/1.
:- discontiguous mpred_mark_C/1.

:- multifile(baseKB:(prologSingleValued)/1).
:- dynamic prologSingleValued/1.
:- multifile prologSingleValued/1.
:- module_transparent prologSingleValued/1.
:- discontiguous prologSingleValued/1.

prologSingleValued(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologSingleValued, B).
prologSingleValued(predInstMax).
prologSingleValued(predTypeMax).
prologSingleValued(A) :-
	cwc,
	is_ftCompound(A),
	functor(A, B, _), !,
	prologSingleValued(B).
prologSingleValued(singleValuedInArg).
:- multifile(baseKB:(mdefault)/1).
:- dynamic mdefault/1.
:- multifile mdefault/1.
:- module_transparent mdefault/1.
:- discontiguous mdefault/1.

mdefault((prologSingleValued(A), arity(A, B)==>singleValuedInArg(A, B))).
mdefault(singleValuedInArg(predInstMax, 3)).
mdefault(singleValuedInArg(predTypeMax, 3)).
mdefault(singleValuedInArg(singleValuedInArg, 2)).
:- multifile(baseKB:(call_OnEachLoad)/1).
:- dynamic call_OnEachLoad/1.
:- module_transparent call_OnEachLoad/1.

:- multifile(baseKB:(mpred_select)/2).
:- dynamic mpred_select/2.
:- module_transparent mpred_select/2.

:- multifile(baseKB:(defnIff)/2).
:- dynamic defnIff/2.
:- multifile defnIff/2.
:- module_transparent defnIff/2.
:- discontiguous defnIff/2.

:- multifile(baseKB:(predProxyRetract)/2).
:- dynamic predProxyRetract/2.
:- multifile predProxyRetract/2.
:- module_transparent predProxyRetract/2.
:- discontiguous predProxyRetract/2.

:- multifile(baseKB:(ftVoprop)/1).
:- dynamic ftVoprop/1.
:- multifile ftVoprop/1.
:- module_transparent ftVoprop/1.
:- discontiguous ftVoprop/1.

:- multifile(baseKB:(pfcDatabaseTerm)/1).
:- dynamic pfcDatabaseTerm/1.
:- multifile pfcDatabaseTerm/1.
:- module_transparent pfcDatabaseTerm/1.
:- discontiguous pfcDatabaseTerm/1.

pfcDatabaseTerm(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcDatabaseTerm, B).
:- multifile(baseKB:(resolveConflict)/1).
:- dynamic resolveConflict/1.
:- meta_predicate resolveConflict(?).
:- module_transparent resolveConflict/1.

:- multifile(baseKB:(conflict)/1).
:- dynamic conflict/1.
:- multifile conflict/1.
:- module_transparent conflict/1.
:- discontiguous conflict/1.

:- multifile(baseKB:(ptSymmetric)/1).
:- dynamic ptSymmetric/1.
:- multifile ptSymmetric/1.
:- module_transparent ptSymmetric/1.
:- discontiguous ptSymmetric/1.

:- multifile(baseKB:(asserted_mpred_t)/3).
:- dynamic asserted_mpred_t/3.
:- module_transparent asserted_mpred_t/3.

:- multifile(baseKB:(pfcBcTrigger)/1).
:- dynamic pfcBcTrigger/1.
:- multifile pfcBcTrigger/1.
:- module_transparent pfcBcTrigger/1.
:- discontiguous pfcBcTrigger/1.

pfcBcTrigger(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcBcTrigger, B).
:- multifile(baseKB:(retractall_wid)/1).
:- dynamic retractall_wid/1.
:- module_transparent retractall_wid/1.

:- multifile(baseKB:(completelyAssertedCollection)/1).
:- dynamic completelyAssertedCollection/1.
:- multifile completelyAssertedCollection/1.
:- module_transparent completelyAssertedCollection/1.
:- discontiguous completelyAssertedCollection/1.

completelyAssertedCollection(completelyAssertedCollection).
completelyAssertedCollection(tCol).
completelyAssertedCollection(tSpec).
completelyAssertedCollection(ttFormatType).
completelyAssertedCollection(tSet).
completelyAssertedCollection(tRelation).
completelyAssertedCollection(tPred).
completelyAssertedCollection(tFunction).
completelyAssertedCollection(prologMacroHead).
completelyAssertedCollection(ttPredType).
completelyAssertedCollection(functorDeclares).
completelyAssertedCollection(prologMultiValued).
completelyAssertedCollection(prologOrdered).
completelyAssertedCollection(predIsFlag).
completelyAssertedCollection(ttNonGenled).
completelyAssertedCollection(meta_argtypes).
completelyAssertedCollection(prologHybrid).
completelyAssertedCollection(prologPTTP).
completelyAssertedCollection(prologDynamic).
completelyAssertedCollection(prologKIF).
completelyAssertedCollection(prologBuiltin).
completelyAssertedCollection(prologListValued).
completelyAssertedCollection(prologSingleValued).
completelyAssertedCollection(pfcControlled).
completelyAssertedCollection(predCanHaveSingletons).
completelyAssertedCollection(tTemporalThing).
completelyAssertedCollection(prologSideEffects).
completelyAssertedCollection(tInferInstanceFromArgType).
completelyAssertedCollection(ttNotTemporalType).
completelyAssertedCollection(ttSpatialType).
completelyAssertedCollection(ttTemporalType).
completelyAssertedCollection(ttTypeType).
completelyAssertedCollection(ttUnverifiableType).
completelyAssertedCollection(pfcDatabaseTerm).
completelyAssertedCollection(pfcWatched).
completelyAssertedCollection(pfcCreates).
completelyAssertedCollection(pfcNegTrigger).
completelyAssertedCollection(pfcPosTrigger).
completelyAssertedCollection(pfcBcTrigger).
completelyAssertedCollection(pfcRHS).
completelyAssertedCollection(pfcMustFC).
completelyAssertedCollection(notAssertable).
completelyAssertedCollection(prologEquality).
completelyAssertedCollection(ttValueType).
completelyAssertedCollection(tFormatType).
completelyAssertedCollection(vtValue).
completelyAssertedCollection(vtColor).
completelyAssertedCollection(tAvoidForwardChain).
completelyAssertedCollection('SententialOperator').
completelyAssertedCollection(ptBinaryPredicate).
:- multifile(baseKB:(resolveConflict0)/1).
:- meta_predicate resolveConflict0(?).
:- module_transparent resolveConflict0/1.

:- multifile(baseKB:(ftID)/1).
:- dynamic ftID/1.
:- multifile ftID/1.
:- module_transparent ftID/1.
:- discontiguous ftID/1.

:- multifile(baseKB:(predTypeMax)/3).
:- dynamic predTypeMax/3.
:- multifile predTypeMax/3.
:- module_transparent predTypeMax/3.
:- discontiguous predTypeMax/3.

:- multifile(baseKB:(mpred_current_db)/1).
:- dynamic mpred_current_db/1.
:- multifile mpred_current_db/1.

:- multifile(baseKB:(comment)/2).
:- dynamic comment/2.

comment(isa, 'Instance of').
:- multifile(baseKB:(defnNecessary)/2).
:- dynamic defnNecessary/2.
:- multifile defnNecessary/2.
:- module_transparent defnNecessary/2.
:- discontiguous defnNecessary/2.

:- multifile(baseKB:(predProxyQuery)/2).
:- dynamic predProxyQuery/2.
:- multifile predProxyQuery/2.
:- module_transparent predProxyQuery/2.
:- discontiguous predProxyQuery/2.

:- multifile(baseKB:(completeExtentAsserted)/1).
:- dynamic completeExtentAsserted/1.
:- multifile completeExtentAsserted/1.
:- module_transparent completeExtentAsserted/1.
:- discontiguous completeExtentAsserted/1.

completeExtentAsserted(prologNegByFailure).
completeExtentAsserted(completelyAssertedCollection).
completeExtentAsserted(tCol).
completeExtentAsserted(tSpec).
completeExtentAsserted(ttFormatType).
completeExtentAsserted(tSet).
completeExtentAsserted(tRelation).
completeExtentAsserted(tPred).
completeExtentAsserted(tFunction).
completeExtentAsserted(prologMacroHead).
completeExtentAsserted(ttPredType).
completeExtentAsserted(functorDeclares).
completeExtentAsserted(prologMultiValued).
completeExtentAsserted(prologOrdered).
completeExtentAsserted(predIsFlag).
completeExtentAsserted(ttNonGenled).
completeExtentAsserted(meta_argtypes).
completeExtentAsserted(prologHybrid).
completeExtentAsserted(prologPTTP).
completeExtentAsserted(prologDynamic).
completeExtentAsserted(prologKIF).
completeExtentAsserted(prologBuiltin).
completeExtentAsserted(prologListValued).
completeExtentAsserted(prologSingleValued).
completeExtentAsserted(pfcControlled).
completeExtentAsserted(predCanHaveSingletons).
completeExtentAsserted(tTemporalThing).
completeExtentAsserted(prologSideEffects).
completeExtentAsserted(tInferInstanceFromArgType).
completeExtentAsserted(ttNotTemporalType).
completeExtentAsserted(ttSpatialType).
completeExtentAsserted(ttTemporalType).
completeExtentAsserted(ttTypeType).
completeExtentAsserted(ttUnverifiableType).
completeExtentAsserted(pfcDatabaseTerm).
completeExtentAsserted(pfcWatched).
completeExtentAsserted(pfcCreates).
completeExtentAsserted(pfcNegTrigger).
completeExtentAsserted(pfcPosTrigger).
completeExtentAsserted(pfcBcTrigger).
completeExtentAsserted(pfcRHS).
completeExtentAsserted(pfcMustFC).
completeExtentAsserted(notAssertable).
completeExtentAsserted(prologEquality).
completeExtentAsserted(ttValueType).
completeExtentAsserted(genlPreds).
completeExtentAsserted(defnSufficient).
completeExtentAsserted(tFormatType).
completeExtentAsserted(A) :-
	cwc,
	lazy(\+ ~completeExtentAsserted(A)),
	isa_backchaing(A, completeExtentAsserted).
completeExtentAsserted(vtValue).
completeExtentAsserted(vtColor).
completeExtentAsserted(quotedDefnIff).
completeExtentAsserted(tAvoidForwardChain).
completeExtentAsserted('SententialOperator').
completeExtentAsserted(formatted_resultIsa).
completeExtentAsserted(ptBinaryPredicate).
:- multifile(baseKB:(why_buffer)/2).
:- dynamic why_buffer/2.
:- multifile why_buffer/2.

why_buffer(vtColor(vRed), [[mfl(baseKB, '/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', 798), ax]]).
:- multifile(baseKB:(pfcMustFC)/1).
:- dynamic pfcMustFC/1.
:- multifile pfcMustFC/1.
:- module_transparent pfcMustFC/1.
:- discontiguous pfcMustFC/1.

pfcMustFC(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcMustFC, B).
:- multifile(baseKB:(quasiQuote)/1).
:- dynamic quasiQuote/1.
:- module_transparent quasiQuote/1.

quasiQuote('QuoteFn').
:- multifile(baseKB:(resolverConflict_robot)/1).
:- dynamic resolverConflict_robot/1.
:- meta_predicate resolverConflict_robot(?).
:- module_transparent resolverConflict_robot/1.

:- multifile(baseKB:(agent_call_command)/2).
:- dynamic agent_call_command/2.
:- module_transparent agent_call_command/2.

:- multifile(baseKB:('$mode')/2).
:- multifile'$mode'/2.
:- module_transparent'$mode'/2.

:- multifile(baseKB:(singleValuedInArgDefault)/3).
:- dynamic singleValuedInArgDefault/3.
:- multifile singleValuedInArgDefault/3.
:- module_transparent singleValuedInArgDefault/3.
:- discontiguous singleValuedInArgDefault/3.

:- multifile(baseKB:(t)/11).
:- dynamic t/11.
:- module_transparent t/11.

:- multifile(baseKB:(pfcWatched)/1).
:- dynamic pfcWatched/1.
:- multifile pfcWatched/1.
:- module_transparent pfcWatched/1.
:- discontiguous pfcWatched/1.

pfcWatched(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(pfcWatched, B).
:- multifile(baseKB:(mpred_isa)/2).
:- dynamic mpred_isa/2.
:- module_transparent mpred_isa/2.

:- multifile(baseKB:(mpred_univ)/1).
:- dynamic mpred_univ/1.
:- module_transparent mpred_univ/1.

:- multifile(baseKB:(t)/8).
:- dynamic t/8.
:- meta_predicate t(7,?,?,?,?,?,?,?).
:- module_transparent t/8.

:- multifile(baseKB:(\)/1).
:- dynamic (\)/1.
:- multifile (\)/1.
:- module_transparent (\)/1.
:- discontiguous (\)/1.

:- multifile(baseKB:(clif)/1).
:- dynamic clif/1.
:- multifile clif/1.
:- module_transparent clif/1.
:- discontiguous clif/1.

:- multifile(baseKB:(pfclog)/1).
:- dynamic pfclog/1.
:- multifile pfclog/1.
:- module_transparent pfclog/1.
:- discontiguous pfclog/1.

:- multifile(baseKB:(mpred_f)/7).
:- dynamic mpred_f/7.
:- module_transparent mpred_f/7.

:- multifile(baseKB:(vtDirection)/1).
:- dynamic vtDirection/1.
:- multifile vtDirection/1.
:- module_transparent vtDirection/1.
:- discontiguous vtDirection/1.

vtDirection(A) :-
	cwc,
	lazy(\+ ~vtDirection(A)),
	isa_backchaing(A, vtDirection).
:- multifile(baseKB:(t)/9).
:- dynamic t/9.
:- module_transparent t/9.

:- multifile(baseKB:(predProxyAssert)/2).
:- dynamic predProxyAssert/2.
:- multifile predProxyAssert/2.
:- module_transparent predProxyAssert/2.
:- discontiguous predProxyAssert/2.

:- multifile(baseKB:(resultIsa)/2).
:- dynamic resultIsa/2.
:- multifile resultIsa/2.
:- module_transparent resultIsa/2.
:- discontiguous resultIsa/2.

resultIsa(ftDeplictsFn, ftSpec).
resultIsa(txtFormatFn, ftText).
resultIsa(ftDice, ftInt).
:- multifile(baseKB:(tms)/1).
:- dynamic tms/1.
:- multifile tms/1.

:- multifile(baseKB:(pttp1a_wid)/3).
:- dynamic pttp1a_wid/3.
:- module_transparent pttp1a_wid/3.

:- multifile(baseKB:(prologMultiValued)/1).
:- dynamic prologMultiValued/1.
:- multifile prologMultiValued/1.
:- module_transparent prologMultiValued/1.
:- discontiguous prologMultiValued/1.

prologMultiValued(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologMultiValued, B).
prologMultiValued(mpred_module).
prologMultiValued(determinerString).
prologMultiValued(comment).
prologMultiValued(genlInverse).
prologMultiValued(genlPreds).
prologMultiValued(predProxyAssert).
prologMultiValued(predProxyQuery).
prologMultiValued(<-).
prologMultiValued(==>).
:- multifile(baseKB:(tFarthestReachableItem)/1).
:- dynamic tFarthestReachableItem/1.
:- module_transparent tFarthestReachableItem/1.

:- multifile(baseKB:(ftInt)/1).
:- dynamic ftInt/1.
:- multifile ftInt/1.
:- module_transparent ftInt/1.
:- discontiguous ftInt/1.

ftInt(A) :-
	cwc,
	lazy(\+ ~ftInt(A)),
	isa_backchaing(A, ftInt).
:- multifile(baseKB:(map_mpred_mark_C)/1).
:- dynamic map_mpred_mark_C/1.
:- multifile map_mpred_mark_C/1.
:- module_transparent map_mpred_mark_C/1.
:- discontiguous map_mpred_mark_C/1.

map_mpred_mark_C(D) :-
	map_literals(lambda(A,
			    (get_functor(A, B, C), ain([isa(B, pfcControlled), arity(B, C)]))),
		     D).
:- multifile(baseKB:(boxlog)/1).
:- dynamic boxlog/1.
:- multifile boxlog/1.
:- module_transparent boxlog/1.
:- discontiguous boxlog/1.

:- multifile(baseKB:(ptBinaryPredicate)/1).
:- dynamic ptBinaryPredicate/1.
:- multifile ptBinaryPredicate/1.
:- module_transparent ptBinaryPredicate/1.
:- discontiguous ptBinaryPredicate/1.

ptBinaryPredicate(A) :-
	cwc,
	lazy(\+ ~ptBinaryPredicate(A)),
	isa_backchaing(A, ptBinaryPredicate).
ptBinaryPredicate(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(ptBinaryPredicate, B).
ptBinaryPredicate(arity).
ptBinaryPredicate(mpred_select).
ptBinaryPredicate(pddlObjects).
ptBinaryPredicate(genls).
ptBinaryPredicate(mpred_do_and_undo_method).
ptBinaryPredicate(support_hilog).
ptBinaryPredicate(hybrid_support).
ptBinaryPredicate(=).
ptBinaryPredicate(marker_supported).
ptBinaryPredicate(genlPreds).
ptBinaryPredicate(pddlSomethingIsa).
ptBinaryPredicate(disjointWith).
ptBinaryPredicate(nearestGenls).
ptBinaryPredicate(formatted_resultIsa).
ptBinaryPredicate(quotedIsa).
ptBinaryPredicate(typeGenls).
ptBinaryPredicate(mpred_module).
ptBinaryPredicate(either).
ptBinaryPredicate(<==>).
ptBinaryPredicate(typeProps).
ptBinaryPredicate(genlInverse).
ptBinaryPredicate(predProxyAssert).
ptBinaryPredicate(predProxyQuery).
ptBinaryPredicate(predProxyRetract).
ptBinaryPredicate(resultIsa).
ptBinaryPredicate(isa).
ptBinaryPredicate(localityOfObject).
ptBinaryPredicate(subFormat).
ptBinaryPredicate(quotedDefnIff).
ptBinaryPredicate(defnNecessary).
ptBinaryPredicate(defnIff).
ptBinaryPredicate(macroSomethingDescription).
ptBinaryPredicate(pddlSorts).
ptBinaryPredicate(comment).
ptBinaryPredicate(<-).
ptBinaryPredicate(==>).
ptBinaryPredicate(predArgMulti).
ptBinaryPredicate(if_missing).
:- multifile(baseKB:(skolem)/3).
:- dynamic skolem/3.
:- module_transparent skolem/3.

:- multifile(baseKB:(mudKeyword)/2).
:- dynamic mudKeyword/2.
:- module_transparent mudKeyword/2.

:- multifile(baseKB:(is_static_why)/5).
:- module_transparent is_static_why/5.

:- multifile(baseKB:(quotedDefnIff)/2).
:- dynamic quotedDefnIff/2.
:- multifile quotedDefnIff/2.
:- module_transparent quotedDefnIff/2.
:- discontiguous quotedDefnIff/2.

quotedDefnIff(ftInt, integer).
quotedDefnIff(ftFloat, float).
quotedDefnIff(ftAtom, atom).
quotedDefnIff(ftString, string).
quotedDefnIff(ftCallable, is_callable).
quotedDefnIff(ftCompound, is_ftCompound).
quotedDefnIff(ftGround, ground).
quotedDefnIff(ftID, is_id).
quotedDefnIff(ftTerm, is_ftNonvar).
quotedDefnIff(ftVar, is_ftVar).
quotedDefnIff(ftNonvar, is_ftNonvar).
quotedDefnIff(ftNumber, number).
quotedDefnIff(ftList, is_list).
quotedDefnIff(ftRest, is_rest).
quotedDefnIff(ftBoolean, is_boolean).
quotedDefnIff(ftText, is_string).
quotedDefnIff(ftRest(A), is_rest_of(A)) :-
	cwc,
	is_ftNonvar(A).
quotedDefnIff(ftListFn(A), is_list_of(A)) :-
	cwc,
	is_ftNonvar(A).
quotedDefnIff(ftCodeIs(A), A) :-
	cwc,
	is_ftNonvar(A).
:- multifile(baseKB:(prologMacroHead)/1).
:- dynamic prologMacroHead/1.
:- multifile prologMacroHead/1.
:- module_transparent prologMacroHead/1.
:- discontiguous prologMacroHead/1.

prologMacroHead(prologMacroHead).
prologMacroHead(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologMacroHead, B).
prologMacroHead(tCol).
prologMacroHead(macroSomethingDescription).
prologMacroHead(pddlObjects).
prologMacroHead(pddlPredicates).
prologMacroHead(pddlSorts).
prologMacroHead(pddlTypes).
:- multifile(baseKB:(isCycUnavailable_known)/1).
:- dynamic isCycUnavailable_known/1.
:- module_transparent isCycUnavailable_known/1.

:- multifile(baseKB:(tFunction)/1).
:- dynamic tFunction/1.
:- multifile tFunction/1.
:- module_transparent tFunction/1.
:- discontiguous tFunction/1.

tFunction(ftRest(ftTerm)).
tFunction(isRandom(tCol)).
tFunction(isAnd(ftRest(ftSpec))).
tFunction(isMost(ftRest(ftSpec))).
tFunction(isOneOf(ftRest(ftSpec))).
tFunction(isNot(ftSpec)).
tFunction(isOptional(ftSpec, ftTerm)).
tFunction(isOptionalStr(ftString)).
tFunction(exactStr(ftString)).
tFunction(ftDeplictsFn).
tFunction(isInstFn).
tFunction(isKappaFn).
tFunction(ftDice(ftInt, ftInt, ftInt)).
tFunction(ftListFn(ftRest)).
tFunction(ftDeplictsFn(tCol)).
tFunction(txtFormatFn).
tFunction(ftDice).
:- multifile(baseKB:(ttAbstractType)/1).
:- dynamic ttAbstractType/1.

ttAbstractType(tRelation).
ttAbstractType(ttFormatType).
:- multifile(baseKB:(t)/2).
:- dynamic t/2.
:- module_transparent t/2.

:- multifile(baseKB:(ruleRewrite)/2).
:- dynamic ruleRewrite/2.
:- module_transparent ruleRewrite/2.

:- multifile(baseKB:(ptUnaryPredicate)/1).
:- dynamic ptUnaryPredicate/1.
:- multifile ptUnaryPredicate/1.
:- module_transparent ptUnaryPredicate/1.
:- discontiguous ptUnaryPredicate/1.

ptUnaryPredicate(A) :-
	cwc,
	lazy(\+ ~ptUnaryPredicate(A)),
	isa_backchaing(A, ptUnaryPredicate).
:- multifile(baseKB:(contract_output_proof)/2).
:- dynamic contract_output_proof/2.
:- module_transparent contract_output_proof/2.

:- multifile(baseKB:(mpred_module)/2).
:- dynamic mpred_module/2.
:- multifile mpred_module/2.
:- module_transparent mpred_module/2.
:- discontiguous mpred_module/2.

mpred_module(resolveConflict, baseKB).
mpred_module(mpred_select, lmconf).
:- multifile(baseKB:(coerce)/3).
:- dynamic coerce/3.
:- module_transparent coerce/3.

:- multifile(baseKB:(prologListValued)/1).
:- dynamic prologListValued/1.
:- multifile prologListValued/1.
:- module_transparent prologListValued/1.
:- discontiguous prologListValued/1.

prologListValued(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologListValued, B).
:- multifile(baseKB:(tNearestReachableItem)/1).
:- dynamic tNearestReachableItem/1.
:- module_transparent tNearestReachableItem/1.

:- multifile(baseKB:(specialFunctor)/1).
:- dynamic specialFunctor/1.

specialFunctor(\+).
specialFunctor(/).
:- multifile(baseKB:(mpred_f)/4).
:- dynamic mpred_f/4.
:- module_transparent mpred_f/4.

:- multifile(baseKB:(::::)/2).
:- dynamic (::::)/2.
:- multifile (::::)/2.
:- module_transparent (::::)/2.
:- discontiguous (::::)/2.

:- multifile(baseKB:(constrain_args_pttp)/2).
:- dynamic constrain_args_pttp/2.
:- module_transparent constrain_args_pttp/2.

:- multifile(baseKB:(ftTerm)/1).
:- dynamic ftTerm/1.
:- multifile ftTerm/1.
:- module_transparent ftTerm/1.
:- discontiguous ftTerm/1.

:- multifile(baseKB:(pttp_builtin)/2).
:- dynamic pttp_builtin/2.
:- module_transparent pttp_builtin/2.

:- multifile(baseKB:(prologKIF)/1).
:- dynamic prologKIF/1.
:- multifile prologKIF/1.
:- module_transparent prologKIF/1.
:- discontiguous prologKIF/1.

prologKIF(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologKIF, B).
:- multifile(baseKB:(is_wrapper_pred)/1).
:- dynamic is_wrapper_pred/1.
:- module_transparent is_wrapper_pred/1.

:- multifile(baseKB:(tFormatType)/1).
:- dynamic tFormatType/1.
:- multifile tFormatType/1.
:- module_transparent tFormatType/1.
:- discontiguous tFormatType/1.

:- multifile(baseKB:(ftString)/1).
:- dynamic ftString/1.
:- multifile ftString/1.
:- module_transparent ftString/1.
:- discontiguous ftString/1.

:- multifile(baseKB:(skolem)/2).
:- dynamic skolem/2.
:- module_transparent skolem/2.

:- multifile(baseKB:(genlInverse)/2).
:- dynamic genlInverse/2.
:- multifile genlInverse/2.
:- module_transparent genlInverse/2.
:- discontiguous genlInverse/2.

:- multifile(baseKB:(ftList)/1).
:- dynamic ftList/1.
:- multifile ftList/1.
:- module_transparent ftList/1.
:- discontiguous ftList/1.

:- multifile(baseKB:(mpred_univ)/3).
:- dynamic mpred_univ/3.
:- multifile mpred_univ/3.
:- module_transparent mpred_univ/3.
:- discontiguous mpred_univ/3.

mpred_univ(ttValueType, A, ttValueType(A)).
mpred_univ(tNotForUnboundPredicates, A, tNotForUnboundPredicates(A)).
mpred_univ(completelyAssertedCollection, A, completelyAssertedCollection(A)).
mpred_univ(prologNegByFailure, A, prologNegByFailure(A)).
mpred_univ(tCol, A, tCol(A)).
mpred_univ(tSpec, A, tSpec(A)).
mpred_univ(ttFormatType, A, ttFormatType(A)).
mpred_univ(tSet, A, tSet(A)).
mpred_univ(tRelation, A, tRelation(A)).
mpred_univ(tPred, A, tPred(A)).
mpred_univ(tFunction, A, tFunction(A)).
mpred_univ(prologMacroHead, A, prologMacroHead(A)).
mpred_univ(ttPredType, A, ttPredType(A)).
mpred_univ(functorDeclares, A, functorDeclares(A)).
mpred_univ(prologMultiValued, A, prologMultiValued(A)).
mpred_univ(prologOrdered, A, prologOrdered(A)).
mpred_univ(predIsFlag, A, predIsFlag(A)).
mpred_univ(ttNonGenled, A, ttNonGenled(A)).
mpred_univ(meta_argtypes, A, meta_argtypes(A)).
mpred_univ(prologHybrid, A, prologHybrid(A)).
mpred_univ(prologPTTP, A, prologPTTP(A)).
mpred_univ(prologDynamic, A, prologDynamic(A)).
mpred_univ(prologKIF, A, prologKIF(A)).
mpred_univ(prologBuiltin, A, prologBuiltin(A)).
mpred_univ(prologListValued, A, prologListValued(A)).
mpred_univ(prologSingleValued, A, prologSingleValued(A)).
mpred_univ(pfcControlled, A, pfcControlled(A)).
mpred_univ(predCanHaveSingletons, A, predCanHaveSingletons(A)).
mpred_univ(tTemporalThing, A, tTemporalThing(A)).
mpred_univ(prologSideEffects, A, prologSideEffects(A)).
mpred_univ(tInferInstanceFromArgType, A, tInferInstanceFromArgType(A)).
mpred_univ(ttNotTemporalType, A, ttNotTemporalType(A)).
mpred_univ(ttSpatialType, A, ttSpatialType(A)).
mpred_univ(ttTemporalType, A, ttTemporalType(A)).
mpred_univ(ttTypeType, A, ttTypeType(A)).
mpred_univ(ttUnverifiableType, A, ttUnverifiableType(A)).
mpred_univ(pfcDatabaseTerm, A, pfcDatabaseTerm(A)).
mpred_univ(pfcWatched, A, pfcWatched(A)).
mpred_univ(pfcCreates, A, pfcCreates(A)).
mpred_univ(pfcNegTrigger, A, pfcNegTrigger(A)).
mpred_univ(pfcPosTrigger, A, pfcPosTrigger(A)).
mpred_univ(pfcBcTrigger, A, pfcBcTrigger(A)).
mpred_univ(pfcRHS, A, pfcRHS(A)).
mpred_univ(pfcMustFC, A, pfcMustFC(A)).
mpred_univ(notAssertable, A, notAssertable(A)).
mpred_univ(prologEquality, A, prologEquality(A)).
mpred_univ(ftInt, A, ftInt(A)).
mpred_univ(vtDirection, A, vtDirection(A)).
mpred_univ(completeIsaAsserted, A, completeIsaAsserted(A)).
mpred_univ(tFormatType, A, tFormatType(A)).
mpred_univ(tSpatialThing, A, tSpatialThing(A)).
mpred_univ(completeExtentAsserted, A, completeExtentAsserted(A)).
mpred_univ(vtValue, A, vtValue(A)).
mpred_univ(vtColor, A, vtColor(A)).
mpred_univ(tAvoidForwardChain, A, tAvoidForwardChain(A)).
mpred_univ('SententialOperator', A, 'SententialOperator'(A)).
mpred_univ(tNewlyCreated, A, tNewlyCreated(A)).
mpred_univ(ttTypeFacet, A, ttTypeFacet(A)).
mpred_univ(ptBinaryPredicate, A, ptBinaryPredicate(A)).
mpred_univ(ptUnaryPredicate, A, ptUnaryPredicate(A)).
:- multifile(baseKB:(mpred_do_and_undo_method)/2).
:- dynamic mpred_do_and_undo_method/2.
:- multifile mpred_do_and_undo_method/2.
:- module_transparent mpred_do_and_undo_method/2.
:- discontiguous mpred_do_and_undo_method/2.

:- multifile(baseKB:(feature_test)/0).
:- dynamic feature_test/0.
:- module_transparent feature_test/0.

:- multifile(baseKB:(prologSideEffects)/1).
:- dynamic prologSideEffects/1.
:- multifile prologSideEffects/1.
:- module_transparent prologSideEffects/1.
:- discontiguous prologSideEffects/1.

prologSideEffects(write).
prologSideEffects(resolveConflict).
prologSideEffects(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologSideEffects, B).
:- multifile(baseKB:(isCycAvailable_known)/0).
:- dynamic isCycAvailable_known/0.
:- module_transparent isCycAvailable_known/0.

:- multifile(baseKB:(completeIsaAsserted)/1).
:- dynamic completeIsaAsserted/1.
:- multifile completeIsaAsserted/1.
:- module_transparent completeIsaAsserted/1.
:- discontiguous completeIsaAsserted/1.

completeIsaAsserted(A) :-
	cwc,
	lazy(\+ ~completeIsaAsserted(A)),
	isa_backchaing(A, completeIsaAsserted).
:- multifile(baseKB:(mpred_f)/6).
:- dynamic mpred_f/6.
:- module_transparent mpred_f/6.

:- multifile(baseKB:(ftSpec)/1).
:- dynamic ftSpec/1.
:- multifile ftSpec/1.
:- module_transparent ftSpec/1.
:- discontiguous ftSpec/1.

:- multifile(baseKB:(t)/1).
:- dynamic t/1.
:- module_transparent t/1.

:- multifile(baseKB:(tFuncton)/1).
:- dynamic tFuncton/1.

tFuncton(isLikeFn(tPred, tCol)).
:- multifile(baseKB:(ftBoolean)/1).
:- dynamic ftBoolean/1.
:- multifile ftBoolean/1.
:- module_transparent ftBoolean/1.
:- discontiguous ftBoolean/1.

:- multifile(baseKB:(relationMostInstance)/3).
:- dynamic relationMostInstance/3.
:- multifile relationMostInstance/3.
:- module_transparent relationMostInstance/3.
:- discontiguous relationMostInstance/3.

:- multifile(baseKB:(prologPTTP)/1).
:- dynamic prologPTTP/1.
:- multifile prologPTTP/1.
:- module_transparent prologPTTP/1.
:- discontiguous prologPTTP/1.

prologPTTP(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologPTTP, B).
:- multifile(baseKB:(meta_argtypes)/1).
:- dynamic meta_argtypes/1.
:- multifile meta_argtypes/1.
:- module_transparent meta_argtypes/1.
:- discontiguous meta_argtypes/1.

meta_argtypes(support_hilog(tRelation, ftInt)).
meta_argtypes(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(meta_argtypes, B).
meta_argtypes(quotedIsa(ftTerm, ttFormatType)).
meta_argtypes(typeGenls(ttTypeType, tCol)).
meta_argtypes(mpred_module(tPred, tPrologModule)).
meta_argtypes(mpred_module(tRelation, ftAtom)).
meta_argtypes(ftRest(ftTerm)).
meta_argtypes(isRandom(tCol)).
meta_argtypes(ftDice(ftInt, ftInt, ftInt)).
meta_argtypes(ftDeplictsFn(tCol)).
meta_argtypes(argQuotedIsa(tRelation, ftInt, ttFormatType)).
meta_argtypes(argIsa(tRelation, ftInt, tCol)).
meta_argtypes(formatted_resultIsa(ttFormatType, tCol)).
meta_argtypes(quotedDefnIff(ttFormatType, ftTerm)).
meta_argtypes(defnNecessary(ttFormatType, ftTerm)).
meta_argtypes(defnIff(ttFormatType, ftTerm)).
meta_argtypes(instTypeProps(ftID, tCol, ftRest(ftVoprop))).
meta_argtypes(subFormat(ttFormatType, ttFormatType)).
meta_argtypes(macroSomethingDescription(ftTerm, ftListFn(ftString))).
meta_argtypes(pddlObjects(tCol, ftListFn(ftID))).
meta_argtypes(pddlPredicates(ftListFn(ftVoprop))).
meta_argtypes(pddlSorts(tCol, ftListFn(tCol))).
meta_argtypes(pddlTypes(ftListFn(tCol))).
meta_argtypes(comment(ftTerm, ftString)).
meta_argtypes(genlInverse(tPred, tPred)).
meta_argtypes(genlPreds(tPred, tPred)).
meta_argtypes(predProxyAssert(prologMultiValued, ftTerm)).
meta_argtypes(predProxyQuery(prologMultiValued, ftTerm)).
meta_argtypes((ftAssertable<-ftAskable)).
meta_argtypes((ftAskable==>ftAssertable)).
meta_argtypes(predArgMulti(prologMultiValued, ftInt)).
meta_argtypes(tDeleted(ftID)).
meta_argtypes(predInstMax(ftID, prologSingleValued, ftInt)).
meta_argtypes(predTypeMax(prologSingleValued, tCol, ftInt)).
meta_argtypes(dividesBetween(tCol, tCol, tCol)).
meta_argtypes(mdefault(ftAssertable)).
meta_argtypes(singleValuedInArgDefault(prologSingleValued, ftInt, ftTerm)).
:- multifile(baseKB:(==>)/2).
:- dynamic (==>)/2.
:- multifile (==>)/2.

prologBuiltin(A), arity(A, B)==>{make_builtin(A/B)}.
conflict(A)==>{must(with_mpred_trace_exec(resolveConflict(A), \+conflict(A)))}.
{type_prefix(_, A)}==>tCol(A).
mpred_undo_sys(A, B, C)==> (A==>{B}), mpred_do_and_undo_method(B, C).
~A/mpred_non_neg_literal(A)==> \+A.
tPred(A), arity(A, B)/ (integer(B), B>1), ~prologBuiltin(A)==> ~tCol(A), support_hilog(A, B).
~tCol(A)/completelyAssertedCollection(A)==> \+completelyAssertedCollection(A).
support_hilog(A, B)/ (A\='$VAR', atom(A), integer(B), \+static_predicate(A/B), \+prologDynamic(A))==>hybrid_support(A, B), {C=arity(A, B)}, C.
hybrid_support(A, B)/ (A\='$VAR', atom(A), integer(B), \+prologDynamic(A), \+static_predicate(A/B))==>{functor(D, A, B),  (var(C)->t_l:user_abox(C);true),  (var(C)->ignore((current_predicate(A, C:D), \+predicate_property(C:D, imported_from(_))));true),  (var(C)->predicate_property(C:D, exported);true), kb_dynamic(C:A/B), show_failure(hybrid_support, \+static_predicate(A/B))}, prologHybrid(A), arity(A, B).
mpred_mark(pfcPosTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{trace_or_throw(warn(pfcPosTrigger, C, static))}.
mpred_mark(pfcNegTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{dmsg(warn(pfcNegTrigger, C, static))}.
mpred_mark(pfcBcTrigger, _, A, B)/ (fa_to_p(A, B, C), predicate_property(C, static))==>{dmsg(warn(pfcNegTrigger, C, static))}.
mpred_mark(A, B, C, D)/ground(A:B)==>arity(C, D).
mpred_mark(pfcPosTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C).
mpred_mark(pfcNegTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C).
mpred_mark(pfcBcTrigger, A, B, C)/ground(A:B:C)==>marker_supported(B, C).
mpred_mark(pfcRHS, A, B, C)/ground(A:B:C)==>marker_supported(B, C).
mpred_mark(pfcCreates, A, B, C)/ground(A:B:C)==>{functor(D, B, C), make_dynamic(D)}.
mpred_mark(pfcCreates, A, B, C)/ground(A:B:C)==>marker_supported(B, C).
mpred_mark(pfcCallCode, A, B, C)/ (ground(A:B:C), predicate_is_undefined_fa(B, C))==>marker_supported(B, C).
marker_supported(A, B)==>hybrid_support(A, B).
mpred_mark_C(A)==>{map_mpred_mark_C(A)}.
mpred_mark(pfcRHS, _, A, B)/ (atom(A), integer(B), A\==arity)==>tPred(A), arity(A, B), pfcControlled(A/B).
completelyAssertedCollection(A)==>tCol(A).
pfcControlled(A), arity(A, B)==>hybrid_support(A, B).
ttPredType(A)==>tCol(A).
ttPredType(A)/atom(A)==>arity(A, 1), pfcControlled(A).
ttPredType(A)/atom(A)==>support_hilog(A, 1).
ttPredType(A)==>tSet(A), completelyAssertedCollection(A).
ttTypeType(A)==>completelyAssertedCollection(A).
tSet(A)==>completelyAssertedCollection(A).
ttFormatType(A)==> ~completelyAssertedCollection(A).
tCol(A)/ (atom(A), C=..[A, B])==>{decl_type(A)}, arity(A, 1), mpred_univ(A, B, C).
tCol(A)/ (atom(A), \+static_predicate(A/1))==>{kb_dynamic(A/1)}.
tCol(A)/ (atom(A), B=..[A, C], \+static_predicate(A/1), \+completelyAssertedCollection(A))==> (B:-cwc, lazy(\+ ~B), isa_backchaing(C, A)).
ttPredType(A)==>completelyAssertedCollection(A).
tSet(A)==>{atom(A), functor(B, A, 1),  (\+predicate_property(B, C)->kb_dynamic(A/1);true), B=..[A, D], nop(C:D),  (predicate_property(B, dynamic)->true;show_pred_info(B))}, functorDeclares(A), pfcControlled(A), arity(A, 1), tCol(A).
ttFormatType(A)==>{get_functor(A, B), functor(C, B, 1),  (\+predicate_property(C, D)->kb_dynamic(B/1);true), C=..[B, E], nop(D),  (predicate_property(C, dynamic)->true;show_pred_info(C))}, ~functorDeclares(B), arity(B, 1),  (C/predicate_property(C, dynamic)==>{ignore(retract(C))}),  (isa(E, B)==>{ignore(retract(isa(E, B)))}).
ttPredType(A)==>functorDeclares(A).
functorDeclares(A)==>tSet(A).
functorDeclares(A)==>tCol(A).
ttPredType(A)==>{atom(A), B=..[A, C]},  (B:-cwc, is_ftCompound(C), get_functor(C, D), call(A, D)).
tFunction(A)/is_declarations(A)==>meta_argtypes(A).
ttFormatType(A)/is_declarations(A)==>meta_argtypes(A).
meta_argtypes(A)/is_ftCompound(A)==>{get_functor(A, B, C)}, arity(B, C).
completelyAssertedCollection(A)==>completeExtentAsserted(A).
ttNotTemporalType(A)==>tCol(A).
ttTemporalType(A)==>tCol(A).
ttTemporalType(A), tCol(A)==>genls(A, tTemporalThing).
ttFormatType(A), {is_ftCompound(A)}==>meta_argtypes(A).
disjointWith(B, A)==>disjointWith(A, B).
ptSymmetric(A)==>{atom(A), D=..[A, C, B], E=..[A, B, C]},  (D==>E),  (~D==> ~E).
prologSideEffects(A)==>tNotForUnboundPredicates(A).
tCol(A), {isa_from_morphology(A, B)}==>isa(A, B).
genls(B, A), genls(A, B), {B\==A}==>{mpred_withdraw(genls(B, A))}.
genls(A, B), arity(A, 1), arity(B, 1), {\+ (genls(A, C), C\=A, genls(C, B), C\=B), B\=A}==>{get_functor(A, D), get_functor(B, E), nop(dmsg(wishing_to_add((A==>B))))}, nearestGenls(D, E).
nearestGenls(A, B)==>{get_functor(A, C), get_functor(B, D), G=..[C, E], F=..[D, E], asserta_if_new((F:-loop_check(G)))}.
completeIsaAsserted(A), isa(A, B), genls(B, C), {ground(B:C)}==>{dif:dif(B, C)}, isa(A, C).
meta_argtypes(A), {dif:dif(A, B)}, genls(A, B), tCol(B), {~isa(B, ttFormatType)}==>formatted_resultIsa(A, B).
A/ (nonvar(A), is_ftNonvar(A), functor(A, B, C), \+mpred_connective(B), C>1)==>{lmconf:agenda_slow_op_enqueue(must(ignore(deduceEachArgType(A))))}.
tCol(A)==>arity(A, 1).
either(A, B)==> (~A<==>B),  (~B<==>A).
prologHybrid(A), {get_functor(A, B, C), A\=B}==>arity(B, C).
ftString(A)/predicate_property(ftString(A), dynamic)==>{ignore(retract(ftString(A)))}.
isa(A, ftString)==>{ignore(retract(isa(A, ftString)))}.
ftVar(A)/predicate_property(ftVar(A), dynamic)==>{ignore(retract(ftVar(A)))}.
isa(A, ftVar)==>{ignore(retract(isa(A, ftVar)))}.
ftSpec(A)/predicate_property(ftSpec(A), dynamic)==>{ignore(retract(ftSpec(A)))}.
isa(A, ftSpec)==>{ignore(retract(isa(A, ftSpec)))}.
ftCallable(A)/predicate_property(ftCallable(A), dynamic)==>{ignore(retract(ftCallable(A)))}.
isa(A, ftCallable)==>{ignore(retract(isa(A, ftCallable)))}.
ftPercent(A)/predicate_property(ftPercent(A), dynamic)==>{ignore(retract(ftPercent(A)))}.
isa(A, ftPercent)==>{ignore(retract(isa(A, ftPercent)))}.
ttValueType(A)==>genls(A, vtValue).
ttValueType(A)==>completelyAssertedCollection(A).
argIsa(C, A, B), {number(A)}, ttFormatType(B)==>argQuotedIsa(C, A, B).
resultIsa(A, B)==>tFunction(A), ftSpec(B).
ftInt(A)/predicate_property(ftInt(A), dynamic)==>{ignore(retract(ftInt(A)))}.
isa(A, ftInt)==>{ignore(retract(isa(A, ftInt)))}.
ftNumber(A)/predicate_property(ftNumber(A), dynamic)==>{ignore(retract(ftNumber(A)))}.
isa(A, ftNumber)==>{ignore(retract(isa(A, ftNumber)))}.
ftVoprop(A)/predicate_property(ftVoprop(A), dynamic)==>{ignore(retract(ftVoprop(A)))}.
isa(A, ftVoprop)==>{ignore(retract(isa(A, ftVoprop)))}.
tCol(A)==>{guess_supertypes(A)}.
tNewlyCreated(A)==>{guess_types(A)}.
quotedDefnIff(A, _)==>ttFormatType(A).
ftFloat(A)/predicate_property(ftFloat(A), dynamic)==>{ignore(retract(ftFloat(A)))}.
isa(A, ftFloat)==>{ignore(retract(isa(A, ftFloat)))}.
ftAtom(A)/predicate_property(ftAtom(A), dynamic)==>{ignore(retract(ftAtom(A)))}.
isa(A, ftAtom)==>{ignore(retract(isa(A, ftAtom)))}.
ftCompound(A)/predicate_property(ftCompound(A), dynamic)==>{ignore(retract(ftCompound(A)))}.
isa(A, ftCompound)==>{ignore(retract(isa(A, ftCompound)))}.
ftGround(A)/predicate_property(ftGround(A), dynamic)==>{ignore(retract(ftGround(A)))}.
isa(A, ftGround)==>{ignore(retract(isa(A, ftGround)))}.
ftID(A)/predicate_property(ftID(A), dynamic)==>{ignore(retract(ftID(A)))}.
isa(A, ftID)==>{ignore(retract(isa(A, ftID)))}.
ftTerm(A)/predicate_property(ftTerm(A), dynamic)==>{ignore(retract(ftTerm(A)))}.
isa(A, ftTerm)==>{ignore(retract(isa(A, ftTerm)))}.
ftNonvar(A)/predicate_property(ftNonvar(A), dynamic)==>{ignore(retract(ftNonvar(A)))}.
isa(A, ftNonvar)==>{ignore(retract(isa(A, ftNonvar)))}.
ftList(A)/predicate_property(ftList(A), dynamic)==>{ignore(retract(ftList(A)))}.
isa(A, ftList)==>{ignore(retract(isa(A, ftList)))}.
ftRest(A)/predicate_property(ftRest(A), dynamic)==>{ignore(retract(ftRest(A)))}.
isa(A, ftRest)==>{ignore(retract(isa(A, ftRest)))}.
ftBoolean(A)/predicate_property(ftBoolean(A), dynamic)==>{ignore(retract(ftBoolean(A)))}.
isa(A, ftBoolean)==>{ignore(retract(isa(A, ftBoolean)))}.
ftText(A)/predicate_property(ftText(A), dynamic)==>{ignore(retract(ftText(A)))}.
isa(A, ftText)==>{ignore(retract(isa(A, ftText)))}.
pfcControlled(A)/ (get_arity(A, B, C), arity(B, C))==>support_hilog(B, C).
pfcControlled(A)/has_functor(A)==>{kb_dynamic(A), get_functor(A, B, C)}, arity(B, C), pfcControlled(B).
pfcMustFC(A)==>pfcControlled(A).
tCol(A), ~ttFormatType(A)==>tSet(A).
prologHybrid(A)/has_functor(A)==>{kb_dynamic(A)}.
prologDynamic(A)/has_functor(A)==>{decl_mpred_prolog(A)}.
prologBuiltin(A)/has_functor(A)==>{decl_mpred_prolog(A)}.
pfcControlled(A)/is_ftCompound(A)==>{once((A=B/C;get_functor(A, B, C))), kb_dynamic(B/C)}.
pfcControlled(A)==>prologHybrid(A).
if_missing(A, B)==> (\+A/ (A\=@=B)==>B).
mdefault((A<-B))/mpred_literal(A)==> (A<-B, \+ ~A).
mdefault((B==>A))/nonvar(A)==> (B==>mdefault(A)).
mdefault(~A)/nonvar(A)==> (\+A==> ~A).
mdefault(A)/mpred_positive_literal(A)==> (\+ ~A==>A).
mdefault(A)/ (mpred_literal_nv(A), if_missing_mask(A, B, C))==> (\ +B/C==>A).
mpred_sv(A, B)==>prologSingleValued(A), arity(A, B), singleValuedInArg(A, B).
prologSingleValued(A), arity(A, B)==>mdefault(singleValuedInArg(A, B)).
singleValuedInArg(A, _)==>prologSingleValued(A).
\+ ~singleValuedInArg(singleValuedInArg, 2)==>singleValuedInArg(singleValuedInArg, 2).
\ +singleValuedInArg(singleValuedInArg, A)/ (dif:dif(2, A))==>singleValuedInArg(singleValuedInArg, 2).
singleValuedInArgDefault(A, 2, C), arity(A, 2), argIsa(A, 1, B)==>relationMostInstance(A, B, C).
singleValuedInArgDefault(B, C, A)/ground(A)==>singleValuedInArg(B, C).
{A=2}, singleValuedInArgDefault(B, A, D), arity(B, A), argIsa(B, 1, C)==>relationMostInstance(B, C, D).
singleValuedInArgDefault(B, E, A)/is_ftNonvar(A), arity(B, C), {functor(D, B, C), replace_arg(D, E, A, F), replace_arg(F, E, H, G)}==>mdefault((F<-{ground(D)}, ~ (G/nonvar(H)))).
clif(A)==>{delistify_last_arg(A, kif_to_boxlog, B)}, boxlog(B), {must(is_entailed(B))}.
boxlog(A), {delistify_last_arg(A, boxlog_to_pfc, B)}==>pfclog(B).
pfclog(A)==>A.
{is_clif(A)}==> (A/is_clif(A)==>clif(A)).
if(A, B)/is_clif(if(A, B))==>clif(if(A, B)).
A/is_kif_rule(A)==>clif(A).
:- multifile(baseKB:(singleValuedInArg)/2).
:- dynamic singleValuedInArg/2.
:- multifile singleValuedInArg/2.
:- module_transparent singleValuedInArg/2.
:- discontiguous singleValuedInArg/2.

singleValuedInArg(singleValuedInArg, 2).
:- multifile(baseKB:(instTypeProps)/3).
:- dynamic instTypeProps/3.
:- multifile instTypeProps/3.
:- module_transparent instTypeProps/3.
:- discontiguous instTypeProps/3.

:- multifile(baseKB:(marker_supported)/2).
:- dynamic marker_supported/2.
:- multifile marker_supported/2.
:- module_transparent marker_supported/2.
:- discontiguous marker_supported/2.

marker_supported(prologBuiltin, 1).
marker_supported(conflict, 1).
marker_supported(mpred_undo_sys, 3).
marker_supported(tPred, 1).
marker_supported(tCol, 1).
marker_supported(support_hilog, 2).
marker_supported(hybrid_support, 2).
marker_supported(prologHybrid, 1).
marker_supported(mpred_do_and_undo_method, 2).
marker_supported(completelyAssertedCollection, 1).
marker_supported(marker_supported, 2).
marker_supported(map_mpred_mark_C, 1).
marker_supported(mpred_mark_C, 1).
marker_supported(pfcControlled, 1).
marker_supported(ttPredType, 1).
marker_supported(tSet, 1).
marker_supported(ttTypeType, 1).
marker_supported(ttFormatType, 1).
marker_supported(mpred_univ, 3).
marker_supported(functorDeclares, 1).
marker_supported(meta_argtypes, 1).
marker_supported(tFunction, 1).
marker_supported(completeExtentAsserted, 1).
marker_supported(ttNotTemporalType, 1).
marker_supported(ttTemporalType, 1).
marker_supported(genls, 2).
marker_supported(disjointWith, 2).
marker_supported(ptSymmetric, 1).
marker_supported(tNotForUnboundPredicates, 1).
marker_supported(prologSideEffects, 1).
marker_supported(nearestGenls, 2).
marker_supported(completeIsaAsserted, 1).
marker_supported(formatted_resultIsa, 2).
marker_supported(<==>, 2).
marker_supported(either, 2).
marker_supported(ftString, 1).
marker_supported(ftVar, 1).
marker_supported(ftSpec, 1).
marker_supported(ftCallable, 1).
marker_supported(ftPercent, 1).
marker_supported(ttValueType, 1).
marker_supported(argQuotedIsa, 3).
marker_supported(resultIsa, 2).
marker_supported(ftInt, 1).
marker_supported(ftNumber, 1).
marker_supported(ftVoprop, 1).
marker_supported(tNewlyCreated, 1).
marker_supported(quotedDefnIff, 2).
marker_supported(ftFloat, 1).
marker_supported(ftAtom, 1).
marker_supported(ftCompound, 1).
marker_supported(ftGround, 1).
marker_supported(ftID, 1).
marker_supported(ftTerm, 1).
marker_supported(ftNonvar, 1).
marker_supported(ftList, 1).
marker_supported(ftRest, 1).
marker_supported(ftBoolean, 1).
marker_supported(ftText, 1).
marker_supported(pfcMustFC, 1).
marker_supported(prologDynamic, 1).
marker_supported(ptBinaryPredicate, 1).
marker_supported(if_missing, 2).
marker_supported(mdefault, 1).
marker_supported(\, 1).
marker_supported(prologSingleValued, 1).
marker_supported(singleValuedInArg, 2).
marker_supported(mpred_sv, 2).
marker_supported(relationMostInstance, 3).
marker_supported(singleValuedInArgDefault, 3).
marker_supported(boxlog, 1).
marker_supported(clif, 1).
marker_supported(pfclog, 1).
marker_supported(if, 2).
:- multifile(baseKB:(ftText)/1).
:- dynamic ftText/1.
:- multifile ftText/1.
:- module_transparent ftText/1.
:- discontiguous ftText/1.

:- multifile(baseKB:(mpred_f)/5).
:- dynamic mpred_f/5.
:- module_transparent mpred_f/5.

:- multifile(baseKB:(props)/2).
:- dynamic props/2.
:- module_transparent props/2.

:- multifile(baseKB:(prologOrdered)/1).
:- dynamic prologOrdered/1.
:- multifile prologOrdered/1.
:- module_transparent prologOrdered/1.
:- discontiguous prologOrdered/1.

prologOrdered(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologOrdered, B).
:- multifile(baseKB:(t)/4).
:- dynamic t/4.
:- meta_predicate t(?,?,?,?).
:- module_transparent t/4.

:- multifile(baseKB:(arity)/2).
:- dynamic arity/2.
:- multifile arity/2.
:- module_transparent arity/2.
:- discontiguous arity/2.

arity(apathFn, 2).
arity(isKappaFn, 2).
arity(isInstFn, 1).
arity(ftListFn, 1).
arity(xyzFn, 4).
arity(arity, 2).
arity(is_never_type, 1).
arity(argIsa, 3).
arity(A, 1) :-
	ttPredType(A).
arity(meta_argtypes, 1).
arity(prologSingleValued, 1).
arity(<=>, 2).
arity(A, B) :-
	atom(A),
	integer(B),
	current_predicate(A/B),
	B>1.
arity(A, 1) :-
	atom(A),
	current_predicate(A/1),
	\+ ( dif(B, 1),
	     arity(A, B)
	   ).
arity('$VAR', 1).
arity(mpred_select, 2).
arity(pddlObjects, 2).
arity(genls, 2).
arity(prologBuiltin, 1).
arity(make_builtin, 1).
arity(conflict, 1).
arity(must, 1).
arity(type_prefix, 2).
arity(tCol, 1).
arity(mpred_undo_sys, 3).
arity(mpred_do_and_undo_method, 2).
arity(mpred_non_neg_literal, 1).
arity(tPred, 1).
arity(integer, 1).
arity(>, 2).
arity(support_hilog, 2).
arity(completelyAssertedCollection, 1).
arity(\=, 2).
arity(atom, 1).
arity(static_predicate, 1).
arity(prologDynamic, 1).
arity(hybrid_support, 2).
arity(=, 2).
arity(functor, 3).
arity(->, 2).
arity(true, 0).
arity(kb_dynamic, 1).
arity(show_failure, 2).
arity(prologHybrid, 1).
arity(fa_to_p, 3).
arity(predicate_property, 2).
arity(trace_or_throw, 1).
arity(dmsg, 1).
arity(ground, 1).
arity(marker_supported, 2).
arity(make_dynamic, 1).
arity(predicate_is_undefined_fa, 2).
arity(mpred_mark_C, 1).
arity(map_mpred_mark_C, 1).
arity(\==, 2).
arity(pfcControlled, 1).
arity(genlPreds, 2).
arity(resolveConflict, 1).
arity(agent_text_command, 4).
arity(ttPredType, 1).
arity(pfcDatabaseTerm, 1).
arity(pfcWatched, 1).
arity(pfcCreates, 1).
arity(pfcNegTrigger, 1).
arity(pfcPosTrigger, 1).
arity(pfcBcTrigger, 1).
arity(pfcRHS, 1).
arity(pfcMustFC, 1).
arity(tSet, 1).
arity(ttTypeType, 1).
arity(ttFormatType, 1).
arity(=.., 2).
arity(decl_type, 1).
arity(mpred_univ, 3).
arity(ttValueType, 1).
arity(tNotForUnboundPredicates, 1).
arity(prologNegByFailure, 1).
arity(tSpec, 1).
arity(tRelation, 1).
arity(tFunction, 1).
arity(prologMacroHead, 1).
arity(functorDeclares, 1).
arity(prologMultiValued, 1).
arity(prologOrdered, 1).
arity(predIsFlag, 1).
arity(ttNonGenled, 1).
arity(prologPTTP, 1).
arity(prologKIF, 1).
arity(prologListValued, 1).
arity(predCanHaveSingletons, 1).
arity(tTemporalThing, 1).
arity(prologSideEffects, 1).
arity(tInferInstanceFromArgType, 1).
arity(ttNotTemporalType, 1).
arity(ttSpatialType, 1).
arity(ttTemporalType, 1).
arity(ttUnverifiableType, 1).
arity(cwc, 0).
arity(lazy, 1).
arity(isa_backchaing, 2).
arity(write, 1).
arity(notAssertable, 1).
arity(prologEquality, 1).
arity(nop, 1).
arity(show_pred_info, 1).
arity(get_functor, 2).
arity(ignore, 1).
arity(is_ftCompound, 1).
arity(call, 2).
arity(pddlSomethingIsa, 2).
arity(is_declarations, 1).
arity(get_functor, 3).
arity(completeExtentAsserted, 1).
arity(ftInt, 1).
arity(argQuoted, 1).
arity({}, 1).
arity(vtDirection, 1).
arity(disjointWith, 2).
arity(ptSymmetric, 1).
arity(isa_from_morphology, 2).
arity(completeIsaAsserted, 1).
arity(tFormatType, 1).
arity(mpred_withdraw, 1).
arity(nearestGenls, 2).
arity(asserta_if_new, 1).
arity(dif, 2).
arity(formatted_resultIsa, 2).
arity(quotedIsa, 2).
arity(tSpatialThing, 1).
arity(nonvar, 1).
arity(is_ftNonvar, 1).
arity(mpred_connective, 1).
arity(agenda_slow_op_enqueue, 1).
arity(typeGenls, 2).
arity(mpred_module, 2).
arity(either, 2).
arity(<==>, 2).
arity(typeProps, 2).
arity(genlInverse, 2).
arity(instTypeProps, 3).
arity(predProxyAssert, 2).
arity(predProxyQuery, 2).
arity(predProxyRetract, 2).
arity(predTypeMax, 3).
arity(resultIsa, 2).
arity(isa, 2).
arity(arg, 3).
arity(ftString, 1).
arity(ftVar, 1).
arity(ftSpec, 1).
arity(ftCallable, 1).
arity(ftPercent, 1).
arity(vtValue, 1).
arity(vtColor, 1).
arity(number, 1).
arity(argQuotedIsa, 3).
arity(localityOfObject, 2).
arity(subFormat, 2).
arity(tRegion, 1).
arity(ftRest, 1).
arity(isRandom, 1).
arity(ftNumber, 1).
arity(isLikeFn, 2).
arity(ftDeplictsFn, 1).
arity(ftDice, 3).
arity(tAvoidForwardChain, 1).
arity('SententialOperator', 1).
arity(ftVoprop, 1).
arity(quotedDefnIff, 2).
arity(defnNecessary, 2).
arity(defnIff, 2).
arity(macroSomethingDescription, 2).
arity(pddlPredicates, 1).
arity(pddlSorts, 2).
arity(pddlTypes, 1).
arity(comment, 2).
arity(<-, 2).
arity(==>, 2).
arity(predArgMulti, 2).
arity(tDeleted, 1).
arity(predInstMax, 3).
arity(guess_supertypes, 1).
arity(tNewlyCreated, 1).
arity(ttTypeFacet, 1).
arity(guess_types, 1).
arity(dividesBetween, 3).
arity(ftFloat, 1).
arity(ftAtom, 1).
arity(ftCompound, 1).
arity(ftGround, 1).
arity(ftID, 1).
arity(ftTerm, 1).
arity(ftNonvar, 1).
arity(ftList, 1).
arity(ftBoolean, 1).
arity(ftText, 1).
arity(ptBinaryPredicate, 1).
arity(ptUnaryPredicate, 1).
arity(get_arity, 3).
arity(has_functor, 1).
arity(decl_mpred_prolog, 1).
arity(once, 1).
arity(if_missing, 2).
arity(\=@=, 2).
arity(mdefault, 1).
arity(mpred_literal, 1).
arity(/, 2).
arity(mpred_positive_literal, 1).
arity(mpred_literal_nv, 1).
arity(if_missing_mask, 3).
arity(\, 1).
arity(mpred_sv, 2).
arity(singleValuedInArg, 2).
arity(singleValuedInArgDefault, 3).
arity(relationMostInstance, 3).
arity(replace_arg, 4).
arity(clif, 1).
arity(boxlog, 1).
arity(pfclog, 1).
arity(delistify_last_arg, 3).
arity(is_clif, 1).
arity(if, 2).
arity(is_kif_rule, 1).
:- multifile(baseKB:(subFormat)/2).
:- dynamic subFormat/2.
:- multifile subFormat/2.
:- module_transparent subFormat/2.
:- discontiguous subFormat/2.

subFormat(ftDeplictsFn(tCol), ftSpec).
subFormat(ftDeplictsFn(meta_argtypes), ftSpec).
subFormat(ftVoprop, ftSpec).
subFormat(ftAtom, ftTerm).
subFormat(ftCallable, ftProlog).
subFormat(ftID, ftTerm).
subFormat(ftInt, ftNumber).
subFormat(ftInteger, ftNumber).
subFormat(ftNumber, ftPercent).
subFormat(ftPercent, ftNumber).
subFormat(ftString, ftTerm).
subFormat(ftString, ftText).
subFormat(ftTerm, ftProlog).
subFormat(ftText, ftTerm).
subFormat(ftVar, ftProlog).
subFormat(ftVoprop, ftRest(ftVoprop)).
subFormat(ftVoprop, ftTerm).
:- multifile(baseKB:(prologNegByFailure)/1).
:- dynamic prologNegByFailure/1.
:- multifile prologNegByFailure/1.
:- module_transparent prologNegByFailure/1.
:- discontiguous prologNegByFailure/1.

prologNegByFailure(A) :-
	cwc,
	is_ftCompound(A),
	get_functor(A, B),
	call(prologNegByFailure, B).
prologNegByFailure(predArgMulti).
prologNegByFailure(tDeleted).
:- '$set_source_module'(_G1772332,lmconf).
:- style_check(-singleton).
:- dynamic loaded_file_world_time/3.
:- multifile loaded_file_world_time/3.
:- meta_predicate loaded_file_world_time(+,+,+).

loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/autoexec.pfc.pl', baseKB, 1447600673.0).
loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/boot_system.pfc.pl', baseKB, 1448337408.0).
loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_if_missing.pfc.pl', baseKB, 1447598497.0).
loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_mdefault.pfc.pl', baseKB, 1447598499.0).
loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/pfc/system_singleValued.pfc.pl', baseKB, 1447598505.0).
loaded_file_world_time('/root/lib/swipl/pack/logicmoo_base/prolog/logicmoo/snark/common_logic_clif.pfc', baseKB, 1448340776.0).

