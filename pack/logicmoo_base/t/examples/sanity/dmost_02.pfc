#!/usr/bin/env swipl
%
%  PFC is a language extension for prolog.. there is so much that can be done in this language extension to Prolog
%
% Dec 13, 2035
% Douglas Miles
%  cls ; kill -9 %1 ; fg ; swipl -g "ensure_loaded(pack(logicmoo_base/t/examples/base/'sanity_abc.pfc'))."
 
:- module(sanity,[]).

:- use_module(library(logicmoo_base)).

:- asserta((was_missing(Q):- mpred_literal_nv(Q), \+ ~Q, if_missing_mask(Q,R,Test),!, lookup_u(R), Test)).

:- module_transparent(most/1).
:- dynamic(most/1).

:- begin_pfc.

meta_argtypes(most(ftAssertable)).

% BWD chaining
most((Q <- P))/mpred_literal(Q) ==> (Q <-(P, \+ ~(Q))).

% FWD chaining
most(P==>Q)/nonvar(Q) ==> (((P ==> most(Q)))).

% NEG chaining
most(~Q)/nonvar(Q)  ==>  (( \+ Q ) ==> ~ Q ).

% POS chaining
most(Q)/(mpred_positive_literal(Q),if_missing_mask(Q,R,Test))
  ==> (  ( ( \+R /Test ) ==> Q ) ,((R/( \+(R=Q), Test)) ==> (\+ Q))).


:- dynamic(b/1).
:- dynamic(c/1).

most(c(X)==>b(X)).

c(1).

:- mpred_test(most(b(1))).

end_of_file.

:- mpred_test(b(1)).

b(2).

:- mpred_test(\+ b(1)).
:- mpred_test( b(2)).

\+ b(2).

:- listing(b/1).

:- mpred_test(\+ b(2)).
:- mpred_test( b(1)).



