:- chr_constraint leq/2.

leq(X,X) <=> 
	%writeln(r1),
	true pragma priority(1).
leq(X,Y), leq(Y,X) <=> 
	%writeln(r3),
	X = Y pragma priority(1).
leq(X,Y) \ leq(X,Y) <=> 
	%writeln(r2),
	true pragma priority(1).
leq(X,Y), leq(Y,Z) ==> 
	%writeln(r4),
	leq(X,Z) pragma priority(2).


bench(N) :- length(Vars,N), gen_leqs(Vars), check_activation.%, show_store.

gen_leqs([H1,H2|T]) :- leq(H1,H2), gen_leqs([H2|T],H1).

gen_leqs([H1,H2|T],S) :- !, leq(H1,H2), gen_leqs([H2|T],S).
gen_leqs([E],S) :-  
	%true.
	check_activation,
	leq(E,S).


measure(Goal,N) :-
	garbage_collect,
	statistics(garbage_collection,[_,_,G1]),
	statistics(runtime,_),
	call_n_times(Goal,N),
	statistics(runtime,[_,RT]),
	statistics(garbage_collection,[_,_,G2]),
	RealTime is RT - (G2-G1),
	writeln(Goal:RealTime).
	

call_n_times(Goal,N) :-
	(   N > 0
	->  \+ (\+ call(Goal)),
	    N1 is N - 1,
	    call_n_times(Goal,N1)
	;   true
	).
