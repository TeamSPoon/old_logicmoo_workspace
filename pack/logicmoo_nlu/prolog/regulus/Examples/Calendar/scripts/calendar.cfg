
include('$REGULUS/Examples/Calendar/scripts/calendar_common.cfg').

% Config information for version of Calendar derived from general grammar

% The current Regulus grammar consists of the following four files
regulus_config(regulus_grammar, 
	       [general_regulus_grammars(general_eng), 
		general_regulus_grammars(gen_eng_lex),
		general_regulus_grammars(ignore_apposition_rule), 
		%general_regulus_grammars(linear_sem),
		%general_regulus_grammars(nested_sem),
		general_regulus_grammars(riacs_sem), 
		calendar_regulus_grammars(calendar_lex),
		% Create this file by doing 'make name_lexicon' in $REGULUS/Examples/Calendar/scripts
		calendar_regulus_grammars(generated_names),
		calendar_regulus_grammars(speech_version)
	    ]).

% EBL training will use this file as its training corpus.
regulus_config(ebl_corpus,
	       [corpora('calendar_dev_corpus.pl'),
		%corpora('dev_corpus_from_transcriptions.pl')
		corpora('dev_corpus_from_transcriptions_edited.pl')
	       ]).

% The EBL specialised grammar, which can be loaded using the EBL_LOAD command.
regulus_config(ebl_regulus_component_grammar, [calendar_runtime(calendar_specialised_default)]).

% The command EBL_NUANCE writes the specialised Nuance grammar to this file.
regulus_config(ebl_nuance_grammar, calendar_runtime(recogniser)).

% Working files have names starting with the expansion of this file.
regulus_config(working_file_prefix, calendar_runtime('calendar')).
regulus_config(working_directory, calendar_runtime('')).

% Dialogue specific declarations:

% Dialogue processing code in these files
regulus_config(dialogue_files,
	       [calendar_prolog('input_manager.pl'),
		calendar_prolog('resolve_lf.pl'),
		calendar_prolog('dialogue_manager.pl'),
		calendar_prolog('resolve_dialogue_move.pl'),
		calendar_prolog('output_manager.pl'),

	        calendar_prolog('pre_process_for_paraphrasing.pl'),
	       
		calendar_prolog('database1.pl')
	       ]).

% N-best preference features and weights
regulus_config(nbest_preferences, calendar_prolog('calendar_nbest.pl')).

% LF patterns for use in input manager
regulus_config(lf_patterns, calendar_prolog('lf_patterns.pl')).

% Modules referenced by compiled LF patterns
regulus_config(lf_patterns_modules,
	       [library(lists),
		library(system),
		'$REGULUS/PrologLib/utilities',
		'$REGULUS/Examples/Calendar/Prolog/calendar_utils']).

% Compiled paraphrase generation grammar.
% Created using resources defined in config file paraphrase.cfg, in this directory.	
regulus_config(paraphrase_generation_grammar, calendar_runtime('paraphrase_generator.pl')).	
%regulus_config(paraphrase_generation_grammar, calendar_runtime('paraphrase_speech_generator.pl')).	

% Orthography rules for post-processing output
regulus_config(orthography_rules, calendar_prolog('orthography_rules.pl')).

% Generation preferences don't work yet for paraphrases
%regulus_config(generation_preferences, calendar_prolog('generation_preferences.pl')).

% Where to put data for training N-best preferences
regulus_config(nbest_training_data_file, calendar_runtime('nbest_training_data.pl')).

% PARAMETERS FOR NUANCE-COMPILE

% Take data for doing PCFG tuning from here...
regulus_config(grammar_probs_data,
	       [corpora('calendar_dev_corpus.pl'),
		corpora('dev_corpus_from_transcriptions.pl')]).
% ... and write the training data to here
regulus_config(ebl_grammar_probs, calendar_runtime('grammar_probs_data_file.txt')).

% Perform PCFG training on the specialised Nuance grammar
regulus_config(nuance_grammar_for_pcfg_training, calendar_runtime(recogniser)).

% ... putting the result in this directory
regulus_config(pcfg_training_output_directory, calendar_runtime(pcfg_trained)).

% Perform nuance-compile on scripts/combined_glm_slm,
% which includes the grammar resulting from PCFG training
regulus_config(nuance_grammar_for_compilation, calendar_scripts(combined_glm_slm)).

% ... using the English.UK language pack 
regulus_config(nuance_language_pack, 'English.UK').

% ... and the following parameters 
regulus_config(nuance_compile_params, ['-auto_pron', '-dont_flatten']).

% ... and writing out the resulting package here
regulus_config(nuance_recognition_package, calendar_runtime(recogniser)).

% END OF PARAMETERS FOR NUANCE-COMPILE

regulus_config(dialogue_corpus,
	       [corpora('calendar_dev_corpus.pl'),
		corpora('dev_corpus_from_transcriptions_edited.pl')]).
regulus_config(dialogue_corpus(ellipsis), corpora('calendar_dev_corpus_ellipsis.pl')).

/*

If you want run a new speech corpus, you need to do the following:

1. Create your corpus, which you are advised to put in the directory
$REGULUS/Calendar/corpora.  Each line should contains a wavfile name,
followed by a transcription.

You are advised to put the wavfiles in a subdirectory of
$REGULUS/Calendar/corpora/speech, and write the wavfile
names using the environment variable $REGULUS, e.g.

$REGULUS/Examples/Calendar/corpora/speech/2008-02-08_15-31-01/utt02.wav was there a meeting on monday
$REGULUS/Examples/Calendar/corpora/speech/2008-02-08_15-31-01/utt03.wav where is the next meeting
$REGULUS/Examples/Calendar/corpora/speech/2008-02-08_15-31-01/utt04.wav is there a meeting planned in geneva

This will make it possible for people to run the corpus irrespective
of where they happen to have installed Regulus on their machine.

2. Add a line in this file defining where your corpus is. For example,

regulus_config(dialogue_speech_corpus(pda), corpora('calendar_transcriptions_pda.txt')).

says that the corpus identified as "pda" is in
$REGULUS/Calendar/corpora/calendar_transcriptions_pda.txt

3. Add a line in this file defining where the output of the corpus run
will go. For example,

regulus_config(dialogue_speech_corpus_results(pda), calendar_runtime('calendar_speech_dialogue_results_pda.pl')).

says that the output results will go in

$REGULUS/Calendar/Generated/calendar_speech_dialogue_results_pda.pl

4. You may later want to separate your corpus into in-coverage and out-of-coverage portions.
If so, add lines for those subcorpora, e.g.

regulus_config(dialogue_speech_corpus(in_coverage_pda), corpora('calendar_transcriptions_in_coverage_pda.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage_pda), corpora('calendar_transcriptions_out_of_coverage_pda.txt')).

regulus_config(dialogue_speech_corpus_results(in_coverage_pda), calendar_runtime('calendar_speech_dialogue_results_in_coverage_pda.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage_pda), calendar_runtime('calendar_speech_dialogue_results_out_of_coverage_pda.pl')).

5. The simplest way to run the corpora from the command-line is create
a Prolog file with the appropriate Regulus commands, and add a target
in the file $REGULUS/Calendar/scripts/Makefile which invokes it. For
example, the following target in $REGULUS/Calendar/scripts/Makefile
finds the in-coverage part of the 'pda' corpus and runs it:

speech_test_pda:
	(unset SHELL ; sicstus -l run_speech_test_pda.pl)

Note the 'unset SHELL', which is necessary for obscure reasons having to do
with the way Sicstus interacts with 'make'

The file $REGULUS/Calendar/scripts/run_speech_test_pda.pl contains the
following commands, which you should be able to adapt:

% Compile the main Regulus code
:- compile('$REGULUS/Prolog/load').

% Load stuff, split corpus, run batch speech test on in-coverage PDA data
:- regulus_batch('$REGULUS/Examples/Calendar/scripts/calendar.cfg',
		 ["EBL_LOAD",
		  "LOAD_DIALOGUE",
		  "SPLIT_SPEECH_CORPUS .MAIN pda in_coverage_pda out_of_coverage_pda",
		  "BATCH_DIALOGUE_SPEECH in_coverage_pda"]).

:- halt.

*/

regulus_config(dialogue_speech_corpus, corpora('calendar_transcriptions.txt')).
regulus_config(dialogue_speech_corpus(in_coverage), corpora('calendar_transcriptions_in_coverage.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage), corpora('calendar_transcriptions_out_of_coverage.txt')).

% File for marking in-coverage paraphrases for out-of-coverage transcriptions
regulus_config(paraphrase_corpus, corpora('transcription_paraphrases.pl')).

regulus_config(dialogue_speech_corpus(training), corpora('calendar_transcriptions_training.txt')).
regulus_config(dialogue_speech_corpus(test), corpora('calendar_transcriptions_test.txt')).
regulus_config(dialogue_speech_corpus(in_coverage_test), corpora('calendar_transcriptions_in_coverage_test.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage_test), corpora('calendar_transcriptions_out_of_coverage_test.txt')).
regulus_config(dialogue_speech_corpus(pda), corpora('calendar_transcriptions_pda.txt')).
regulus_config(dialogue_speech_corpus(in_coverage_pda), corpora('calendar_transcriptions_in_coverage_pda.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage_pda), corpora('calendar_transcriptions_out_of_coverage_pda.txt')).

regulus_config(dialogue_corpus_results, calendar_runtime('calendar_dev_corpus_results.pl')).
regulus_config(dialogue_corpus_results(ellipsis), calendar_runtime('calendar_dev_corpus_results_ellipsis.pl')).

regulus_config(dialogue_speech_corpus_results, calendar_runtime('calendar_speech_dialogue_results.pl')).
regulus_config(dialogue_speech_corpus_results(training), calendar_runtime('calendar_speech_dialogue_results_training.pl')).
regulus_config(dialogue_speech_corpus_results(test), calendar_runtime('calendar_speech_dialogue_results_test.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage), calendar_runtime('calendar_speech_dialogue_results_in_coverage.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage), calendar_runtime('calendar_speech_dialogue_results_out_of_coverage.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage_test), calendar_runtime('calendar_speech_dialogue_results_in_coverage_test.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage_test), calendar_runtime('calendar_speech_dialogue_results_out_of_coverage_test.pl')).
regulus_config(dialogue_speech_corpus_results(pda), calendar_runtime('calendar_speech_dialogue_results_pda.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage_pda), calendar_runtime('calendar_speech_dialogue_results_in_coverage_pda.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage_pda), calendar_runtime('calendar_speech_dialogue_results_out_of_coverage_pda.pl')).

regulus_config(dialogue_corpus_judgements, corpora('calendar_dialogue_judgements.pl')).

regulus_config(targeted_help_source_files, [calendar_runtime('calendar_dev_corpus_results.pl')]).
regulus_config(targeted_help_classes_file, calendar_prolog('help_classes.pl')).
regulus_config(compiled_targeted_help_classes_file, calendar_runtime('compiled_help_classes.pl')).
regulus_config(targeted_help_backed_off_corpus_file, calendar_runtime('targeted_help_backed_off_corpus.pl')).

regulus_config(dialogue_rec_params,
	       [package=calendar_runtime(recogniser), grammar='.MAIN',
		'rec.Pruning=1600', 'rec.DoNBest=TRUE', 'rec.NumNBest=6']).
	       	%'rec.Pruning=1600']).
	       
