;; use (load "osim.lisp")

(print "loading osim.lisp...1 of 5.")
(force-output)

;;==================================================
;; CYC PATCHES      1.8045
;;==================================================
; Required for the planner example to work
(cyc-assert '(#$energySourceTypeForDeviceType #$RoadVehicle-DieselEngine #$DieselFuel) #$HumanActivitiesMt)


(force-output)


(define SBHL-DATE (form) T)
(find-or-create-constant "resultNamedByArg")
(cyc-assert '(#$arity #$resultNamedByArg 3) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$resultNamedByArg #$Relation) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$resultNamedByArg #$TernaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$dontAddTheToNamesOfInstances 1) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$dontAddTheToNamesWithPred 1) #$UniversalVocabularyMt)

(cyc-assert '(#$isa #$transportsObjectType (#$ArityRelationFn 5) ) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$transportsObjectType 5 ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$transportsObjectType (#$ArityRelationFn 5) ) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$transportsObjectType 5 ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$different #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$differentSymbols #$VariableArityRelation ) #$UniversalVocabularyMt)

(cyc-assert '(#$isa #$marksBoundariesOfRegion (#$ArityRelationFn 3) ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doCloseLocalVariablesScope #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOpenLocalVariablesScope #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doCloseLocalVariablesScope #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOpenLocalVariablesScope #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOutputFunctionArgs #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOutputFunctionArgs #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doProgramStepSequence  #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doProgramStepSequence  #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doDeclareFunctionParameters   #$VariableArityRelation ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doDeclareFunctionParameters   #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOutputProgramFunctionHeader   #$TernaryPredicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$doOutputProgramFunctionHeader   #$Predicate ) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$GameForSystemFn 1)  #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$actorRoles-EPFT #$VariableArityRelation)  #$UniversalVocabularyMt)


(define PROLOGISA (info) (print info))
(define PROLOGISA (info info2 info3) (print (list info info2 info3)))


(find-or-create-constant "UnaryMicrotheoryFunction")
(cyc-assert '(#$isa #$UnaryMicrotheoryFunction  #$Collection) #$UniversalVocabularyMt)
(cyc-assert '(#$implies (#$isa ?FUNCT #$UnaryMicrotheoryFunction)(#$and (#$isa ?FUNCT #$UnaryFunction)(#$resultIsa ?FUNCT #$Microtheory))) #$UniversalVocabularyMt  '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$CPOF-ChangeOverTimeQueryMtFn  #$UnaryMicrotheoryFunction ) #$UniversalVocabularyMt)
(cyc-assert '(#$implies (#$isa ?X #$Country) (#$ist #$UniversalVocabularyMt (#$isa ?X #$GeopoliticalEntity))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;(cyc-assert '(#$isa #$MySentientKEIrrelevanceForQuestionAnsweringMt   #$Microtheory ) #$UniversalVocabularyMt)
;(cyc-assert '(#$isa #$TKBTopicEntitiesMt   #$Microtheory ) #$UniversalVocabularyMt)
;(cyc-assert '(#$isa #$INSCOMSandboxMt   #$Microtheory ) #$UniversalVocabularyMt)
 
(cyc-assert '(#$genlPreds #$oldConstantName #$termStrings) #$BookkeepingMt '(:DIRECTION :FORWARD))

;;==================================================
;; PATCH PREDICATE TYPE RULES
;;==================================================
(cyc-assert '(#$implies  (#$isa ?PRED #$QuantitySlot) (#$and (#$arity ?PRED 2)(#$intervalEntryFormatInArgs ?PRED 2))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert (list '#$isa (find-or-create-constant "moralCharacter") '#$QuantitySlot)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$evaluator  #$ActorSlot )  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$toughnessOfObject #$QuantitySlot)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$earningsPerShare-12Month #$QuantitySlot)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$basicPriceOfType #$MeasurableQuantitySlot)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$equivalentQuantities #$EquivalenceRelation )  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$TKB-EDBMt   #$Microtheory ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$INSCOMSandboxMt   #$Microtheory ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$FormulaStrengtheningHeuristicsGMt   #$Microtheory ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$SAICLegacyAssertionsMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$SOEGlfMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$MotleyFoolCorpusSOEMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$TKBSourceSpindleHeadMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$DialogueTrackingGMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$ReasoningAboutCoreferentExpressionsMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$TKBSourceSpindleHeadMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$DialogueTrackingGMt  #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$LocalizedShapeTypeFn  #$UnaryIntersectionFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$LocalizedShapeTypeFn  #$CollectionDenotingFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$resultGenl #$LocalizedShapeTypeFn  #$GeometricThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$LocalizedShapeTypeFn  #$LocalizedShapeType ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$InfluencingAnAgentToPlayRoleFn  #$BinaryFunction ) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$actionSequence #$UnaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$actionSequence #$eventSequence) #$UniversalVocabularyMt)

;;==================================================
;; PATCH ARITY RULES
;;==================================================
;;(cyc-assert '(#$implies  (#$and (#$nearestGenlPreds ?PRED ?SUPER) (#$arity ?SUPER ?ARITY)) (#$arity ?PRED ?ARITY)) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))  
(cyc-assert '(#$implies  (#$and (#$nearestGenlPreds ?PRED ?SUPER) (#$arity ?SUPER ?ARITY)) (#$arity ?PRED ?ARITY)) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))  
(cyc-assert '(#$implies (#$and (#$arityMin ?P ?X)(#$isa ?P #$Predicate)) (#$isa ?P #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$arityMax ?P ?X)(#$isa ?P #$Predicate)) (#$isa ?P #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$argAndRestIsa ?P ?X ?Y)) (#$isa ?P #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$isa ?T #$BinaryPredicateTypeByLogicalFeature)(#$isa ?P ?T)) (#$isa ?P #$BinaryPredicate)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$arity ?P 2) (#$isa ?P #$BinaryRelation) ) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$isa ?F #$UnaryFunction)(#$arity ?F 1)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$isa ?F #$BinaryFunction)(#$arity ?F 2)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$isa ?F #$UnaryRelation)(#$arity ?F 1)) #$CoreCycLMt '(:DIRECTION :FORWARD))
;(cyc-assert '(#$implies (#$and (#$argAndRestIsa ?P ?X ?Y)) (#$isa ?P #$VariableArityRelation)) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$arityMin ?P ?X) (#$isa ?P #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$arityMin ?P ?X) (#$isa ?P #$Function-Denotational)) (#$isa ?P #$VariableArityFunction)) #$CoreCycLMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$arityMax ?P ?X)(#$isa ?P #$Relation)) (#$isa ?P #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
;(cyc-assert '(#$implies  (#$and (#$isa ?PRED #$Predicate)(#$unknownSentence (#$isa ?PRED #$FixedArityRelation)))(#$isa ?PRED #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))
;(cyc-assert '(#$implies (#$isa ?PRED #$Predicate) (#$isa ?PRED #$VariableArityRelation)) #$CoreCycLMt '(:DIRECTION :FORWARD))

;(cyc-assert '(#$defnSufficient #$NLTemplateExpression (#$SubLQuoteFn KWTE?)) #$BaseKB '(:DIRECTION :FORWARD)) 
(cyc-assert '(#$defnSufficient #$NLTemplateExpression (#$SubLQuoteFn KWTE?)) #$ComputereseLexicalMt '(:DIRECTION :FORWARD)) 
(cyc-assert '(#$defnIff #$NLTemplateExpression (#$SubLQuoteFn KWTE?)) #$ComputereseLexicalMt '(:DIRECTION :FORWARD)) 
(cyc-assert '(#$siblingDisjointExceptions #$TemporalThing #$PropositionalInformationThing)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD)) 
(cyc-assert '(#$siblingDisjointExceptions #$TemporalThing #$Microtheory)  #$GeneralEnglishMt '(:DIRECTION :FORWARD)) 
;;(disjointWith TemporalThing AtemporalThing)
;;(defnSufficient NLTemplateExpression 
;;       (SubLQuoteFn CYCL-SENTENCE-ASSERTIBLE?))
;;==================================================
;; MICROTHEORY SETUP
;;==================================================
(print "loading osim.lisp...2 of 5.")
(force-output)

(create-constant "osim:VocabularyMt")
(cyc-assert '(#$isa #$osim:VocabularyMt #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:VocabularyMt "#$VocabularyMicrotheory that indicates the asserions required for canonicialization of #$osim:GameContext microtheories.") #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:VocabularyMt #$VocabularyMicrotheory) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$dontAddTheToNamesOfInstances 1) #$osim:VocabularyMt)

(create-constant "osim:DataMt")
(cyc-assert '(#$isa #$osim:DataMt #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:DataMt "#$DataMicrotheory that instance level data will be refelected to in computerese mainly also used to map game TextString to OE.") #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:DataMt #$DataMicrotheory) #$UniversalVocabularyMt)

(create-constant "osim:SituationMt")
(cyc-assert '(#$isa #$osim:SituationMt #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:SituationMt "#$DataMicrotheory that instance level data will be refelected to in sound consistent EL senteneces.") #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:SituationMt #$DataMicrotheory) #$UniversalVocabularyMt)

(create-constant "osim:PlanningMt")
(cyc-assert '(#$isa #$osim:PlanningMt #$Microtheory) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:PlanningMt "#$PlanningDomainMicrotheory that the game engine agents use this stays static mainly") #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:PlanningMt #$PlanningDomainMicrotheory) #$UniversalVocabularyMt)

(create-constant "osim:GameContext")
(cyc-assert '(#$isa #$osim:GameContext #$Collection) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:GameContext #$AtemporalNecessarilyEssentialCollectionType) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:GameContext #$MicrotheoryType) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:GameContext "#$MicrotheoryType that requires #$genlMt-Vocabulary to #$osim:VocabularyMt") #$UniversalVocabularyMt)

; genlMt
(cyc-assert '(#$genlMt-Vocabulary #$osim:PlanningMt #$PlanningVocabularyMt) #$BaseKB)
(cyc-assert '(#$genlMt #$osim:PlanningMt #$osim:SituationMt) #$BaseKB)
(cyc-assert '(#$genlMt #$osim:SituationMt #$osim:DataMt) #$BaseKB)
(cyc-assert '(#$genlMt #$osim:VocabularyMt #$UniversalVocabularyMt) #$BaseKB)


;==================================================
; COLLECTION MAPPING SETUP  (AtemporalNecessarilyEssentialCollectionType)
;==================================================
;(parse-a-question-completely "Are sodium and chlorine the complete list of elements in the chemical formula of chloride?" #$AllLexicalMicrotheoryPSC )
(cyc-assert '(#$implies (#$isa ?MT #$osim:GameContext) (#$and (#$isa ?MT #$Microtheory)(#$genlMt-Vocabulary ?MT #$osim:VocabularyMt))) #$BaseKB '(:DIRECTION :FORWARD))

(cyc-assert '(#$isa #$osim:PlanningMt #$osim:GameContext) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:DataMt #$osim:GameContext) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:SituationMt #$osim:GameContext) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:VocabularyMt #$osim:GameContext) #$UniversalVocabularyMt)

(create-constant "osim:Instance")
(cyc-assert '(#$isa #$osim:Instance #$Collection) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:Instance #$AtemporalNecessarilyEssentialCollectionType) #$UniversalVocabularyMt)
(cyc-assert '(#$genls #$osim:Instance #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$genls #$osim:Instance #$Individual) #$UniversalVocabularyMt)
(cyc-assert '(#$genls #$osim:Instance #$SomethingExisting) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:Instance "#$Individual inside the game engine that is already spawned in the world.") #$UniversalVocabularyMt)

;==================================================
; Mapping Predicate: gameCollection
;==================================================
(create-constant "ksTermString")
(cyc-assert '(#$isa #$ksTermString #$BinaryPredicate) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg1Isa #$ksTermString #$Collection) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg2Isa #$ksTermString #$ControlCharacterFreeString) #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$ksTermString #$synonymousExternalConcept) #$osim:SituationMt)
(cyc-assert '(#$conceptuallyRelated #$ksTermString #$synonymousExternalConcept) #$osim:SituationMt)
;(cyc-assert '(#$genlPreds #$ksTermString #$programStrings) #$osim:SituationMt)
(cyc-assert '(#$comment #$ksTermString "Maps (#$ksTermString ?COL ?TEXT) like (#$synonymousExternalConcept ?COL #$osim:VocabularyMt ?TEXT)") #$UniversalVocabularyMt)

;==================================================
; Mapping Predicate: gameInstance
;==================================================
(create-constant "osim:gameInstance")
(cyc-assert '(#$isa #$osim:gameInstance #$BinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gameInstance #$osim:Instance) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameInstance #$ControlCharacterFreeString) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameInstance #$termStrings) #$osim:SituationMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gameInstance #$synonymousExternalConcept) #$osim:VocabularyMt)
(cyc-assert '(#$comment #$osim:gameInstance "Maps (#$osim:gameInstance ?INST ?TEXT) like (#$synonymousExternalConcept ?INST #$osim:VocabularyMt ?TEXT)") #$UniversalVocabularyMt)

;==================================================
; Mapping Predicate: gamePredicate
;==================================================
(create-constant "osim:gamePredicate")
(cyc-assert '(#$isa #$osim:gamePredicate #$BinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gamePredicate #$Predicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gamePredicate #$ControlCharacterFreeString) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gamePredicate #$termStrings) #$osim:SituationMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gamePredicate #$synonymousExternalConcept) #$osim:VocabularyMt)
(cyc-assert '(#$comment #$osim:gamePredicate "Maps (#$osim:gamePredicate ?PRED ?TEXT) like (#$synonymousExternalConcept ?PRED #$osim:VocabularyMt ?TEXT)") #$UniversalVocabularyMt)

;==================================================
; Function: Point3Fn
;==================================================
(create-constant "Point3Fn")
(cyc-assert '(#$isa #$Point3Fn #$TernaryFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$Point3Fn #$UnreifiableFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$Point3Fn #$Point4Fn) #$osim:SituationMt)
												  
(cyc-assert '(#$argsIsa #$Point3Fn #$RealNumber) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg2Isa #$Point3Fn #$RealNumber) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg3Isa #$Point3Fn #$RealNumber) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg1Isa #$Point3Fn #$Distance) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg2Isa #$Point3Fn #$Distance) #$UniversalVocabularyMt)
;(cyc-assert '(#$arg3Isa #$Point3Fn #$Distance) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$Point3Fn #$Point) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$Point3Fn #$GeographicalPlace-0D) #$UniversalVocabularyMt)

;;(cyc-assert '(#$resultIsa #$Point3Fn #$GeographicalPoint-Intangible-FixedLocation) #$UniversalVocabularyMt)
;;(cyc-assert '(#$resultIsa #$Point3Fn #$PositionVector) #$UniversalVocabularyMt)

(cyc-assert '(#$comment #$Point3Fn "A #$Point in a Cartesian coordinate system. (See also #$Point4Fn)") #$UniversalVocabularyMt)

(cyc-assert '(#$implies (#$pathBetween ?PATH ?P1 ?P2)(#$containsPortals ?P1 ?PATH))  #$UniversalVocabularyMt)
;;(cyc-assert '(#$implies (#$pathBetween (#$PortalInDirectionFn ?P1 ?DIR) ?P1 ?P2)(#$containsPortals ?P1 (#$PortalInDirectionFn ?P1 ?DIR)))  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))

(find-or-create-constant "PortalInDirectionFn")
(cyc-assert '(#$isa #$PortalInDirectionFn #$BinaryFunction)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$PortalInDirectionFn #$PartialFunction)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$PortalInDirectionFn #$UnreifiableFunction)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$isa #$PortalInDirectionFn #$IndividualDenotingFunction)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$comment #$PortalInDirectionFn "This is a NART (PortalInDirectionFn ?R1 ?D) to produce a instance of a #$Portal (#$Path-Generic) that creates a one-way portal in dirrection ?D from  ?R1 to some location")  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$arg1Isa #$PortalInDirectionFn #$GeographicalRegion)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$arg2Isa #$PortalInDirectionFn #$TerrestrialDirection)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$resultIsa #$PortalInDirectionFn #$Path-Spatial)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$resultIsa #$PortalInDirectionFn #$Path-Simple)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$equiv (#$containsPortals ?P1 (#$PortalInDirectionFn ?P1 #$North-Directly)) (#$permanentlyNorthOf ?P2 ?P1))  #$BaseKB '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$equiv (#$containsPortals ?P1 (#$PortalInDirectionFn ?P1 #$South-Directly)) (#$southOf ?P2 ?P1))  #$BaseKB '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$equiv (#$pathBetween (#$PortalInDirectionFn ?P1 #$East-Directly) ?P1 ?P2) (#$permanentlyEastOf ?P2 ?P1))  #$BaseKB '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$equiv (#$containsPortals ?P1 (#$PortalInDirectionFn ?P1 #$West-Directly ?P2)) (#$westOf ?P2 ?P1))  #$BaseKB '(:DIRECTION :FORWARD))
(find-or-create-constant "BPVLocation")
(cyc-assert '(#$isa #$BPVLocation #$Collection)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(find-or-create-constant "BPVLocationType")
(cyc-assert '(#$isa #$BPVLocationType #$CollectionType)  #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$East-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$and (#$levelWith ?P1 ?P2)(#$locatedAtPoint-Spatial ?P2 (#$Point3Fn (#$PlusFn ?X 200) ?Y ?Z))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$West-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$and (#$levelWith ?P1 ?P2)(#$locatedAtPoint-Spatial ?P2 (#$Point3Fn (#$PlusFn ?X -200) ?Y ?Z))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$North-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$and (#$levelWith ?P1 ?P2)(#$locatedAtPoint-Spatial ?P2 (#$Point3Fn  ?X (#$PlusFn ?Y 200) ?Z))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$South-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$and (#$levelWith ?P1 ?P2)(#$locatedAtPoint-Spatial ?P2 (#$Point3Fn  ?X (#$PlusFn ?Y -200) ?Z))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$Up-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$locatedAtPoint-Spatial ?P2 (#$Point3Fn  ?X ?Y (#$PlusFn ?Z 200))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
;(cyc-assert '(#$implies (#$and (#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X1 ?Y1 ?Z))(#$locatedAtPoint-Spatial ?P2 (#$Point3Fn ?X2 ?Y2 ?Z))) (#$levelWith ?P1 ?P2))   #$osim:SituationMt '(:DIRECTION :FORWARD))



;;(cyc-assert '(#$implies (#$and (#$pathBetween (#$PortalInDirectionFn ?P1 #$Down-Directly) ?P1 ?P2)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$locatedAtPoint-Spatial ?P2 (#$Point3Fn  ?X ?Y (#$PlusFn ?Z -200))))  #$osim:SituationMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$implies (#$isa #$BPVAnent)(#$locatedAtPoint-Spatial ?P1 (#$Point3Fn ?X ?Y ?Z))) (#$locatedAtPoint-Spatial ?P2 (#$Point3Fn  ?X ?Y (#$PlusFn ?Z 200))))  #$osim:SituationMt '(:DIRECTION :FORWARD))

;;(load "/opt/lotus/osim3/src/daxmoo/worlds/10.kif")
;==================================================
; Function: Angle2Fn
;==================================================
(create-constant "osim:Angle2Fn")
(cyc-assert '(#$isa #$osim:Angle2Fn #$BinaryFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:Angle2Fn #$UnreifiableFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:Angle2Fn #$Angle) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:Angle2Fn #$Angle) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$osim:Angle2Fn #$OrientationVector) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$osim:Angle2Fn #$UnitVectorInterval) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:Angle2Fn "A #$OrientationVector (two-axis) that can translate to a 3-D ray when applied to a point.") #$UniversalVocabularyMt)

;==================================================
; Function: BindingFn
;==================================================
(create-constant "osim:BindingFn")
(cyc-assert '(#$isa #$osim:BindingFn #$BinaryFunction) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:BindingFn #$UnreifiableFunction) #$UniversalVocabularyMt)												  
(cyc-assert '(#$arg1Isa #$osim:BindingFn #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:BindingFn #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$resultIsa #$osim:BindingFn #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:BindingFn "Used in (#$osim:gameSpawnArg ?Instance (#$osim:BindingFn ?Property ?Value)) and (#$osim:gameValue ?Instance (#$osim:BindingFn ?Property ?Value))") #$UniversalVocabularyMt)
               


(print "loading osim.lisp...3 of 5.")
(force-output)
(cyc-assert '(#$genlMt  (#$MtSpace #$CurrentWorldDataCollectorMt-NonHomocentric (#$MtTimeDimFn #$Now)) #$osim:PlanningMt) #$BaseKB)
(cyc-assert '(#$genlMt #$osim:DataMt #$CurrentWorldDataCollectorMt-NonHomocentric ) #$BaseKB)
(cyc-assert '(#$genlMt #$CurrentWorldDataCollectorMt-NonHomocentric #$osim:SituationMt) #$BaseKB)




(cyc-assert '(#$isa #$removalPredicateCodedInProlog #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$removalPredicateCodedInProlog #$FunctionalPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$removalPredicateCodedInProlog 2) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$removalPredicateCodedInProlog "Each (#$removalPredicateCodedInProlog ?Pred ?String) implies that ?Pred is a Predicate that when infernced on ") #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$removalPredicateCodedInProlog #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$removalPredicateCodedInProlog #$TextString) #$UniversalVocabularyMt)
'RemovalModuleSupportedPredicate-Specific'

;==================================================
; INTERFACE MAPPING SETUP (gameEval)
;==================================================
(defvar *game-host* "10.1.1.100")
(defvar *game-port* 3699)

(create-constant "osim:gameEval")
(cyc-assert '(#$isa #$osim:gameEval #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameEval #$IntangibleObjectPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameEval #$FunctionalPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameEval "(#$osim:gameEval (#$TheList .....) ?Result)") #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameEval #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arity #$osim:gameEval 2) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gameEval #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameEval #$Thing) #$UniversalVocabularyMt)
(define weakql (v1 v2) (cor (eql v1 v2) (cand (numberp v1)(numberp v2)(= v1 v2))(cand (stringp v1) (cor (cand (numberp v2) (string-equal (write-to-string v2) v1))(cand (stringp v2) (string-equal v1 v2)) (cand v2 (eql (find-constant v1) v2))))(cand (stringp v2) (cand v1 (eql (find-constant v2) v1)))))
(define meakql (v1 v2) (cor (weakql v1 v2)(cand (consp v2) (weakql v1 (car v2)))(cand (consp v1) (weakql v2 (car v1)))))
(define removal-gameApi-pos-bb (vvs) (ret (meakql (removal-gameApi-pos-bu (first vvs)) (second vvs))))
(define removal-gameApi-neg-bb (vvs) (ret (cnot (meakql (removal-gameApi-pos-bu (first vvs)) (second vvs)))))
(define removal-gameApi-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL value)) (ret  *newvalue* )))
(define GAME-EVAL (outval) (clet ((*retval* nil)(*stream* (OPEN-TCP-STREAM *game-host* *game-port*)))(prin1 outval *stream*)(force-output *stream*)(terpri *stream*)(force-output *stream*)(csetq *retval* (read *stream*))(close *stream*)(ret *retval*)))
;;(define-evaluation-defn CYC-GAME-EVAL-FN (el-list) (GAME-EVAL el-list))
(define GAME-EVAL (outval) (ret (list (list outval))))  ;; testing w/o socket


;;(clet (res) (ccatch :odd-result (cdolist (x '(4 2 1 0)) (pif (oddp x) (throw :odd-result x)    (print x))))(pwhen res (print (cconcatenate (str res) " was odd!"))))


(inference-removal-module :removal-gameApi-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameEval 
	:required-pattern (#$osim:gameEval :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameEval (:bind the-value) :anything) (:value the-value))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameApi-pos-bu :input)
	:output-construct-pattern  (#$osim:gameEval (:value the-value) :input)
	:documentation "(#$osim:gameEval <fully-bound> <not-fully-bound>)"
	:example "(#$osim:gameEval -1 ?WHAT)"))

(inference-removal-module :removal-gameApi-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameEval 
	:check t 
	:required-pattern (#$osim:gameEval :fully-bound :fully-bound)
	:cost-expression 0
	;;*cheap-hl-module-bb-cost*
	:completeness :complete
	:input-extract-pattern (:template (#$osim:gameEval (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameApi-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))
	:documentation "(#$osim:gameEval <fully-bound> <fully-bound>)"
	:example "(#$osim:gameEval 1 -1)" ))
   
(register-solely-specific-removal-module-predicate #$osim:gameEval)
                    
;==================================================
; INTERFACE MAPPING SETUP (gameNear)
;==================================================
(create-constant "osim:gameNear")
(cyc-assert '(#$isa #$osim:gameNear #$SymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameNear #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameNear #$near) #$osim:SituationMt)
(cyc-assert '(#$comment #$osim:gameNear "(#$osim:gameNear ?OBJ1 ?OBJ2) is true if the two objects are near enough to interact physically.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameNear 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameNear #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameNear #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameNear #$SpatialThing-Localized) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameNear-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameNear 
	:required-pattern (#$osim:gameNear :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameNear (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameNear-pos-bu :input)
	:output-construct-pattern  (#$osim:gameNear (:value the-value) :input)))
(inference-removal-module :removal-gameNear-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameNear 
	:required-pattern (#$osim:gameNear :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameNear  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameNear-pos-ub :input)
	:output-construct-pattern  (#$osim:gameNear :input  (:value the-value))))
(inference-removal-module :removal-gameNear-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameNear 
	:required-pattern (#$osim:gameNear :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameNear (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameNear-pos-uu :input)
	:output-construct-pattern  (#$osim:gameNear (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameNear-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameNear 
	:check t 
	:required-pattern (#$osim:gameNear :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameNear (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameNear-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameNear-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameNear-pbu" value))) (ret  *newvalue* )))
(define removal-gameNear-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameNear-pub" value))) (ret  *newvalue* )))
(define removal-gameNear-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameNear-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameNear-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameNear-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameNear)



;;(define (do-all)
                                                            
;==================================================
; INTERFACE MAPPING SETUP (andAlso)                  (#$andAlso (#$isa ?X #$osim:Instance) (#$isa ?X #$Scientist))
;==================================================
(create-constant "andAlso")
(cyc-assert '(#$isa #$andAlso #$BinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$andAlso #$AssociativeRelation) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$andAlso #$LogicalConnective) #$LogicalTruthMt)
(cyc-assert '(#$genlPreds #$andAlso #$and) #$osim:SituationMt)
(cyc-assert '(#$comment #$andAlso "Sequentually Eval ?F1 ?F2") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$andAlso 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$andAlso #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$andAlso #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$andAlso #$Thing) #$UniversalVocabularyMt)
(inference-removal-module :removal-andAlso-bound-unbound
 '(:sense :pos 
	:predicate #$andAlso 
	:required-pattern (#$andAlso :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$andAlso (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-andAlso-pos-bu :input)
	:output-construct-pattern  (#$andAlso (:value value-1) :input)))
(inference-removal-module :removal-andAlso-unbound-bound
 '(:sense :pos 
	:predicate #$andAlso 
	:required-pattern (#$andAlso :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$andAlso (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
        :input-verify-pattern :anything
	:output-generate-pattern (:call removal-andAlso-pos-ub :input)
	:output-construct-pattern  (#$andAlso :input  (:value value-2))))
(inference-removal-module :removal-andAlso-unbound-unbound
 '(:sense :pos 
	:predicate #$andAlso 
	:required-pattern (#$andAlso :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$andAlso (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-andAlso-pos-uu :input)
	:output-construct-pattern  (#$andAlso (:call first :input) (:call second :input))))
(inference-removal-module :removal-andAlso-bound-bound 
'( :sense :pos 
	:predicate #$andAlso 
	:required-pattern (#$andAlso :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$andAlso (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:check t 
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-andAlso-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))

;;(qunify '(#$possible #$True))
(register-solely-specific-removal-module-predicate #$andAlso)
(define removal-andAlso-pos-ub (vvs) (clet ((retstuff  (qunify (car vvs)))) (fif retstuff (fif (qunify (cadr vvs)) retstuff NIL) NIL)))
(define removal-andAlso-pos-bu (vvs) (print (fif (vquery (car vvs)) (qunify (cadr vvs))  NIL)))
(define removal-andAlso-pos-bb (vvs) (cand (vquery (car vvs)) (vquery (cadr vvs))))
(define vquery (q1) (fif (eql q1 #$True) '(NIL) (clet ((rq (CYC-QUERY q1 #$EverythingPSC))) (fif rq rq (gquery q1)))))
(define bunify (q1 bl1) (mapcar #'SUBLIS bl1 (make-list (length bl1) q1)))
(define qunify (q1) (bunify q1 (vquery q1)))
(define removal-andAlso-pos-uu (vvs) (andquerylist (bunify vvs (vquery (car vvs)))))
(define removal-andAlso-pos-uu (vvs) (bunify vvs (vquery (car vvs))))
(define removal-andAlso-pos-uu (vvs) (bunify vvs (vquery (cons '#$and vvs))))
(define gquery (q1)  (CYC-QUERY q1 #$InferencePSC))
(define andquerylist (qlist) (mapcar #'andquery qlist))    
(define andquery (qlist) (bunify qlist (vquery (cons '#$and qlist))))

;==================================================
; INTERFACE MAPPING SETUP (gameTouches)
;==================================================
(create-constant "osim:gameTouches")
(cyc-assert '(#$isa #$osim:gameTouches #$SymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameTouches #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameTouches #$touches) #$osim:SituationMt)
(cyc-assert '(#$comment #$osim:gameTouches "(#$osim:gameTouches ?OBJ1 ?OBJ2) is true if the two objects are near enough to interact physically.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameTouches 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameTouches #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameTouches #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameTouches #$SpatialThing-Localized) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameTouches-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameTouches 
	:required-pattern (#$osim:gameTouches :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameTouches (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameTouches-pos-bu :input)
	:output-construct-pattern  (#$osim:gameTouches (:value the-value) :input)))
(inference-removal-module :removal-gameTouches-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameTouches 
	:required-pattern (#$osim:gameTouches :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameTouches  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameTouches-pos-ub :input)
	:output-construct-pattern  (#$osim:gameTouches :input  (:value the-value))))
(inference-removal-module :removal-gameTouches-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameTouches 
	:required-pattern (#$osim:gameTouches :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameTouches (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameTouches-pos-uu :input)
	:output-construct-pattern  (#$osim:gameTouches (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameTouches-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameTouches 
	:check t 
	:required-pattern (#$osim:gameTouches :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameTouches (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameTouches-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameTouches-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameTouches-pbu" value))) (ret  *newvalue* )))
(define removal-gameTouches-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameTouches-pub" value))) (ret  *newvalue* )))
(define removal-gameTouches-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameTouches-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameTouches-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameTouches-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameTouches)

;==================================================
; INTERFACE MAPPING SETUP (gameInRegion)
;==================================================
(create-constant "osim:gameInRegion")
(cyc-assert '(#$isa #$osim:gameInRegion #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameInRegion #$CoexistingObjectsPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameInRegion #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameInRegion "(#$osim:gameInRegion ?OBJ1 ?LOC) is true for the nearest LOC entity to OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameInRegion 2) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameInRegion #$localityOfObject) #$osim:SituationMt)
(cyc-assert '(#$genlPreds #$osim:gameInRegion #$objectFoundInLocation) #$osim:SituationMt)
(cyc-assert '(#$isa #$osim:gameInRegion #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameInRegion #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameInRegion #$Place-NonAgent) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameInRegion-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameInRegion 
	:required-pattern (#$osim:gameInRegion :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameInRegion (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameInRegion-pos-bu :input)
	:output-construct-pattern  (#$osim:gameInRegion (:value the-value) :input)))
(inference-removal-module :removal-gameInRegion-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameInRegion 
	:required-pattern (#$osim:gameInRegion :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameInRegion  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameInRegion-pos-ub :input)
	:output-construct-pattern  (#$osim:gameInRegion :input  (:value the-value))))
(inference-removal-module :removal-gameInRegion-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameInRegion 
	:required-pattern (#$osim:gameInRegion :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameInRegion (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameInRegion-pos-uu :input)
	:output-construct-pattern  (#$osim:gameInRegion (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameInRegion-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameInRegion 
	:check t 
	:required-pattern (#$osim:gameInRegion :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameInRegion (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameInRegion-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameInRegion-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameInRegion-pbu" value))) (ret  *newvalue* )))
(define removal-gameInRegion-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameInRegion-pub" value))) (ret  *newvalue* )))
(define removal-gameInRegion-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameInRegion-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameInRegion-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameInRegion-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameInRegion)

(print "loading osim.lisp...4 of 5.")
(force-output)
;==================================================
; INTERFACE MAPPING SETUP (gameCanSee)
;==================================================
(create-constant "osim:gameCanSee")
(cyc-assert '(#$isa #$osim:gameCanSee #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameCanSee #$PerceivingSlot) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameCanSee #$sees) #$osim:SituationMt)
(cyc-assert '(#$comment #$osim:gameCanSee "(#$osim:gameCanSee ?OBJ1 ?OBJ2) is true for the OBJ2 visable to OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameCanSee 2) #$UniversalVocabularyMt) 
(cyc-assert '(#$isa #$osim:gameCanSee #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameCanSee #$PerceptualAgent) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameCanSee #$SpatialThing-Localized) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameCanSee-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameCanSee 
	:required-pattern (#$osim:gameCanSee :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameCanSee (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameCanSee-pos-bu :input)
	:output-construct-pattern  (#$osim:gameCanSee (:value the-value) :input)))
(inference-removal-module :removal-gameCanSee-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameCanSee 
	:required-pattern (#$osim:gameCanSee :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameCanSee  :anything (:bind the-value)) (:value the-value))
        :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameCanSee-pos-ub :input)
	:output-construct-pattern  (#$osim:gameCanSee :input  (:value the-value))))
(inference-removal-module :removal-gameCanSee-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameCanSee 
	:required-pattern (#$osim:gameCanSee :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameCanSee (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameCanSee-pos-uu :input)
	:output-construct-pattern  (#$osim:gameCanSee (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameCanSee-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameCanSee 
	:check t 
	:required-pattern (#$osim:gameCanSee :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameCanSee (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameCanSee-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameCanSee-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameCanSee-pbu" value))) (ret  *newvalue* )))
(define removal-gameCanSee-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameCanSee-pub" value))) (ret  *newvalue* )))
(define removal-gameCanSee-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameCanSee-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameCanSee-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameCanSee-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameCanSee)
                                               
;==================================================
; INTERFACE MAPPING SETUP (gameSpacePoint)
;==================================================
(create-constant "osim:gameSpacePoint")
(cyc-assert '(#$isa #$osim:gameSpacePoint #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameSpacePoint #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameSpacePoint #$locatedAtPoint-Spatial) #$osim:SituationMt)
(cyc-assert '(#$comment #$osim:gameSpacePoint "(#$osim:gameSpacePoint ?OBJ1 ?POINT) is true for the POINT is the location of OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameSpacePoint 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameSpacePoint #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameSpacePoint #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameSpacePoint #$Point) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameSpacePoint-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameSpacePoint 
	:required-pattern (#$osim:gameSpacePoint :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameSpacePoint (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpacePoint-pos-bu :input)
	:output-construct-pattern  (#$osim:gameSpacePoint (:value the-value) :input)))
(inference-removal-module :removal-gameSpacePoint-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameSpacePoint 
	:required-pattern (#$osim:gameSpacePoint :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameSpacePoint  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpacePoint-pos-ub :input)
	:output-construct-pattern  (#$osim:gameSpacePoint :input  (:value the-value))))
(inference-removal-module :removal-gameSpacePoint-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameSpacePoint 
	:required-pattern (#$osim:gameSpacePoint :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameSpacePoint (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpacePoint-pos-uu :input)
	:output-construct-pattern  (#$osim:gameSpacePoint (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameSpacePoint-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameSpacePoint 
	:required-pattern (#$osim:gameSpacePoint :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameSpacePoint (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-construct-pattern  (#$osim:gameSpacePoint (:call first :input) (:call second :input))))
(define removal-gameSpacePoint-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameSpacePoint-pbu" value))) (ret  *newvalue* )))
(define removal-gameSpacePoint-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameSpacePoint-pub" value))) (ret  *newvalue* )))
(define removal-gameSpacePoint-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameSpacePoint-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameSpacePoint-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameSpacePoint-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameSpacePoint)
                                    


;==================================================
; INTERFACE MAPPING SETUP (gameSpawnArg)
;==================================================
(create-constant "osim:gameSpawnArg")
(cyc-assert '(#$isa #$osim:gameSpawnArg #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameSpawnArg "Used in (#$osim:gameSpawnArg ?Instance (#$osim:BindingFn ?Property ?Value)) and (#$osim:gameValue ?Instance (#$osim:BindingFn ?Property ?Value))") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameSpawnArg 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameSpawnArg #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameSpawnArg #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameSpawnArg #$Thing) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameSpawnArg-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameSpawnArg 
	:required-pattern (#$osim:gameSpawnArg :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameSpawnArg (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpawnArg-pos-bu :input)
	:output-construct-pattern  (#$osim:gameSpawnArg (:value the-value) :input)))
(inference-removal-module :removal-gameSpawnArg-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameSpawnArg 
	:required-pattern (#$osim:gameSpawnArg :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameSpawnArg  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpawnArg-pos-ub :input)
	:output-construct-pattern  (#$osim:gameSpawnArg :input  (:value the-value))))
(inference-removal-module :removal-gameSpawnArg-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameSpawnArg 
	:required-pattern (#$osim:gameSpawnArg :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameSpawnArg (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameSpawnArg-pos-uu :input)
	:output-construct-pattern  (#$osim:gameSpawnArg (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameSpawnArg-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameSpawnArg 
	:required-pattern (#$osim:gameSpawnArg :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameSpawnArg (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-construct-pattern  (#$osim:gameSpawnArg (:call first :input) (:call second :input))))
(define removal-gameSpawnArg-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameSpawnArg-pbu" value))) (ret  *newvalue* )))
(define removal-gameSpawnArg-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameSpawnArg-pub" value))) (ret  *newvalue* )))
(define removal-gameSpawnArg-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameSpawnArg-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameSpawnArg-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameSpawnArg-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameSpawnArg)
                                    
;==================================================
; INTERFACE MAPPING SETUP (gameValue)
;==================================================
(create-constant "osim:gameValue")
(cyc-assert '(#$isa #$osim:gameValue #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameValue "Used in (#$osim:gameSpawnArg ?Instance (#$osim:BindingFn ?Property ?Value)) and (#$osim:gameValue ?Instance (#$osim:BindingFn ?Property ?Value))") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameValue 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameValue #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameValue #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameValue #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gamePredicate #$osim:gameValue) #$osim:VocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gameSpawnArg #$osim:gameValue) #$osim:VocabularyMt)



(inference-removal-module :removal-gameValue-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameValue 
	:required-pattern (#$osim:gameValue :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameValue (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameValue-pos-bu :input)
	:output-construct-pattern  (#$osim:gameValue (:value the-value) :input)))
(inference-removal-module :removal-gameValue-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameValue 
	:required-pattern (#$osim:gameValue :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameValue  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameValue-pos-ub :input)
	:output-construct-pattern  (#$osim:gameValue :input  (:value the-value))))
(inference-removal-module :removal-gameValue-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameValue 
	:required-pattern (#$osim:gameValue :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameValue (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameValue-pos-uu :input)
	:output-construct-pattern  (#$osim:gameValue (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameValue-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameValue 
	:required-pattern (#$osim:gameValue :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameValue (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-construct-pattern  (#$osim:gameValue (:call first :input) (:call second :input))))
(define removal-gameValue-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameValue-pbu" value))) (ret  *newvalue* )))
(define removal-gameValue-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameValue-pub" value))) (ret  *newvalue* )))
(define removal-gameValue-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameValue-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameValue-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameValue-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameValue)
                                    
;==================================================
; INTERFACE MAPPING SETUP (gameFacesDirection)
;==================================================
(create-constant "osim:gameFacesDirection")
(cyc-assert '(#$isa #$osim:gameFacesDirection #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameFacesDirection #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameFacesDirection #$facesDirection) #$osim:SituationMt)
(cyc-assert '(#$genlPreds #$osim:gameFacesDirection #$orientation) #$osim:SituationMt)	   ;direction-Pointing
(cyc-assert '(#$genlPreds #$osim:gameFacesDirection #$direction-Pointing) #$osim:SituationMt)	   ;
(cyc-assert '(#$comment #$osim:gameFacesDirection "(#$osim:gameFacesDirection ?OBJ1 ?ANGLE2D) is true for the POINT is the location of OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameFacesDirection 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameFacesDirection #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameFacesDirection #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameFacesDirection #$UnitVectorInterval) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameFacesDirection-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameFacesDirection 
	:required-pattern (#$osim:gameFacesDirection :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameFacesDirection (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameFacesDirection-pos-bu :input)
	:output-construct-pattern  (#$osim:gameFacesDirection (:value the-value) :input)))
(inference-removal-module :removal-gameFacesDirection-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameFacesDirection 
	:required-pattern (#$osim:gameFacesDirection :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameFacesDirection  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameFacesDirection-pos-ub :input)
	:output-construct-pattern  (#$osim:gameFacesDirection :input  (:value the-value))))
(inference-removal-module :removal-gameFacesDirection-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameFacesDirection 
	:required-pattern (#$osim:gameFacesDirection :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameFacesDirection (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameFacesDirection-pos-uu :input)
	:output-construct-pattern  (#$osim:gameFacesDirection (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameFacesDirection-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameFacesDirection 
	:check t 
	:required-pattern (#$osim:gameFacesDirection :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameFacesDirection (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameFacesDirection-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameFacesDirection-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameFacesDirection-pbu" value))) (ret  *newvalue* )))
(define removal-gameFacesDirection-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameFacesDirection-pub" value))) (ret  *newvalue* )))
(define removal-gameFacesDirection-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameFacesDirection-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameFacesDirection-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameFacesDirection-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameFacesDirection)
                                    
;==================================================
; INTERFACE MAPPING SETUP (gameAttached)
;==================================================
(create-constant "osim:gameAttached")
(cyc-assert '(#$isa #$osim:gameAttached #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameAttached #$SpatialPredicate) #$UniversalVocabularyMt)

(cyc-assert '(#$genlPreds #$osim:gameAttached #$transports) #$osim:SituationMt)
(cyc-assert '(#$genlPreds #$osim:gameAttached #$controls) #$osim:SituationMt)
(cyc-assert '(#$genlPreds #$osim:gameAttached #$connectedTo) #$osim:SituationMt)

(cyc-assert '(#$comment #$osim:gameAttached "(#$osim:gameAttached ?OBJ1 ?OBJ2) is true for the OBJ2 is attached to OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameAttached 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameAttached #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameAttached #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameAttached #$SpatialThing-Localized) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameAttached-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameAttached 
	:required-pattern (#$osim:gameAttached :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameAttached (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameAttached-pos-bu :input)
	:output-construct-pattern  (#$osim:gameAttached (:value the-value) :input)))
(inference-removal-module :removal-gameAttached-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameAttached 
	:required-pattern (#$osim:gameAttached :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameAttached  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameAttached-pos-ub :input)
	:output-construct-pattern  (#$osim:gameAttached :input  (:value the-value))))
(inference-removal-module :removal-gameAttached-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameAttached 
	:required-pattern (#$osim:gameAttached :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameAttached (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameAttached-pos-uu :input)
	:output-construct-pattern  (#$osim:gameAttached (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameAttached-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameAttached 
	:check t 
	:required-pattern (#$osim:gameAttached :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameAttached (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameAttached-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameAttached-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameAttached-pbu" value))) (ret  *newvalue* )))
(define removal-gameAttached-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameAttached-pub" value))) (ret  *newvalue* )))
(define removal-gameAttached-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameAttached-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameAttached-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameAttached-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameAttached)
                                    
(print "loading osim.lisp...5 of 5.")
(force-output)
;==================================================
; INTERFACE MAPPING SETUP (gameType)
;==================================================
(create-constant "osim:gameType")
(cyc-assert '(#$isa #$osim:gameType #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameType #$TaxonomicSlotForAnyThing) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameType #$DefaultMonotonicPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameType "(#$osim:gameType ?OBJ1 ?OBJ2) is true for the OBJ2 is Instance to OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameType 2) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameType #$RemovalModuleSupportedPredicate-Specific) #$CycAPIMt)
(cyc-assert '(#$arg1Isa #$osim:gameType #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameType #$Thing) #$UniversalVocabularyMt)
(inference-removal-module :removal-gameType-bound-unbound
 '(:sense :pos 
	:predicate #$osim:gameType 
	:required-pattern (#$osim:gameType :fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameType (:bind the-value) :anything) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameType-pos-bu :input)
	:output-construct-pattern  (#$osim:gameType (:value the-value) :input)))
(inference-removal-module :removal-gameType-unbound-bound
 '(:sense :pos 
	:predicate #$osim:gameType 
	:required-pattern (#$osim:gameType :not-fully-bound :fully-bound ) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template  (#$osim:gameType  :anything (:bind the-value)) (:value the-value))
       :input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameType-pos-ub :input)
	:output-construct-pattern  (#$osim:gameType :input  (:value the-value))))
(inference-removal-module :removal-gameType-unbound-unbound
 '(:sense :pos 
	:predicate #$osim:gameType 
	:required-pattern (#$osim:gameType :not-fully-bound :not-fully-bound) 
	:cost-expression 0 :completeness :complete 
	:input-extract-pattern (:template (#$osim:gameType (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-generate-pattern (:call removal-gameType-pos-uu :input)
	:output-construct-pattern  (#$osim:gameType (:call first :input) (:call second :input))))
(inference-removal-module :removal-gameType-bound-bound 
'( :sense :pos 
	:predicate #$osim:gameType 
	:check t 
	:required-pattern (#$osim:gameType :fully-bound :fully-bound)
	:cost-expression 0 :completeness :complete
	:input-extract-pattern (:template (#$osim:gameType (:bind value-1) (:bind value-2)) ((:value value-1) (:value value-2)))
	:input-verify-pattern :anything
	:output-check-pattern (:call removal-gameType-pos-bb (:tuple (value-1 value-2) ((:value value-1) (:value value-2))))))
(define removal-gameType-pos-bu (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameType-pbu" value))) (ret  *newvalue* )))
(define removal-gameType-pos-ub (value) (clet ((*newvalue* value)) (csetq *newvalue* (GAME-EVAL (list "gameType-pub" value))) (ret  *newvalue* )))
(define removal-gameType-pos-bb (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameType-pbb" vvs))) (ret  *newvalue* )))
(define removal-gameType-pos-uu (vvs) (clet ((*newvalue* vvs)) (csetq *newvalue* (GAME-EVAL (list "gameType-puu" vvs))) (ret  *newvalue* )))
(register-solely-specific-removal-module-predicate #$osim:gameType)
                                    
;==================================================
; INTERFACE MAPPING SETUP (gamePropertyNext)
;==================================================
(create-constant "osim:gamePropertyNext")
(create-constant "osim:DataMt")
(cyc-assert '(#$isa #$osim:gamePropertyNext #$TernaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gamePropertyNext "(#$osim:gamePropertyNext ?Instance ?Predicate ?Value) after adding will ensure that the binary predicate value is reflected as true in the game.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gamePropertyNext 3) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gamePropertyNext #$Thing) #$UniversalVocabularyMt)
;; (cyc-assert '(#$arg1Isa #$osim:gamePropertyNext #$SpatialThing-Localized) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gamePropertyNext #$BinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$arg3Isa #$osim:gamePropertyNext #$Thing) #$UniversalVocabularyMt)
;;(define  GAME-CREATE-ADD (v1) (GAME-EVAL (list "gamePropertyAdd" . v1)))
;;(define  GAME-CREATE-REMOVE (v1) (GAME-EVAL (list "gamePropertyRemove" . v1)))
;;(define-evaluation-defn GAME-CREATE-ADD (v1) (GAME-EVAL (list "gamePropertyAdd" . v1)))
;;(define-evaluation-defn GAME-CREATE-REMOVE (v1) (GAME-EVAL (list "gamePropertyRemove" . v1)))
(cyc-assert '(#$afterAdding #$osim:gamePropertyNext (#$SubLQuoteFn GAME-CREATE-ADD)) #$osim:DataMt)
(cyc-assert '(#$afterRemoving #$osim:gamePropertyNext (#$SubLQuoteFn GAME-CREATE-REMOVE)) #$osim:DataMt)

;==================================================
; INTERFACE MAPPING SETUP (gameTrue)
;==================================================
(create-constant "osim:gameTrue")
(cyc-assert '(#$isa #$osim:gameTrue #$Predicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameTrue #$VariableArityRelation) #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gameTrue #$osim:gameEval) #$osim:VocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gameTrue #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameTrue #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMin #$osim:gameTrue 2) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMax #$osim:gameTrue 7) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainEncouraged #$osim:gameTrue) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainRequired #$osim:gameTrue) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameTrue" ?X) ?Y) (#$osim:gameTrue ?X ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameTrue" ?X ?A) ?Y) (#$osim:gameTrue ?X ?A ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameTrue" ?X ?A ?B) ?Y) (#$osim:gameTrue ?X ?A ?B ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameTrue" ?X ?A ?B ?C) ?Y) (#$osim:gameTrue ?X ?A ?B ?C ?Y)) #$osim:DataMt)

;==================================================
; INTERFACE MAPPING SETUP (gameFalse)
;==================================================
(create-constant "osim:gameFalse")
(cyc-assert '(#$isa #$osim:gameFalse #$Predicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameFalse #$VariableArityRelation) #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gameFalse #$osim:gameEval) #$osim:VocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gameFalse #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameFalse #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMin #$osim:gameFalse 2) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMax #$osim:gameFalse 7) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainEncouraged #$osim:gameFalse) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainRequired #$osim:gameFalse) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameFalse" ?X) ?Y) (#$osim:gameFalse ?X ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameFalse" ?X ?A) ?Y) (#$osim:gameFalse ?X ?A ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameFalse" ?X ?A ?B) ?Y) (#$osim:gameFalse ?X ?A ?B ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameFalse" ?X ?A ?B ?C) ?Y) (#$osim:gameFalse ?X ?A ?B ?C ?Y)) #$osim:DataMt)


;==================================================
; INTERFACE MAPPING SETUP (shopPlan)
;==================================================
(create-constant "osim:shopPlan")
(cyc-assert '(#$isa #$osim:shopPlan #$TernaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainEncouraged #$osim:shopPlan) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainRequired #$osim:shopPlan) #$osim:DataMt)
(cyc-assert '(#$conceptuallyRelated #$osim:shopPlan #$osim:gameEval) #$osim:VocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:shopPlan #$PlanningDomainMicrotheory) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:shopPlan #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arg3Isa #$osim:shopPlan #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "invokePlanner" ?Mt ?Goal) ?Plan) (#$osim:shopPlan ?Mt ?Goal ?Plan)) #$osim:DataMt)

;==================================================
; INTERFACE MAPPING SETUP (gameAction)
;==================================================
(create-constant "osim:gameAction")
(cyc-assert '(#$isa #$osim:gameAction #$Predicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameAction #$VariableArityRelation) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameAction #$ActionPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$comment #$osim:gameAction "(gameAction ?ACTION ?AGENT . EVENTARGS) relates ACTION to the list EVENTARGS of the relevant instances of #$RoleSlots that are inputs to the activity.") #$UniversalVocabularyMt)
(cyc-assert '(#$conceptuallyRelated #$osim:gameAction #$osim:gameEval) #$osim:VocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameAction #$osim:gameTrue) #$osim:SituationMt)
(cyc-assert '(#$arg1Genl #$osim:gameAction #$Event) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Genl #$osim:gameAction #$IntangibleIndividual) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameAction #$Agent-Generic) #$UniversalVocabularyMt)
(cyc-assert '(#$argAndRestIsa #$osim:gameAction 3 #$Thing) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMin #$osim:gameAction 2) #$UniversalVocabularyMt)
(cyc-assert '(#$arityMax #$osim:gameAction 7) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainEncouraged #$osim:gameAction) #$UniversalVocabularyMt)
(cyc-assert '(#$backchainRequired #$osim:gameAction) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameAction" ?X) ?Y) (#$osim:gameAction ?X ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameAction" ?X ?A) ?Y) (#$osim:gameAction ?X ?A ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameAction" ?X ?A ?B) ?Y) (#$osim:gameAction ?X ?A ?B ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameAction" ?X ?A ?B ?C) ?Y) (#$osim:gameAction ?X ?A ?B ?C ?Y)) #$osim:DataMt)


    
(define room-leads (loc dir)
  (ret (cdr (car (car  (cyc-query (list #$pathConnects (list #$PortalInDirectionFn loc (nsew-term dir) ) loc '?X) #$osim:SituationMt))))))

(define nsew-term (loc) 
  (ret 
   (clet ((loc (STRING-DOWNCASE loc)))
   (pcond 
      ((string-equal loc "n") #$North-Directly)
      ((string-equal loc "s") #$South-Directly)
      ((string-equal loc "e") #$East-Directly)
      ((string-equal loc "w") #$West-Directly)
      ((string-equal loc "u") #$Up-Directly)
      ((string-equal loc "d") #$Down-Directly)
      (T (throw 'fail))))))
      
(define nsew-from (loc) (ret (STRING-DOWNCASE (string (char (constant-name loc) 0)))))
    
(define nsew-path (loc dir) (ret (list #$PortalInDirectionFn  loc (nsew-from dir))))

(define room-walls (loc) 
  (ret (clet ((str ""))
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "n") loc '?X) #$osim:SituationMt)
        T (csetq str (cconcatenate str "n")))
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "s") loc '?X) #$osim:SituationMt)
        T (csetq str (cconcatenate str "s")))
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "e") loc '?X) #$osim:SituationMt)
        T (csetq str (cconcatenate str "e")))
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "w") loc '?X) #$osim:SituationMt)
        T (csetq str (cconcatenate str "w")))	
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "u") loc '?X) #$osim:SituationMt)
        T (csetq str (cconcatenate str "u")))	
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "d") loc '?X) #$osim:SituationMt)
       T (csetq str (cconcatenate str "d")))	
    str)))
    
(define room-exits (loc) 
  (ret (clet ((str ""))
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "n") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "n")) T)
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "s") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "s")) T)
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "e") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "e")) T)
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "w") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "w")) T)	
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "u") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "u")) T)	
     (pif  (cyc-query  (list #$pathConnects (nsew-path loc "d") loc '?X) #$osim:SituationMt)
        (csetq str (cconcatenate str "d")) T)	
    str)))

(define room-exit-type (loc etype) 
  (ret (clet ((str ""))
     (pif  (cyc-query (print (list #$isa (nsew-path loc "n") etype)) #$osim:SituationMt)
        (csetq str (cconcatenate str "n")) T)
     (pif (cyc-query (list #$isa (list #$PortalInDirectionFn loc #$South-Directly) etype) #$osim:SituationMt)
        (csetq str (cconcatenate str "s")) T)
     (pif (cyc-query (list #$isa (list #$PortalInDirectionFn loc #$East-Directly) etype) #$osim:SituationMt)
        (csetq str (cconcatenate str "e")) T)
     (pif (cyc-query (list #$isa (list #$PortalInDirectionFn loc #$West-Directly) etype) #$osim:SituationMt)
        (csetq str (cconcatenate str "w")) T)	
     (pif (cyc-query (list #$isa (list #$PortalInDirectionFn loc #$Up-Directly) etype) #$osim:SituationMt)
        (csetq str (cconcatenate str "u")) T)	
     (pif (cyc-query (list #$isa (list #$PortalInDirectionFn loc #$Down-Directly) etype) #$osim:SituationMt)
        (csetq str (cconcatenate str "d")) T)	
    str)))


 ;PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
 ;7224 root      3 -13 1955m 433m 103m R 99.8 21.4  23:45.48 latest-cyc.bin
 
 ;PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND
  ;7224 root      3 -13 1955m 634m 104m R 99.5 31.3  56:26.76 latest-cyc.bin

    
;(paths-exist #$Area1000)
;;(#$isa  #$GameCollection)

(define exits-open (loc) (ret (is-of-exit-type loc #$OpenPortal)))
(define exits-closed (loc) (ret (is-of-exit-type loc #$ClosedPortal)))


(cyc-assert '(#$genlMt #$osim:SituationMt #$EverythingPSC) '#$BaseKB  '(:DIRECTION :FORWARD :STRENGTH :MONOTONIC))



(cyc-assert '(#$implies 
  (#$and
  (#$webSearchableStrings ?I ?S) 
  (#$wordStrings ?W ?S) 
  (#$denotation ?W ?P ?N ?C)  
  (#$different #$Verb  ?P)
  (#$genls ?C #$SpatialThing-Localized)
  (#$disjointWith #$Event ?C))
(#$ist #$osim:SituationMt (#$isa ?I ?C))) '#$osim:SituationMt  '(:DIRECTION :FORWARD :STRENGTH :MONOTONIC))

(cyc-assert '(#$implies 
(#$trueSentence  (#$and 
  (#$isa ?I #$BPVAgent) 
  (#$webSearchableStrings ?I ?S) 
  (#$nounStrings ?W ?S) 
  (#$denotation ?W #$CountNoun ?N ?C)))
(#$isa ?I ?C)) '#$osim:SituationMt)

(cyc-assert '(#$implies 
(#$trueSentence  (#$and 
  (#$isa ?I #$BPVItem) 
  (#$webSearchableStrings ?I ?S) 
  (#$nounStrings ?W ?S) 
  (#$denotation ?W #$Noun ?N ?C)))
(#$isa ?I ?C)) '#$osim:SituationMt)

(cyc-assert '(#$implies 
  (#$and
  (#$isa ?I BPVItem)
  (#$webSearchableStrings ?I ?S) 
  (#$wordStrings ?W ?S) 
  (#$denotation ?W #$Adjective ?N ?C))
(#$ist #$osim:SituationMt (#$isa ?I ?C))) '#$osim:SituationMt  '(:DIRECTION :FORWARD))



(knownSentence isa 
       (PortalInDirectionFn Area1000 North-Directly) OpenPortal) ?TRUTH)


;==================================================
; EXAMPLE sees MAPPING SETUP
;==================================================
(cyc-assert '(#$implies (#$osim:gameTrue "canSee" ?X ?Y) (#$osim:gameCanSee ?X ?Y)) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameFalse "canSee" ?X ?Y) (#$not (#$osim:gameCanSee ?X ?Y))) #$osim:DataMt)
(cyc-assert '(#$implies (#$osim:gameEval (#$TheList "gameTrue" "canSee" ?X ?Y) 1) (#$osim:gameCanSee ?X ?Y)) #$osim:DataMt)


(define game-create-add (vvs) (print (list 'game-create-add vvs)))
(define game-create-remove (vvs) (print (list 'game-create-remove vvs)))


(#$and (#$webSearchableStrings ?I ?S)(#$wordStrings ?W ?S)(#$denotation ?W #$CountNoun ?N ?C))
;==================================================
; EXTENT: gameCollection
;==================================================


(cyc-assert '(#$ksTermString #$MarinePersonnel "ensign") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Leader "Commander") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$SignTheDisplay "sign") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Elevator "Turbolift") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Bottle "bottle") #$osim:DataMt)

(cyc-assert '(#$ksTermString #$GeographicalSpaceRegion "info_location") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Person "human_marine_pistol") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Terrorist "human_marine_machinegun") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Agent-Generic "cyc_bot") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Person "cyc_bot") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Path-Simple "idDoor") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Doorway "idDoor") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DiningRoomChair "moveable_kitchenchair") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Table-PieceOfFurniture "moveable_Table_centercart1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LightingDevice "light") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MachineGun "weapon_machinegun_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BodyArmor "item_armor_shard_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Vest-Bulletproof "item_armor_shard_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MissileLauncher "weapon_rocketlauncher_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Shotgun "weapon_shotgun_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$HandGrenade "weapon_handgrenade_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Handgun "weapon_pistol_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MedicalDevice "item_medkit_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MedicalDevice "item_medkit_small_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$AmmunitionBelt "ammo_belt_small_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$AmmunitionBelt "ammo_clip_large_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ProjectileShell-Blast "ammo_rockets_small_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ProjectileShell-Blast "ammo_rockets_large_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Scientist "skins/characters/npcs/body_labcoat_lantern.skin") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Scientist "alphalabs2_scientist1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Scientist "alphalabs2_scientist1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ScrapMetal "debris_barrelpiece") #$osim:DataMt) 
(cyc-assert '(#$ksTermString #$ScrapMetal "debris_barrelpiece2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ContainerLid "debris_barreltop") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ContainerLid "debris_barreltop2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BarrelContainer "moveable_barrel1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BarrelContainer "moveable_barrel2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BarrelContainer "moveable_barrel3") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BarrelContainer "moveable_base_barrel") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Boulder "moveable_base_boulder") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Brick "moveable_base_brick") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DominoesGame "moveable_base_domino") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$SpatialThing-Localized "moveable_base_fixed") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Vial "moveable_beaker") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LaptopComputer "moveable_blaptop") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Bottle "moveable_bottle1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Cheeseburger "moveable_burger") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PlasticFoodContainer "moveable_burgerboxclose") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PlasticFoodContainer "moveable_burgerboxopen") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LiquidStorageTank "moveable_burningbarrel") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LiquidStorageTank "moveable_burningtank") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Canister "moveable_cannister") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$WaxedCardboardCarton "moveable_cartonbox1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$CardboardBox "moveable_cartonbox2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$CardboardCanister "moveable_cartonbox3") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BoxTheContainer "moveable_cartonbox4") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Crate "moveable_cartonbox5") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Crate "moveable_cartonbox6") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BoxTheContainer "moveable_cartonbox7") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BoxTheContainer "moveable_cartonbox8") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$SwivelChair "moveable_chair1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ArmChair "moveable_chair2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DiningRoomChair "moveable_chair5") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Can "moveable_cokecan") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerWorkstation "moveable_compcart") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Computer "moveable_computer") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Cone "moveable_cone") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DeskLamp "moveable_desklamp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Diamond-Gem "moveable_diamondbox") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Diamond "moveable_diamondbox_sm") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$BarrelContainer "moveable_explodingbarrel") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LiquidStorageTank "moveable_explodingtank") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$VerticalFileCabinet-PieceOfFurniture "moveable_filecabinet1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$FireExtinguisher "moveable_fireext") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DrinkingGlass "moveable_foamcup") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ElectronicDevice "moveable_gizmo1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerHardwareItem "moveable_gizmo2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$CustomModification "moveable_gizmo3") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Brick "moveable_guardian_brick") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerMonitor-Color "moveable_hangingmonitor") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$HypodermicSyringe "moveable_infusion") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Lantern "moveable_item_lantern_world") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerKeyboard "moveable_keyboard1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$DiningRoomChair "moveable_kitchenchair") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$EatingTable "moveable_ktable") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$LaptopComputer "moveable_laptop") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$SafeTheLocker "moveable_metalbox1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Microscope "moveable_microscope") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerMonitor-Color "moveable_monitor") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$FlatPanelDisplay "moveable_monitorflip") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Mop "moveable_mop") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Bucket "moveable_mopbucket") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Chair-PieceOfFurniture "moveable_normchair") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Paper "moveable_paperwad") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$TIPersonalComputer "moveable_pc1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$CellularTelephone "moveable_phone") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$GarbageCan "moveable_plasticbin") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PlasticBox "moveable_plasticbinmini") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PlasticJar "moveable_plasticjar1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Jar "moveable_plasticjar2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Cooler-Container "moveable_spigotcan") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ComputerStand "moveable_tablecart1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ShoppingCart "moveable_tablecart2") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$GliderChair "moveable_tech_chair1") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Wastebasket "moveable_trashcan01") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$ServingTray "moveable_tray") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$FloorLamp "moveable_utilitylamp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Wrench "moveable_wrench") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MarinePersonnel "model_mp_marine") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$HomoSapiens "idPlayer") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Agent-Generic "idAI") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$MarinePersonnel "player_osimmarine_mp") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$GeographicalPlace-0D "info_player_deathmatch") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$GeographicalPlace-0D "info_player_start") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$GeographicalPlace-0D "idPlayerStart") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$SpatialThing-Localized "idEntity") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PartiallyTangible "idAnimatedEntity") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PhysicalPartOfObject "idAFAttachment") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$PropositionalConceptualWork "world") #$osim:DataMt)
(cyc-assert '(#$ksTermString #$Bottle "bottle") #$osim:DataMt)


(cyc-assert '(#$ksTermString #$Thing "aas") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "aas_mancubus") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "aas_guardian") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "aas_sabaoth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "aas_cyberdemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_types") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_names") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_belt_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bfg_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bullets_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bullets_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_cells_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_cells_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_clip_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_clip_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_grenade_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_rockets_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_rockets_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_shells_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_shells_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "bot_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "bot_sabot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "precacheextras") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_mcneil_fem") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_sentry") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_sentry_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_sentry_bullet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_sentry_bullet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_light_on") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_light_off") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_shutdown") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_unlock_door") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_lead_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_sentry_ignore_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "character_soldier_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_char_soldier_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_char_soldier_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cloud") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cloud_cinematic_camera_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cloud_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cloud_player_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_camera") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_marine_gravitygun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_marine_gravitygun_end") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_end") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_start") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_fill") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_ggun_marine_die") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_camera") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_mcneil") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_detonate") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_flash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_plyr_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_plyr_heart") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_pda_for_roq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine_for_roq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine_for_roq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_marine_for_roq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_flash_for_roq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_rocks_p") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_wall_explode") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_camera_p") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_plyr_heart_p") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_rocks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_rocks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_intro_rocks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_heart_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_heart_flyin_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_heart_closeup_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_rocket_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_cinematic_split") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_player_rocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_player_turnrun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_player_run") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_player_heart") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_player_heart_flyin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_skull") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_death_skull_smoke") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_intro_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_intro_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_intro_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_maledict_intro_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_player_maledict_intro") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_camera") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_cinematic_mcneil") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_cinematic_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_chair_cine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "npcgroup_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "npcgroup_cinematic_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "npcgroup_cinematic_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cin_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "commoutside_hellgoo") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_team_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "team_ctf_redflag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "team_ctf_blueflag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_ctf_flag_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_ctf_redflag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_ctf_blueflag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_ctf_nodrop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "team_ctf_redflag_nugget") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "team_ctf_blueflag_nugget") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_osimmarine_ctf") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cyc_bot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_types_dxp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bloodstone_normal") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bloodstone_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_lab") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_maint") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_harvest_hazmat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_dummy_target") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zsecm_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_thrown_ragdoll") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "teleport_shockwave") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "harvest_shockwave") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine_stump_gib") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_mountedobject") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_shockwave") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_skelgib_skull") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_skelgib_rib") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_skelgib_bone") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_skeleton") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_envirotank") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_powercell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_powercell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_envirosuit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_artifact_tablet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_medkit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_medkit_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_backpack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_powerup_adrenaline") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_envirotank") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_aircannister") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_armor_security") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_medkit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_medkit_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_armor_shard") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_bullets_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_bullets_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_shells_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_shells_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_clip_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_clip_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_grenade_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_rockets_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_rockets_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_cells_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_cells_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_belt_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ammo_bfg_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_chaingun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_grenades") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_plasmagun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_rocketlauncher") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_lantern") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_skull_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_head_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_torso_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_rup_arm_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_left_waist_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_lup_leg_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_rup_leg_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_rup_leg_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_pelvis_pork") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_tiny") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_carton") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_small") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_medium") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_large") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_xlarge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_moveable_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_berserkerbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_jackhammer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_pickaxe") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_shovel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_notakeg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_barrelv") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_notakeg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_barrelvb") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_deadsentry_head") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_deadsentry_body") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_deadsentry_leg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_deadsentry_leg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_bot_tech_bag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_marine_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_player_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_barrel_lid") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ancient_staff") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_dxp_bench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_dxp_lamp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ancient_buzz_blade") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_rubble_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_rubble_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_rubble_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_shotgun_double_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_base_dxp_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_osimmarine_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_plasmablast_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_erebus_ron_gibbons_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_id_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_base_dxp_sp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_osimmarine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "envirosuit_light") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "powerup_invulnerability") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "powerup_berserk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "powerup_invisibility") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ai_dummy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_hellpuzzle_smoke") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_lamp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_lostsoul_fx") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_pcellgen") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ronn_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_pcellgen_single") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_dxp_vehicle") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_grabbercd") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_deploycd") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_generatorcd") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_toxin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_toxin_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_triggerhurt_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_co_electric_trac") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_generic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_telefrag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_suicide") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_crush") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_gib") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_explosion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_explodingbarrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_smallexplosion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_hugeexplosion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_movercrush") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_paintrigger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_noair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_softfall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_hardfall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fatalfall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_lightbreak") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_vagaryobject") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_lava") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_largeshrapnel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_shrapnel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_brass") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_boney") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_mummy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_mummy_fixed") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_inviso") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_airlockdoor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_storagecabinet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_storagecabinet_openback") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_crane") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_craneplatform_caverns") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_platform") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_round") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_long_wbulbs_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_long_wbulbs") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_long_wbulbs_fixed") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_long_wbulbs_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_long_wbulbs_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_hazmat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_commando") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_gibbable_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zmaint") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_revenant") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_archvile") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_pinky") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_maint") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_lab") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_lab") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_lab") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_lab") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_suit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_suit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_suit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_poppy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zscientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zscientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zscientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_cherub") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_sentry") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zsecp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zsecs") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_zsecm") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_marine_stump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_hellchain") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_evilmeat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_sl") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_sl_fixed") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_swinglight_sl") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_xianbutton_") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_cage_corpse") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_group") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_mover") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_cameratarget") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_splinemover") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_mover_amodel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_rotating") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_bobbing") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_pendulum") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_plat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_activator") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_door") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_static") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_shaking") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_emitter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_smoke") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_damagable") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_clipmodel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_forcefield") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_explosion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_teleporter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_securitycamera") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_cameraview") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_animate") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_remove") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_damage") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_fx") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_itemremove") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_elevator") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_fracture") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_beam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_earthquake") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_portal") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_aas_portal") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_aas_obstacle") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_radiochatter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_phantom_objects") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_riser") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "func_splat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_leftarm") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_leftleg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_rtlolegstump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_rtuplegstump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_ruparmstub") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_spine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_gibs_torso") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_ragdoll_skeleton") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_player_deathmatch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_player_start") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_player_teleport") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_generic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_aircannister") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_armor_security") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_armor_shard") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_backpack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_key_blue") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_key_yellow") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_keycard_aco") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_keycard_generic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_videocd") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_objective") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_objectivecomplete") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_bfgcase") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_campbell_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_vent_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_overhear_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_impdoors") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_pinkyattack_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_pinkyattack_pinky") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_pinky_glassbreak") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_railing_pinkyattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_doorframe_pinkyattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "admin_wounded_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_labcoat_bald") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_helldoll") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_elevatorenv") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_cin_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_marine_helmet_p") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_fragchamber_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_fragchamber_skeleton") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_fragchamber_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_vagaryintro_vagary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_vagaryintro_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "alphalabs_vagaryintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_boulderbridge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_vagrocks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_bridgefront") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_bridge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_bridgeback") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_vagary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_vagary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_char_maint_scared") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "caverns_hkwall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "comm_sentryloader") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "comm_sentry_blank") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "comm_sentry") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "commoutside_vehicle") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "commoutside_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "commoutside_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "commoutside_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_bfgcase") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_campbell_bfgcase") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpu_camphunt_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpu_camphunt_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpu_wounded_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpu_monster_trite") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpuboss_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpuboss_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "cpuboss_cin_sabaoth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_scipull") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_commando") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_cin_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_zombie_office") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_zombie_office") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_scientist_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_sci_tele_hell_visions_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_player_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_scientist_return") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_teleporter_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltaa_teleporter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_waterwires") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_tankimpwires") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_tankimp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_tankrevwires") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_tankrev") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_keycardzombie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_hazmat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltab_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_hkintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_teleporter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_hk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_hk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_player_start") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_hazguy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_cin_hazguy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "delta_wounded_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltax_railing_pinkyattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "deltax_doorframe_pinkyattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_exit_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_soldier") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_soldier") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_soldier") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_soldier") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_exit_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_exit_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_exit_helmet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_monitor_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_glass_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_escape_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_tuberide_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_lostintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_lost_spine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_lost_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_cin_female") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_cin_lostsoul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_wounded_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_cin_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_wounded_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_wounded_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_wounded_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_cin_wraith") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "enpro_keycard") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_vulgarintro") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_hunter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_end") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_hunterintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_vulgarintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_spooked") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_dying_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_transform_npc") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_lftflashlight_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_fan_npc") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_trapped_npc") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_scientist_cloud") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_envirosuit_on_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_envirosuit_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_envirosuit_off_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_mcneil_fem") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_mcneil_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_cam_death") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_wall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_hunterdeath") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_ai_dummy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_cinematic_player_end") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_bottech") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fragchamberfog") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fragchamberpipe") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_guardianintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_guardiandeath_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_soulcube") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_cin_guardian") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_lstep") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hell_rstep") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cyberdeathrocks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_coffinbricks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cyberbricks") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cin_cyberdemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_cin_cyberdemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_soulcube") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hellhole_walkmarine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "intro_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_ship") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_ship") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_ship") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_security_goggles_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_civilian") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_labcoat_black") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_sec_checkin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_security_goggles_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_suit_young_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_labcoat_black") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_char_maint_asian_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_security_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_civilian_bathroom") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_sec_window") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_sec_window") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_meeting_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hangar_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_walking_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hangar_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_sarge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_sarge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hangar") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_civilian") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_receptionist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_receptionist_start") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_receptionist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_receptionist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_smallpda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_dufflebag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_civilian_hallway") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_labcoat_monitor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_civilian_kitchen") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_maint_hallway") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_maint_hallway") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_suit_asian_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_suit_asian_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_meeting_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_reception_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hangar_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_doctor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_victim") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cinematic_security") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_marine_helmet_p_directions_ver") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_marine_helmet_p_directions_ver") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_marine_helmet_p_walking") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_soldier_young_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_labcoat_young") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_marine_asian_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_marine_young_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_soldier_black") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_soldier_bald_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_suit_young") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_maint_ceiling") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cin_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_cin_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_zombie_morgue") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hallway_zombie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_hallway_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "marscity_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_rider") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_raisecommando_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_raisecommando_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_raisecommando_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_raisecommando_changer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_raisecommando_zct") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_crashsight_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_crash_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monorail_crash_debris") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_marine") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_tram") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_hunterintro") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_cinematic_player_death") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_cinematic_hunterdeath") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_hunteroutro") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_ai_dummy") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_fem") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_mcneil_typing") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_phobos_bridge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_revintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_revintro_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_revintro_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_revintro_rev") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_revintro_impact") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_mancintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_mancintro_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_mancintro_manc") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_mancintro_pipes") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_imp_cin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "site_floor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "site_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "site_sci") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_invasion_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_invasion_chestskull") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_hallway_skulls") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_window_security") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_maint_young_daniel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_maint_old_charles") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_maint_bald_ross") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_labcoat_young_todd") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_maint_asian_eric") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_maint_asian_eric") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_zombie_maint_bald") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_invasion_labcoat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_security_helmet_mark") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_invasion_labzombie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_invasion_maintzombie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_impintro_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_cin_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_cin_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_impintro_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_crazy_sci") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_crazy_sci_cin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_crazy_zombie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_impcrawl_door") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_zsecshotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_fatty") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_tunnel_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "underground_impstairs") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "static_hunter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "static_hunter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "static_hunter") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "worldspawn") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "light") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "speaker") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_location") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_locationseparator") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_vacuum") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_vacuumseparator") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "text") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_cyberdemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_cyberdemon_kick") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_cyber_rocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_cyberrocketdirect") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_cyberrocketsplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_dxp_maledict") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_maledict_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_fireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_fireball_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledictfirewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_flamewall_sound") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_flamewall_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_flamewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_flamewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_flamewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_asteroid") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_asteroid_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_maledict_asteroid_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_maledict_asteroid") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_maledict_asteroid") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_maledict_asteroid") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_maledict_asteroid_huge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_smoke") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "maledict_smoke") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_guardian") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "guardian_poundground_explosion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_guardianheadbutt") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_guardian_spawner") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_guardian_smash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_guardian_smash_direct") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_guardian_smash_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_guardianpoundground") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_guardiancharge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_guardian_seeker") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "seeker_light") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "seeker_light") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ending_cam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_maledict_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ending_debris") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_sabaoth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_sabaoth_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_sabaoth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_boss_vagary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_vagleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_vagrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_archvile") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_archleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_archrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_archvilefirewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "archvile_flamewall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_archvileincinerate") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "archvile_incinerate") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_cherub") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_cherubleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_cherubrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_cherubleapattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_hellknight_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_fireball_hellknight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hellknightleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hellknightrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hellknight_bite") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_imp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_imp_crawler") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_impfireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_impfireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_impfireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_impleapattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_impleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_imprightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_imp_crawl_armdoor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_imp_dxp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_maggot") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_magleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_magrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_maggotleapattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_mancubus") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_mancubusblast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_mancubussplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_mancubus_rocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_mancubus_stomp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_pinky") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_pinky_back") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_pinky_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_pinky_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_revenant") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_revrocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_revrocketsplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_rev_rocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_rev_rocket_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revenant") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revenant_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revenant_right_down") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revenant_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_revenant_left_down") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_plasmatracer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_plasmatracer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_tick") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_tick_explode") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_trite") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_triteleapattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_tritebite") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_trite_explode") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_trite_jump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_vulgar_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_vulgar_fireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_vulgar_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_vulgarleapattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_vulgarleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_vulgarrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_wraith") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "wraith_spawneffect") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_wraithleftclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_wraithrightclaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_wraithcenterattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_demon_wraith_dxp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_flying_cacodemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_cacodemon_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_cacodemon_fireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_cacodemon_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_cacodemon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_flying_forgotten") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_forgotten") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_forgotten_charge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_flying_forgotten") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_flying_lostsoul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_lostsoul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_lostsoul_charge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_flying_lostsoul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_lostsoul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_lostsoul_charge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_hunter_berzerk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hunter_berserk_chargeattack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hunter_berserk_attack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hunter_berserk_attack_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_hunter_berserk_attack_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_berzerker") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_berzerker_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_fireball_berzerker") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_hunter_helltime") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_helltimefireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_helltimefireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_helltimefireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_helltime") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_killer_fireball") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_killerfireball_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_helltime_killer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_powerball_guided") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_hunter_invul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hunter_invul_melee_inv") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hunter_invul_melee_normal") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_invul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_invul_splash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_fireball_invul") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_fireball_invul_guided") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "shockwave_pound_attack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "shockwave_electroblast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hunter_invulnerability_pound_attack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "hunter_invulnerability_electroblast_attack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_invulelectricwall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "invul_electricwall") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_invulnarea") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "phobos_cinematic_inv_player") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_turret") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_turret_light") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_turret") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_turret") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_turret_ancient") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "zombie_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_bernie") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_boney") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_commando") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_commando_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_commando_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_commando_push") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_commandotentacle") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_commando_cgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_zombie_commando_cgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_zombie_commando_cgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_fat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_fat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_fat_wrench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_fat_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_fat_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_fat_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_fat_right_wrench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_zfem") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_zfem_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_zfem_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_jumpsuit") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_bald") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_no_jaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_nojaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_wrench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_skinny") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_suit_neckstump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_suit_bloodymouth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_suit_skinny") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_labcoat_neckstump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_labcoat_limb") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_labcoat_skinny") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_labcoat_pipe") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_tshirt_bald") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_tshirt_blown") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_maint_left") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_maint_right") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_maint_push") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_maint_pull") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_hazmat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_hellgrowth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_fast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_morgue") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_sawyer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "melee_zombie_chainsaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_fat_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zombie_maint_fast_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_machinegun_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_shotgun_xray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_zsec_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_zsec_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_pistol_slowfire") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_zsec_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_zsec_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_shield") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_zsec_shield") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_zsec_shield") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "monster_zsec_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_zsec_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_zsec_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_barrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_barrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_base_barrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_base_brick") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_base_fixed") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_blaptop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_bottle") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_burger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_burgerboxclose") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_burgerboxopen") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_burningbarrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_burningtank") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cannister") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cartonbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cokecan") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_compcart") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_computer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_cone") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_desklamp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_diamondbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_diamondbox_sm") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_explodingbarrel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_explodingtank") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_filecabinet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_fireext") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_foamcup") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_gizmo") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_gizmo") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_gizmo") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_guardian_brick") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_hangingmonitor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_infusion") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_keyboard") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_kitchenchair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_ktable") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_laptop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_metalbox") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_microscope") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_monitor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_monitorflip") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_mop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_mopbucket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_paperwad") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_pc") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_phone") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_plasticbin") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_plasticbinmini") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_plasticjar") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_plasticjar") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_spigotcan") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_tablecart") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_tablecart") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_trashcan") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_tray") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_wrench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_barrelpiece") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_barrelpiece") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_barreltop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_barreltop") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_lantern_world") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_shield") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfg_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfgsplash_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_chaingun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_chainsaw_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fists_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_flashlight_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadedirect_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadesplash_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadesplash_inhand_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_machinegun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_pistol_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_plasmablast_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_rocketdirect_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_rocketsplash_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_shotgun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_soulblast_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_soulsplash_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_softfall_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_hardfall_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fatalfall_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_explodingbarrel_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_armor_security_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_armor_shard_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_belt_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bullets_large_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_bullets_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_cells_large_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_cells_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_clip_large_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_clip_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_grenade_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_medkit_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "item_medkit_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_rockets_large_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_rockets_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_shells_large_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ammo_shells_small_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_chainsaw_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_chainsaw_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_pistol_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_pistol_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_pistol_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_shotgun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_shotgun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_shotgun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_machinegun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_machinegun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_machinegun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_chaingun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_chaingunbullet_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_chaingun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_handgrenade_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_grenade_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_grenades_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_plasmagun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_plasmagun_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_rocketlauncher_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_rocket_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_rocketlauncher_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bfg_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bfg_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_bfg_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_ddm_generator") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_ddm_wind") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_fragchamber_berserk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_fragchamber_klaxon") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_fragchamber_lights") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_fragchamber_secretsteam") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "sound_powerup_berserk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "character_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_betruger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_swann") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_campbell") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_campbell_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "char_hazmat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "npc_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_adrenaline") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_foamcup") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_lftflashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_wrench") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_dufflebag") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_metal_lounge_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "prop_soft_desk_chair") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_labcoat_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_tshirt_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_jumpsuit_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_greenarmor_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_suit_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_security_mp") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "erebus_technician") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "npc_harvest_test") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_default") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_corner") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_anim") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_cycleanim") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_turn") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_wait") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_waitfortrigger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_conversation") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_conversation_listen") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_lookat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_hide") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_jump") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_attack") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_headanim") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_waitforheadanim") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_talk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_talk_triggered") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_talk_primary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "path_talk_secondary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ai_attackcone") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ai_attackcone_once") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ai_attackcone_turret") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "ai_lostcombat") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_underground_maint_young_daniel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_underground_security_helmet_mark") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_security_goggles_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_char_maint_asian_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_labcoat_black") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_maint_hallway") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_soldier_young_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_soldier_black") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_alphalabs_labcoat_bald") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_marscity_soldier_bald_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "pda_alphalabs_fragchamber_scientist") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "player_base") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "powerup_adrenaline") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "powerup_megahealth") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "recycling_skybridge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "info_portalsky") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_endlevel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setshaderparm") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setshadertime") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setglobalparmtime") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_entity_setcolor") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_entity_fadeout") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_entity_fadein") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_light_fadeout") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_light_fadein") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_null") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setmodel") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setinfluence") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_setkeyval") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_primaryobjective") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_show") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_lock") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_enableweapons") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_removeweapons") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_leveltrigger") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_enablestamina") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_giveemail") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_givesecurity") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_tip") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_callobjectfunction") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_npc_talk") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_npc_talk_triggered") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_npc_talk_primary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_npc_talk_secondary") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_ai_followalternatepath") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_ai_followalternatepath") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_ai_followalternatepath") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "target_fadesoundclass") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_multiple") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_once") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_timer") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_relay") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_hurt") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_count") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_fade") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_entityname") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_once_entityname") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_facing") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "trigger_touch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_bfg_overcharge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfgfreq") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfgsplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bfg") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bfg_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfg_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfgfreq_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfgsplash_cinematic") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bfg_overcharge") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bloodstone_active") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bloodstone_active") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bloodstone_active") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_bloodstone_passive") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_chaingun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_chaingunbullet") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_chaingun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_chainsaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_chainsaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_chainsaw") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_fists") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fists") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_flashlight") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_grabber") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_impfireball_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_hellknight_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_revrocket_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_vulgar_fireball_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_mancubusblast_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_cacodemon_fireball_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_fireball_invul_catch") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_handgrenade") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "env_grenade_explodeinhand") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadedirect") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadesplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_grenadesplash_inhand") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_grenade") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_machinegun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_pda") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_bullet_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_pistol") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_plasmagun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_plasmablast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_plasmablast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_rocketlauncher") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_rocket") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_rocketdirect") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_rocketsplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "debris_shotgunbrass") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_shotgun") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_shotgun_double") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "moveable_item_shotgun_double") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_shotgun_double") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_bullet_shotgun_double") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "weapon_soulcube") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_soulsplash") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "damage_soulblast") #$osim:VocabularyMt)
(cyc-assert '(#$ksTermString #$Thing "projectile_soulblast") #$osim:VocabularyMt)



      

;==================================================
; INTERFACE MAPPING SETUP (gameRegion)
;==================================================
(create-constant "osim:gameRegion")
(cyc-assert '(#$isa #$osim:gameRegion #$AsymmetricBinaryPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$isa #$osim:gameRegion #$SpatialPredicate) #$UniversalVocabularyMt)
(cyc-assert '(#$genlPreds #$osim:gameRegion #$locatedAtPoint-Spatial) #$osim:SituationMt)
(cyc-assert '(#$genlPreds #$osim:gameRegion #$osim:gameSpacePoint) #$osim:SituationMt)
(cyc-assert '(#$comment #$osim:gameRegion "(#$osim:gameRegion ?OBJ1 ?POINT) is true for the POINT is the location of OBJ1.") #$UniversalVocabularyMt)
(cyc-assert '(#$arity #$osim:gameRegion 2) #$UniversalVocabularyMt)
(cyc-assert '(#$arg1Isa #$osim:gameRegion #$GeographicalSpaceRegion) #$UniversalVocabularyMt)
(cyc-assert '(#$arg2Isa #$osim:gameRegion #$Point) #$UniversalVocabularyMt)

(create-constant "osim:cyc_bot_1")
(create-constant "osim:player1")
(cyc-assert '(#$isa #$osim:cyc_bot_1 #$Agent-Generic) #$osim:SituationMt)
(cyc-assert '(#$isa #$osim:player1 #$Agent-Generic) #$osim:SituationMt)
(cyc-assert '(#$isa #$osim:cyc_bot_1 #$osim:Instance) #$osim:SituationMt)
(cyc-assert '(#$isa #$osim:player1 #$osim:Instance) #$osim:SituationMt)

(cyc-assert '(#$implies (#$isa ?X #$osim:Instance) (#$isa ?X #$SpatialThing-Localized)) #$osim:SituationMt '(:DIRECTION :FORWARD))

(print "loading termStrings.")
(force-output)

;;(cyc-assert '(#$implies (#$and (#$isa ?OBJ #$Agent-Generic)(#$termStrings ?OBJ ?STRING)(#$ksTermString ?COL ?STRING)) (#$ist #$osim:SituationMt (#$isa ?OBJ ?COL))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$implies (#$and (#$isa ?OBJ #$Agent-Generic)(#$termStrings ?OBJ ?STRING)(#$ksTermString ?COL ?STRING)) (#$ist #$osim:SituationMt (#$isa ?OBJ ?COL))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$implies (#$and (#$isa ?OBJ #$Portal)(#$termStrings ?OBJ ?STRING)(#$ksTermString ?COL ?STRING)) (#$ist #$osim:SituationMt (#$isa ?OBJ ?COL))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$implies (#$and (#$isa ?OBJ #$GeographicalRegion)(#$termStrings ?OBJ ?STRING)(#$ksTermString ?COL ?STRING)) (#$ist #$osim:SituationMt (#$isa ?OBJ ?COL))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))
;;(cyc-assert '(#$implies (#$and (#$isa ?OBJ #$osim:Instance)(#$termStrings ?OBJ ?STRING)(#$ksTermString ?COL ?STRING)) (#$ist #$osim:SituationMt (#$isa ?OBJ ?COL))) #$UniversalVocabularyMt '(:DIRECTION :FORWARD))

(print "loading osim.lisp...Complete.")
(force-output)


