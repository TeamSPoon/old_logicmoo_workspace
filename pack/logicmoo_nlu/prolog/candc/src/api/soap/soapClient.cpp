/* soapClient.cpp
   Generated by gSOAP 2.8.12 from src/api/soap/candc_soap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.12 2014-06-17 20:56:49 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREstring(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, bool _start, std::string &_result)
{	struct ns1__parse_USCOREstring soap_tmp_ns1__parse_USCOREstring;
	struct ns1__parse_USCOREstringResponse *soap_tmp_ns1__parse_USCOREstringResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9004";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__parse_USCOREstring._text = _text;
	soap_tmp_ns1__parse_USCOREstring._start = _start;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__parse_USCOREstring(soap, &soap_tmp_ns1__parse_USCOREstring);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__parse_USCOREstring(soap, &soap_tmp_ns1__parse_USCOREstring, "ns1:parse_string", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__parse_USCOREstring(soap, &soap_tmp_ns1__parse_USCOREstring, "ns1:parse_string", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_result)
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &_result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__parse_USCOREstringResponse = soap_get_ns1__parse_USCOREstringResponse(soap, NULL, "ns1:parse_stringResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_result = soap_tmp_ns1__parse_USCOREstringResponse->_result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREsentence(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, std::string _printer, std::string &_result)
{	struct ns1__parse_USCOREsentence soap_tmp_ns1__parse_USCOREsentence;
	struct ns1__parse_USCOREsentenceResponse *soap_tmp_ns1__parse_USCOREsentenceResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9004";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__parse_USCOREsentence._text = _text;
	soap_tmp_ns1__parse_USCOREsentence._printer = _printer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__parse_USCOREsentence(soap, &soap_tmp_ns1__parse_USCOREsentence);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__parse_USCOREsentence(soap, &soap_tmp_ns1__parse_USCOREsentence, "ns1:parse_sentence", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__parse_USCOREsentence(soap, &soap_tmp_ns1__parse_USCOREsentence, "ns1:parse_sentence", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_result)
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &_result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__parse_USCOREsentenceResponse = soap_get_ns1__parse_USCOREsentenceResponse(soap, NULL, "ns1:parse_sentenceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_result = soap_tmp_ns1__parse_USCOREsentenceResponse->_result;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREoracle(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, std::string _constraints, std::string _printer, std::string &_result)
{	struct ns1__parse_USCOREoracle soap_tmp_ns1__parse_USCOREoracle;
	struct ns1__parse_USCOREoracleResponse *soap_tmp_ns1__parse_USCOREoracleResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost:9004";
	soap->encodingStyle = NULL;
	soap_tmp_ns1__parse_USCOREoracle._text = _text;
	soap_tmp_ns1__parse_USCOREoracle._constraints = _constraints;
	soap_tmp_ns1__parse_USCOREoracle._printer = _printer;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize_ns1__parse_USCOREoracle(soap, &soap_tmp_ns1__parse_USCOREoracle);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns1__parse_USCOREoracle(soap, &soap_tmp_ns1__parse_USCOREoracle, "ns1:parse_oracle", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns1__parse_USCOREoracle(soap, &soap_tmp_ns1__parse_USCOREoracle, "ns1:parse_oracle", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&_result)
		return soap_closesock(soap);
	soap_default_xsd__string(soap, &_result);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_ns1__parse_USCOREoracleResponse = soap_get_ns1__parse_USCOREoracleResponse(soap, NULL, "ns1:parse_oracleResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_result = soap_tmp_ns1__parse_USCOREoracleResponse->_result;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
