(load "motel.lisp")
(load "do-prolog.lisp")
(start-motel)
(prolog-goal '((make_environment ex2 kris_example)
		init_environment
	       (defprimconcept male)
	       (defprimconcept female (not male))
	       (defconcept males (some sex male))
	       (defconcept females (some sex female))
	       (defprimconcept person (some sex (or (:list male female))))
	       (defconcept parent (and (:list person (some child person))))
	       (defconcept mother (and (:list parent (some sex female))))
	       (defconcept father (and (:list parent (not mother))))
	       (defconcept grandparent (and (:list parent (some child parent))))
	       (defconcept parent__with__sons__only (and (:list parent (all child (some sex male)))))
	       (defconcept parent__with__two__children (and (:list parent (atleast 2 child))))
               (assert__ind tom father)
	       (assert__ind tom peter child)
	       (assert__ind tom harry child)
	       (assert__ind mary parent__with__sons__only)
	       (assert__ind mary tom child)
	       (assert__ind mary chris child)))
(do-prolog ((ask (element_of mary ?c))) () (nil t) (print ?c))
(do-prolog ((ask (element_of tom  ?c))) () (nil t) (print ?c))
(do-prolog ((ask (element_of ?x parent__with__two__children))) () (nil t) (print ?x))
(do-prolog ((ask ex2 (:list) (element_of mary ?c) ?e)) () (nil t) (print ?c) (print ?e))
(do-prolog ((abduce ex2 (:list) (element_of mary ?c) ?e ?h)) () (nil t) (print ?c) (print ?e) (print ?h))
(prolog-goal '((consistent (:list))))
(do-prolog ((setof ?c (^ (?e) (deduce ex2 (:list) (element_of mary ?c) ?e)) ?l1)) () (nil t) (print ?c) (print ?e) (print ?l1))

