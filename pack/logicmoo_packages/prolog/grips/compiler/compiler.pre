                GRIPS/PROLOG DEMONSTRATION MINI-COMPILER
            Contributed by Jocelyn Paine, Oxford University.
                   Shelved on the 11th of January 1991


This  is a  demonstration  compiler, written  in  a functional  language
(GRIPS)  that can  be translated  into Prolog.  The GRIPS  translator is
available as another library entry.

The  compiler takes  programs in  a (very  small) subset  of Pascal.  It
lexically analyses them into tokens, parses  the token list into a tree,
generates code from the tree, fixes  up references in the code, and then
interprets the code  on a stack virtual machine. It  displays the output
of each  stage, and the interpreter  displays the machine state  as each
instruction is obeyed.

The  compiler  is  written  in   a  functional  style,  using  functions
(sometimes represented  as sets of domain->codomain  pairs) to represent
well-known concepts in programming language semantics, such as the store
and the environment.  I wrote it to explain in  his own idiom, compiling
to a mathematician starting a computer science M.Sc.


This entry consists of 10 files:                    

    COMPILER.PRE        - this file.
    CODE_GENERATE.PL    - the code-generator.
    COMPILE.PL          - the master file.
    LEX.PL              - the lexical analyser.
    LOAD.PL             - the loader.
    MACHINE.PL          - the machine-code interpreter.
    MAP.PL              - one of the Edinburgh Tools files.
                          Used to implement mappings.
    ORDSET.PL           - another Tools file. Implements sets.
    PARSER.PL           - the parser.
    PROGRAM.            - a sample program.


To run the compiler, you will  need GRIPS. Consult GRIPS, and then (from
Prolog; you needn't call the GRIPS TLI), do
    ?- grips_reconsult( 'compiler.pl' ).
This will load the other compiler files.

Then do
    ?- demo.
This predicate  (defined in COMPILE.PL) will  read tokens from  the file
PROGRAM. It  will parse  them, code-generate, load  the code  (fixing up
labels), and  interpret it.  At each stage,  it displays  the structures
produced (token list, parse tree, etc.);  it also displays each cycle of
the virtual machine.


CHECKED ON EDINBURGH-COMPATIBLE (POPLOG) PROLOG : yes.

PORTABILITY : should be no problems.

INTERNAL DOCUMENTATION : as program comments.
