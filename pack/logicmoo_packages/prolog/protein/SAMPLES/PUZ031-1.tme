%--------------------------------------------------------------------------
% File     : PUZ031=SteamR-1 : TPTP v1.2.1. Released v1.0.0.
% Domain   : Puzzles
% Problem  : Schubert's Steamroller
% Version  : 
% English  : Wolves, foxes, birds, caterpillars, and snails are animals, 
%            and there are some of each of them. Also there are some 
%            grains, and grains are plants. Every animal either likes 
%            to eat all plants or all animals much smaller than itself 
%            that like to eat some plants.
%            Caterpillars and snails are much smaller than birds, which 
%            are much smaller than foxes, which in turn are much smaller 
%            than wolves. Wolves do not like to eat foxes or grains, while 
%            birds like to eat caterpillars but not snails. Caterpillars 
%            and snails like to eat some plants. Therefore there 
%            is an animal that likes to eat a grain eating animal.

% Refs     : Stickel M. (1986), Schubert's Steamroller Problem: 
%            Formulations and Solution, Journal of Automated Reasoning 
%            2(2), 89-104.
%          : Pelletier F.J. (1986), Seventy-Five Problems for Testing 
%            Automatic Theorem Provers, Journal of Automated Reasoning 
%            2(2), 191-216.
%          : Wang T-C., Bledsoe W.W. (1987), Hierarchical Deduction,
%            Journal of Automated Deduction 3(1), 35-77.
%          : Manthey R., Bry F. (1988), SATCHMO: a theorem prover 
%            implemented in Prolog, In Lusk E., Overbeek R. (Eds), 
%            Proceedings of the 9th International Conference on Automated 
%            Deduction (Argonne, IL, 1988), (Lecture Notes in Computer 
%            Science 310), Springer-Verlag, New York, NY, 415-434.
% Source   : [Pelletier, 1986]
% Names    : Pelletier 47 [Pelletier, 1986]
%          : steamroller.ver1.in [ANL]
%          : steam.in [OTTER]
%          : SST [Wang & Bledsoe, 1987]

% Status   : unsatisfiable
% Syntax   : Number of clauses    :   26 (   1 non-Horn;   6 unit;  26 RR)
%            Number of literals   :   63 (   0 equality)
%            Maximal clause size  :    8
%            Number of predicates :   10 (   0 propositional; 1-2 arity)
%            Number of functors   :    8 (   6 constant; 0-1 arity)
%            Number of variables  :   33 (   0 singleton)
%            Maximal term depth   :    2

% Comments : This problem is named after Len Schubert.
%          : tptp2X: -fprotein PUZ031-1.p 
%--------------------------------------------------------------------------

% BEGIN_AXIOMS
% wolf_is_an_animal, axiom.
% NAME: isa(wolf,animal)
animal(X) :- wolf(X).

% fox_is_an_animal, axiom.
% NAME: isa(fox,animal)
animal(X) :- fox(X).

% bird_is_an_animal, axiom.
% NAME: isa(bird,animal)
animal(X) :- bird(X).

% caterpillar_is_an_animal, axiom.
% NAME: isa(caterpillar,animal)
animal(X) :- caterpillar(X).

% snail_is_an_animal, axiom.
% NAME: isa(snail,animal)
animal(X) :- snail(X).

% there_is_a_wolf, axiom.
% NAME: existsa(wolf,a_wolf).
wolf(a_wolf).

% there_is_a_fox, axiom.
% NAME: existsa(fox,a_fox).
fox(a_fox).

% there_is_a_bird, axiom.
% NAME: existsa(bird,a_bird).
bird(a_bird).

% there_is_a_caterpillar, axiom.
% NAME: existsa(caterpillar,a_caterpillar).
caterpillar(a_caterpillar).

% there_is_a_snail, axiom.
% NAME: existsa(snail,a_snail).
snail(a_snail).

% there_is_a_grain, axiom.
% NAME: existsa(grain,a_grain).
grain(a_grain).

% grain_is_a_plant, axiom.
% NAME: isa(grain,plant)
plant(X) :-  grain(X).

% eating_habits, axiom.
% NAME: 'eating habits of animals'
eats(Animal, Plant); eats(Animal, Small_animal) :- animal(Animal), plant(Plant), animal(Small_animal), plant(Other_plant), much_smaller(Small_animal, Animal), eats(Small_animal, Other_plant).

% caterpillar_smaller_than_bird, axiom.
% NAME: 'caterpillar are smaller than birds'
much_smaller(Catapillar, Bird) :- caterpillar(Catapillar), bird(Bird).

% snail_smaller_than_bird, axiom.
% NAME: 'snails are smaller than birds'
much_smaller(Snail, Bird) :- snail(Snail), bird(Bird).

% bird_smaller_than_fox, axiom.
% NAME: 'birds are smaller than foxes'
much_smaller(Bird, Fox) :- bird(Bird), fox(Fox).

% fox_smaller_than_wolf, axiom.
% NAME: 'foxes are smaller than wolfs'
much_smaller(Fox, Wolf) :- fox(Fox), wolf(Wolf).

% wolf_dont_eat_fox, axiom.
% NAME: 'wolfs do not eat foxes'
false :- wolf(Wolf), fox(Fox), eats(Wolf, Fox).

% wolf_dont_eat_grain, axiom.
% NAME: 'wolfs do not eat grain'
false :- wolf(Wolf), grain(Grain), eats(Wolf, Grain).

% bird_eats_caterpillar, axiom.
% NAME: 'wolfs do not eat foxes'
eats(Bird, Catapillar) :- bird(Bird), caterpillar(Catapillar).

% bird_dont_eat_snail, axiom.
% NAME: 'birds do not eat snails'
false :- bird(Bird), snail(Snail), eats(Bird, Snail).

% caterpillar_food_is_a_plant, axiom.
% NAME: 'caterpillar food is a plant'
plant(caterpillar_food_of(Catapillar)) :- caterpillar(Catapillar).

% caterpillar_eats_caterpillar_food, axiom.
% NAME: 'caterpillar eat caterpillar food'
eats(Catapillar, caterpillar_food_of(Catapillar)) :- caterpillar(Catapillar).

% snail_food_is_a_plant, axiom.
% NAME: 'snail food is a plant'
plant(snail_food_of(Snail)) :- snail(Snail).

% snail_eats_snail_food, axiom.
% NAME: 'snails eat snail food'
eats(Snail, snail_food_of(Snail)) :- snail(Snail).

% prove_the_animal_exists, conjecture.
% NAME: goal
?- animal(Animal), animal(Grain_eater), grain(Grain), eats(Animal, Grain_eater), eats(Grain_eater, Grain).
% END_AXIOMS
%--------------------------------------------------------------------------
