order(poly1 for intbase) using poly1 for natbase.
setInterpretation('$inj-int-nzInt'(x) : x + 1
).
setInterpretation('$inj-nzInt-posint'(x) : x + 1
).
setInterpretation('$inj-int-nat'(x) : x + 1
).
setInterpretation('$inj-object-int'(x) : x + 3
).
setInterpretation('--nzInt-nzInt'(x) : x + 4
).
setInterpretation('--int-int'(x) : x + 5
).
setInterpretation(-(x) : x + 5
).
setInterpretation('$inj-nat-zero'(x) : x + 1
).
setInterpretation('$inj-nat-posint'(x) : x + 2
).
setInterpretation('$inj-object-nat'(x) : x + 2
).
setInterpretation('s-posint-nat'(x) : x + 4
).
setInterpretation(s(x) : x + 4
).
setInterpretation(0 : 2
).
setInterpretation('$inj-object-bool'(x) : x + 1
).
setInterpretation('==-bool-object-object'(x,y) : x + y + 4
).
setInterpretation('\==-bool-object-object'(x,y) : x + y + 5
).
setInterpretation(==(x,y) : x + y + 4
).
setInterpretation(\==(x,y) : x + y + 5
).
setInterpretation('false-bool' : 2
).
setInterpretation('true-bool' : 2
).
setInterpretation(true : 2
).
setInterpretation(false : 2
).

constructor('true-bool').
constructor('false-bool').
constructor('0-zero').
constructor('0-zero').






/* condition number 1 is the selected condition for
/*	X1:bool,X2:bool |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-object-bool'(@'X1-bool')='$inj-object-bool'(@'X2-bool')],[@'X1-bool'= @'X2-bool'])).

/* ordering of the literals is ms for
/*	x:object,y:object |- x==y = y==x */
action(status(ms),'$equation'([],['==-bool-object-object'(@'x-object',@'y-object')='==-bool-object-object'(@'y-object',@'x-object')])).

/* ordering of the literals is ms for
/*	x:object,y:object |- x\==y = y\==x */
action(status(ms),'$equation'([],['\==-bool-object-object'(@'x-object',@'y-object')='\==-bool-object-object'(@'y-object',@'x-object')])).

/* declare as nonoperational :
/*	x:object,y:object |- x==y = true => x = y */
action(orient(n),'$equation'(['==-bool-object-object'(@'x-object',@'y-object')='true-bool'],[@'x-object'= @'y-object'])).

/* condition number 1 is the selected condition for
/*	x:object,y:object |- x==y = true => x = y */
action(selectcondition(1),'$equation'(['==-bool-object-object'(@'x-object',@'y-object')='true-bool'],[@'x-object'= @'y-object'])).

/* ordering of the literals is ms for
/*	x:object,y:object |- x==y = true => x = y */
action(status(ms),'$equation'(['==-bool-object-object'(@'x-object',@'y-object')='true-bool'],[@'x-object'= @'y-object'])).

/* condition number 1 is the selected condition for
/*	X1:zero,X2:zero |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-nat-zero'(@'X1-zero')='$inj-nat-zero'(@'X2-zero')],[@'X1-zero'= @'X2-zero'])).

/* condition number 1 is the selected condition for
/*	X1:posint,X2:posint |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-nat-posint'(@'X1-posint')='$inj-nat-posint'(@'X2-posint')],[@'X1-posint'= @'X2-posint'])).

/* condition number 1 is the selected condition for
/*	X1:nat,X2:nat |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-object-nat'(@'X1-nat')='$inj-object-nat'(@'X2-nat')],[@'X1-nat'= @'X2-nat'])).

/* condition number 1 is the selected condition for
/*	X1:int,X2:int |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-object-int'(@'X1-int')='$inj-object-int'(@'X2-int')],[@'X1-int'= @'X2-int'])).

/* condition number 1 is the selected condition for
/*	X1:nat,X2:nat |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-int-nat'(@'X1-nat')='$inj-int-nat'(@'X2-nat')],[@'X1-nat'= @'X2-nat'])).

/* condition number 1 is the selected condition for
/*	X1:posint,X2:posint |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-nzInt-posint'(@'X1-posint')='$inj-nzInt-posint'(@'X2-posint')],[@'X1-posint'= @'X2-posint'])).

/* condition number 1 is the selected condition for
/*	X1:nzInt,X2:nzInt |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-int-nzInt'(@'X1-nzInt')='$inj-int-nzInt'(@'X2-nzInt')],[@'X1-nzInt'= @'X2-nzInt'])).

/* declare as nonoperational :
/*	A:nat,B:int |- A = B => A = B */
action(orient(n),'$equation'(['$inj-object-nat'(@'A-nat')='$inj-object-int'(@'B-int')],['$inj-int-nat'(@'A-nat')= @'B-int'])).

/* condition number 1 is the selected condition for
/*	X1:nat,X2:int |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-object-nat'(@'X1-nat')='$inj-object-int'(@'X2-int')],['$inj-int-nat'(@'X1-nat')= @'X2-int'])).

/* declare as nonoperational :
/*	A:posint,B:nat |- A = B => A = B */
action(orient(n),'$equation'(['$inj-int-nzInt'('$inj-nzInt-posint'(@'A-posint'))='$inj-int-nat'(@'B-nat')],['$inj-nat-posint'(@'A-posint')= @'B-nat'])).

/* condition number 1 is the selected condition for
/*	X1:posint,X2:nat |- X1 = X2 => X1 = X2 */
action(selectcondition(1),'$equation'(['$inj-int-nzInt'('$inj-nzInt-posint'(@'X1-posint'))='$inj-int-nat'(@'X2-nat')],['$inj-nat-posint'(@'X1-posint')= @'X2-nat'])).

/* declare as nonoperational :
/*	X1:posint,X2:nat |- X1 = X2 => X2 = X1 */
action(orient(n),'$equation'(['$inj-nat-posint'(@'X1-posint')= @'X2-nat'],['$inj-int-nat'(@'X2-nat')='$inj-int-nzInt'('$inj-nzInt-posint'(@'X1-posint'))])).

/* condition number 1 is the selected condition for
/*	X1:posint,X2:nat |- X1 = X2 => X2 = X1 */
action(selectcondition(1),'$equation'(['$inj-nat-posint'(@'X1-posint')= @'X2-nat'],['$inj-int-nat'(@'X2-nat')='$inj-int-nzInt'('$inj-nzInt-posint'(@'X1-posint'))])).

/* condition number 1 is the selected condition for
/*	n:nat |- n = 0 => -n = 0 */
action(selectcondition(1),'$equation'([@'n-nat'='$inj-nat-zero'('0-zero')],['$inj-object-int'('--int-int'('$inj-int-nat'(@'n-nat')))='$inj-object-nat'('$inj-nat-zero'('0-zero'))])).

/* condition number 1 is the selected condition for
/*	X1:posint,n:nat |- n = X1 => -n = -X1 */
action(selectcondition(1),'$equation'([@'n-nat'='$inj-nat-posint'(@'X1-posint')],['--int-int'('$inj-int-nat'(@'n-nat'))='$inj-int-nzInt'('--nzInt-nzInt'('$inj-nzInt-posint'(@'X1-posint')))])).

