; ***************************************************************************
; *  All rights reserved. Use of this software is permitted for non-commercial
; *  research purposes, and it may be copied only for that use.  All copies must
; *  include this copyright message.  This software is made available AS IS, and
; *  neither the GIPO team nor the University of Huddersfield make any warranty
; *  about the software or its performance.
; *
; *  Automatically generated PDDL Domain from  GIPO Version 3.0
; *
; *  Author: Stefan Helmchen (C0416041)
; *  Institution: University of Huddersfield
; *  Date created: Mon Nov 27 10:35:43 GMT 2006
; *  Date last modified: 2015/07/07 at 01:33:39 PM PDT
; *  Description:
; *    
; * OCL File name : assTaxi.ocl
; * Object Life History : assTaxi.gfx
; *************************************************************************

(define (domain mytaxi)
  (:requirements :strips :equality :typing :conditional-effects)

  (:types  taxi location person fuel)


  (:predicates
    (taxiState ?taxi1 - taxi)
    (tLocation ?taxi1 - taxi ?location1 - location)
    (insideTaxi ?person1 - person ?taxi1 - taxi)
    (pLocation ?person1 - person ?location1 - location)
    (outsideTaxi ?person1 - person)
    (connects ?location1 - location ?location2 - location)
    (usefuel ?fuel1 - fuel ?fuel2 - fuel)
    (fillUpFuel ?fuel1 - fuel ?fuel2 - fuel)
    (tFuel ?taxi1 - taxi ?fuel1 - fuel)
  )
  (:action getOut
       :parameters ( ?Taxi - taxi ?Location - location ?Person - person)
       :precondition (and 
            (taxiState ?Taxi)
            (tLocation ?Taxi ?Location)
            (insideTaxi ?Person ?Taxi)
            (pLocation ?Person ?Location)
       )
       :effect (and 
            (not (insideTaxi ?Person ?Taxi))
            (outsideTaxi ?Person)
        )
    )
  (:action getIn
       :parameters ( ?Taxi - taxi ?Location - location ?Person - person)
       :precondition (and 
            (taxiState ?Taxi)
            (tLocation ?Taxi ?Location)
            (outsideTaxi ?Person)
            (pLocation ?Person ?Location)
       )
       :effect (and 
            (not (outsideTaxi ?Person))
            (insideTaxi ?Person ?Taxi)
        )
    )
  (:action move
       :parameters ( ?Taxi - taxi ?LocationA - location ?FuelA - fuel ?LocationB - location ?FuelB - fuel)
       :precondition (and 
            (taxiState ?Taxi)
            (tLocation ?Taxi ?LocationA)
            (tFuel ?Taxi ?FuelA)
            (connects ?LocationA ?LocationB)
            (usefuel ?FuelA ?FuelB)
       )
       :effect (and 
            (not (tLocation ?Taxi ?LocationA))
            (not (tFuel ?Taxi ?FuelA))
            (tLocation ?Taxi ?LocationB)
            (tFuel ?Taxi ?FuelB)
            (forall (?Person - person)
              (when (and
                (insideTaxi ?Person ?Taxi)
                (pLocation ?Person ?LocationA)
                (connects ?LocationA ?LocationB)
               )
              (and
                (not (pLocation ?Person ?LocationA))
                (pLocation ?Person ?LocationB)
               )))
        )
    )
  (:action fillFuel
       :parameters ( ?Taxi - taxi ?LocationA - location ?FuelA - fuel ?FuelB - fuel)
       :precondition (and 
            (taxiState ?Taxi)
            (tLocation ?Taxi ?LocationA)
            (tFuel ?Taxi ?FuelA)
            (fillUpFuel ?FuelA ?FuelB)
       )
       :effect (and 
            (not (tFuel ?Taxi ?FuelA))
            (tFuel ?Taxi ?FuelB)
        )
    )
  )
(define (problem task1)
   (:domain mytaxi)
   (:objects
         taxi001 taxi002 - taxi
         new_street old_street high_street low_street water_bridge slope_street cr_1 cr_2 cr_3 cr_4 cr_5 cr_6 cr_7 river_road river_close boat_rent main_road short_street - location
         bill james peter jill ayumi - person
         full threequarter half_full onequarter empty - fuel
        )
    (:init
        (outsideTaxi bill)
        (pLocation bill cr_4)
        (outsideTaxi ayumi)
        (pLocation ayumi boat_rent)
        (outsideTaxi james)
        (pLocation james cr_7)
        (outsideTaxi peter)
        (pLocation peter cr_1)
        (outsideTaxi jill)
        (pLocation jill cr_3)
        (taxiState taxi001)
        (tLocation taxi001 low_street)
        (tFuel taxi001 threequarter)
        (connects cr_1 old_street)
        (connects cr_1 slope_street)
        (connects cr_1 water_bridge)
        (connects cr_1 high_street)
        (connects cr_2 low_street)
        (connects cr_2 old_street)
        (connects cr_3 new_street)
        (connects cr_3 low_street)
        (connects cr_4 high_street)
        (connects cr_4 new_street)
        (connects cr_5 water_bridge)
        (connects cr_5 river_road)
        (connects cr_5 short_street)
        (connects cr_6 main_road)
        (connects cr_6 river_road)
        (connects cr_6 river_close)
        (connects cr_7 main_road)
        (connects cr_7 short_street)
        (connects main_road cr_7)
        (connects short_street cr_7)
        (connects short_street cr_5)
        (connects main_road cr_6)
        (connects river_road cr_5)
        (connects river_road cr_6)
        (connects river_close cr_6)
        (connects river_close boat_rent)
        (connects boat_rent river_close)
        (connects water_bridge cr_5)
        (connects water_bridge cr_1)
        (connects high_street cr_1)
        (connects old_street cr_1)
        (connects high_street cr_4)
        (connects new_street cr_4)
        (connects new_street cr_3)
        (connects low_street cr_3)
        (connects low_street cr_2)
        (connects old_street cr_2)
        (connects slope_street cr_3)
        (usefuel full threequarter)
        (usefuel threequarter half_full)
        (usefuel half_full onequarter)
        (usefuel onequarter empty)
        (fillUpFuel empty full)
        )
    (:goal
      (and
        (outsideTaxi jill)
        (pLocation jill slope_street)
        (outsideTaxi peter)
        (pLocation peter water_bridge)
       ))
)
(define (problem task2)
   (:domain mytaxi)
   (:objects
         taxi001 taxi002 - taxi
         new_street old_street high_street low_street water_bridge slope_street cr_1 cr_2 cr_3 cr_4 cr_5 cr_6 cr_7 river_road river_close boat_rent main_road short_street - location
         bill james peter jill ayumi - person
         full threequarter half_full onequarter empty - fuel
        )
    (:init
        (outsideTaxi bill)
        (pLocation bill cr_4)
        (outsideTaxi james)
        (pLocation james cr_7)
        (outsideTaxi peter)
        (pLocation peter cr_1)
        (outsideTaxi jill)
        (pLocation jill cr_3)
        (outsideTaxi ayumi)
        (pLocation ayumi boat_rent)
        (taxiState taxi001)
        (tLocation taxi001 old_street)
        (tFuel taxi001 threequarter)
        (taxiState taxi002)
        (tLocation taxi002 main_road)
        (tFuel taxi002 full)
        (connects cr_1 old_street)
        (connects cr_1 slope_street)
        (connects cr_1 water_bridge)
        (connects cr_1 high_street)
        (connects cr_2 low_street)
        (connects cr_2 old_street)
        (connects cr_3 new_street)
        (connects cr_3 low_street)
        (connects cr_4 high_street)
        (connects cr_4 new_street)
        (connects cr_5 water_bridge)
        (connects cr_5 river_road)
        (connects cr_5 short_street)
        (connects cr_6 main_road)
        (connects cr_6 river_road)
        (connects cr_6 river_close)
        (connects cr_7 main_road)
        (connects cr_7 short_street)
        (connects main_road cr_7)
        (connects short_street cr_7)
        (connects short_street cr_5)
        (connects main_road cr_6)
        (connects river_road cr_5)
        (connects river_road cr_6)
        (connects river_close cr_6)
        (connects river_close boat_rent)
        (connects boat_rent river_close)
        (connects water_bridge cr_5)
        (connects water_bridge cr_1)
        (connects high_street cr_1)
        (connects old_street cr_1)
        (connects high_street cr_4)
        (connects new_street cr_4)
        (connects new_street cr_3)
        (connects low_street cr_3)
        (connects low_street cr_2)
        (connects old_street cr_2)
        (connects slope_street cr_3)
        (usefuel full threequarter)
        (usefuel threequarter half_full)
        (usefuel half_full onequarter)
        (usefuel onequarter empty)
        (fillUpFuel empty full)
        )
    (:goal
      (and
        (outsideTaxi bill)
        (pLocation bill water_bridge)
        (outsideTaxi james)
        (pLocation james boat_rent)
       ))
)
(define (problem task3)
   (:domain mytaxi)
   (:objects
         taxi001 taxi002 - taxi
         new_street old_street high_street low_street water_bridge slope_street cr_1 cr_2 cr_3 cr_4 cr_5 cr_6 cr_7 river_road river_close boat_rent main_road short_street - location
         bill james peter jill ayumi - person
         full threequarter half_full onequarter empty - fuel
        )
    (:init
        (outsideTaxi bill)
        (pLocation bill cr_4)
        (outsideTaxi james)
        (pLocation james cr_7)
        (outsideTaxi peter)
        (pLocation peter cr_1)
        (outsideTaxi jill)
        (pLocation jill cr_3)
        (outsideTaxi ayumi)
        (pLocation ayumi boat_rent)
        (taxiState taxi001)
        (tLocation taxi001 cr_2)
        (tFuel taxi001 half_full)
        (taxiState taxi002)
        (tLocation taxi002 river_road)
        (tFuel taxi002 onequarter)
        (connects cr_1 old_street)
        (connects cr_1 slope_street)
        (connects cr_1 water_bridge)
        (connects cr_1 high_street)
        (connects cr_2 low_street)
        (connects cr_2 old_street)
        (connects cr_3 new_street)
        (connects cr_3 low_street)
        (connects cr_4 high_street)
        (connects cr_4 new_street)
        (connects cr_5 water_bridge)
        (connects cr_5 river_road)
        (connects cr_5 short_street)
        (connects cr_6 main_road)
        (connects cr_6 river_road)
        (connects cr_6 river_close)
        (connects cr_7 main_road)
        (connects cr_7 short_street)
        (connects main_road cr_7)
        (connects short_street cr_7)
        (connects short_street cr_5)
        (connects main_road cr_6)
        (connects river_road cr_5)
        (connects river_road cr_6)
        (connects river_close cr_6)
        (connects river_close boat_rent)
        (connects boat_rent river_close)
        (connects water_bridge cr_5)
        (connects water_bridge cr_1)
        (connects high_street cr_1)
        (connects old_street cr_1)
        (connects high_street cr_4)
        (connects new_street cr_4)
        (connects new_street cr_3)
        (connects low_street cr_3)
        (connects low_street cr_2)
        (connects old_street cr_2)
        (connects slope_street cr_3)
        (usefuel full threequarter)
        (usefuel threequarter half_full)
        (usefuel half_full onequarter)
        (usefuel onequarter empty)
        (fillUpFuel empty full)
        )
    (:goal
      (and
        (outsideTaxi bill)
        (pLocation bill boat_rent)
        (outsideTaxi james)
        (pLocation james boat_rent)
        (outsideTaxi peter)
        (pLocation peter boat_rent)
        (outsideTaxi jill)
        (pLocation jill boat_rent)
        (outsideTaxi ayumi)
        (pLocation ayumi water_bridge)
        (taxiState taxi001)
        (tLocation taxi001 cr_2)
        (tFuel taxi001 empty)
       ))
)
