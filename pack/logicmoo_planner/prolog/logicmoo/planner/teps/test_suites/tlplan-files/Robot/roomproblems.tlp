(define (state0)
    (opened corridor)
    (connects d1 c1 r1)
    (connects d1 r1 c1)
    (connects d12 r1 r2)
    (connects d12 r2 r1)
    (connects d23 r2 r3)
    (connects d23 r3 r2)
    (connects d34 r3 r4)
    (connects d34 r4 r3)
    (connects d4 c4 r4)
    (connects d4 r4 c4)
    (connects corridor c1 c4)
    (connects corridor c4 c1)
    (door d1)
    (door d12)
    (door d23)
    (door d34)
    (door d4)
    (object obj1)
    (object obj2)
    (object obj3)
    (object obj4)
    (at obj1 r1)
    (at obj2 r2)
    (at obj3 r1)
    (at obj4 r1)
    (at robot c1)
    (handempty)
    (opened d1)
    (opened d12)
    (opened d23)
    (opened d34)
    (opened d4)
)

(define (state1)
    (opened corridor)
    (connects d1 c1 r1)
    (connects d1 r1 c1)
    (connects d12 r1 r2)
    (connects d12 r2 r1)
    (connects d23 r2 r3)
    (connects d23 r3 r2)
    (connects d34 r3 r4)
    (connects d34 r4 r3)
    (connects d4 c4 r4)
    (connects d4 r4 c4)
    (connects corridor c1 c4)
    (connects corridor c4 c1)
    (door d1)
    (door d12)
    (door d23)
    (door d34)
    (door d4)
    (object obj1)
    (object obj2)
    (object obj3)
    (object obj4)
    (at obj1 r1)
    (at obj2 r2)
    (at robot c1)
    (handempty)
    (closed d1)
    (closed d12)
    (closed d23)
    (closed d34)
    (closed d4)
)


(set-goal-type extended)

(define (goal0)
    (eventually (always (and (at robot c1) (at obj1 r2)))))

(define (goal1)
    (and (or (next (next (next (next (next (at obj1 r4))))))
             (next (next (next (next (next (next (next (at obj1 r4)))))))))
	 (eventually (always (and (at robot c1) (at obj1 r2))))))	

(define (goal2)
    (and (eventually (at obj1 c4))
	 (eventually (always (and (at robot c1) (at obj1 r2))))))	


(define (goal3)
  (and (implies (eventually (at robot r1))
		(eventually (forall (?x) (door ?x) (closed ?x))))
       (eventually (always (and (at robot c1) (at obj2 r3))))))	


(define (goal4)
  (and (eventually (and (at obj1 r4) (at obj2 r3)))
       (eventually (always (and (at robot c1) (at obj2 r4))))))

(define (goal5)
  (and (eventually (and (at obj1 r4) (at obj1 r2)))
       (eventually (always (and (at robot c1) (at obj2 r4))))))


; this is an unsolvable goal
(define (goal1-1)
   (and (always 
 	(forall (?d) (door ?d)
		(implies 
		 (and (closed ?d)	
		      (next (opened ?d)))
		 (next (next (closed ?d))))))
        (eventually (always (and (at robot c1) (at obj2 r4))))))


; close a door 2 states after you open it!
(define (goal1-2)
   (and (always 
	 (forall (?d) (door ?d)		 
		 (implies 
		  (and (closed ?d)	
		       (next (opened ?d)))
		  (next (next (next (closed ?d)))))))
	(eventually (always (and (at robot c1) (at obj2 r4))))))

; eventually close a door after you open it!
(define (goal1-3)
   (and (always 
 	(forall (?d) (door ?d)
		(implies 
		 (and (closed ?d)	
		      (next (opened ?d)))
		 (eventually (closed ?d)))))
        (eventually (always (and (at robot c1) (at obj2 r4))))))



;; (define (goal1-1)
;;   (and (always 
;; 	(implies 
;; 	 (and (closed d1)
;; 	      (next (opened d1)))
;; 	 (next (next (closed d1)))))
;;        (always (and (at robot c1) (at obj2 r4)))))
		      
