(define (init1)
  (obj package6) (obj package5) (obj package4) (obj package3)
  (obj package2) (obj package1)
;  (city city6) (city city5) 
  (city city4) (city city3) (city city2) (city city1)
;  (truck truck6) (truck truck5) 
  (truck truck4) (truck truck3) (truck truck2) (truck truck1)
  (airplane plane1) (airplane plane2)
;  (location city6_1) (location city5_1) 
  (location city4_1) 
  (location city3_1) (location city2_1) (location city1_1)
;  (location city6_2) (location city5_2) 
  (location city4_2)
  (location city3_2) (location city2_2) (location city1_2)
;  (airport city6_2)  (airport city5_2)  
  (airport city4_2)
  (airport city3_2)  (airport city2_2)  (airport city1_2)
;  (in_city city6_2 city6)  (in_city city6_1 city6)
;  (in_city city5_2 city5)  (in_city city5_1 city5)
  (in_city city4_2 city4)  (in_city city4_1 city4)
  (in_city city3_2 city3)  (in_city city3_1 city3)
  (in_city city2_2 city2)  (in_city city2_1 city2)
  (in_city city1_2 city1)  (in_city city1_1 city1)
  (at plane2 city4_2)
  (at plane1 city4_2)
;  (at truck6 city6_1)
;  (at truck5 city5_1)
  (at truck4 city4_1)
  (at truck3 city3_1)
  (at truck2 city2_1)
  (at truck1 city1_1)
  (at package6 city3_1)
  (at package5 city4_2)
  (at package4 city1_1)
  (at package3 city1_1)
  (at package2 city1_2)
  (at package1 city2_1)
)

(set-goal-type extended)


(define (control0)
  (always (forall (?t) (truck ?t)
		  (implies (and (empty ?t)
				(exists (?l) (at ?t ?l)
					(next (exists (?l1) 
						      (at ?t ?l1) 
						      (not (= ?l ?l1))))))
			   (next (next (not (empty ?t)))))))
  

  
  (always (forall (?t) (airplane ?t)
		  (implies (and (empty ?t)
				(exists (?l) (at ?t ?l)
					(next (exists (?l1) 
						      (at ?t ?l1) 
						      (not (= ?l ?l1))))))
			   (next (next (not (empty ?t)))))))
)				    
	   

(define (control-only6)
 (always
  (forall (?x ?y) (in ?x ?y) (= ?x package6))))

(define (control-only36)
 (always
  (forall (?x ?y) (in ?x ?y) (or (= ?x package6) (= ?x package3)))))

(define (control-only236)
 (always
  (forall (?x ?y) (in ?x ?y) (or (= ?x package6) (= ?x package2) (= ?x package3)))))


(define (control2)
  ; do not unload if you've just loaded  
 (always (forall (?t) (truck ?t)
		  (implies (and (empty ?t)
				(next (not (empty ?t))))
			   (next (next (not (empty ?t)))))))


 (always (forall (?t) (airplane ?t)
		  (implies (and (empty ?t)
				(next (not (empty ?t))))
			   (next (next (not (empty ?t)))))))
)


; goals 1 to 5 (all propositional): tour of package 6 

(define (goal1) 
  (eventually (always (at package6 city2_2))))

(define (goal2)
  (eventually (and (at package6 city2_2) 
		   (next (eventually (at package6 city1_2))))))

(define (goal3)
  (eventually (and (at package6 city2_2) 
		   (next (and (eventually (at package6 city1_2))
			      (next (eventually (at package6 city3_2))))))))

(define (goal4)
  (eventually (and (at package6 city2_1) 
		   (next (eventually (at package6 city1_1))))))

(define (goal5)
  (eventually (and (at package6 city2_1) 
		   (next (eventually (and (at package6 city1_1)
					  (next (eventually (at package6 city3_2)))))))))


; package 3 & 6 have to be delivered at city1_2 but 6 is first

(define (goal6) 
  (and
   (until (not (at package3 city1_2)) (at package6 city1_2))
   (eventually (always (at package3 city1_2)))))


; package 3 & 6 have to be delivered at city2_2 but 6 is first

(define (goal6a) 
  (and
   (until (not (at package3 city2_2)) (at package6 city2_2))
   (eventually (always (at package3 city2_2)))))


; package 3 & 6 have to be delivered at city2_2 but 6 is first

(define (goal6b) 
  (and
   (until (not (or (at package3 city2_2) (at package2 city2_2))) (at package6 city2_2))
   (eventually (always (and (at package3 city2_2) (at package2 city2_2))))))



; plane 2 must visit every airport

(define (goal7)
  (forall (?a) (airport ?a)
	  (eventually (at plane2 ?a))))
  
; plane 2 must visit every airport and package 6 gets delivered at city1_1

(define (goal7a)
  (forall (?a) (airport ?a)
	  (eventually (at plane2 ?a)))
  (eventually (always (at package6 city1_1))))



; plane 2 must visit every airport & return (careful with the control!)

(define (goal8)
  (and 
   (forall (?a) (airport ?a)
	   (eventually (at plane2 ?a)))
   (eventually (always (at plane2 city4_2)))))


; every airport is visited by at least one airplane (careful with the control!)

(define (goal9)
  (forall (?a) (airport ?a)
	  (exists (?p) (airplane ?p)
		  (eventually (at ?p ?a)))))



; every airport is visited by at least one airplane (careful with the control!)
; and package 6 gets delivered to city3_1

(define (goal10) 
  (and 
   (forall (?a) (airport ?a)
	   (exists (?p) (airplane ?p)
		   (eventually (at ?p ?a))))
   (eventually (always (at package6 city3_1)))))


;; again, touring package6, but now order doesn't matter

(define (goal11)
  (and
   (eventually (at package6 city2_2)) 
   (eventually (at package6 city1_2))
   (eventually (at package6 city3_2))))

(define (goal12)
  (and 
   (eventually (at package6 city2_1)) 
   (eventually (at package6 city1_1))
   (eventually (at package6 city3_1))))

(define (goal12a)
  (and 
   (eventually (at package6 city2_1)) 
   (eventually (at package6 city1_1))
   (always (eventually (at package6 city3_2)))))



;; package 6 must have eventually been everywhere

(define (goal13)
  (forall (?l) (location ?l)
	  (eventually (at package6 ?l))))


; 

;; package 6 must have eventually been everywhere in city 3

(define (goal14)
  (forall (?l) (in_city ?l city3)
	  (eventually (at package6 ?l))))

;; package 6 must have eventually been everywhere in city 4

(define (goal15)
  (forall (?l) (in_city ?l city4)
	  (eventually (at package6 ?l))))


;; eventually all objects in city3_1 and then eventually all in city2_1

(define (goal16)
  (eventually (and
	       (forall (?o) (obj ?o) (at ?o city3_1)) 
	       (eventually (forall (?o) (obj ?o) (at ?o city2_1))))))


;; eventually all planes have been at the same airport and
;; package 6 gets delivered to city3_2

(define (goal17)
  (and 
   (exists (?a) (airport ?a)
	   (and (not (= ?a city4_2))
		(eventually
		 (forall (?p) (airplane ?p) (at ?p ?a)))))
   (eventually (always (at package6 city3_2)))))


; every airport gets an airplane

(define (goal18)
  (and 
   (forall (?a) (airport ?a)
	   (eventually
	    (exists (?p) (airplane ?p) (at ?p ?a))))
   (eventually (always (at package6 city3_1)))))


; all airports are visited by an airplane at list during two instants of time

(define (goal19)
  (and 
   (forall (?a) (airport ?a)
	   (eventually
	    (and
	     (exists (?p1) (airplane ?p1) (at ?p1 ?a))
	     (next (eventually
		    (exists (?p2) (airplane ?p2) (at ?p2 ?a)))))))

   (eventually (always (at package6 city3_1)))))


