/*
 * GIPO COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.
 *
 * Copyright 2001 - 2003 by R.M.Simpson W.Zhao T.L.McCLuskey D Liu D. Kitchin
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notice appear in all copies and that
 * both the copyright notice and this permission notice and warranty
 * disclaimer appear in supporting documentation, and that the names of
 * the authors or their employers not be used in advertising or publicity 
 * pertaining to distribution of the software without specific, written 
 * prior permission.
 *
 * The authors and their employers disclaim all warranties with regard to 
 * this software, including all implied warranties of merchantability and 
 * fitness.  In no event shall the authors or their employers be liable 
 * for any special, indirect or consequential damages or any damages 
 * whatsoever resulting from loss of use, data or profits, whether in an 
 * action of contract, negligence or other tortious action, arising out of 
 * or in connection with the use or performance of this software.
 */


//----------------------------------------------------
// The following code was generated by CUP v0.10j
// Wed Jan 24 14:05:53 GMT+00:00 2001
//----------------------------------------------------

package jplan.pddl;

import java_cup.runtime.*;
import java.io.PrintWriter;
import java.util.List;
import java.util.ArrayList;
import java.util.ListIterator;
import jplan.general.Utility;

/** CUP v0.10j generated parser.
  * @version Wed Jan 24 14:05:53 GMT+00:00 2001
  */
public class PDDLparser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public PDDLparser() {super();}

  /** Constructor which sets the default scanner. */
  public PDDLparser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\172\000\002\002\004\000\002\003\003\000\002\003" +
    "\004\000\002\060\002\000\002\004\015\000\002\005\004" +
    "\000\002\005\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\061\002\000\002" +
    "\012\007\000\002\013\003\000\002\013\005\000\002\062" +
    "\002\000\002\013\007\000\002\063\002\000\002\015\005" +
    "\000\002\015\003\000\002\016\003\000\002\064\002\000" +
    "\002\016\007\000\002\065\002\000\002\014\005\000\002" +
    "\014\003\000\002\066\002\000\002\007\007\000\002\010" +
    "\004\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\067\002\000" +
    "\002\070\002\000\002\017\010\000\002\071\002\000\002" +
    "\020\007\000\002\021\004\000\002\021\003\000\002\072" +
    "\002\000\002\022\007\000\002\073\002\000\002\022\007" +
    "\000\002\057\004\000\002\023\003\000\002\023\004\000" +
    "\002\074\002\000\002\023\007\000\002\023\005\000\002" +
    "\030\006\000\002\030\010\000\002\075\002\000\002\031" +
    "\010\000\002\076\002\000\002\077\002\000\002\032\011" +
    "\000\002\032\003\000\002\100\002\000\002\033\006\000" +
    "\002\101\002\000\002\034\005\000\002\036\003\000\002" +
    "\036\006\000\002\102\002\000\002\037\007\000\002\037" +
    "\003\000\002\103\002\000\002\104\002\000\002\024\011" +
    "\000\002\026\003\000\002\026\006\000\002\027\003\000" +
    "\002\027\006\000\002\041\005\000\002\105\002\000\002" +
    "\041\007\000\002\106\002\000\002\041\007\000\002\042" +
    "\003\000\002\042\003\000\002\107\002\000\002\042\005" +
    "\000\002\110\002\000\002\042\005\000\002\040\004\000" +
    "\002\040\003\000\002\025\004\000\002\025\004\000\002" +
    "\025\003\000\002\025\003\000\002\035\003\000\002\035" +
    "\006\000\002\043\004\000\002\043\003\000\002\111\002" +
    "\000\002\044\017\000\002\045\004\000\002\045\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\112\002\000\002\047\007\000\002\113" +
    "\002\000\002\050\007\000\002\114\002\000\002\053\007" +
    "\000\002\054\006\000\002\055\003\000\002\055\004\000" +
    "\002\115\002\000\002\056\007\000\002\116\002\000\002" +
    "\056\007\000\002\052\003\000\002\052\004\000\002\051" +
    "\005\000\002\117\002\000\002\051\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\004\004\006\001\002\000\006\002\000\004" +
    "\253\001\002\000\004\002\250\001\002\000\004\013\007" +
    "\001\002\000\004\004\010\001\002\000\004\014\011\001" +
    "\002\000\004\036\012\001\002\000\004\005\013\001\002" +
    "\000\004\004\ufffe\001\002\000\004\004\015\001\002\000" +
    "\012\006\026\011\023\012\021\040\017\001\002\000\014" +
    "\006\ufff7\011\ufff7\012\ufff7\016\ufff7\040\ufff7\001\002\000" +
    "\004\036\ufff6\001\002\000\004\016\121\001\002\000\004" +
    "\004\uffdc\001\002\000\014\006\ufffa\011\ufffa\012\ufffa\016" +
    "\ufffa\040\ufffa\001\002\000\004\036\uffdf\001\002\000\014" +
    "\006\ufff9\011\ufff9\012\ufff9\016\ufff9\040\ufff9\001\002\000" +
    "\014\006\026\011\023\012\021\016\ufffb\040\017\001\002" +
    "\000\012\007\uffe7\010\uffe7\037\uffe7\046\uffe7\001\002\000" +
    "\014\006\ufff8\011\ufff8\012\ufff8\016\ufff8\040\ufff8\001\002" +
    "\000\012\007\031\010\035\037\034\046\033\001\002\000" +
    "\014\005\uffe2\007\uffe2\010\uffe2\037\uffe2\046\uffe2\001\002" +
    "\000\004\005\040\001\002\000\014\005\uffe0\007\uffe0\010" +
    "\uffe0\037\uffe0\046\uffe0\001\002\000\014\005\uffe1\007\uffe1" +
    "\010\uffe1\037\uffe1\046\uffe1\001\002\000\014\005\uffe3\007" +
    "\uffe3\010\uffe3\037\uffe3\046\uffe3\001\002\000\014\005\uffe4" +
    "\007\031\010\035\037\034\046\033\001\002\000\004\005" +
    "\uffe5\001\002\000\004\004\041\001\002\000\014\006\uffe6" +
    "\011\uffe6\012\uffe6\016\uffe6\040\uffe6\001\002\000\004\016" +
    "\ufffc\001\002\000\004\036\045\001\002\000\004\005\066" +
    "\001\002\000\010\005\uffee\036\ufff0\041\uffee\001\002\000" +
    "\006\005\ufff4\041\047\001\002\000\006\004\051\036\052" +
    "\001\002\000\006\005\ufff3\036\ufff2\001\002\000\004\042" +
    "\053\001\002\000\010\005\uffed\035\uffed\036\uffed\001\002" +
    "\000\004\036\uffec\001\002\000\004\036\056\001\002\000" +
    "\004\005\061\001\002\000\006\005\uffe8\036\uffea\001\002" +
    "\000\004\036\056\001\002\000\004\005\uffe9\001\002\000" +
    "\010\005\uffeb\035\uffeb\036\uffeb\001\002\000\004\036\045" +
    "\001\002\000\004\005\ufff1\001\002\000\004\036\045\001" +
    "\002\000\006\005\uffef\041\uffef\001\002\000\004\004\uffde" +
    "\001\002\000\004\004\070\001\002\000\014\006\uffdd\011" +
    "\uffdd\012\uffdd\016\uffdd\040\uffdd\001\002\000\004\004\074" +
    "\001\002\000\006\004\074\005\uffd9\001\002\000\004\005" +
    "\115\001\002\000\006\007\075\036\076\001\002\000\004" +
    "\035\uffd6\001\002\000\004\035\uffd8\001\002\000\004\035" +
    "\101\001\002\000\010\005\uffd3\035\101\041\105\001\002" +
    "\000\004\036\104\001\002\000\004\005\103\001\002\000" +
    "\006\004\uffd7\005\uffd7\001\002\000\012\005\uffd4\035\uffd4" +
    "\036\uffd4\041\uffd4\001\002\000\006\004\051\036\052\001" +
    "\002\000\004\005\uffd2\001\002\000\006\005\uffcf\035\uffd1" +
    "\001\002\000\004\035\101\001\002\000\004\005\uffd0\001" +
    "\002\000\004\035\101\001\002\000\004\005\114\001\002" +
    "\000\006\004\uffd5\005\uffd5\001\002\000\004\004\116\001" +
    "\002\000\014\006\uffdb\011\uffdb\012\uffdb\016\uffdb\040\uffdb" +
    "\001\002\000\004\005\uffda\001\002\000\004\005\243\001" +
    "\002\000\004\036\123\001\002\000\006\020\133\026\132" +
    "\001\002\000\004\017\uffcc\001\002\000\004\017\125\001" +
    "\002\000\004\004\126\001\002\000\004\035\101\001\002" +
    "\000\004\005\130\001\002\000\006\020\uffcb\026\uffcb\001" +
    "\002\000\004\005\uffc7\001\002\000\004\004\235\001\002" +
    "\000\004\004\uffc6\001\002\000\004\005\135\001\002\000" +
    "\006\004\136\005\uffce\001\002\000\004\016\121\001\002" +
    "\000\004\005\uffcd\001\002\000\004\004\142\001\002\000" +
    "\010\004\uffbe\005\uffbe\021\uffbe\001\002\000\012\007\153" +
    "\022\232\023\156\036\155\001\002\000\006\005\uffc2\021" +
    "\uffc2\001\002\000\004\021\146\001\002\000\004\005\uffc5" +
    "\001\002\000\004\004\uffc4\001\002\000\004\004\152\001" +
    "\002\000\004\005\uffc3\001\002\000\004\005\uffa5\001\002" +
    "\000\012\007\153\022\154\023\156\036\155\001\002\000" +
    "\006\035\uffb3\036\uffb3\001\002\000\004\004\176\001\002" +
    "\000\010\005\164\035\uffb5\036\uffb5\001\002\000\004\004" +
    "\uffc0\001\002\000\004\004\161\001\002\000\004\005\162" +
    "\001\002\000\006\007\153\036\155\001\002\000\010\004" +
    "\uffbf\005\uffbf\021\uffbf\001\002\000\006\035\101\036\166" +
    "\001\002\000\010\004\uffb6\005\uffb6\021\uffb6\001\002\000" +
    "\010\005\uffb0\035\uffad\036\uffad\001\002\000\010\005\uffb1" +
    "\035\uffaf\036\uffaf\001\002\000\004\005\170\001\002\000" +
    "\010\004\uffb4\005\uffb4\021\uffb4\001\002\000\006\035\101" +
    "\036\166\001\002\000\004\005\uffae\001\002\000\006\035" +
    "\101\036\166\001\002\000\004\005\uffac\001\002\000\006" +
    "\004\uffa7\005\uffa7\001\002\000\012\007\153\023\156\036" +
    "\155\045\204\001\002\000\006\004\uffa6\005\uffa6\001\002" +
    "\000\006\004\176\005\201\001\002\000\004\005\uffa4\001" +
    "\002\000\006\004\uffa9\005\uffa9\001\002\000\006\004\uffa8" +
    "\005\uffa8\001\002\000\004\004\uffbd\001\002\000\004\004" +
    "\206\001\002\000\012\007\153\022\224\023\156\036\155" +
    "\001\002\000\004\004\uffba\001\002\000\004\004\uffbc\001" +
    "\002\000\004\004\214\001\002\000\004\005\223\001\002" +
    "\000\004\005\uffb8\001\002\000\012\007\153\022\215\023" +
    "\156\036\155\001\002\000\004\004\220\001\002\000\006" +
    "\004\220\005\221\001\002\000\006\004\uffaa\005\uffaa\001" +
    "\002\000\010\007\153\023\156\036\155\001\002\000\004" +
    "\005\uffb7\001\002\000\006\004\uffab\005\uffab\001\002\000" +
    "\006\004\uffbb\005\uffbb\001\002\000\004\004\220\001\002" +
    "\000\006\004\220\005\226\001\002\000\004\004\uffb9\001" +
    "\002\000\006\035\101\036\166\001\002\000\004\005\231" +
    "\001\002\000\010\004\uffb2\005\uffb2\021\uffb2\001\002\000" +
    "\004\004\220\001\002\000\006\004\220\005\234\001\002" +
    "\000\006\005\uffc1\021\uffc1\001\002\000\004\035\uffca\001" +
    "\002\000\004\035\101\001\002\000\004\005\240\001\002" +
    "\000\004\020\uffc9\001\002\000\004\020\133\001\002\000" +
    "\004\005\uffc8\001\002\000\006\002\ufffd\004\ufffd\001\002" +
    "\000\004\036\045\001\002\000\004\005\246\001\002\000" +
    "\004\004\247\001\002\000\014\006\ufff5\011\ufff5\012\ufff5" +
    "\016\ufff5\040\ufff5\001\002\000\004\002\001\001\002\000" +
    "\004\002\uffff\001\002\000\006\002\uffa2\004\253\001\002" +
    "\000\004\013\254\001\002\000\004\004\255\001\002\000" +
    "\004\025\256\001\002\000\004\036\257\001\002\000\004" +
    "\005\260\001\002\000\004\004\261\001\002\000\004\027" +
    "\262\001\002\000\004\036\263\001\002\000\004\005\264" +
    "\001\002\000\004\004\uffa1\001\002\000\004\004\273\001" +
    "\002\000\006\004\uff9b\005\uff9b\001\002\000\006\004\273" +
    "\005\uff9e\001\002\000\006\004\uff9c\005\uff9c\001\002\000" +
    "\006\004\uff9d\005\uff9d\001\002\000\006\004\uff9a\005\uff9a" +
    "\001\002\000\012\030\276\031\301\032\300\044\277\001" +
    "\002\000\004\005\275\001\002\000\006\002\uffa0\004\uffa0" +
    "\001\002\000\004\004\uff97\001\002\000\004\036\uff99\001" +
    "\002\000\004\004\306\001\002\000\004\004\uff95\001\002" +
    "\000\004\004\142\001\002\000\004\005\304\001\002\000" +
    "\006\004\uff94\005\uff94\001\002\000\006\004\306\005\uff92" +
    "\001\002\000\006\033\312\034\311\001\002\000\004\005" +
    "\310\001\002\000\006\004\uff93\005\uff93\001\002\000\004" +
    "\043\316\001\002\000\004\043\313\001\002\000\004\005" +
    "\uff90\001\002\000\004\005\315\001\002\000\006\004\uff8f" +
    "\005\uff8f\001\002\000\004\005\uff8e\001\002\000\004\005" +
    "\320\001\002\000\006\004\uff8d\005\uff8d\001\002\000\004" +
    "\005\uff91\001\002\000\004\036\045\001\002\000\004\005" +
    "\324\001\002\000\006\004\uff98\005\uff98\001\002\000\004" +
    "\004\327\001\002\000\006\004\327\005\uff8c\001\002\000" +
    "\004\036\332\001\002\000\004\005\331\001\002\000\006" +
    "\004\uff96\005\uff96\001\002\000\006\005\333\036\uff89\001" +
    "\002\000\006\004\uff8a\005\uff8a\001\002\000\004\036\045" +
    "\001\002\000\004\005\336\001\002\000\006\004\uff88\005" +
    "\uff88\001\002\000\004\005\uff8b\001\002\000\004\005\uff9f" +
    "\001\002\000\004\002\uffa3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\337\000\006\003\004\004\003\001\001\000\006\043" +
    "\250\044\251\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\013\001\001\000\002\001\001" +
    "\000\016\005\017\006\024\007\021\012\023\017\026\020" +
    "\015\001\001\000\002\001\001\000\004\061\243\001\001" +
    "\000\004\030\117\001\001\000\004\071\070\001\001\000" +
    "\002\001\001\000\004\067\042\001\001\000\002\001\001" +
    "\000\016\005\041\006\024\007\021\012\023\017\026\020" +
    "\015\001\001\000\004\066\027\001\001\000\002\001\001" +
    "\000\006\010\031\011\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\036\011\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\043\015\045\001\001\000\002\001\001\000" +
    "\004\063\063\001\001\000\002\001\001\000\004\016\047" +
    "\001\001\000\004\062\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\064\053\001\001\000\004\014\054" +
    "\001\001\000\002\001\001\000\004\065\056\001\001\000" +
    "\004\014\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\062\015\045\001\001\000\002\001\001\000" +
    "\004\015\064\001\001\000\002\001\001\000\004\070\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\072\022\071\001\001\000\006\021\116\022\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\073\111\001" +
    "\001\000\004\072\076\001\001\000\006\023\101\057\077" +
    "\001\001\000\006\023\105\057\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\106\001\001\000\002\001\001\000\004\074" +
    "\107\001\001\000\006\023\110\057\077\001\001\000\002" +
    "\001\001\000\006\023\112\057\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\121\001" +
    "\001\000\006\032\133\033\130\001\001\000\004\075\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\023" +
    "\126\057\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\100\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\136" +
    "\001\001\000\002\001\001\000\010\036\143\037\142\041" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\144\001\001\000\002\001\001\000" +
    "\004\101\146\001\001\000\010\035\147\037\150\041\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\106\226\001\001\000\012\024\176\025\177" +
    "\037\174\041\140\001\001\000\004\105\162\001\001\000" +
    "\004\102\156\001\001\000\004\041\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\166\057\164\001\001\000\002\001\001\000\004\110\172" +
    "\001\001\000\004\107\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\171\057\164\001\001\000\002" +
    "\001\001\000\006\042\173\057\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\024\202\037\201\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\204" +
    "\001\001\000\010\026\207\037\206\041\140\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\104\210\001\001" +
    "\000\010\027\211\037\212\041\140\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\037\216" +
    "\040\215\041\140\001\001\000\006\037\221\041\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\037\216\040" +
    "\224\041\140\001\001\000\006\037\221\041\140\001\001" +
    "\000\002\001\001\000\006\042\227\057\164\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\216\040\232" +
    "\041\140\001\001\000\006\037\221\041\140\001\001\000" +
    "\002\001\001\000\004\076\235\001\001\000\006\023\236" +
    "\057\077\001\001\000\002\001\001\000\004\077\240\001" +
    "\001\000\004\033\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\244\015\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\043\340\044\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\111\264" +
    "\001\001\000\016\045\273\046\266\047\270\050\267\053" +
    "\265\054\271\001\001\000\002\001\001\000\016\045\337" +
    "\046\266\047\270\050\267\053\265\054\271\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\113" +
    "\324\001\001\000\004\112\321\001\001\000\006\055\306" +
    "\056\304\001\001\000\004\114\301\001\001\000\010\036" +
    "\302\037\142\041\140\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\055\320\056\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\115\313\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\116\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\322\015\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\051\325\052\327\001\001\000\006\051\325\052" +
    "\336\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\117\333\001\001\000\002\001\001\000" +
    "\004\015\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$PDDLparser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$PDDLparser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$PDDLparser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	CUP$PDDLparser$actions.mssgs = new ArrayList();
	CUP$PDDLparser$actions.position = NONE;
	CUP$PDDLparser$actions.lastpos = NONE;
	CUP$PDDLparser$actions.topConstruct = NONE;

    }



	// NOTE MUST MATCH ACTION DECLARATIONS
        static final int NONE = -1;
	static final int DOMSPEC = 0;
	static final int PREQS = 1;
	static final int PCONST = 2;
	static final int PTYPEVAR = 3;
	static final int PPREDS = 4;
	static final int PPRED = 5;
	static final int PTYPES = 6;
	static final int PACTION = 7;
	static final int PPROBLEM = 8;	
	static final int PPARAM = 9;
	static final int PPRE = 10;
	static final int PVARS = 11;
	static final int PEFFECT = 12;
	static final int PPROBOBJ = 13;
	static final int PPROBINIT = 14;
	static final int PPROBGOAL = 15;
	static final int CONDEFFT = 16;
	static final int CONDPOST = 17;

	static Symbol res;
	static List wmssgs;
	static pddlDomain pTree;

	public static void main(String args[]) throws Exception {
	    try {
		res = new PDDLparser(new pddlYylex(System.in)).parse();
                pTree = (pddlDomain)(res.value);
		pTree.pddlPrintComponent
		    (new PrintWriter(System.out,true)
			,0,false);
		Utility.debugPrintln(";; End of " + pTree.getName());
	    }catch(Exception e){
		Utility.debugPrintln("Cannot recover Goodbye.");
		wmssgs = getWarnMssgs();
		ListIterator li = wmssgs.listIterator();
		while( li.hasNext()) {
			Utility.debugPrintln((String)li.next());
		}
	    }
	}

	public void syntax_error(Symbol cur_symbol) {
		CUP$PDDLparser$actions.mssgs.add(
			new String("PDDL Syntax error :: "));
	}
	

	public void report_error(String message,Object info) {
	    String mOut = new String(message +
	    		"\nTrying to complete " + 
			decodePosition(CUP$PDDLparser$actions.position) +
			" specification\n");
	    if (info instanceof Symbol)
		if (((Symbol)info).left != -1)
		    mOut = mOut + "At symbol " 
				       + ((Symbol)info).value
				       + " line " 
                                       + ((Symbol)info).right 
				       + " character position " 
				       + ((Symbol)info).left 
				       + " of input.";
		else mOut = "";
	    else if (info instanceof Integer)
		mOut = new String(message + " On line " + info);
	    else
		mOut = "NO HELP available ";
	    CUP$PDDLparser$actions.mssgs.add(mOut);
	}

	public static List getWarnMssgs() {
		return CUP$PDDLparser$actions.getWarnMssgs();
	}

	public String decodePosition(int position) {
	    String m;
	    switch (position) {
	    case NONE:
		m = "Outside Any PDDL component";break;
	    case DOMSPEC:
		m = "Domain definition";break;
	    case PREQS:
		m = "Domain requirements";break;
	    case PCONST:
		m = "Domain constants";break;
	    case PTYPEVAR:
		m = "Types for a typed variable/name";break;
	    case PPREDS:
		m = "Predicates";break;
	    case PPRED:
		m = "Looking for a predicate";break;
	    case PTYPES:
		m = "Domain Types";break;
	    case PACTION:
		m = "Actions";break;
	    case PPROBLEM:
		m = "Problem Description";break;
	    case PPARAM:
		m = "Action Parameters";break;
	    case PPRE:
		m = "Action Precondition";break;
	    case PVARS:
	      m = "Action variables";break;
	    case PEFFECT:
	      m = "Action effect";break;
	    case CONDEFFT:
	    case CONDPOST:
	        m = "Conditional Effect";break;
	    case PPROBOBJ:
		m = "Problem Objects Description";break;
	    case PPROBINIT:
		m = "Problem initial position";break;
	    case PPROBGOAL:
		m = "Problem goal description";break;
	    default:
		m = "Unknown";break;
	    }
	    return m;
        }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$PDDLparser$actions {


	// NOTE MUST MATCH PARSER DECLARATIONS
        static final int NONE = -1;
	static final int DOMSPEC = 0;
	static final int PREQS = 1;
	static final int PCONST = 2;
	static final int PTYPEVAR = 3;
	static final int PPREDS = 4;	
	static final int PPRED = 5;
	static final int PTYPES = 6;
	static final int PACTION = 7;
	static final int PPROBLEM = 8;
	static final int PPARAM = 9;
	static final int PPRE = 10;
	static final int PVARS = 11;
	static final int PEFFECT = 12;
	static final int PPROBOBJ = 13;
	static final int PPROBINIT = 14;
	static final int PPROBGOAL = 15;
	static final int CONDEFFT = 16;
	static final int CONDPOST = 17;

	static final String SERROR[] = {
	    "Only one domain name allowed per spec"
	};

	static final String WARN [] = {
	    "Sort specifications not contigous in file"
	};

	pddlDomain curDomain = new pddlDomain();
	List curList = null;
	List curTVList = null; 
	pddlTypedVar curTV;
	pddlPredicate curPred;
	pddlOperator curOp;
	pddlTask curTask;
	pddlCondEffect curCond;
	ListIterator li;
	boolean negPred = false;

	public static int	position = NONE;
	public static int       lastpos;
	public static int	topConstruct = NONE;
	public static int	opElement = NONE;
	public static int	probElement = NONE;

	public static List mssgs = new ArrayList();

	private static void displayWarning(int inx) {
	    mssgs.add("WARNING " + WARN[inx] + ".");
	}

	public static List getWarnMssgs () {
		return mssgs;
	}


  private final PDDLparser parser;

  /** Constructor */
  CUP$PDDLparser$actions(PDDLparser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$PDDLparser$do_action(
    int                        CUP$PDDLparser$act_num,
    java_cup.runtime.lr_parser CUP$PDDLparser$parser,
    java.util.Stack            CUP$PDDLparser$stack,
    int                        CUP$PDDLparser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$PDDLparser$result;

      /* select the action based on the action number */
      switch (CUP$PDDLparser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // literal ::= RBRA NAME NT$31 nameList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$31
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(39/*literal*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$31 ::= 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

	       curPred = curTask.addInit((String)n2);
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(77/*NT$31*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // literal ::= RBRA NAME RKET 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		
	       curPred = curTask.addInit((String)n1);
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(39/*literal*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // literals ::= literal literals 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(40/*literals*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // literals ::= literal 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(40/*literals*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // pLength ::= RBRA PARALLEL INTEGER NT$30 RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$30
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int plenleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int plenright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		Object plen = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(44/*pLength*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // NT$30 ::= 
            {
              Object RESULT = null;
		int plenleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int plenright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object plen = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

	          curTask.setParallelLength(Integer.parseInt((String) plen));
	       
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(76/*NT$30*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // pLength ::= RBRA SERIAL INTEGER NT$29 RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$29
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int slenleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int slenright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		Object slen = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(44/*pLength*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // NT$29 ::= 
            {
              Object RESULT = null;
		int slenleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int slenright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object slen = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

	          curTask.setSerialLength(Integer.parseInt((String) slen));
	       
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(75/*NT$29*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // final ::= pLength final 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(43/*final*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // final ::= pLength 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(43/*final*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // lenSec ::= RBRA LENGTH final RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(42/*lenSec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // goalSpec ::= RBRA GOALS NT$28 goalDesc RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$28
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(41/*goalSpec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$28 ::= 
            {
              Object RESULT = null;

		lastpos = position;
		position = PPROBGOAL;
		probElement = PPROBGOAL;
               
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(74/*NT$28*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // initSpec ::= RBRA INITIALLY NT$27 literals RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$27
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(38/*initSpec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$27 ::= 
            {
              Object RESULT = null;

		lastpos = position;
		position = PPROBINIT;
		probElement = PPROBINIT;
               
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(73/*NT$27*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // objSpec ::= RBRA OBJECTS NT$26 typeList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$26
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		
		 if (curList != null) {
		  li = curList.listIterator();
		  while (li.hasNext()) {
		    curTask.addObject((pddlTypedVar)li.next());
		  }
		  curList = null;
		}
	       
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(37/*objSpec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // NT$26 ::= 
            {
              Object RESULT = null;

		curList = new ArrayList();
		lastpos = DOMSPEC;
		position = PPROBOBJ;
		probElement = PPROBOBJ;

               
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(72/*NT$26*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // probSec ::= lenSec 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(36/*probSec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // probSec ::= goalSpec 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(36/*probSec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // probSec ::= initSpec 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(36/*probSec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // probSec ::= objSpec 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(36/*probSec*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // probBody ::= probSec 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(35/*probBody*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // probBody ::= probSec probBody 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(35/*probBody*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // problem ::= RBRA DEFINE RBRA PROBLEM NAME RKET RBRA FORDOMAIN NAME RKET NT$25 probBody RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$25
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-8)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-8)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-8)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(34/*problem*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-12)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$25 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

	       topConstruct = PPROBLEM;
	       opElement = NONE; // Disable operator actions
	       curTask = curDomain.addTask((String)n1,(String)n2);
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(71/*NT$25*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // problems ::= problem 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(33/*problems*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // problems ::= problem problems 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(33/*problems*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // effDesc ::= RBRA AND effList RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(27/*effDesc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // effDesc ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(27/*effDesc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // effList ::= ceffect 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(19/*effList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // effList ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(19/*effList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // effList ::= effList ceffect 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(19/*effList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // effList ::= effList atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(19/*effList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // atomList ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(30/*atomList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // atomList ::= atomList atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(30/*atomList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // varNameList ::= var NT$24 varNameList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$24
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(32/*varNameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$24 ::= 
            {
              Object RESULT = null;
		int v2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		String v2 = (String)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

		 curPred.addVar(new pddlTypedVar((String)v2));
                
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(70/*NT$24*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // varNameList ::= NAME NT$23 varNameList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$23
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(32/*varNameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$23 ::= 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
 
		 curPred.addVar(new pddlTypedVar((String)n2));
                
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(69/*NT$23*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // varNameList ::= var 
            {
              Object RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		String v1 = (String)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 
		 curPred.addVar(new pddlTypedVar((String)v1));
                
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(32/*varNameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // varNameList ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		
		 curPred.addVar(new pddlTypedVar((String)n1));
                
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(32/*varNameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // predicate ::= RBRA EQ NT$22 varNameList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$22
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(31/*predicate*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$22 ::= 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

		if (opElement == PPRE) {
		 if (negPred) {
		   curPred = curOp.addPreCond((String)e1,true);
		 } else {
		   curPred = curOp.addPreCond((String)e1,false);
		 }
		 negPred = false;
	       } else if (opElement == PEFFECT && position == CONDEFFT) {
		   if (negPred) {
		   	curPred = curCond.addPrecondition((String)e1,true);
		    } else {
		        curPred = curCond.addPrecondition((String)e1,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT && position == CONDPOST) {
		   if (negPred) {
		   	curPred = curCond.addPostcondition((String)e1,true);
		    } else {
		        curPred = curCond.addPostcondition((String)e1,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT) {
		 if (negPred) {
		   curPred = curOp.addEffect((String)e1,true);
		 } else {
		   curPred = curOp.addEffect((String)e1,false);
		 }
		 negPred = false;
	       } else if (probElement == PPROBGOAL) {
		 if (negPred) {
		   curPred = curTask.addGoal((String)e1,true);
		 } else {
		   curPred = curTask.addGoal((String)e1,false);
		 }
		 negPred = false; 
	       }
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(68/*NT$22*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // predicate ::= RBRA NAME NT$21 varNameList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$21
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(31/*predicate*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$21 ::= 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

		if (opElement == PPRE) {
		 if (negPred) {
		   curPred = curOp.addPreCond((String)n2,true);
		 } else {
		   curPred = curOp.addPreCond((String)n2,false);
		 }
		 negPred = false;
	       } else if (opElement == PEFFECT && position == CONDEFFT) {
		   if (negPred) {
		   	curPred = curCond.addPrecondition((String)n2,true);
		    } else {
		        curPred = curCond.addPrecondition((String)n2,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT && position == CONDPOST) {
		   if (negPred) {
		   	curPred = curCond.addPostcondition((String)n2,true);
		    } else {
		        curPred = curCond.addPostcondition((String)n2,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT) {
		 if (negPred) {
		   curPred = curOp.addEffect((String)n2,true);
		 } else {
		   curPred = curOp.addEffect((String)n2,false);
		 }
		 negPred = false;
	       } else if (probElement == PPROBGOAL) {
		 if (negPred) {
		   curPred = curTask.addGoal((String)n2,true);
		 } else {
		   curPred = curTask.addGoal((String)n2,false);
		 }
		 negPred = false; 
	       }
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(67/*NT$21*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // predicate ::= RBRA NAME RKET 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		
	       if (opElement == PPRE) {
		 if (negPred) { 
		   curPred = curOp.addPreCond((String)n1,true);
		 } else {
		   curPred = curOp.addPreCond((String)n1,false);
		 }
		 negPred = false;
	       } else if (opElement == PEFFECT && position == CONDEFFT) {
		   if (negPred) {
		   	curPred = curCond.addPrecondition((String)n1,true);
		    } else {
		        curPred = curCond.addPrecondition((String)n1,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT && position == CONDPOST) {
		   if (negPred) {
		   	curPred = curCond.addPostcondition((String)n1,true);
		    } else {
		        curPred = curCond.addPostcondition((String)n1,false);
		    }
		    negPred = false;
	       } else if (opElement == PEFFECT) {
		 if (negPred) {
		   curPred = curOp.addEffect((String)n1,true);
		 } else {
		   curPred = curOp.addEffect((String)n1,false);
		 }
		 negPred = false;
	       } else if (probElement == PPROBGOAL) {
		 if (negPred) {
		   curPred = curTask.addGoal((String)n1,true);
		 } else {
		   curPred = curTask.addGoal((String)n1,false);
		 }
		 negPred = false;
	       }
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(31/*predicate*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ceffectpost ::= RBRA AND atomList RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(21/*ceffectpost*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ceffectpost ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(21/*ceffectpost*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ceffectpre ::= RBRA AND atomList RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(20/*ceffectpre*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ceffectpre ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(20/*ceffectpre*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ceffect ::= RBRA WHEN NT$19 ceffectpre NT$20 ceffectpost RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$19
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;
              // propagate RESULT from NT$20
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		
		curCond = null;
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(18/*ceffect*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$20 ::= 
            {
              Object RESULT = null;

	        lastpos = position;
	        position = CONDPOST;
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(66/*NT$20*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$19 ::= 
            {
              Object RESULT = null;

		lastpos = position;
	        position = CONDEFFT;
		curCond = curOp.addCondEffect();
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(65/*NT$19*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // atom ::= predicate 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(29/*atom*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // atom ::= RBRA DEL NT$18 predicate RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$18
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(29/*atom*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$18 ::= 
            {
              Object RESULT = null;

	       negPred = true;
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(64/*NT$18*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // goalDesc ::= RBRA AND atomList RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(28/*goalDesc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // goalDesc ::= atom 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(28/*goalDesc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // aBody3 ::= EFFECTS NT$17 effDesc 
            {
              Object RESULT = null;
              // propagate RESULT from NT$17
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(26/*aBody3*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NT$17 ::= 
            {
              Object RESULT = null;
 
	       opElement = PEFFECT;
	       negPred = false;
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(63/*NT$17*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // aBody2 ::= PRE NT$16 goalDesc aBody3 
            {
              Object RESULT = null;
              // propagate RESULT from NT$16
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(25/*aBody2*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$16 ::= 
            {
              Object RESULT = null;

	       opElement = PPRE;
	       negPred = false;
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(62/*NT$16*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // aBody ::= aBody2 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(24/*aBody*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // aBody ::= VARS RBRA NT$14 typeVList RKET NT$15 aBody2 
            {
              Object RESULT = null;
              // propagate RESULT from NT$14
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;
              // propagate RESULT from NT$15
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(24/*aBody*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-6)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$15 ::= 
            {
              Object RESULT = null;

		if (curList != null) {
		  li = curList.listIterator();
		  while (li.hasNext()) {
		    curOp.addVar((pddlTypedVar)li.next());
		  }
		  curList = null;
		}
	       
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(61/*NT$15*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$14 ::= 
            {
              Object RESULT = null;

	       curList = new ArrayList();
	       opElement = PVARS;
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(60/*NT$14*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // aDesc ::= NAME NT$13 ARGS RBRA typeVList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$13
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).value;
		
		if (curList != null) {
		  li = curList.listIterator();
		  while (li.hasNext()) {
		    curOp.addParam((pddlTypedVar)li.next());
		  }
		  curList = null;
		}
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(23/*aDesc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$13 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

	       topConstruct = PACTION;
	       curOp = curDomain.addOP((String)n1);
 	       curList = new ArrayList();
	       lastpos = position;
	       position = PACTION;
	       opElement = PPARAM;
              
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(59/*NT$13*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // the_actions ::= ACTION aDesc aBody RKET RBRA the_actions 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(22/*the_actions*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // the_actions ::= ACTION aDesc aBody RKET 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(22/*the_actions*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // typeVList ::= var MINUS type 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(17/*typeVList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // typeVList ::= var MINUS type NT$12 typeVList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(17/*typeVList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NT$12 ::= 
            {
              Object RESULT = null;

		curList = new ArrayList();
             
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(58/*NT$12*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // typeVList ::= var typeVList 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(17/*typeVList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // typeVList ::= var 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(17/*typeVList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // var ::= Q NAME 
            {
              String RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		
		if (topConstruct == PPREDS || opElement == PPARAM
		          || opElement == PVARS) {
			curTV = new pddlTypedVar("?" + (String)n1);
			curList.add(curTV);
			lastpos = position;
			position = PTYPEVAR;
		} 
	      RESULT = new String("?" + (String)n1);
	     
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(45/*var*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pred ::= RBRA EQ NT$11 typeVList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;
		
		 if (curList != null && topConstruct == PPREDS) {
		     li = curList.listIterator();
		     while(li.hasNext()) {
			 curPred.addVar((pddlTypedVar)li.next());
		     }
		     curList = null;
		 }
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(16/*pred*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$11 ::= 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

		curPred = new pddlPredicate((String)e1);
		curList = new ArrayList();
		if (topConstruct == PPREDS) {
			curDomain.addPredicate(curPred);
			lastpos = position;
			position = PPRED;
		}
	     
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(57/*NT$11*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pred ::= RBRA NAME NT$10 typeVList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;
		
		 if (curList != null && topConstruct == PPREDS) {
		     li = curList.listIterator();
		     while(li.hasNext()) {
			 curPred.addVar((pddlTypedVar)li.next());
		     }
		     curList = null;
		 }
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(16/*pred*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$10 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

		curPred = new pddlPredicate((String)n1);
		curList = new ArrayList();
		if (topConstruct == PPREDS) {
			curDomain.addPredicate(curPred);
			lastpos = position;
			position = PPRED;
		}
	     
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(56/*NT$10*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // predList ::= pred 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(15/*predList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // predList ::= pred predList 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(15/*predList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // the_predicates ::= PREDS NT$9 predList RKET RBRA 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(14/*the_predicates*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$9 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		      position = PPREDS;
		      topConstruct = PPREDS;
                   
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(55/*NT$9*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // the_constants ::= CONSTANTS NT$7 typeList RKET NT$8 RBRA 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(13/*the_constants*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-5)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$8 ::= 
            {
              Object RESULT = null;

		    if (curList != null) {
		      li = curList.listIterator();
		      while (li.hasNext()) {
			curDomain.addConstant((pddlTypedVar)li.next());
		      }
		      curList = null;
		    }
		    lastpos = position;
		    position = DOMSPEC;
                  
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(54/*NT$8*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$7 ::= 
            {
              Object RESULT = null;
 lastpos = position;
		     position = PCONST;
		     topConstruct = PCONST;
		     curList = new ArrayList(); 
                     // Store list of names of same type
                  
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(53/*NT$7*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // req ::= CONDEFF 
            {
              Object RESULT = null;
		int celeft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int ceright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object ce = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 curDomain.addRequirement((String)ce); 
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(7/*req*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // req ::= TYPING 
            {
              Object RESULT = null;
		int tyleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object ty = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 curDomain.addRequirement((String)ty); 
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(7/*req*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // req ::= EQ 
            {
              Object RESULT = null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 curDomain.addRequirement((String)eq); 
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(7/*req*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // req ::= STRIPS 
            {
              Object RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 curDomain.addRequirement((String)st); 
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(7/*req*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reqs ::= req 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(6/*reqs*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // reqs ::= req reqs 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(6/*reqs*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // optreqs ::= REQS NT$6 reqs RKET RBRA 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(5/*optreqs*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$6 ::= 
            {
              Object RESULT = null;
 lastpos = position;
	        position = PREQS;
		topConstruct = PREQS;
             
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(52/*NT$6*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typesList ::= NAME 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		
		  if (curList != null) {
		    switch (topConstruct) {
		    case PCONST:
		    case PPREDS:
		    case PACTION:
		        // Many variables to be typed
		        li = curList.listIterator();
		        while (li.hasNext()) {
		            ((pddlTypedVar)li.next()).addType((String)n2);
		        }
		    break;		    
		    case PPROBLEM:
		    if (probElement == PPROBOBJ) {
			li = curList.listIterator();
		        while (li.hasNext()) {
		            ((pddlTypedVar)li.next()).addType((String)n2);
		        }
		    }
		    default: break;
		    }
		}
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(10/*typesList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typesList ::= NAME NT$5 typesList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(10/*typesList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$5 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;

	       	if (curList != null) {
		    switch (topConstruct) {
		    case PCONST:
		    case PPREDS:
		    case PACTION:
		        // Many variables to be typed
		        li = curList.listIterator();
		        while (li.hasNext()) {
		            ((pddlTypedVar)li.next()).addType((String)n1);
		        }
		    break;
		    case PPROBLEM:
		    if (probElement == PPROBOBJ) {
			li = curList.listIterator();
		        while (li.hasNext()) {
		            ((pddlTypedVar)li.next()).addType((String)n1);
		        }
		    }
		    default: break;
		    }
		}
	      
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(51/*NT$5*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= RBRA EITHER NT$4 typesList RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;
		
	      if (curList != null && topConstruct == PCONST) {
		li = curList.listIterator();
		while (li.hasNext()) {
		  curDomain.addConstant((pddlTypedVar)li.next());
		}
		curList = null;
	       	} else if (curList != null && topConstruct == PPREDS) {
	       	    li = curList.listIterator();
	       	    while (li.hasNext()) {
	            	curPred.addVar((pddlTypedVar)li.next());
	       	    }
		    curList = null;
	       	} else if (topConstruct == PACTION && opElement == PPARAM) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      curOp.addParam((pddlTypedVar)li.next());
  	          }
 		  curList = null;
		} else if (topConstruct == PACTION && opElement == PVARS) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      curOp.addVar((pddlTypedVar)li.next());
  	          }
 		  curList = null;
		} else if (topConstruct == PPROBLEM && probElement == PPROBOBJ) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      curTask.addObject((pddlTypedVar)li.next());
  	          }
 		  curList = null;
		} 
	       	position = lastpos;
	       	lastpos = DOMSPEC;
            
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$4 ::= 
            {
              Object RESULT = null;
 lastpos = position;
               position = PTYPEVAR;
            
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(50/*NT$4*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= NAME 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		
	      if (topConstruct == PCONST) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      pddlTypedVar cur = (pddlTypedVar)li.next();
		      cur.addType((String)n1);
		      curDomain.addConstant(cur);
  	          }
 		  curList = null;
	      } else if (topConstruct == PPREDS){
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      pddlTypedVar cur = (pddlTypedVar)li.next();
		      cur.addType((String)n1);
		      curPred.addVar(cur);
  	          }
 		  curList = null;
	      } else if (topConstruct == PACTION && opElement == PPARAM) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      pddlTypedVar cur = (pddlTypedVar)li.next();
		      cur.addType((String)n1);
		      curOp.addParam(cur);
  	          }
 		  curList = null;
	      } else if (topConstruct == PACTION && opElement == PVARS) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      pddlTypedVar cur = (pddlTypedVar)li.next();
		      cur.addType((String)n1);
		      curOp.addVar(cur);
  	          }
 		  curList = null;
	      } else if (topConstruct == PPROBLEM && probElement == PPROBOBJ) {
	          li = curList.listIterator();
	          while (li.hasNext()) {
		      pddlTypedVar cur = (pddlTypedVar)li.next();
		      cur.addType((String)n1);
		      curTask.addObject(cur);
  	          }
 		  curList = null;
	      }

             position = lastpos;
	     lastpos = DOMSPEC;
            
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // nameList ::= NAME 
            {
              Object RESULT = null;
		int n2left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
		 if (curList != null && 
		    (topConstruct == PREQS || topConstruct == PTYPES))
                    curList.add((String)n2);
		else if (curList != null && topConstruct == PCONST)
	          curList.add(new pddlTypedVar((String)n2));
	        else if (curList != null && topConstruct == PPROBLEM
                                         && probElement == PPROBOBJ)
		    curList.add(new pddlTypedVar((String)n2));
	      else if (topConstruct == PPROBLEM && probElement == PPROBINIT)
	            curPred.addVar(new pddlTypedVar((String)n2));
	     
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(11/*nameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // nameList ::= NAME NT$3 nameList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(11/*nameList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              Object RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).value;
if (curList != null && 
		    (topConstruct == PREQS || topConstruct == PTYPES))
		    curList.add((String)n1);
	       else if (curList != null && topConstruct == PCONST)
		    curList.add(new pddlTypedVar((String)n1));
	       else if (curList != null && topConstruct == PPROBLEM
			 && probElement == PPROBOBJ)
	            curList.add(new pddlTypedVar((String)n1));
	       else if (topConstruct == PPROBLEM && probElement == PPROBINIT)
	            curPred.addVar(new pddlTypedVar((String)n1));
             
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(49/*NT$3*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typeList ::= nameList MINUS type NT$2 typeList 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(9/*typeList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              Object RESULT = null;

		curList = new ArrayList();
             
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(48/*NT$2*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // typeList ::= nameList MINUS type 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(9/*typeList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-2)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // typeList ::= nameList 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(9/*typeList*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // types ::= TYPES NT$1 typeList RKET RBRA 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-3)).value;
		 curList = null; 
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(8/*types*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT = null;
 
               topConstruct = PTYPES;
	       curList = curDomain.getPDDLTypeList();
            
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(47/*NT$1*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // section ::= the_predicates 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(4/*section*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // section ::= the_constants 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(4/*section*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // section ::= types 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(4/*section*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // section ::= optreqs 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(4/*section*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // defsections ::= section 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(3/*defsections*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // defsections ::= section defsections 
            {
              Object RESULT = null;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(3/*defsections*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // domain_desc ::= RBRA DEFINE RBRA DOMAIN NAME RKET NT$0 RBRA defsections the_actions RKET 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-4)).value;
		int dnleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-6)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-6)).right;
		Object dn = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-6)).value;

              CUP$PDDLparser$result = new java_cup.runtime.Symbol(2/*domain_desc*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-10)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT = null;
		int dnleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left;
		int dnright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).right;
		Object dn = (Object)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
 
		   lastpos = position;
		   position = DOMSPEC;
		   topConstruct = DOMSPEC;
                   curDomain.setName(dn.toString()); 
		
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(46/*NT$0*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definition ::= domain_desc problems 
            {
              pddlDomain RESULT = null;
		 
	          RESULT = curDomain;
               
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // definition ::= domain_desc 
            {
              pddlDomain RESULT = null;
		
                  RESULT = curDomain;
	       
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(1/*definition*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          return CUP$PDDLparser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= definition EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).right;
		pddlDomain start_val = (pddlDomain)((java_cup.runtime.Symbol) CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).value;
		RESULT = start_val;
              CUP$PDDLparser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-1)).left, ((java_cup.runtime.Symbol)CUP$PDDLparser$stack.elementAt(CUP$PDDLparser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$PDDLparser$parser.done_parsing();
          return CUP$PDDLparser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

