<html>
<body>

<p align="center">
<img src="gipo_gear.gif"
width="200" height="150">
</p>

<p>
<h1 align="center">GIPO Domain Model</h1>
</p>

<p>
<h2 align="center">Domain Details</h2>
</p>

<table width="90%">
<tr>
  <td align="center"><b>Author:</b> Mr. J. Burns
                     </td>
  <td align="center"><b>Name:</b> Toaster World
                     </td>
  <td align="center"><b>Favourite:</b> no
                     </td>
</tr>
</table>

<p>
<h2 align="center">Index</h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="#C1">
		     Life History</a></td>
  <td align="center"><a href="#C2">
		     Diagram Nodes' Properties and Constraints</a></td>
  <td align="center"><a href="#C3">
                     OCL Domain Plain Text</a></td>
  <td align="center"><a href="#C4">
		     PDDL Domain Plain Text</a></td>
  <td align="center"><a href="#C5">
		     Files Download Links</a></td>
</tr>
</table>

<p>
<h2 align="center"><a name="C1">Life History</a></h2>
</p>

<p align="center">
<img src="toasterworldlh.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C2">Diagram Nodes' Properties and Constraints</a></h2>
<h2 align="center">(alphabetical order)</a></h2>
</p>

<p align="center">
<img src="toasterworldp&c.jpg"
width="640" height="480">
</p>

<p align="center">
<img src="toasterworldp&c2.jpg"
width="640" height="480">
</p>

<p align="center">
<img src="toasterworldp&c3.jpg"
width="640" height="480">
</p>

<p>
<h2 align="center"><a name="C3">OCL Domain Plain Text</a></h2>
</p>

<p>
<pre>
/**
 *  All rights reserved. Use of this software is permitted for non-commercial
 *  research purposes, and it may be copied only for that use.  All copies must
 *  include this copyright message.  This software is made available AS IS, and
 *  neither the GIPO team nor the University of Huddersfield make any warranty
 *  about the software or its performance.
 *
 *  Automatically generated OCL Domain from  GIPO Version 3.0
 *
 *  Author: Bhonda
 *  Institution: University of Huddersfield
 *  Date created: Wed Dec 13 11:42:46 GMT 2006
 *  Date last modified: 2006/12/15 at 04:26:22 AM GMT
 *  Description:
 *    
 * Object Life History : toasterWorld.gfx
 */

domain_name(nonetw).

% Sorts
sorts(primitive_sorts,[plates,toaster,item,loc,spreads,kitchenware]).

% Objects
objects(plates,[bigPlate,smallPlate]).
objects(item,[bread,pita,crumpet,nullItem]).
objects(loc,[fridge,side,toaster,servePlate]).
objects(spreads,[butter,marmite,honey]).
objects(kitchenware,[smallKnife,bigKnife]).
objects(toaster,[blueToaster]).

% Predicates
predicates([
    cleanPlate(plates),
    dirtyPlate(plates),
    pluggedIn(toaster),
    notPluggedIn(toaster),
    isCold(item),
    location(item,loc),
    isToasted(item),
    isMade(item),
    inJar(spreads),
    item(spreads,item),
    onToast(spreads),
    clean(kitchenware),
    dirty(kitchenware),
    next(loc,loc)]).

% Object Class Definitions
substate_classes(plates,Plates,[
    [cleanPlate(Plates)],
    [dirtyPlate(Plates)]]).
substate_classes(toaster,Toaster,[
    [pluggedIn(Toaster)],
    [notPluggedIn(Toaster)]]).
substate_classes(item,Item,[
    [isCold(Item),location(Item,Loc)],
    [isToasted(Item),location(Item,Loc)],
    [isMade(Item),location(Item,Loc)]]).
substate_classes(spreads,Spreads,[
    [inJar(Spreads),item(Spreads,Item)],
    [onToast(Spreads),item(Spreads,Item)]]).
substate_classes(kitchenware,Kitchenware,[
    [clean(Kitchenware)],
    [dirty(Kitchenware)]]).

% Atomic Invariants
atomic_invariants([
    next(fridge,side),
    next(side,toaster),
    next(toaster,side),
    next(side,servePlate),
    next(servePlate,side)]).

% Implied Invariants

% Inconsistent Constraints

% Operators
operator(wash(Kitchenware),
    % prevail
    [],
    % necessary
    [     sc(kitchenware,Kitchenware,[dirty(Kitchenware)]=>[clean(Kitchenware)])],
    % conditional
    []).
operator(use(Item,Kitchenware,Spreads),
    % prevail
    [],
    % necessary
    [     sc(item,Item,[isToasted(Item),location(Item,side)]=>[isToasted(Item),location(Item,side)]),
     sc(kitchenware,Kitchenware,[clean(Kitchenware)]=>[dirty(Kitchenware)]),
     sc(spreads,Spreads,[inJar(Spreads),item(Spreads,nullItem)]=>[onToast(Spreads),item(Spreads,Item)])],
    % conditional
    []).
operator(toast(Toaster,Item),
    % prevail
    [     se(toaster,Toaster,[pluggedIn(Toaster)])],
    % necessary
    [     sc(item,Item,[isCold(Item),location(Item,toaster)]=>[isToasted(Item),location(Item,toaster)])],
    % conditional
    []).
operator(cleanThePlate(Plates),
    % prevail
    [],
    % necessary
    [     sc(plates,Plates,[dirtyPlate(Plates)]=>[cleanPlate(Plates)])],
    % conditional
    []).
operator(plugIn(Toaster),
    % prevail
    [],
    % necessary
    [     sc(toaster,Toaster,[notPluggedIn(Toaster)]=>[pluggedIn(Toaster)])],
    % conditional
    []).
operator(unplug(Toaster),
    % prevail
    [],
    % necessary
    [     sc(toaster,Toaster,[pluggedIn(Toaster)]=>[notPluggedIn(Toaster)])],
    % conditional
    []).
operator(serve(Plates,LocA,LocB,Item),
    % prevail
    [],
    % necessary
    [     sc(plates,Plates,[cleanPlate(Plates),next(LocA,LocB)]=>[dirtyPlate(Plates)]),
     sc(item,Item,[isToasted(Item),location(Item,LocA),next(LocA,LocB)]=>[isMade(Item),location(Item,LocB)])],
    % conditional
    []).
operator(move(Item,LocA,LocB),
    % prevail
    [],
    % necessary
    [     sc(item,Item,[isCold(Item),location(Item,LocA),next(LocA,LocB)]=>[isCold(Item),location(Item,LocB)])],
    % conditional
    []).
operator(moveHot(Item,LocA,LocB),
    % prevail
    [],
    % necessary
    [     sc(item,Item,[isToasted(Item),location(Item,LocA),next(LocA,LocB)]=>[isToasted(Item),location(Item,LocB)])],
    % conditional
    []).

% Methods

% Domain Tasks
planner_task(1,
    % Goals
    [
     se(item,bread,[isCold(bread),location(bread,toaster)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[pluggedIn(blueToaster)])]).
planner_task(2,
    % Goals
    [
     se(item,bread,[isToasted(bread),location(bread,side)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[pluggedIn(blueToaster)])]).
planner_task(3,
    % Goals
    [
     se(item,pita,[isToasted(pita),location(pita,side)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(4,
    % Goals
    [
     se(item,crumpet,[isToasted(crumpet),location(crumpet,side)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(5,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(plates,bigPlate,[dirtyPlate(bigPlate)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(6,
    % Goals
    [
     se(item,pita,[isMade(pita),location(pita,servePlate)]),
     se(plates,smallPlate,[dirtyPlate(smallPlate)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[pluggedIn(blueToaster)])]).
planner_task(7,
    % Goals
    [
     se(item,crumpet,[isMade(crumpet),location(crumpet,servePlate)]),
     se(plates,smallPlate,[dirtyPlate(smallPlate)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[pluggedIn(blueToaster)])]).
planner_task(8,
    % Goals
    [
     se(kitchenware,smallKnife,[clean(smallKnife)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(9,
    % Goals
    [
     se(kitchenware,bigKnife,[clean(bigKnife)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(10,
    % Goals
    [
     se(plates,bigPlate,[cleanPlate(bigPlate)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(11,
    % Goals
    [
     se(plates,smallPlate,[cleanPlate(smallPlate)])],
    % INIT States
    [
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,side)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)]),
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(12,
    % Goals
    [
     se(item,pita,[isToasted(pita),location(pita,side)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(13,
    % Goals
    [
     se(item,crumpet,[isToasted(crumpet),location(crumpet,side)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)]),
     ss(item,crumpet,[isToasted(crumpet),location(crumpet,side)])]).
planner_task(14,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(spreads,marmite,[onToast(marmite),item(marmite,bread)]),
     se(item,pita,[isMade(pita),location(pita,servePlate)]),
     se(spreads,honey,[onToast(honey),item(honey,pita)])],
    % INIT States
    [
     ss(plates,bigPlate,[dirtyPlate(bigPlate)]),
     ss(plates,smallPlate,[dirtyPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,side)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,bigKnife,[dirty(bigKnife)]),
     ss(kitchenware,smallKnife,[dirty(smallKnife)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(15,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(spreads,butter,[onToast(butter),item(butter,bread)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(toaster,blueToaster,[pluggedIn(blueToaster)])]).
planner_task(16,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(spreads,butter,[onToast(butter),item(butter,bread)]),
     se(item,pita,[isMade(pita),location(pita,servePlate)]),
     se(spreads,honey,[onToast(honey),item(honey,pita)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(17,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(spreads,butter,[onToast(butter),item(butter,bread)]),
     se(item,pita,[isMade(pita),location(pita,servePlate)]),
     se(spreads,honey,[onToast(honey),item(honey,pita)]),
     se(item,crumpet,[isMade(crumpet),location(crumpet,servePlate)]),
     se(spreads,marmite,[onToast(marmite),item(marmite,crumpet)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
planner_task(18,
    % Goals
    [
     se(item,bread,[isMade(bread),location(bread,servePlate)]),
     se(spreads,butter,[onToast(butter),item(butter,crumpet)]),
     se(item,pita,[isMade(pita),location(pita,servePlate)]),
     se(spreads,honey,[onToast(honey),item(honey,pita)]),
     se(item,crumpet,[isMade(crumpet),location(crumpet,servePlate)]),
     se(spreads,marmite,[onToast(marmite),item(marmite,crumpet)])],
    % INIT States
    [
     ss(plates,bigPlate,[cleanPlate(bigPlate)]),
     ss(plates,smallPlate,[cleanPlate(smallPlate)]),
     ss(item,bread,[isCold(bread),location(bread,fridge)]),
     ss(item,pita,[isCold(pita),location(pita,fridge)]),
     ss(spreads,butter,[inJar(butter),item(butter,nullItem)]),
     ss(spreads,marmite,[inJar(marmite),item(marmite,nullItem)]),
     ss(spreads,honey,[inJar(honey),item(honey,nullItem)]),
     ss(kitchenware,smallKnife,[clean(smallKnife)]),
     ss(kitchenware,bigKnife,[clean(bigKnife)]),
     ss(item,crumpet,[isCold(crumpet),location(crumpet,fridge)]),
     ss(toaster,blueToaster,[notPluggedIn(blueToaster)])]).
</pre>
</p>

<p>
<h2 align="center"><a name="C4">PDDL Domain Plain Text</a></h2>
</p>

<p>
<pre>
; ***************************************************************************
; *  All rights reserved. Use of this software is permitted for non-commercial
; *  research purposes, and it may be copied only for that use.  All copies must
; *  include this copyright message.  This software is made available AS IS, and
; *  neither the GIPO team nor the University of Huddersfield make any warranty
; *  about the software or its performance.
; *
; *  Automatically generated PDDL Domain from  GIPO Version 3.0
; *
; *  Author: Bhonda
; *  Institution: University of Huddersfield
; *  Date created: Wed Dec 13 11:42:46 GMT 2006
; *  Date last modified: 2006/12/15 at 04:26:22 AM GMT
; *  Description:
; *    
; * OCL File name : toasterWorldv2.ocl
; * Object Life History : toasterWorld.gfx
; *************************************************************************

(define (domain nonetw)
  (:requirements :strips :equality :typing)

  (:types  plates toaster item loc spreads kitchenware)


  (:predicates
    (cleanPlate ?plates1 - plates)
    (dirtyPlate ?plates1 - plates)
    (pluggedIn ?toaster1 - toaster)
    (notPluggedIn ?toaster1 - toaster)
    (isCold ?item1 - item)
    (location ?item1 - item ?loc1 - loc)
    (isToasted ?item1 - item)
    (isMade ?item1 - item)
    (inJar ?spreads1 - spreads)
    (item ?spreads1 - spreads ?item1 - item)
    (onToast ?spreads1 - spreads)
    (clean ?kitchenware1 - kitchenware)
    (dirty ?kitchenware1 - kitchenware)
    (next ?loc1 - loc ?loc2 - loc)
  )
  (:action wash
       :parameters ( ?Kitchenware - kitchenware)
       :precondition 
            (dirty ?Kitchenware)
       :effect (and 
            (not (dirty ?Kitchenware))
            (clean ?Kitchenware)
        )
    )
  (:action use
       :parameters ( ?Item - item ?Kitchenware - kitchenware ?Spreads - spreads)
       :precondition (and 
            (isToasted ?Item)
            (location ?Item side)
            (clean ?Kitchenware)
            (inJar ?Spreads)
            (item ?Spreads nullItem)
       )
       :effect (and 
            (not (clean ?Kitchenware))
            (not (inJar ?Spreads))
            (not (item ?Spreads nullItem))
            (dirty ?Kitchenware)
            (onToast ?Spreads)
            (item ?Spreads ?Item)
        )
    )
  (:action toast
       :parameters ( ?Toaster - toaster ?Item - item)
       :precondition (and 
            (pluggedIn ?Toaster)
            (isCold ?Item)
            (location ?Item toaster)
       )
       :effect (and 
            (not (isCold ?Item))
            (isToasted ?Item)
        )
    )
  (:action cleanThePlate
       :parameters ( ?Plates - plates)
       :precondition 
            (dirtyPlate ?Plates)
       :effect (and 
            (not (dirtyPlate ?Plates))
            (cleanPlate ?Plates)
        )
    )
  (:action plugIn
       :parameters ( ?Toaster - toaster)
       :precondition 
            (notPluggedIn ?Toaster)
       :effect (and 
            (not (notPluggedIn ?Toaster))
            (pluggedIn ?Toaster)
        )
    )
  (:action unplug
       :parameters ( ?Toaster - toaster)
       :precondition 
            (pluggedIn ?Toaster)
       :effect (and 
            (not (pluggedIn ?Toaster))
            (notPluggedIn ?Toaster)
        )
    )
  (:action serve
       :parameters ( ?Plates - plates ?LocA - loc ?LocB - loc ?Item - item)
       :precondition (and 
            (cleanPlate ?Plates)
            (next ?LocA ?LocB)
            (isToasted ?Item)
            (location ?Item ?LocA)
            (next ?LocA ?LocB)
       )
       :effect (and 
            (not (cleanPlate ?Plates))
            (not (isToasted ?Item))
            (not (location ?Item ?LocA))
            (dirtyPlate ?Plates)
            (isMade ?Item)
            (location ?Item ?LocB)
        )
    )
  (:action move
       :parameters ( ?Item - item ?LocA - loc ?LocB - loc)
       :precondition (and 
            (isCold ?Item)
            (location ?Item ?LocA)
            (next ?LocA ?LocB)
       )
       :effect (and 
            (not (location ?Item ?LocA))
            (location ?Item ?LocB)
        )
    )
  (:action moveHot
       :parameters ( ?Item - item ?LocA - loc ?LocB - loc)
       :precondition (and 
            (isToasted ?Item)
            (location ?Item ?LocA)
            (next ?LocA ?LocB)
       )
       :effect (and 
            (not (location ?Item ?LocA))
            (location ?Item ?LocB)
        )
    )
  )
(define (problem task1)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (pluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isCold bread)
        (location bread toaster)
       ))
)
(define (problem task2)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (pluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isToasted bread)
        (location bread side)
       ))
)
(define (problem task3)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isToasted pita)
        (location pita side)
       ))
)
(define (problem task4)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isToasted crumpet)
        (location crumpet side)
       ))
)
(define (problem task5)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (dirtyPlate bigPlate)
       ))
)
(define (problem task6)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (pluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade pita)
        (location pita servePlate)
        (dirtyPlate smallPlate)
       ))
)
(define (problem task7)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (pluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade crumpet)
        (location crumpet servePlate)
        (dirtyPlate smallPlate)
       ))
)
(define (problem task8)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (clean smallKnife)
       ))
)
(define (problem task9)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (clean bigKnife)
       ))
)
(define (problem task10)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (cleanPlate bigPlate)
       ))
)
(define (problem task11)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita side)
        (isToasted crumpet)
        (location crumpet side)
        (cleanPlate bigPlate)
        (dirtyPlate smallPlate)
        (dirty smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (cleanPlate smallPlate)
       ))
)
(define (problem task12)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (isCold crumpet)
        (location crumpet fridge)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isToasted pita)
        (location pita side)
       ))
)
(define (problem task13)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (notPluggedIn blueToaster)
        (isToasted crumpet)
        (location crumpet side)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isToasted crumpet)
        (location crumpet side)
       ))
)
(define (problem task14)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (dirtyPlate bigPlate)
        (dirtyPlate smallPlate)
        (isCold bread)
        (location bread side)
        (isCold pita)
        (location pita fridge)
        (isCold crumpet)
        (location crumpet fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (dirty bigKnife)
        (dirty smallKnife)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (onToast marmite)
        (item marmite bread)
        (isMade pita)
        (location pita servePlate)
        (onToast honey)
        (item honey pita)
       ))
)
(define (problem task15)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (isCold crumpet)
        (location crumpet fridge)
        (pluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (onToast butter)
        (item butter bread)
       ))
)
(define (problem task16)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (isCold crumpet)
        (location crumpet fridge)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (onToast butter)
        (item butter bread)
        (isMade pita)
        (location pita servePlate)
        (onToast honey)
        (item honey pita)
       ))
)
(define (problem task17)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (isCold crumpet)
        (location crumpet fridge)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (onToast butter)
        (item butter bread)
        (isMade pita)
        (location pita servePlate)
        (onToast honey)
        (item honey pita)
        (isMade crumpet)
        (location crumpet servePlate)
        (onToast marmite)
        (item marmite crumpet)
       ))
)
(define (problem task18)
   (:domain nonetw)
   (:objects
         bigPlate smallPlate - plates
         bread pita crumpet nullItem - item
         fridge side toaster servePlate - loc
         butter marmite honey - spreads
         smallKnife bigKnife - kitchenware
         blueToaster - toaster
        )
    (:init
        (cleanPlate bigPlate)
        (cleanPlate smallPlate)
        (isCold bread)
        (location bread fridge)
        (isCold pita)
        (location pita fridge)
        (inJar butter)
        (item butter nullItem)
        (inJar marmite)
        (item marmite nullItem)
        (inJar honey)
        (item honey nullItem)
        (clean smallKnife)
        (clean bigKnife)
        (isCold crumpet)
        (location crumpet fridge)
        (notPluggedIn blueToaster)
        (next fridge side)
        (next side toaster)
        (next toaster side)
        (next side servePlate)
        (next servePlate side)
        )
    (:goal
      (and
        (isMade bread)
        (location bread servePlate)
        (onToast butter)
        (item butter crumpet)
        (isMade pita)
        (location pita servePlate)
        (onToast honey)
        (item honey pita)
        (isMade crumpet)
        (location crumpet servePlate)
        (onToast marmite)
        (item marmite crumpet)
       ))
)
</pre>
<p>

<p>
<h2 align="center"><a name="C5">Files Download Links</a></h2>
</p>

<table width="100%">
<tr>
  <td align="center"><a href="toasterWorldv2.ocl">
                     OCL file</a></td>
  <td align="center"><a href="toasterWorld.gfx">
                     GFX file</a></td>
</tr>
</table>

</body>
</html>