% A SIMPLE REGRESSION PLANNER FOR ACTIONS IN STRIPS NOTATION

% solve(G,NS,P) is true if P is a plan to solve goal G that uses 
% less than NS steps. G is a list of atomic subgoals.

solve(G,P) :-
   solve(G,4,P).

solve(G,_,init) :-
   solved(G).

solve(G,NAs,do(A,Pl)) :-
   NAs > 0,
   useful(G,A),
   wp(G,G1),
   writeln([' ',NAs,': trying ',A,' to solve ',G]),
   writeln(['    New subgoals: ',G1]),
   NA1 is NAs-1,
   solve(G1,NA1,Pl).

:- op(1030,xfy,[&]).
:- op(1200,xfx,[<-]).
:- op(700,xfx,[\=]).
% solved(G) is true if goal list G is true initially
solved(true).
solved((A & B)) :-
   solved(A),
   solved(B).
solved((A \= B)) :- dif(A,B).
solved(G) :-
   (G <- B),
   solved(B).

% useful(G,A) is true if action A is useful to solve a goal in goal list G
useful((G&_),A) :-
   useful(G,A).
useful((_&G),A) :-
   useful(G,A).
useful(on(A,B,_),stack(A,B)).
useful(handempty(_),stack(_,_)).
useful(clear(Y,_),pickup(_,Y)).
useful(holding(X,_),pickup(X,_)).

% wp(G,G0) is true if G0 is the weakest precondition that needs to hold
% immediately before action A to ensure that G is true immediately after A
wp(G,G0) :-
   wp(G,true,G0).

% wp(G,C0,C1) true if C1 is the resulting conjuction from solving G given conjunction C0
wp(true,C,C).
wp((A&B),C0,C2) :-
   wp(A,C0,C1),
   wp(B,C1,C2).
wp(G,C0,C2) :-
   (G <- B),
   insert(B,C0,C2).
wp((A \=B),C,C) :- dif(A,B).

insert((A&B),C0,C2) :-!,
   insert(A,C0,C1),
   insert(B,C1,C2).
insert(true,C,C):- !.
insert(G,C,C) :-
   inconj(G,C),!.
insert(G,C,(G&C)).

inconj(A,A) :- !.
inconj(A,(B&_)) :- !,
   inconj(A,B).
inconj(A,(_&B)) :-
   inconj(A,B).

% DEFINITION OF AXIOMS IN STRIPS NOTATION

% stack(X,Y) means to put X onto Y (when holding X and Y is clear)
on(X,Y,do(stack(X,Y),S)) <-
   holding(X,S)&
   clear(Y,S).
handempty(do(stack(X,Y),S)) <-
   holding(X,S)&
   clear(Y,S).
clear(X,do(stack(X,Y),S)) <-
   holding(X,S)&
   clear(Y,S).
on(W,Z,do(stack(X,Y),S)) <-
   holding(X,S)&
   clear(Y,S)&
   on(W,Z,S).
clear(Z,do(stack(X,Y),S)) <-
   Z \= Y&
   holding(X,S)&
   clear(Y,S)&
   clear(Z,S).

% pickup(X,Y) means pick up X from Y (when X is clear and hand is empty)
clear(Y,do(pickup(X,Y),S)) <-
   clear(X,S)&
   on(X,Y,S)&
   handempty(S).
holding(X,do(pickup(X,Y),S)) <-
   clear(X,S)&
   on(X,Y,S)&
   handempty(S).
clear(Z,do(pickup(X,Y),S)) <-
   Z \= X &
   clear(X,S)&
   on(X,Y,S)&
   handempty(S)&
   clear(Z,S).
on(W,Z,do(pickup(X,Y),S)) <-
   W \= X&
   clear(X,S)&
   on(X,Y,S)&
   handempty(S)&
   on(W,Z,S).

% INITIAL STATE
%
%    a
%    b
%    c   d   e
%-------------------

on(a,b,init) <- true.
on(b,c,init) <- true.
on(c,table,init) <- true.
handempty(init) <- true.
clear(a,init) <- true.
on(d,table,init) <- true.
clear(d,init) <- true.
on(e,table,init) <- true.
clear(e,init) <- true.
clear(table,init) <- true.

% =============================================================================

% member(X,L) is true if X is a member of list L
member(X,[X|_]).
member(X,[_|L]) :-
   member(X,L).

notin(_,[]).
notin(A,[B|C]) :-
   dif(A,B),
   notin(A,C).

% subset(L1,L2) is true if L1 is a subset of list L2
subset([],_).
subset([A|B],L) :-
   member(A,L),
   subset(B,L).

% writeln(L) is true if L is a list of items to be written on a line, followed by a newline.
writeln(L) :- \+ \+ (numbervars(L,0,_), writelnw(L) ).
writelnw([]) :- nl.
writelnw([H|T]) :- write(H), writeln(T).

% insert(E,L0,L1) inserts E into list L0 producing list L1.
% If E is already a member it is not added.
insert(A,[],[A]).
insert(A,[B|L],[A|L]) :- A==B.
insert(A,[B|L],[B|R]) :-
   \+ A == B,
   insert(A,L,R).
grnd(G) :-
   numbervars(G,0,_).
