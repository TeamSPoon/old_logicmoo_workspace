% manual.pl
% July 1, 1995
% John Eikenberry
% Dec 13, 2035
% Douglas Miles
%
/** <module> 
% now unused.. it could exist when we want a 
% manual agent... (meant for debugging purposes)
%
*/

:- module(man,[]).

end_of_file.






OOOOOOOOLLLLLLLLLLDDDDDDDDDDDD SYSTEM










%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Commands to run simulation.
%
% run_tests.  -runs world until agents die or stopped (^C a).
% run_tests(turns,Y).  -runs world for Y turns.
% run_tests(score,Y).  -runs world until score Y is reached by any agent.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
run_tests(turns,Turns):-
	add(total_turns(Turns)),
	run_tests.

run_tests(score,Score) :-
	add(end_score(Score)),
	run_tests.

run_tests :-
        old_setup,
        old_tick,
        old_display.

% old_setup/0, old_tick/0,  old_display/0
% Dynamic predicate declaration.
:- dynamic
  % act_turn/2, str/2, spd/2, stm/2, height/2,
  second_act/1,
  stat_total/2,
  total_turns/1, current_turn/1, end_score/1.

:- include(logicmoo('vworld/vworld_header.pl')).

:- register_module_type(utility).

old_setup:-      
	must(growth),
	must(list_agents(Agents)),
        fmt('Old Setup creating agents.. ~w',[Agents]),
        must(forall_member(Agent,Agents,create_agent(Agent))).


old_tick:-
        list_agents(Agents),
	run_vworld(Agents).

old_display:-
        list_agents(Agents),
        show_world,
	display_grid_labels,
	display_stats(Agents).

:-dynamic(my_act/1).


% end condition 1
run_vworld(_) :-
	total_turns(Trns),
	del(current_turn(Trns)),
	del(total_turns(_)),
	!.
% end condition 2
run_vworld(_) :-
	end_score(Scr),
	% db ase:score(_,AgentScr),
        score(_,AgentScr),
	AgentScr >= Scr,
	del(end_score(_)),
	!.

% no agents
run_vworld([]) :-
	!.
run_vworld(Agents) :-
	who_gets_to_act(Agents,LiveAgents),
	(setof(choice(Time,Agent,Decision),
	      (my_act(Agent),deliberate(Agent,Decision,Time)),
	      ActionList); ActionList = []),
	clr(failure(Agent,_)),
	forall(member(choice(_,Agent,Decision),ActionList),
	       act(Agent,Decision)),
	second_actions,
	spread,
        nl,nl,nl,
	show_world,
        sleep(1),
	dec_turns,
	!,
	run_vworld(LiveAgents).

show_world:- 
   show_room_grid(_).

act(Agent,Decision) :-
	moo:agent_call_command(Agent,Decision),
	!.
/*
act(Agent,Decision) :-
	Decision =.. List,
	nth_member(1,Module,List),
	Module:agent_call_command(Agent,Decision),
	!.
*/


% Check system clock
ticks(T) :-
       !,
       get_time(T).


dec_turns :-
	del(current_turn(X)),
	!,
	Y is X + 1,
	add(current_turn(Y)).

deliberate(Agent,Decision,Time) :-
	add(thinking(Agent)),
	ticks(StartClock),
	once(moo:world_agent_plan(_World,Agent,Decision)),
	ticks(StopClock),
	del(thinking(_)),
	Diff is StopClock - StartClock,
	Time is abs(Diff).

get_world_agent_action_plan(W,Agent,Decision) :-
       get_world_agent_plan(W,Agent,Decision).

get_world_agent_action_plan(_,_,Decision) :-
	Decision = sit.

who_gets_to_act(Agents,LiveAgents) :-
	clr(my_act(_)),
	retractall(second_act(_)),
	still_alive(Agents,LiveAgents),
	forall(member(Agent1,LiveAgents),
	        update_act_turn(Agent1)),
	findall(Agent2,
	       act_turn(Agent2,0),
	       Actlist),
	forall(member(Agent3,Actlist),
	        (asserta(my_act(Agent3)),reset_turn(Agent3))),
	forall(member(Agent4,LiveAgents),
	       (spd(Agent4,Spd),
	        (Spd == 3,
	           current_turn(Trn),
		   even(Trn);
		  Spd == 4),
		asserta(second_act(Agent4)))).

second_actions :-
	(setof(choice(Time,Agent,Decision),
	      (second_act(Agent),deliberate(Agent,Decision,Time)),
	      ActionList); ActionList = []),
	clr(failure(_,_)),
	forall(member(choice(_,Agent,Decision),ActionList),
	       act(Agent,Decision)).

still_alive(Agents,LiveAgents) :-
	forall(member(Agent,Agents),
	       (charge(Agent,Charge),
	       damage(Agent,Damage),
	       (\+ Charge > 0; \+ Damage > 0),
	       agent_into_corpse(Agent),
	       del(act_turn(Agent,_)))),
	findall(Agent1,
	       act_turn(Agent1,_),
	       LiveAgents).

update_act_turn(Agent) :-
	del(act_turn(Agent,Y)),
	X is Y - 1,
	add(act_turn(Agent,X)).

reset_turn(Agent) :-
	spd(Agent,Spd),
	transform_speed(Spd,Wait),
	del(act_turn(Agent,_)),
	add(act_turn(Agent,Wait)).

transform_speed(0,3).
transform_speed(1,2).
transform_speed(_,1).

even(Num) :-
	Mod is (Num mod 2),
	Mod == 0.

:- include(logicmoo('vworld/vworld_footer.pl')).




% library.pl
% July 7, 1996
% John Eikenberry
% Dec 13, 2035
% Douglas Miles
%
/** <module> 
% General library of predicates not always portable between prolog impls
*/
:- module(lib,
	[
        % random_premutation/2,
          maybe/1, 
          with_assertions/2,
         nth_member/3,
         edit_out/3]).

:- module_transparent  maybe/1.
:- meta_predicate with_assertions(:,0).
:- meta_predicate forall_member(?,?,0).

:- include(logicmoo('vworld/vworld_header.pl')).
:- register_module_type(utility).

with_assertions(With,Call):-setup_call_cleanup(asserta(With,Ref),Call,erase(Ref)).



% Edit out 
edit_out([],[]):-!.
edit_out([Agent|Agents],Agent^Test,NewAgents) :-
   edit_out(Agents,Agent^Test,TempAgents),
    (call(Test) -> NewAgents=TempAgents ; NewAgents=[Agent|TempAgents]).


% Random_Permutation defined for SWI... comment out for quintus!
% Randomizes two lists.
% random_permutation([],[]).
% random_permutation(Old,New) :-
% 	length(Old,N), 
% 	R is (random(N) + 1), 
%	nth_member(R,Elem,Old),
%	select(Old,Elem,Middle),
%	random_permutation(Middle,RP),
%	append(RP,[Elem],New).


% Goal done once and only once
% not use anymore 
% one(Goal) :- once(Goal).
% Goal,
% 	!.


% Quintus version
% member(X,[X|_]).
% member(X,[_|Y]) :-
%	member(X,Y).

% Quintus version
%ticks(T) :-
%	!,
%	time(time(H,M,S)),
%	T is 360*H + 60*M + S.

% SWI mabey pred... not needed for quintus
% Used only in kernel. Placed here since it isn't needed for quintus, so
% it can be easily found and commented out.
maybe(Maybe) :-
    Temp is random(100),
    Temp < Maybe -> true ; fail.


% Grab certain member of a list as denoted by its place in that list.
nth_member(1,X,[X|_]) :-
	!.
nth_member(N,X,[_|T]) :-
	N > 1,
	M is N - 1,
	!,
	nth_member(M,X,T).


:- include(logicmoo('vworld/vworld_footer.pl')).


:- dynamic take/2.

% write out stats and percepts and ask for an action
% Possible agent actions.
:- include(logicmoo('vworld/vworld_header.pl')).
:- register_module_type(utility).

moo:agent_call_command(_,_):-fail.

actr:agent_action(Actor,Action) :-var(Action),!,
        look_to_conso;e(Actor),
	write('What would you like to do?'), nl,
	write('(1=take, 2=sit, 3=move, 4=climb, 5=push, 6=drop, 7=eat, 8=attack)'), nl,
	write('---?--->'), get_single_char(Num),
	which_one(Num,_,Action), nl,!.


% Complete the action chosen
% Take something
which_one(49,[take,obj(1)],Take) :-
	list_objects,
	write('Take what: '),
	findall(take(N,O),take_object(N,O),List),
	forall(member(take(Num,Obj),List),
	(write(Num), write('='), write(Obj), write(' '))),
	get_single_char(Char),
	convert_num(Char,Number),
	take_object(Number,Obj),
	Take = take(Obj).
% Drop something
which_one(54,[drop,obj(1)],Drop) :-
	write('Drop what: '),
	findall(take(N,O),take_object(N,O),List),
	forall(member(take(Num,Obj),List),
	(write(Num), write('='), write(Obj), write(' '))),
	get_single_char(Char),
	convert_num(Char,Number),
	take_object(Number,Obj),
	Drop = drop(Obj).
% Eat something held
which_one(55,[eat,obj(1)],Eat) :-
	write('Eat what: '),
	findall(take(N,O),take_object(N,O),List),
	forall(member(take(Num,Obj),List),
	(write(Num), write('='), write(Obj), write(' '))),
	get_single_char(Char),
	convert_num(Char,Number),
	take_object(Number,Obj),
	Eat = eat(Obj).
%Sit there
which_one(50,[sit],sit).
% Move 
which_one(51,[move,dir(1)],Move) :-
	write('Ok. Which way (1=n,2=s,3=e,4=w,5=ne,6=nw,7=se,8=sw) : '),
	get_single_char(Num), 
	move_dir(Num,Dir),
	Move = move(Dir).
% Climb
which_one(52,[climb,dir(1)],Climb) :-
	write('Which way (1=n,2=s,3=e,4=w,5=ne,6=nw,7=se,8=sw) : '),
	get_single_char(Num),
	move_dir(Num,Dir),
	Climb = climb(Dir).
% Push
which_one(53,[push,dir(1)],Push) :-
	write('Which way (1=n,2=s,3=e,4=w,5=ne,6=nw,7=se,8=sw) : '),
	get_single_char(Num),
	move_dir(Num,Dir),
	Push = push(Dir).
% Attack
which_one(56,[attack,dir(1)],Attack) :-
	write('Ok. Which way (1=n,2=s,3=e,4=w,5=ne,6=nw,7=se,8=sw) : '),
	get_single_char(Num), 
	move_dir(Num,Dir),
	Attack = attack(Dir).

% make list of the objects in the world
:-dynamic list_objects_num/1.
list_objects :-
	take_object(A,_),
	A \== 0.

list_objects :-
	world_retractall(list_objects_num(_)),
	world_assert(list_objects_num(0)),
	world_retractall(take_object(_,_)),
	findall(Obj,
	     (kquery(Obj,_), Obj \= 0),
	     List),
	forall(member(Obj,List),
	     (advance_counter, 
	     list_objects_num(Num), 
	     world_assert(take_object(Num,Obj)))),
	world_retract(list_objects_num(_)).

advance_counter :-
	world_retract(list_objects_num(Old)),
	New is Old + 1,
	world_assert(list_objects_num(New)).

convert_num(49,1).
convert_num(50,2).
convert_num(51,3).
convert_num(52,4).
convert_num(53,5).
convert_num(54,6).
convert_num(55,7).
convert_num(56,8).
convert_num(57,9).
convert_num(58,10).


move_dir(49,n).
move_dir(50,s).
move_dir(51,e).
move_dir(52,w).
move_dir(53,ne).
move_dir(54,nw).
move_dir(55,se).
move_dir(56,sw).
move_dir(0'd,d).
move_dir(0'u,u).

take_object(0,_).

:- include(logicmoo('vworld/vworld_footer.pl')).


