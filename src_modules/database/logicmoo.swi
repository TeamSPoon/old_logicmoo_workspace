% ===================================================================
% PURPOSE
% This File is the bootstrap SWI-Prolog listener to handle API requests
% So first is loads the proper files and then starts up the system
% ===================================================================


:- style_check(-singleton).
:- style_check(-discontiguous).
:- style_check(-atom).

%:-use_module(library(rdf)).

%Load the TCP Library
:- use_module(library(socket)).
%:- use_module(library(unix)).
:-use_module(library(system)).
:- use_module(library(readutil)).
:-use_module(library(listing)).
:- use_module(library(shell)).
:- use_module(library(shlib)).
:- use_module(library(url)).
:- use_module(library(quintus)).
:- use_module(library(qsave)).
:- use_module(library(sgml)).
:- use_module(library(occurs)).
%:-use_module(library(rdf)).

% make mud "safer"
:-redefine_system_predicate(system:shell(_)).
:-redefine_system_predicate(system:shell).
%:-redefine_system_predicate(system:prolog).
:-redefine_system_predicate(system:shell(_,_)).
%:-redefine_system_predicate(system:halt).
:-redefine_system_predicate(system:exit(_)).

/*

:- meta_predicate backward_compatibility:index(:).

too noisey now! 
backward_compatibility:index(A) :-
        print_message(warning, decl_no_effect(index(A))).

*/
:-redefine_system_predicate(backward_compatibility:index(_)).
:-abolish(backward_compatibility:index/1).
backward_compatibility:index(_).

/*

:-asserta(current_say_to(fmt)).

:-redefine_system_predicate(system:phrase(_,_,_)).
:- module_transparent system:phrase/3.
:-abolish(system:phrase/3).

system:phrase(A, B, C) :- false,
    '$strip_module'(A, D, E),
        (   compound(E)
        ->  (   E=[F|G]
            ->  append(E, C, B)
            ;   catch(call(user:E, B, C),Er,catch(call(A,B,C),Er2,(fmt(user_error,'\nDCGError ~w/~w in ~q \n',[Er,Er2,call(E, B, C)]),fail)))
            )
        ;   E==[]
        ->  C=B
        ;   B=[E|C]
        ).

system:phrase(A, B, C) :-
            '$strip_module'(A, D, E),
            (   E==[]
            ->  C=B
            ;   nonvar(E),
                E=[F|G]
            ->  append(E, C, B)
            ;   call(A, B, C)
            ).


system:phrase([], B,C ):-!,B=C.
system:phrase([F|G],B, C):-!,append([F|G],C,B).
system:phrase(A, B, C) :- compound(A),!,catch(call(A,B,C),_,fail).
system:phrase(A, [A|C], C).
*/










help(_).


nondet_arg(N,Term,V):- arg(N,Term,V).

prolog_system(swi).

ccl(C):-ensure_loaded(C).

% :-print_message(warning, ensure_loaded('../data/mworld.el')).


:-
ccl('logicmoo_api_reply.pl'),
ccl('logicmoo_api_chat.pl'),
ccl('logicmoo_api_system.pl'),
ccl('logicmoo_api_cyc.pl'),
ccl('logicmoo_api_batch.pl'),
ccl('logicmoo_api_soap.pl'),
ccl('logicmoo_api_markup.pl'),
ccl('logicmoo_api_httpd.pl'),
ccl('logicmoo_api_prolog.pl'),
ccl('logicmoo_api_eggdrop.pl'),
ccl('logicmoo_api_request.pl'),
ccl('logicmoo_api_event.pl'),
ccl('logicmoo_api_testing.pl'),

ccl('logicmoo_atlas_mode.pl'),
ccl('logicmoo_atlas_worldforge.pl'),
ccl('logicmoo_atlas_from.pl'),
ccl('logicmoo_atlas_persistance.pl'),

/*
 */

ccl('logicmoo_api_java.pl'),
ccl('logicmoo_atlas_combine.pl'),
ccl('logicmoo_atlas_codec_packed.pl'),
ccl('logicmoo_atlas_consume.pl'),
ccl('logicmoo_atlas_create.pl'),
ccl('logicmoo_atlas_delete.pl'),
ccl('logicmoo_atlas_drop.pl'),
ccl('logicmoo_atlas_dynamic_op.pl'),
ccl('logicmoo_atlas_exec.pl'),
ccl('logicmoo_atlas_get.pl'),
ccl('logicmoo_atlas_grid.pl'),
ccl('logicmoo_atlas_kif.pl'),
ccl('logicmoo_atlas_logoff.pl'),
ccl('logicmoo_atlas_logon.pl'),
ccl('logicmoo_atlas_look.pl'),
ccl('logicmoo_atlas_move.pl'),
ccl('logicmoo_atlas_reply.pl'),
ccl('logicmoo_atlas_set.pl'),
ccl('logicmoo_atlas_take.pl'),
ccl('logicmoo_atlas_talk.pl'),
ccl('logicmoo_atlas_touch.pl'),
ccl('logicmoo_atlas_uo.pl'),

ccl('logicmoo_atlas_xml.pl'),
ccl('logicmoo_bb_options.pl'),
ccl('logicmoo_bb_assert.pl'),
ccl('logicmoo_bb_el_access.pl'),
ccl('logicmoo_bb_hl_access.pl'),
ccl('logicmoo_bb_enable.pl'),
ccl('logicmoo_bb_context.pl'),
ccl('logicmoo_bb_edit.pl'),
ccl('logicmoo_bb_search.pl'),
ccl('logicmoo_bb_retract.pl'),
ccl('logicmoo_cmp_compiler.pl'),
ccl('logicmoo_cmp_functionals.pl'),
ccl('logicmoo_cmp_sentence.pl'),
ccl('logicmoo_cmp_simple.pl'),
ccl('logicmoo_cmp_truth.pl'),
ccl('logicmoo_cmp_cycl.pl'),
ccl('logicmoo_module_aiml.pl'),
ccl('logicmoo_module_eliza.pl'),
ccl('logicmoo_nl_dictionary.pl'),
ccl('logicmoo_nl_english.pl'),
ccl('logicmoo_nl_englishy.pl'),
ccl('logicmoo_nl_generation.pl'),
ccl('logicmoo_nl_grammer_interface.pl'),
ccl('logicmoo_nl_talk.pl'),
ccl('logicmoo_nl_wn_utils.pl'),
ccl('logicmoo_pvw_actx_invokes.pl'),
ccl('logicmoo_pvw_apldriver.pl'),
ccl('logicmoo_pvw_espg.pl'),
ccl('logicmoo_pvw_event_to_property.pl'),
ccl('logicmoo_pvw_goal_threads.pl'),
ccl('logicmoo_pvw_proquery.pl'),
ccl('logicmoo_pvw_vb6support.pl'),
ccl('logicmoo_pvw_vwevents.pl'),
ccl('logicmoo_pvw_vwevent_to_method.pl'),
ccl('logicmoo_pvw_vwmethods.pl'),
ccl('logicmoo_pvw_vwtriggers.pl'),
% ccl('logicmoo_tap_ale.pl'),
ccl('logicmoo_tap_algebra.pl'),
ccl('logicmoo_tap_belief.pl'),
ccl('logicmoo_tap_csat.pl'),
ccl('logicmoo_tap_icl.pl'),
ccl('logicmoo_tap_modlean.pl'),
ccl('logicmoo_tap_motel.pl'),
ccl('logicmoo_tap_byrd.pl'),
ccl('logicmoo_tap_plan.pl'),
ccl('logicmoo_tap_pttp_xray.pl'),
ccl('logicmoo_tap_slg_tabling.pl'),
ccl('logicmoo_tap_transitiveclosure.pl'),
ccl('logicmoo_utils_file.pl'),
ccl('logicmoo_utils_uwdgraphs.pl'),

ccl('logicmoo_api_newhttpd.pl').


%end_of_file.

%:-cd('../dynamic/').
%:-ensure_loaded('../dynamic/world.persist').
%:-ensure_loaded('../world/mea.prolog').

%:-runServerThread(3677,'LOGICMOO').
%:-runServerThread(6767,'Atlas').
%:-runServerThread(4020,'TELNETDX').
%:-runServerThread(3679,'CycApiRequest').
%:-runServerThread(3680,'HTTPD').
%:-runServerThread(3681,'PROLOG').

%:-runServerThread(7777,'UOX').

lworld:-lworld(logicmoo('data/mworld.el.gz')).
lworld(File):-absolute_file_name(File,Name),lworld0(Name).
%%lworld0(File) :- access_file(File, read),!,ensure_loaded(File).
lworld0(File) :- 
    atom_concat(Name,'.gz',File),
    open(File,read, ZIN),
    zopen(ZIN, In, []),
    call_cleanup( read_stream_to_codes(In, Codes), close(In)),!,
    close(ZIN),
    call_cleanup( ((open(Name, write, Out),!,fmt(Out, '~s', [Codes]))),close(Out)),
    ensure_loaded(Name).


%:-ensure_loaded('../src_incoming/data/mworld.el').
