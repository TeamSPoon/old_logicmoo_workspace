/** <module> 
% This file contains the definitions for the objects in a household
% To create a new world, simply change the object definitions as
% described below (or in manual)
%
% *******Object definitions*******
%.
% Use the label_type_props(label,colcode,[property1,property2,etc.]]).
% label is whats used to refer to the object in the running world
% colcode is whats used to refer to the object for initialization (see world.pl)
% ===============================================================================================
%    by Mea_culpa
% ===============================================================================================
*/


argIsa(aDirectionsFn,2,ftListFn(vtDirection)).
argIsa(apathFn,1,tRegion).
argIsa(apathFn,2,vtDirection).
argIsa(localityOfObject,1,tObj).
argIsa(localityOfObject,2,tSpatialThing).
argIsa(mudColor,1,tObj).
argIsa(mudColor,2,vtColor).
argIsa(mudFacing,1,tObj).
argIsa(mudFacing,2,vtDirection).
argIsa(mudMemory,2,ftTerm).

/*
tms_reject_why(mudAtLoc(iArea1025, _),isa(iArea1025,tRegion)).
tms_reject_why(localityOfObject(iArea1025, iOfficeRoom7),isa(iArea1025,tRegion)).
tms_reject_why(localityOfObject(R,_),isa(R,tRegion)):- isa(R,tRegion).
tms_reject_why(mudFacing(R,_),isa(R,tRegion)):- isa(R,tRegion).
tms_reject_why(mudAtLoc(R,_),isa(R,tRegion)):- isa(R,tRegion).

%deduce_facts_forward(localityOfObject(_,Region),isa(Region,tSpatialThing)).
deduce_facts_forward(localityOfObject(Obj,_),isa(Obj,tObj)).
fix_argIsa(F,N,vtDirection(Val),vtDirection):-add(user:mpred_prop(F,argSingleValueDefault(N,Val))),!.

*/

:-decl_type(tChannel).
:-decl_type(tItem).
:-decl_type(vtVerb).

% :- decl_mpred(tAgentGeneric(ftID),[predIsFlag]).
% :- decl_mpred_prolog(createableSubclassType/2).
% alt_forms1(none_AR,localityOfObject(P,R),mudAtLoc(P,L)):-ground(localityOfObject(P,R)),is_asserted(mudAtLoc(P,L)),nonvar(L),once(locationToRegion(L,R)).
% alt_forms1(none_AR,mudAtLoc(P,L),localityOfObject(P,R)):-ground(mudAtLoc(P,L)),once(locationToRegion(L,R)),nonvar(R).
% argsIsa(mudFacing,ftTerm).
% we need a way to call this: maxCapacity
% we need a way to call this: typeMaxCapacity
%:- compile_predicates([isa/2]).
%:- decl_mpred_hybrid(repl_to_string(tAgentGeneric,term),[prologSingleValued,argSingleValueDefault(2,default_repl_obj_to_string)]).
% :- decl_mpred_hybrid(repl_writer(tAgentGeneric,term),[prologSingleValued,argSingleValueDefault(2,default_repl_writer)]).
%:- forall(is_pred_declarer(F),dynamic(F/1)).
%:- foreach(retract(isa(I,C)),assert_hasInstance(C,I)).
%isa(AT,ttAgentType):- genls(AT,ttAgentGeneric).
%genls(AT,ttAgentGeneric):- isa(AT,ttAgentType).
%subFormat(ftTextType,ftText).
:- decl_mpred(tItem(ftID),[predIsFlag]).
:- decl_mpred(tRegion(ftID),[predIsFlag]).
:- decl_mpred(tRegion(ftID),tCol).
:- decl_mpred(tThinking(tAgentGeneric),[predIsFlag]).
:- decl_mpred_hybrid mudLastCommand/2.
:- decl_mpred_hybrid mudNamed/2, mudSpd/2.
:- decl_mpred_hybrid mudStr/2.
:- decl_mpred_hybrid typeGrid/3.
:- decl_mpred_hybrid((( mudContains/2))).
:- decl_mpred_hybrid((( mudLastCmdSuccess/2 ))).
:- do_gc.

:- decl_mpred_hybrid((tItem/1, tRegion/1, instVerbOverride/3,mudNamed/2, determinerString/2, mudKeyword/2 ,descriptionHere/2, mudToHitArmorClass0/2, tThinking/1, tDeleted/1, mudWeight/2, mudPermanence/3, act_term/2, mudAgentTurnnum/2, mudAtLoc/2, mudEnergy/2, mudHealth/2, mudDescription/2, mudFacing/2, mudCmdFailure/2, mudSpd/2, typeGrid/3, mudHeight/2, mudMemory/2, isa/2, pathName/3, mudPossess/2, mudScore/2, mudStm/2, mudStr/2, wearsClothing/2)).
:- decl_mpred_hybrid(( mudArmorLevel/2, mudLevelOf/2, mudToHitArmorClass0/2, mudBareHandDamage/2, chargeCapacity/2, mudEnergy/2, tCol/1, tAgentGeneric/1, tItem/1, tRegion/1, instVerbOverride/3,mudNamed/2, determinerString/2, mudKeyword/2 ,descriptionHere/2, tThinking/1, mudWeight/2, mudPermanence/3, act_term/2, mudAgentTurnnum/2, mudAtLoc/2, mudEnergy/2, mudHealth/2, mudDescription/2, mudFacing/2, failure/2, gridValue/4, mudHeight/2, mudMemory/2, isa/2, pathName/3, mudPossess/2, mudScore/2, mudStm/2, mudStr/2, mudWearing/2)).
:- decl_mpred_hybrid(typeHasGlyph,2).
prologHybrid(typeHasGlyph(tCol,ftString)).
:- decl_mpred_hybrid(mudActAffect/3).
:- decl_mpred_hybrid(mudAtLoc,2).
:- decl_mpred_hybrid(mudColor/2).
:- decl_mpred_hybrid(mudHealth,2).
:- decl_mpred_hybrid(mudMaterial/2).
:- decl_mpred_hybrid(mudMaxHitPoints(tAgentGeneric,ftInt)).
:- decl_mpred_hybrid(mudNeedsLook,2).
:- decl_mpred_hybrid(mudNeedsLook/2,[completelyAssertedCollection]).
:- decl_mpred_hybrid(mudShape/2).
:- decl_mpred_hybrid(mudSize/2).
:- decl_mpred_hybrid(mudStowing(tAgentGeneric,tItem)).
:- decl_mpred_hybrid(mudTexture/2).
:- decl_mpred_hybrid(pathBetween,3).
:- decl_mpred_prolog((latitude/2, mudMoveDist/2, longitude/2)).
:- decl_mpred_prolog(mudMoveDist/2,[predArgTypes(mudMoveDist(tAgentGeneric,ftInt)),prologSingleValued,predModule(user),query(call),argSingleValueDefault(2,1)]).
:- decl_mpred_prolog(stat_total/2).
:- decl_mpred_prolog(verb_alias(ftString,vtVerb)).
:- decl_type(tContainer).
:- decl_type(tRegion).
:- decl_type(vtBasicDir).
:- decl_type(vtBasicDirPlusUpDown).
:- decl_type(vtDirection).
:- decl_type(vtVerb).
:- dynamic stat_total/2.
:- dynamic(spawn_rate/2).
:- decl_type(tMonster/1).
%:- decl_mpred_prolog(action_info(vtActionTemplate,ftText)).
:- decl_mpred_prolog(agent_call_command(tAgentGeneric,ftAction)).
:- decl_mpred_prolog(member(ftTerm,ftTerm)).
:- decl_mpred_prolog(mud_test(ftTerm,ftCallable)).
:- decl_mpred_prolog(use_action_templates(ftTerm)).
%:- decl_mpred((tAgentGeneric/1, mudEnergy/2,mudHealth/2, mudAtLoc/2, failure/2, typeGrid/3, gridValue/4, isa/2, tItem/1, mudMemory/2, pathName/3, mudPossess/2, tRegion/1, mudScore/2, mudStm/2, mudFacing/2, localityOfObject/2, tThinking/1, mudWearing/2, mudFacing/2, mudHeight/2, act_term/2, nameStrings/2, mudDescription/2, pathBetween/3, mudAgentTurnnum/2)).
:- dynamic_safe(mudToHitArmorClass0 / 2).
:- ensure_universal_stub(mudAtLoc/2).
:- must(decl_mpred_prolog(agent_call_command/2)).
%:- user:decl_mpred_hybrid((argIsa/3, formatted_resultIsa/2, typeHasGlyph/2, inRegion/2, mudContains/2, isa/2, mudLabelTypeProps/3, mudMemory/2, mudPossess/2, mudStowing/2, genls/2, mudToHitArmorClass0/2, pddlSomethingIsa/2, resultIsa/2, subFormat/2, tCol/1, tRegion/1, completelyAssertedCollection/1, ttFormatType/1, typeProps/2)).


prologHybrid(instVerbOverride(ftTerm,ftAction,ftAction)).
%isa(localityOfObject,prologHybrid). 
%isa(mudActAffect, prologMultiValued).
%isa(mudMaxHitPoints,prologHybrid).
isa(vtDirection,ttValueType).

prologMultiValued(agent_text_command(tAgentGeneric,ftText,tAgentGeneric,ftAction)).

formatted_resultIsa(apathFn(tRegion,vtDirection),tPathway).

:-decl_mpred_prolog(is_vtActionTemplate/1).

is_vtActionTemplate(C):-nonvar(C),get_functor(C,F),!,atom_concat(act,_,F).
defnSufficient(ftAction,is_vtActionTemplate).

genls('FemaleAnimal',tPlayer).
genls('MaleAnimal',tPlayer).
genls(isEach('PortableObject','ProtectiveAttire','SomethingToWear'),tCarryAble).
genls(isEach('ProtectiveAttire','SomethingToWear'),tWearAble).
genls(isEach(tRegion,tAgentGeneric),tChannel).

:-decl_type(ttFormatted).
ttFormatted(aDirectionsFn(ftTerm,ftListFn(ftTerm))).
ttFormatted(apathFn(tRegion,vtDirection)).
ttFormatted(xyzFn(tRegion,ftInt,ftInt,ftInt)).

:- do_gc.

tCol(ttTypeByAction).
genls(ttTypeByAction,tCol).
(isa(X,ttTypeByAction) => isa(X,tCol)).


% (isa(Inst,Type),isa(Type,ttTypeByAction)) => isa(Inst,tHasAction).

genls(tAgentGeneric,tObj).
genls(tAgentGeneric,tSpatialThing).
genls(tCarryAble,tItem).
genls(tChargeAble,tItem).
genls(tContolDevice,tChargeAble).
genls(tDoor,tFurniture).
genls(tDoor,tItem).
genls(tDrinkAble,tItem).
genls(tEatAble,tItem).
genls(tFunction,tRelation).
genls(tFurniture,tObj).
genls(tFurniture,tPartofObj).
genls(tHumanPlayer,tPlayer).
genls(tItem,tObj).
genls(tItem,tSpatialThing).
genls(tMonster,ttAgentGeneric).
genls(tNpcPlayer,tPlayer).
genls(tObj,tSpatialThing).
genls(tPathway,tDoor).
genls(tPlayer,tAgentGeneric).
genls(tPred,tRelation).
genls(tRegion,tSpatialThing).
genls(ttObjectType,tCol).
genls(ttSpatialType,tCol).
genls(tUseAble,tItem).
genls(tWearAble,tItem).
genls(vtBasicDir,vtBasicDirPlusUpDown).
genls(vtBasicDirPlusUpDown,vtDirection).
genls(vtDirection,tTypevalue).
genls(vtPosture,vtVerb).

prologHybrid(typeHasGlyph(tCol,ftString)).
prologHybrid(mudColor(tSpatialThing,vtColor)).

prologHybrid(mudKnowing(tAgentGeneric,ftTerm)).
prologHybrid(mudLabelTypeProps(ftString,tCol,ftVoprop)).
prologHybrid(mudListPrice(tItem,ftNumber)).
prologHybrid(mudOpaqueness(ftTerm,ftPercent)).
prologHybrid(mudPossess(tAgentGeneric,tObj)).
prologHybrid(mudShape(tSpatialThing,vtShape)).
prologHybrid(mudSize(tSpatialThing,ftTerm)).
prologHybrid(mudTextSame(ftText,ftText)).
prologHybrid(mudTexture(tSpatialThing,vtTexture)).
prologHybrid(typeGrid(tCol,ftInt,ftListFn(ftString))).
prologListValued(aDirectionsFn(ftTerm,ftListFn(ftTerm))).
prologListValued(mudGetPrecepts(tAgentGeneric,ftListFn(tSpatialThing)),[predModule(user)]).
prologListValued(mudNearFeet(tAgentGeneric,ftListFn(tSpatialThing)),[]).
prologListValued(mudNearReach(tAgentGeneric,ftListFn(tSpatialThing)),[predModule(user)]).
prologMultiValued(action_rules(tAgentGeneric,vtVerb,ftListFn(ftVar),ftVoprop)).
prologMultiValued(mudLastCmdSuccess(tAgentGeneric,ftAction)).
prologMultiValued(descriptionHere(ftTerm,ftString)).
prologMultiValued(descriptionHere(ftTerm,ftString),prologOrdered).
prologMultiValued(determinerString(ftTerm,ftString)).
prologMultiValued(typeHasGlyph(ftTerm,ftString)).
prologMultiValued(gridValue(tRegion,ftInt,ftInt,tObj)).
prologMultiValued(instVerbOverride(ftTerm,ftAction,ftAction)).
prologMultiValued(isa(ftTerm,tCol)).
prologMultiValued(mudActAffect(ftTerm,ftTerm,ftTerm)).
prologMultiValued(mudActAffect(tItem,vtVerb,ftTerm(ftVoprop))).
prologMultiValued(mudCmdFailure(tAgentGeneric,ftAction)).

:- do_gc.


prologMultiValued(mudDescription(ftTerm,ftString),prologOrdered,prologHybrid).
prologMultiValued(mudDescription(ftTerm,ftText), [predProxyAssert(add_description),predProxyRetract(remove_description),predProxyQuery(query_description)],prologHybrid).
prologMultiValued(mudDescription(ftTerm,ftText),[predProxyAssert(add_description)],prologHybrid).
prologMultiValued(mudKeyword(ftTerm,ftString),prologHybrid).
prologMultiValued(mudMemory(tAgentGeneric,ftTerm),prologHybrid).
prologMultiValued(mudNamed(ftTerm,ftTerm),[],prologHybrid).
prologMultiValued(mudPossess(tObj,tObj),prologHybrid).
prologMultiValued(nameStrings(ftTerm,ftString),prologHybrid).
prologMultiValued(pathBetween(tRegion,vtDirection,tRegion),prologHybrid).
prologMultiValued(pathName(tRegion,vtDirection,ftString),prologHybrid).
prologMultiValued(genls(tCol,tCol),prologHybrid).
prologMultiValued(typeGrid(tCol,ftInt,ftListFn(ftString)),prologHybrid).
prologMultiValued(verbAsWell(ftTerm,ftAction,ftAction),prologHybrid).

prologNegByFailure(mudNeedsLook(tObj,ftBoolean),prologHybrid).
prologNegByFailure(tAgentGeneric(ftID),prologHybrid).
prologNegByFailure(tCol(ftID),prologHybrid).
prologNegByFailure(tItem(ftID),prologHybrid).
prologNegByFailure(tRegion(ftID),prologHybrid).
prologNegByFailure(tThinking(tAgentGeneric),prologHybrid).
pathName(Region,Dir,Text)=>mudDescription(apathFn(Region,Dir),Text).

prologSingleValued(chargeCapacity(tChargeAble,ftInt),prologHybrid).
prologSingleValued(location_center(tRegion,xyzFn(tRegion,ftInt,ftInt,ftInt)),prologHybrid).
prologSingleValued(mudAgentTurnnum(tAgentGeneric,ftInt),[argSingleValueDefault(2,0)],prologHybrid).
prologSingleValued(mudArmor(tObj,ftInt),prologHybrid).
prologSingleValued(mudArmorLevel(tWearAble,ftInt),prologHybrid).
prologSingleValued(mudAtLoc(tObj,xyzFn(tRegion,ftInt,ftInt,ftInt)),prologHybrid).
prologSingleValued(mudAttack(tObj,ftInt),prologHybrid).
prologSingleValued(mudBareHandDamage(tAgentGeneric,ftInt),prologHybrid).
% prologSingleValued(mudBareHandDamage(tAgentGeneric,ftDice),prologHybrid).
% prologSingleValued(mudEnergy(tChargeAble,ftInt(500)),prologHybrid).
prologSingleValued(mudEnergy(tChargeAble,ftInt),prologHybrid).
prologSingleValued(mudEnergy(tObj,ftInt),[argSingleValueDefault(2,500)],prologHybrid).
prologSingleValued(mudFacing(tObj,vtDirection(vNorth)),prologHybrid).
prologSingleValued(mudFacing(tObj,vtDirection),[argSingleValueDefault(2,vNorth)],prologHybrid).
prologSingleValued(mudHealth(tObj,ftInt),prologHybrid).
prologSingleValued(mudHeight(tObj,ftInt),prologHybrid).
prologSingleValued(mudHeight(tSpatialThing,ftInt),prologHybrid).
prologSingleValued(mudID(tObj,ftID),prologHybrid).
prologSingleValued(mudLastCommand(tAgentGeneric,ftAction),prologHybrid).
prologSingleValued(mudLevelOf(tCarryAble,ftInt),prologHybrid).
prologSingleValued(mudMaxHitPoints(tAgentGeneric,ftInt),[prologHybrid],prologHybrid).
prologSingleValued(mudMoveDist(tAgentGeneric,ftInt),[argSingleValueDefault(2,1)]).
prologSingleValued(mudNeedsLook(tAgentGeneric,ftBoolean),argSingleValueDefault(2,vFalse),prologHybrid).
prologSingleValued(mudPermanence(tItem,vtVerb,vtPerminance),prologHybrid).
prologSingleValued(mudScore(tObj,ftInt),prologHybrid).
prologSingleValued(mudSpd(tAgentGeneric,ftInt),prologHybrid).
prologSingleValued(mudStm(tAgentGeneric,ftInt),prologHybrid).
prologSingleValued(mudStr(tAgentGeneric,ftInt),prologHybrid).
prologSingleValued(mudToHitArmorClass0(tAgentGeneric,ftInt),prologHybrid).
prologSingleValued(mudWeight(tObj,ftInt),prologHybrid).
% prologSingleValued(spawn_rate(isPropFn(genls(tObj)),ftInt)).
prologSingleValued(spawn_rate(tCol,ftInt)).
prologSingleValued(stat_total(tAgentGeneric,ftInt)).
prologSingleValued(typeGrid(tCol,ftInt,ftListFn(ftString))).
resultIsa(apathFn,tPathway).
% '<=>'(isa(Whom,tNpcPlayer),whenAnd(isa(Whom,tPlayer),naf(isa(Whom,tHumanPlayer)))).
'<=>'(mudDescription(apathFn(Region,Dir),Text),pathName(Region,Dir,Text)).
'<=>'(nameStrings(apathFn(Region,Dir),Text),pathName(Region,Dir,Text)).
tInferInstanceFromArgType(vtSize).
tInferInstanceFromArgType(vtTexture).
ttAgentType(tMonster).
% user:instTypeProps(apathFn(Region,_Dir),tPathway,[localityOfObject(Region)]).
vtBasicDir(vEast).
vtBasicDir(vNorth).
vtBasicDir(vSouth).
vtBasicDir(vWest).
vtBasicDirPlusUpDown(vDown).
vtBasicDirPlusUpDown(vUp).
%localityOfObject(Above,HasSurface):- mudLocOnSurface(Above,HasSurface).
%localityOfObject(Clothes,Agent):- mudSubPart(Agent,Clothes).
%localityOfObject(Inner,Container):- mudInsideOf(Inner,Container).
%localityOfObject(Inner,Outer):- user:only_if_pttp, localityOfObject(Inner,Container),localityOfObject(Container,Outer).
nameStrings(apathFn(Region,Dir),Text):- pathName(Region,Dir,Text).
predArgTypes(mudMaterial(tSpatialThing,vtMaterial)).
predArgTypes(mudSize(tSpatialThing,vtSize)).
predArgTypes(mudTexture(tSpatialThing,vtTexture)).
predArgTypes(mudWearing(tAgentGeneric,tWearAble)).
predArgTypes(pathName(tRegion,vtDirection,ftString)).
predArgTypes(resultIsa(tFunction,tCol)).
predArgTypes(wasSuccess(tAgentGeneric,ftBoolean)).
predArgTypes(type_action_info(tCol,vtActionTemplate,ftText)).
%NEXT TODO predTypeMax(mudEnergy,tObj,130).
%NEXT TODO predTypeMax(mudHealth,tObj,500).


:-decl_mpred_hybrid(pathBetween(tRegion,vtDirection,tRegion)).
:-decl_mpred_hybrid(pathConnects(tRegion,tRegion),symmetric).


pathConnects(R1,R2):-pathBetween(R1,Dir,R2),nop(Dir).
pathConnects(R1,R2):-pathBetween(R2,Dir,R1),nop(Dir).



:- decl_mpred_prolog(ensure_some_pathBetween/2).
ensure_some_pathBetween(R1,R2):- pathBetween(R1,_,R2),!.
ensure_some_pathBetween(R1,R2):- pathBetween(R2,_,R1),!.
ensure_some_pathBetween(R1,R2):- 
   random_instance(vtBasicDir,Dir,true),not(pathBetween(R1,Dir,_)),reverse_dir(Dir,Rev),not(pathBetween(R2,Rev,_)),!,
   must((add(pathBetween(R1,Dir,R2)),add(pathBetween(R2,Rev,R1)))),!.
ensure_some_pathBetween(R1,R2):- 
   random_instance(vtBasicDirPlusUpDown,Dir,true),not(pathBetween(R1,Dir,_)),reverse_dir(Dir,Rev),not(pathBetween(R2,Rev,_)),!,
   must((add(pathBetween(R1,Dir,R2)),add(pathBetween(R2,Rev,R1)))),!.
ensure_some_pathBetween(R1,R2):- 
   random_instance(vtDirection,Dir,true),not(pathBetween(R1,Dir,_)),reverse_dir(Dir,Rev),not(pathBetween(R2,Rev,_)),!,
   must((add(pathBetween(R1,Dir,R2)),add(pathBetween(R2,Rev,R1)))),!.

:- decl_mpred_prolog(do_ensure_some_pathBetween/0).
do_ensure_some_pathBetween:- 
  (forall(no_repeats((is_asserted(pathConnects(R1,R2)),ground(R1:R2),isa(R1,tRegion),isa(R2,tRegion),dif(R1,R2))),show_call_failure((ensure_some_pathBetween(R1,R2),ensure_some_pathBetween(R2,R1))))).

:-onEachLoad(do_ensure_some_pathBetween).

:-assert_until_end_of_file(infSupertypeName).
:-onEndOfFile(dmsg(infSupertypeName)).

% ==================================================
% Classes of things
% ==================================================
:- do_gc.

genls(tAgentGeneric,tObj).
genls(tItem,tObj).

genls(tCandle,tPortableDevice).
genls(tFlashlight, tPortableDevice).
genls(tDesk, tOfficeRoomFurnature).

genls(tApple, tFood).
genls(tNani, tArt).
genls(tNani, tWashAble).
genls(tClothing, tWashAble).
genls(tClothing, tWearAble).
genls(tPants, tWearAble).
genls(tNani, tCarryAble).
genls(tBroccoli, tFood).
genls(tFood,tEatAble).
genls(tCrackers, tFood).
genls(tEnvelope, tOfficeItem).
genls(tStamp, tOfficeItem).
genls(tKey, tOfficeItem).

genls(tOfficeItem, tItem).
genls(tFood, tItem).
genls(tClothing, tItem).

genls( tCarryAble, tItem).
genls( tCarryAble, tDropAble).

genls( tCarryAble, tThrowAble).
% genls( tCarryAble, tCarryAble).

genls(tPortableDevice,tCarryAble).

:- decl_type(spatialInRegion).

:-do_gc.

genls(tPajamas, tClothing).
genls(tShirt, tClothing).
genls(tCoat, tClothing).
genls(tPants, tClothing).
genls(tClothing, tFoldAble).
genls(tClothing, tWearAble).

genls(tCoffeeCup, tLiquidContainer).
genls(tCoffeeCup, tDrinkAble).
genls(tCoffeeCup, tThrowAble).
genls(tCoffee, tLiquid).
genls(tBook, tReadAble).

genls(tPillow, tBedding).
genls(tBlanket, tBedding).                                                              
genls(tBedding, tFoldAble).
genls(tFoldAble, tCarryAble).
genls(tThrowAble, tCarryAble).
genls(tPortableDevice,tCarryAble).
genls(tPortableDevice,tPhysicalDevice).
genls(tPhysicalDevice,tUseAble).
genls(tWearAble, tCarryAble).
genls(tFood,tCarryAble).
genls(tCarryAble,tObj).
genls(tPartofObj,tNotTakAble).
genls(tBodyPart,tPartofObj).


genls(tLightSwitch, tWallFurnature).
genls(tComputer, tOfficeFurnature).
genls(tPartofFurnature,tPartofObj).

genls(tBed, tBedRoomFurnature).
genls(tStandTable, tBedRoomFurnature).
genls(tDresser, tBedRoomFurnature).

genls(tWashingMachine, tDeviceFurnature).
genls(tTable, tFurnature).

genls(tTable, tFurnatureMoveAble).

genls(tTable, tHasSurface).
genls(tSofa, tLivingRoomFurnature).
genls(tEasyChair, tLivingRoomFurnature).
genls(tEasyChair, tSitAble).
genls(tCoffeeTable, tLivingRoomFurnature).
genls(tBookcase, tWallFurnature).
genls(tDrawer, tContainer).
genls(tDrawer, tOpenAble).
genls(tDrawer, tCloseAble).
genls(tDrawer, tPartofFurnature).
genls(tTopDrawer, tPartofFurnature).
genls(tMiddleDrawer, tPartofFurnature).
genls(tBottomDrawer, tPartofFurnature). 
genls(tHousePlant, tPartofObj).
genls(tPlanter, tContainer). 
genls(tGueridon, tLivingRoomFurnature).
genls(tGardenPlant, tOutdoorFurnature).
genls(tSpatialThing,tLookAble).
genls(tNani,tTeddybear).
genls(tTeddybear,tTreasure).

genls(tBathTub,tBathRoomFurnature).
genls(tShower,tBathRoomFurnature).
genls(tToilet,tBathRoomFurnature).
genls(tSink,tBathRoomFurnature).
genls(tKitchenSink,tKitchenFurnature).
genls(tFridge,tKitchenFurnature).
genls(tStove,tKitchenFurnature).
genls(tKitchenCounter,tKitchenFurnature).
genls(tFurnature,tOntoAble).


genls(tFurnature,tItem).
genls(tOfficeRoomFurnature,tFurnature).
genls(tBathRoomFurnature,tFurnature).
genls(tKitchenFurnature,tFurnature).
genls(tLivingRoomFurnature,tFurnature).
genls(tOutdoorFurnature,tFurnature).

:- do_gc.




%(isa(I,Sub), disjointWith(Sub, Super)) => neg(isa(I,Super)).

neg(isa(I,Super)) <= (isa(I,Sub), disjointWith(Sub, Super)).

genls(tPartOfobj,tItem).

% dividesBetween(tItem,tPathways).
dividesBetween(tItem,tMassfull,tMassless).
dividesBetween(tObj,tItem,tAgentGeneric).
dividesBetween(tObj,tMassfull,tMassless).
dividesBetween(tSpatialThing,tObj,tRegion).
dividesBetween(tAgentGeneric,tPlayer,tNpcPlayer).

dividesBetween(S,C1,C2) => (disjointWith(C1,C2) , genls(C1,S) ,genls(C2,S)).

disjointWith(P1,P2) => (not(isa(C,P1)) <=> isa(C,P2)).

isa(Col1, ttObjectType) => ~isa(Col1, ttFormatType).

=> tCol(tCol).
=> tCol(tPred).
=> tCol(tFunction).
=> tCol(tRelation).
=> tCol(ttSpatialType).
=> tCol(ttFormatType).
% => tCol(functorDeclares).
% tCol(ArgsIsa):-is_pred_declarer(ArgsIsa).
% TODO decide if OK
%tCol(F):-hasInstance(functorDeclares,F).
=> tCol(ttFormatType).
=> tCol(vtActionTemplate).
=> tCol(tRegion).
=> tCol(tContainer).

isa(tRegion,ttSpatialType).
isa(tRelation,ttAbstractType).

% ==================================================
% typeProps Descriptions
% ==================================================

typeProps(tCandle,[mudColor(vBlue),mudSize(vSmall),mudShape(vTriangular),mudMaterial(vWax),mudTexture(vSticky)]).
typeProps(tRedApple,[mudColor(vRed),mudSize(vSmall),mudShape(vRound),isa(tFruit),mudTexture(vSmooth)]).
typeProps(tGreenApple,[mudColor(isEach(vGreen,vPastel)),mudSize(vSmall),mudShape(vRound),isa(tFruit),mudTexture(vSmooth)]).
typeProps(tTable,[mudColor(isEach(vBlue,vWhite)),mudSize(vLarge),mudShape(vOval),mudMaterial(vWood),mudTexture(isEach(vBumpy,vIrregular)),mudWeight(50)]).
typeProps(tPillow,[mudColor(vWhite),mudSize(vMedium),mudShape(vRectangular),mudMaterial(isEach(vCotton,vFlannel)),mudTexture(isEach(vFluffy,vSoft))]).
typeProps(tBlanket,[mudColor(isEach(vGreen,vDark)),mudSize(isEach(vLarge,vBulky)),mudShape(vRectangular),mudMaterial(vRayon),mudTexture(isEach(vPlush,vSoft))]).                                                              
typeProps(tStandTable,[mudColor(isEach(vBlack,vShiney)),mudSize(vMedium),mudShape(isEach(vCubular,vRectangular)),mudMaterial(vWood),mudTexture(vSmooth),mudWeight(25)]).
typeProps(tPajams,[mudColor(isEach(vBlue,vPastel)),mudSize(isEach(vMedium,vFits)),mudShape(vUnique),mudMaterial(isEach(vCotton,vRayon)),mudTexture(vSoft)]).
typeProps(tShirt,[mudColor(vBlack),mudSize(isEach(vMedium,vFits)),mudShape(isLikeFn(mudShape,tTorso)),mudMaterial(vCotton),mudTexture(isEach(vSoft,vThreadbare))]).
typeProps(tFlashlight,[mudColor(vYellow),mudSize(isEach(vMedium,vSmall)),mudShape(vCylindrical),mudMaterial(vPlastic),mudTexture(vRibbed)]).
typeProps(tKey,[mudColor(vSilver),mudSize(isEach(vSmall,vTiny)),mudShape(vUnique),mudMaterial(vMetal),mudTexture(isEach(vRidged,vBumpy))]).
typeProps(tEnvelope,[mudColor(vWhite),mudSize(vSmall),mudShape(vRectangular),mudMaterial(vPaper),mudTexture(vSmooth)]).
typeProps(tDesk,[mudColor(isEach(vBrown,vShiney)),mudSize(vLarge),mudShape(isEach(vCubular,vRectangular)),mudTexture(isEach(vSmooth,vRidged)),mudWeight(175)]).
typeProps(tWashingMachine,[mudColor(vWhite),mudSize(vLarge),mudShape(isEach(vCubular,vSquare)),mudMaterial(vMetal),mudTexture(vSmooth),mudWeight(125)]).
typeProps(tBroccoli,[mudColor(vGreen),mudSize(vSmall),mudShape(isLikeFn(mudShape,tTree)),isa(tVegetable),mudTexture(isEach(vPorous,vBumpy))]).                                                                    
typeProps(tCrackers,[mudColor(vTan),isa(tBread),mudShape(isEach(vCircular,vFlat)),mudSize(vSmall),mudTexture(isEach(vDry,vCoarse))]).
typeProps(tComputer,[mudColor(vGrey),mudMaterial(vPlastic),mudShape(isEach(vCubular,vRectangular)),mudSize(vMedium),mudTexture(vSmooth)]).
typeProps(tStamp,[mudColor(vPolychromatic),mudSize(isEach(vTiny,thin)),mudShape(vSquare),mudMaterial(vPaper),mudTexture(isEach(vSmooth,vSticky))]).
typeProps(tCoat,[mudColor(vBlack),mudSize(isEach(vMedium,vFits)),mudShape(isLikeFn(mudShape,tTorso)),mudMaterial(isEach(vWool,vCotton,vRayon)),mudTexture(vCoarse)]).
typeProps(tPants,[mudColor(vBlack),mudSize(isEach(vMedium,vFits)),mudShape(isLikeFn(mudShape,tAss)),mudMaterial(vDenim),mudTexture(vCoarse)]).
typeProps(tNani,[mudColor(vBrown),mudColor(vWhite),mudSize(vMedium),mudShape(isLikeFn(mudShape,tTeddybear)),mudMaterial(vPlush),mudTexture(isEach(vFuzzy,vSoft))]).
typeProps(tLightSwitch,[mudColor(vCream),mudSize(vSmall),mudShape(vRectangular),mudMaterial(vPlastic),mudTexture(vSmooth)]).

:- do_gc.

typeProps(tBall,[mudColor(vRed),mudSize(vMedium),mudShape(vSpherical),mudMaterial(vRubber),mudTexture(vBumpy)]).
typeProps(tCoffee,[mudColor(isEach(vBlack,vBrown)),mudSize(vSmall),mudShape(vFluid),mudMaterial(tLiquid),mudTexture(vWet)]).
typeProps(tCoffeeCup,[mudColor(vBlack),mudColor(vBrown),mudSize(vSmall),mudShape(vCuplike),mudMaterial(vGlass),mudTexture(vSmooth)]).
typeProps(tSofa,[mudColor(isEach(vBlue,vDark)),mudSize(isEach(vLarge,vWide,vLong)),mudShape(vPolyhedral),mudMaterial(isEach(vPoplin,vWood)),mudTexture(vRibbed),mudWeight(125)]).
typeProps(tEasyChair,[mudColor(vBlue),mudSize(isEach(vLarge,vNarrow)),mudShape(vPolyhedral),mudMaterial(isEach(vPoplin,vWood)),mudTexture(vRibbed),mudWeight(75)]).
typeProps(tCoffeeTable,[mudColor(isEach(vBrown,vShiney)),mudSize(vMedium),mudShape(vCircular),mudMaterial(vWood),mudTexture(vSmooth),mudWeight(35)]).
typeProps(tBookTypeA,[mudColor(vGreen),mudColor(vWhite),mudColor(vBlack),mudSize(vSmall),mudShape(isEach(vCubular,vRectangular)),mudMaterial(vPaper),mudTexture(vSmooth)]).
typeProps(tPinkBook,[mudColor(vPink),mudColor(vWhite),mudColor(vBlack),mudSize(vSmall),mudShape(isEach(vCubular,vRectangular)),mudMaterial(vPaper),mudTexture(vSmooth)]).
typeProps(tBookcase,[mudColor(isEach(vBrown,vDark,vShiney)),mudSize(vLarge),mudShape(isEach(vSquare,vConcavePolyhedron)),mudMaterial(vWood),mudTexture(vSmooth),mudWeight(60)]).
typeProps(tDresser,[mudColor(isEach(vBrown,vShiney)),mudSize(vLarge),mudShape(isEach(vRectangular,vPolyhedral)),mudMaterial(vWood),mudTexture(vSmooth),mudWeight(45)]).
typeProps(tTopDrawer,[mudColor(isEach(vBrown,vShiney)),mudSize(vMedium),mudShape(isEach(vRectangular,vConcavePolyhedron)),mudMaterial(vWood),mudTexture(vSmooth)]). 
typeProps(tMiddleDrawer,[mudColor(isEach(vBrown,vShiney)),mudSize(vMedium),mudShape(isEach(vRectangular,vConcavePolyhedron)),mudMaterial(vWood),mudTexture(vSmooth)]).
typeProps(tBottomDrawer,[mudColor(isEach(vBrown,vShiney)),mudSize(vMedium),mudShape(isEach(vRectangular,vConcavePolyhedron)),mudMaterial(vWood),mudTexture(vSmooth)]).
typeProps(tPlanter,[mudColor(isEach(vPastel,vBlue)),mudSize(vMedium),mudShape(isEach(vCylindrical,vTrapezohedron)),mudMaterial(vClay),mudTexture(vAbrasive),mudWeight(15)]).
typeProps(tHousePlant,[mudColor(vGreen),mudSize(vMedium),mudShape(vAnthuriumCrystallinum),mudMaterial(vPlantTissue),mudTexture(vSmooth)]).
typeProps(tGueridon,[mudColor(isEach(vBrown,vShiney)),mudSize(vMedium),mudShape(vCircular),mudMaterial(vWood),mudTexture(vSmooth),mudWeight(25)]).		 

typeProps(tTeddybear,[mudColor(vNatural),mudShape(vUnique)]).
typeProps(tTorso,[mudColor(isLikeFn(mudColor,tSkin)),mudShape(vUnique)]).
typeProps(tSkin,[mudColor(vUnique),mudShape(vUnique)]).

%NEXT TODO predTypeMax(mudEnergy,tAgentGeneric,120).

typeProps(tAgentGeneric,[predInstMax(mudHealth,500)]).


% :-end_module_type(dynamic).

% instTypeProps(isSelf,Type,[mudNamed(isSelf),typeHasGlyph(Lbl)|SP]):-  mudLabelTypeProps(Lbl,Type,SomeProps),nonvar(Type),flatten(SomeProps,SP).

:- do_gc.
% Vacuum World example objects........
mudLabelTypeProps(wl,tWall,[mudHeight(3),mudWeight(4)]).
mudLabelTypeProps(tr,tTree,[mudHeight(3),mudWeight(4)]).
mudLabelTypeProps(rk,tRock,[mudHeight(2),mudWeight(4)]).
mudLabelTypeProps(pt,tPit,[mudHeight(-1),mudWeight(4)]).
 mudLabelTypeProps(ot,tOutlet,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenStays),mudActAffect(actTake,mudEnergy(+50))]).
 mudLabelTypeProps(nt,tNut,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenMoves),mudActAffect(actEat,mudEnergy(+40)),spawn_rate(10)]).
mudLabelTypeProps(lw,tLowWall,[mudHeight(2),mudWeight(4)]).
:- do_gc.

mudLabelTypeProps(lg,tLedge,[mudHeight(2),mudWeight(4)]).
mudLabelTypeProps(lb,tLowBox,[mudHeight(2),mudWeight(2)]).
:- do_gc.

mudLabelTypeProps(hw,tHighWall,[mudHeight(3),mudWeight(4)]).
mudLabelTypeProps(hb,tHighBox,[mudHeight(3),mudWeight(3)]).
mudLabelTypeProps(gd,tGold,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenDeletes),mudActAffect(actTake,mudScore(+10))]).
:- do_gc.

mudLabelTypeProps(fd,tFood,[mudHeight(0),mudWeight(1),mudPermanence(actTake,vTakenMoves),mudActAffect(actEat,mudEnergy(+80))]).
mudLabelTypeProps(el,tElixer,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenMoves),mudActAffect(actEat,mudHealth(+80))]).
mudLabelTypeProps(ed,tEdgeOfWorld,[mudHeight(10),mudWeight(4)]).
:-garbage_collect_atoms.
 mudLabelTypeProps(dt,tDirt,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenDeletes),mudActAffect(actTake,mudScore(+1)),spawn_rate(5)]).
:-garbage_collect_atoms.
mudLabelTypeProps(dr,tDoor,[mudHeight(3),mudWeight(2)]).
:-garbage_collect_atoms.

%Empty Location
% You *have* to use 0 as the id of the empty location. (no way!)
mudLabelTypeProps(--,ftVar,[]).

% What an agent turns into upon death.
% Must be named iCorpseFn (or edit agent_to_corpse/1 in lib.pl.
 mudLabelTypeProps(cp,tCorpsea,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenMoves),mudActAffect(actEat,mudEnergy(+80)),mudActAffect(actTake,mudScore(+10))]).
 mudLabelTypeProps(cp,tCorpseb,[mudHeight(1),mudWeight(1),mudPermanence(actTake,vTakenMoves),mudActAffect(actEat,mudEnergy(+120))]).
mudLabelTypeProps(da,tCorpsec,[mudHeight(2),mudWeight(2)]).
% This is used to make the monster roaming the maze a bit tougher
% It doesn't require any of the usual traits since the monster will never 
% leave the monster's possession.
mudLabelTypeProps(nk,tNastyKnife,[mudActAffect(actWield,mudAttack(2))]).
mudLabelTypeProps(th,tToughHide,[mudActAffect(actWear,mudArmor(2))]).

typeProps(tAgentGeneric,[mudMoveDist(1)]).
typeProps(tAgentGeneric,[predInstMax(mudHealth,500), predInstMax(mudEnergy,200), mudHealth(500), mudEnergy(200),  mudFacing(isRandom(vtBasicDir)), mudAgentTurnnum(0), mudScore(1), mudMemory(aDirectionsFn([vNorth,vSouth,vEast,vWest,vNE,vNW,vSE,vSW,vUp,vDown]))]).
typeProps(tAgentGeneric,mudLastCommand(actStand)).
typeProps(tAgentGeneric,mudNeedsLook(vFalse)).
typeProps(tFood,[mudHeight(0)]).
typeProps(tItem,mudEnergy(140)).
typeProps(tItem,mudListPrice(0)).
typeProps(tObj,[mudOpaqueness(100)]).
typeProps(tRegion,[mudOpaqueness(1)]).
typeProps(tSpatialThing,mudHeight(0)).

% Define the maximum charge and maximum damage an agent can have


% % :- include(logicmoo(vworld/moo_footer)).
