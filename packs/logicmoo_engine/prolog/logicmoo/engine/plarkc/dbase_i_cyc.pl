/** <module> 
% ===================================================================
% File 'logicmoo_i_cyc.pl'
% Purpose: Emulation of OpenCyc for SWI-Prolog
% Maintainer: Douglas Miles
% Contact: $Author: dmiles $@users.sourceforge.net ;
% Version: 'interface.pl' 1.0.0
% Revision:  $Revision: 1.9 $
% Revised At:   $Date: 2002/06/27 14:13:20 $
% ===================================================================
% File used as storage place for all predicates which make us more like Cyc
%
% Dec 13, 2035
% Douglas Miles
*/
%:- module(tiny_kb,['TINYKB-ASSERTION'/5, 'TINYKB-ASSERTION'/6]).

:-if_file_exists(user:ensure_loaded(logicmoo(ext/moo_ext_cyc_new))).

isa_db(I,C):-clause(isa(I,C),true).

mpred_to_cyc(tCol,'#$Collection').
mpred_to_cyc(ttFormatType,'#$CycLExpressionType').
mpred_to_cyc(tPred,'#$Predicate').
mpred_to_cyc(tFunction,'#$Function-Denotational').
mpred_to_cyc(ftVar,'#$CycLVariable').


mpred_to_cyc(D,C):-var(D),mpred_t_type(C),atom_concat('t',C,D).
mpred_to_cyc(D,C):-nonvar(D),atom_concat('t',C,D),mpred_t_type(C).

mpred_t_type('#$Relation').

%cyc_to_pfc_idiom(different,dif).
cyc_to_pfc_idiom(equiv,(<=>)).
cyc_to_pfc_idiom(implies,(=>)).
cyc_to_pfc_idiom('CycLTerm','CycLExpression').
cyc_to_pfc_idiom(not,(neg)).

cyc_to_pfc_idiom([Conj|MORE],Out):-fail, not(is_ftVar(Conj)),!,cyc_to_pfc_sent_idiom_2(Conj,Pred,_),
  with_assertions(thocal:outer_pred_expansion(Conj,MORE),
    ( maplist(cyc_to_pfc_expansion,MORE,MOREL), 
       with_assertions(thocal:outer_pred_expansion(Pred,MOREL),       
         list_to_ops(Pred,MOREL,Out)))),!.

cyc_to_pfc_sent_idiom_2(and,(','),trueSentence).

list_to_ops(_,V,V):-is_ftVar(V),!.
list_to_ops(Pred,[],Out):-cyc_to_pfc_sent_idiom_2(_,Pred,Out),!.
list_to_ops(Pred,In,Out):-not(is_list(In)),!,cyc_to_pfc_expansion(In,Mid),cyc_to_pfc_sent_idiom_2(_,Pred,ArityOne),Out=..[ArityOne,Mid].
list_to_ops(_,[In],Out):-!,cyc_to_pfc_expansion(In,Out).
list_to_ops(Pred,[H,T],Body):-!,
    cyc_to_pfc_expansion(H,HH),
    cyc_to_pfc_expansion(T,TT),
    (is_list(TT)-> Body=..[Pred,HH|TT]; Body=..[Pred,HH,TT]).

list_to_ops(Pred,[H|T],Body):-!,
    list_to_ops(Pred,H,HH),
    list_to_ops(Pred,T,TT),
    (is_list(TT)-> Body=..[Pred,HH|TT]; Body=..[Pred,HH,TT]).

kw_to_vars(KW,VARS):-subsT_each(KW,[':ARG1'=_ARG1,':ARG2'=_ARG2,':ARG3'=_ARG3,':ARG4'=_ARG4,':ARG5'=_ARG5,':ARG6'=_ARG6],VARS).
make_kw_functor(F,A,CYCL):-make_kw_functor(F,A,CYCL,':ARG'),!.
make_kw_functor(F,A,CYCL,PREFIX):-make_functor_h(CYCL,F,A),CYCL=..[F|ARGS],label_args(PREFIX,1,ARGS).

label_args(_PREFIX,_,[]).
label_args(PREFIX,N,[ARG|ARGS]):-atom_concat(PREFIX,N,TOARG),ignore(TOARG=ARG),!,N2 is N+1,label_args(PREFIX,N2,ARGS).

:-thread_local thocal:outer_pred_expansion/2.

cyc_to_pfc_expansion_entry(I,O):-fail,cyc_to_pfc_expansion(I,M),!,must((functor(I,FI,_),functor(M,MF,_),FI==MF)),O=M.

cyc_to_pfc_expansion(V,V):-is_ftVar(V),!.
cyc_to_pfc_expansion(I,O):-cyc_to_pfc_idiom(I,O),!.
cyc_to_pfc_expansion(V,V):-not(compound(V)),!.
cyc_to_pfc_expansion([H|T],[HH|TT]):-!,cyc_to_pfc_expansion(H,HH),cyc_to_pfc_expansion(T,TT),!.
cyc_to_pfc_expansion(HOLDS,HOLDSOUT):-HOLDS=..[F|HOLDSL],
  with_assertions(thocal:outer_pred_expansion(F,HOLDSL),cyc_to_pfc_expansion([F|HOLDSL],HOLDSOUTL)),!,
  (is_list(HOLDSOUTL)-> must(HOLDSOUT=..HOLDSOUTL) ; HOLDSOUT=HOLDSOUTL),!.

sterm_to_pterm(VAR,'$VAR'(V)):-atom(VAR),atom_concat('?',_,VAR),clip_qm(VAR,V),!.
sterm_to_pterm(VAR,kw((V))):-atom(VAR),atom_concat(':',V2,VAR),clip_qm(V2,V),!.
sterm_to_pterm(VAR,VAR):-is_ftVar(VAR),!.
sterm_to_pterm([VAR],VAR):-is_ftVar(VAR),!.
sterm_to_pterm([X],Y):-!,nonvar(X),sterm_to_pterm(X,Y).

sterm_to_pterm([S|TERM],dot_holds(PTERM)):- not(is_list(TERM)),!,sterm_to_pterm_list([S|TERM],(PTERM)),!.
sterm_to_pterm([S|TERM],PTERM):-is_ftVar(S),
            sterm_to_pterm_list(TERM,PLIST),            
            PTERM=..[holds,S|PLIST].

sterm_to_pterm([S|TERM],PTERM):-number(S),!,
            sterm_to_pterm_list([S|TERM],PTERM).            
	    
sterm_to_pterm([S|TERM],PTERM):-nonvar(S),atomic(S),!,
            sterm_to_pterm_list(TERM,PLIST),            
            PTERM=..[S|PLIST].

sterm_to_pterm([S|TERM],PTERM):-!,  atomic(S),
            sterm_to_pterm_list(TERM,PLIST),            
            PTERM=..[holds,S|PLIST].

sterm_to_pterm(VAR,VAR):-!.

sterm_to_pterm_list(VAR,VAR):-is_ftVar(VAR),!.
sterm_to_pterm_list([],[]):-!.
sterm_to_pterm_list([S|STERM],[P|PTERM]):-!,
              sterm_to_pterm(S,P),
              sterm_to_pterm_list(STERM,PTERM).
sterm_to_pterm_list(VAR,[VAR]).

clip_us(A,AO):-concat_atom(L,'-',A),concat_atom(L,'_',AO).
clip_qm(QA,AO):-atom_concat('??',A1,QA),!,atom_concat('_',A1,A),clip_us(A,AO).
clip_qm(QA,AO):-atom_concat('?',A,QA),!,clip_us(A,AO).
clip_qm(A,AO):-clip_us(A,AO).

fixvars(P,_,[],P):-!.
fixvars(P,N,[V|VARS],PO):-  
     atom_string(Name,V),clip_qm(Name,NB),Var = '$VAR'(NB),
     subst(P,'$VAR'(N),Var,PM0),
     subst(PM0,'$VAR'(Name),Var,PM),
   %  nb_getval('$variable_names', Vs),
  %   append(Vs,[Name=Var],NVs),
  %   nb_setval('$variable_names', NVs),
     N2 is N + 1,fixvars(PM,N2,VARS,PO).


:-dynamic(argIsa/3).
:-multifile(argIsa/3).
:-dynamic(argGenl/3).
:-multifile(argGenl/3).
:-dynamic(argQuotedIsa/3).
:-multifile(argQuotedIsa/3).
/*
isa(I,C):-exactlyAssertedEL(isa,I,C,_,_).
genls(I,C):-exactlyAssertedEL(genls,I,C,_,_).
arity(I,C):-exactlyAssertedEL(arity,I,C,_,_).
argIsa(P,N,C):-exactlyAssertedEL(argIsa,P,N,C,_,_).
argGenl(P,N,C):-exactlyAssertedEL(argGenl,P,N,C,_,_).
argQuotedIsa(P,N,C):-exactlyAssertedEL(argQuotedIsa,P,N,C,_,_).
*/
% queuedTinyKB(CycL,MT):- (tUndressedMt(MT);tDressedMt(MT)),(STR=vStrMon;STR=vStrDef),  tinyKB_All(CycL,MT,STR),\+ clause(exactlyAssertedEL(CycL,_,_,_),true).
% queuedTinyKB(CycL):-tUndressedMt(MT),queuedTinyKB(CycL,MT).
% queuedTinyKB(ist(MT,CycL)):-tDressedMt(MT),queuedTinyKB(CycL,MT).


ist(MT,P):-tinyKB(P,MT,vStrMon).
ist(MT,P):-tinyKB(P,MT,vStrDef).

tinyKB(P):-tUndressedMt(MT),tinyKB(P,MT,_).
tinyKB(ist(MT,P)):-tDressedMt(MT),tinyKB(P,MT,_).


tinyKB(PO,MT,STR):- %fwc,  
  (tUndressedMt(MT);tDressedMt(MT)),(STR=vStrMon;STR=vStrDef), 
  tinyKB_All(PO,MT,STR).

tinyKB_All(V,MT,STR):- tinyAssertion(V,MT,STR).
tinyKB_All(PO,MT,STR):- current_predicate('TINYKB-ASSERTION'/5),!,
    tiny_kb_ASSERTION(PLISTIn,PROPS),
        once((sterm_to_pterm(PLISTIn,P),
               memberchk(amt(MT),PROPS),
               memberchk(str(STR),PROPS), 
              (member(vars(VARS),PROPS)->(nb_setval('$variable_names', []),fixvars(P,0,VARS,PO));PO=P ))).

tinyKB:-forall(tinyKB(P,MT,STR),((print_assertion(P,MT,STR),pfc_add(P)))).

print_assertion(P,MT,STR):- P=..PL,append([exactlyAssertedEL|PL],[MT,STR],PPL),PP=..PPL, portray_clause(current_output,PP,[numbervars(false)]).


tUndressedMt('UniversalVocabularyImplementationMt').
tUndressedMt('LogicalTruthImplementationMt').
tUndressedMt('CoreCycLImplementationMt').
tUndressedMt('UniversalVocabularyMt').
tUndressedMt('LogicalTruthMt').
tUndressedMt('CoreCycLMt').
tUndressedMt('BaseKB').
tDressedMt('BookkeepingMt').
tDressedMt('EnglishParaphraseMt').
tDressedMt('TemporaryEnglishParaphraseMt').

call_el_stub(V,MT,STR):-into_mpred_form(V,M),!,M=..ML,((ML=[t|ARGS]-> true; ARGS=ML)),CALL=..[exactlyAssertedEL|ARGS],!,call(CALL,MT,STR).
make_el_stub(V,MT,STR,CALL):-into_mpred_form(V,M),!,M=..ML,((ML=[t|ARGS]-> true; ARGS=ML)),append(ARGS,[MT,STR],CARGS),CALL=..[exactlyAssertedEL|CARGS],!.

tinyAssertion(V,MT,STR):- 
 nonvar(V) -> call_el_stub(V,MT,STR);
  (tinyAssertion0(W,MT,STR),once(into_mpred_form(W,V))).

tinyAssertion0(t(A,B,C,D,E),MT,STR):-exactlyAssertedEL(A,B,C,D,E,MT,STR).
tinyAssertion0(t(A,B,C,D),MT,STR):-exactlyAssertedEL(A,B,C,D,MT,STR).
tinyAssertion0(t(A,B,C),MT,STR):-exactlyAssertedEL(A,B,C,MT,STR).
tinyAssertion0(t(A,B),MT,STR):-exactlyAssertedEL(A,B,MT,STR).


addTinyCycL(CycLIn):- into_mpred_form(CycLIn,CycL),
  ignore((tiny_support(CycL,_MT,CALL),retract(CALL))),!,
  addCycL(CycL),!.


% tiny_support(CycL,MT,CALL):- CycL=..[F|Args], append(Args,[MT,_STR],WMT),CCALL=..[exactlyAssertedEL,F|WMT],!,((clause(CCALL,true), CCALL=CALL) ; clause(CCALL,(CALL,_))).

make_functor_h(CycL,F,A):- length(Args,A),CycL=..[F|Args].

is_simple_gaf(V):-not(compound(V)),!.
is_simple_gaf(V):-needs_canoncalization(V),!,fail.
is_simple_gaf(V):-functor(V,F,A),member(F/A,[isa/2,genls/2,argQuotedIsa/3,afterAdding/2,afterRemoving/2]),!.
is_simple_gaf(V):-needs_indexing(V),!,fail.
is_simple_gaf(_).

needs_indexing(V):-compound(V),arg(_,V,A),not(is_simple_arg(A)),!,fail.

is_simple_arg(A):-not(compound(A)),!.
is_simple_arg(A):-functor(A,Simple,_),tEscapeFunction(Simple).

'tEscapeFunction'('TINYKB-ASSERTION').
'tEscapeFunction'('SubLQuoteFn').
'tEscapeFunction'(X):- 'UnreifiableFunction'(X).

needs_canoncalization(CycL):-is_ftVar(CycL),!,fail.
needs_canoncalization(CycL):-functor(CycL,F,_),isa_db(F,'SentenceOperator').
needs_canoncalization(CycL):-needs_indexing(CycL).

is_better_backchained(CycL):-is_ftVar(CycL),!,fail.
is_better_backchained(CycL):-functor(CycL,F,_),isa_db(F,'SentenceOperator').
is_better_backchained(V):-unnumbervars(V,FOO),(((each_subterm(FOO,SubTerm),nonvar(SubTerm),isa_db(SubTerm,tAvoidForwardChain)))),!.


as_cycl(VP,VE):-subst(VP,('-'),(neg),V0),subst(V0,('v'),(or),V1),subst(V1,('exists'),(thereExists),V2),subst(V2,('&'),(and),VE),!.


:-dynamic(addTiny_added/1).
addCycL(V):-addTiny_added(V),!.
addCycL(V):-into_mpred_form(V,M),V\=@=M,!,addCycL(M),!.
addCycL(V):-defunctionalize('implies',V,VE),V\=@=VE,!,addCycL(VE).
addCycL(V):-cyc_to_pfc_expansion(V,VE),V\=@=VE,!,addCycL(VE).
addCycL(V):-is_simple_gaf(V),!,addCycL0(V),!.
addCycL(V):-kif_to_boxlog(V,VB),boxlog_to_prolog(VB,VP),V\=@=VP,!,as_cycl(VP,VE),show_call(addCycL0(VE)).
addCycL(V):-addCycL0(V),!.

addCycL0(V):-addCycL1(V).

addCycL1(V):-into_mpred_form(V,M),V\=@=M,!,addCycL0(M),!.
addCycL1(V):-cyc_to_pfc_expansion(V,VE),V\=@=VE,!,addCycL0(VE).
addCycL1((TRUE=>V)):-is_true(TRUE),addCycL0(V),!.
addCycL1((V<=TRUE)):-is_true(TRUE),addCycL0(V),!.
addCycL1((V :- TRUE)):-is_true(TRUE),addCycL0(V),!.
addCycL1((V :- A)):- show_call(addCycL0((A => V))).
addCycL1((A => (V1 , V2))):-not(is_ftVar(V1)),!,show_call(addCycL0((A => V1))) , show_call(addCycL0((A => V2))).
addCycL1((V1 , V2)):-!,addCycL0(V1),addCycL0(V2),!.
addCycL1([V1 | V2]):-!,addCycL0(V1),addCycL0(V2),!.
addCycL1(V):-addTiny_added(V),!.
addCycL1(V):-asserta(addTiny_added(V)),unnumbervars(V,VE),pfc_add(VE),remQueuedTinyKB(VE).


sent_to_conseq(CycLIn,Consequent):- into_mpred_form(CycLIn,CycL), ignore((tiny_support(CycL,_MT,CALL),retract(CALL))),must(cycLToMpred(CycL,Consequent)),!.

:-dynamic(addTiny_added/1).

cycLToMpred(V,CP):-into_mpred_form(V,M),V\=@=M,!,cycLToMpred(M,CP),!.
cycLToMpred(V,CP):-cyc_to_pfc_expansion(V,VE),V\=@=VE,!,cycLToMpred(VE,CP).
cycLToMpred(V,CP):-is_simple_gaf(V),!,cycLToMpred0(V,CP),!.
cycLToMpred(V,CP):-defunctionalize('implies',V,VE),V\=@=VE,!,cycLToMpred(VE,CP).
cycLToMpred(V,CP):-kif_to_boxlog(V,VB),boxlog_to_prolog(VB,VP),V\=@=VP,!,as_cycl(VP,VE),show_call(cycLToMpred0(VE,CP)).
cycLToMpred(V,CP):-cycLToMpred0(V,CP),!.

cycLToMpred0(V,CP):-into_mpred_form(V,M),V\=@=M,!,cycLToMpred0(M,CP),!.
cycLToMpred0(V,CP):-cyc_to_pfc_expansion(V,VE),V\=@=VE,!,cycLToMpred0(VE,CP).
cycLToMpred0((TRUE=>V),CP):-is_true(TRUE),cycLToMpred0(V,CP),!.
cycLToMpred0((V<=TRUE),CP):-is_true(TRUE),cycLToMpred0(V,CP),!.
cycLToMpred0((V :- TRUE),CP):-is_true(TRUE),cycLToMpred0(V,CP),!.
cycLToMpred0((V :- A),CP):- show_call(cycLToMpred0((A => V))).
cycLToMpred0((A => (V1 , V2)),CP):-not(is_ftVar(V1)),!,cycLToMpred0((A=> (V1/consistent(V2))),V1P),cycLToMpred0((A=> (V2/consistent(V1))),V2P) ,!,conjoin(V1P,V2P,CP).
cycLToMpred0((V1 , V2),CP):-!,cycLToMpred0(V1,V1P),cycLToMpred0(V2,V2P),!,conjoin(V1P,V2P,CP).
cycLToMpred0([V1 | V2],CP):-!,cycLToMpred0(V1,V1P),cycLToMpred0(V2,V2P),!,conjoin(V1P,V2P,CP).
cycLToMpred0(V,V).

%  cycLToMpred( (grandparent('$VAR'('G'),'$VAR'('C')) => thereExists('$VAR'('P'), and(parent('$VAR'('G'),'$VAR'('P')),parent('$VAR'('P'),'$VAR'('C'))))),O).



% :-onEachLoad(loadTinyAssertions2).

% ============================================
% DBASE to Cyc Predicate Mapping
% ============================================
/*
arity('abbreviationString-PN', 2).

typical_mtvars([_,_]).

% arity 1 person
make_functorskel(Person,1,fskel(Person,t(Person,A),Call,A,[],MtVars,Call2)):-typical_mtvars(MtVars),Call=..[Person,A],Call2=..[Person,A|MtVars]. 
% arity 2 likes
make_functorskel(Likes,2,fskel(Likes,t(Likes,A,B),Call,A,B,MtVars,Call2)):- typical_mtvars(MtVars),Call=..[Likes,A,B],Call2=..[Likes,A,B|MtVars]. 
% arity 3 between
make_functorskel(Between,3,fskel(Between,t(Between,A,B,C),Call,A,[B,C],MtVars,Call2)):- typical_mtvars(MtVars),Call=..[Between,A,B,C],Call2=..[Between,A,B,C|MtVars]. 
% arity 4 xyz
make_functorskel(Xyz,4,fskel(Xyz,t(Xyz,I,X,Y,Z),Call,I,[X,Y,Z],MtVars,Call2)):- typical_mtvars(MtVars),Call=..[Xyz,I,X,Y,Z],Call2=..[Xyz,I,X,Y,Z|MtVars]. 
% arity 5 rxyz
make_functorskel(RXyz,5,fskel(RXyz,t(RXyz,I,R,X,Y,Z),Call,I,[R,X,Y,Z],MtVars,Call2)):-typical_mtvars(MtVars),Call=..[RXyz,I,R,X,Y,Z],Call2=..[RXyz,I,R,X,Y,Z|MtVars]. 
% arity >6 
make_functorskel(F,N,fskel(F,DBASE,Call,I,NList,MtVars,Call2)):-typical_mtvars(MtVars),functor(Call,F,N),Call=..[F,I|NList],DBASE=..[t,F,I|NList],append([F,I|NList],MtVars,CALL2List),Call2=..CALL2List.

*/

% ============================================
% Prolog to Cyc Predicate Mapping
%
%  the following will all do the same things:
%
% :- decl_mpred('BaseKB':isa/2). 
% :- decl_mpred('BaseKB':isa(_,_)). 
% :- decl_mpred(isa(_,_),'BaseKB'). 
% :- decl_mpred('BaseKB',isa,2). 
%
%  Will make calls 
% :- isa(X,Y)
%  Query into #$BaseKB for (#$isa ?X ?Y) 
%
% decl_mpred/N
%
% ============================================

:-dynamic(isCycUnavailable_known/1).
:-dynamic(isCycAvailable_known/0).

:-export(isCycAvailable/0).
isCycAvailable:-isCycUnavailable_known(_),!,fail.
isCycAvailable:-isCycAvailable_known,!.
isCycAvailable:-checkCycAvailablity,isCycAvailable.

:-export(isCycUnavailable/0).
isCycUnavailable:-isCycUnavailable_known(_),!.
isCycUnavailable:-isCycAvailable_known,!,fail.
isCycUnavailable:-checkCycAvailablity,isCycUnavailable.

:-export(checkCycAvailablity/0).
checkCycAvailablity:- (isCycAvailable_known;isCycUnavailable_known(_)),!.
checkCycAvailablity:- ccatch((ignore((invokeSubL("(+ 1 1)",R))),(R==2->assert_if_new(isCycAvailable_known);assert_if_new(isCycUnavailable_known(R)))),E,assert_if_new(isCycUnavailable_known(E))),!.

% ===================================================================
% OPERATOR PRECEDANCE
% ===================================================================
:- dynamic((exactlyAssertedEL/4,exactlyAssertedEL/5,exactlyAssertedEL/6,exactlyAssertedEL/7)).
:- dynamic(assertedTinyKB_implies_first/4).
:- dynamic(assertedTinyKB_not_first/3).
:- dynamic(assertedTinyKB_not/3).
:- dynamic(assertedTinyKB_implies/4).
:-style_check(-singleton).
:-style_check(-discontiguous).
% :-style_check(-atom).
% :-style_check(-string).
:-set_prolog_flag(double_quotes,string).



exactlyAssertedEL(isa, xor, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, xor, 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, xor, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, xor, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, xor, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, unknownSentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, unitMultiplicationFactor, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, trueSubL, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, trueSubL, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, trueSubL, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, trueSentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, trueRule, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).

end_of_file.


exactlyAssertedEL(isa, transitiveViaArgInverse, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, transitiveViaArgInverse, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, transitiveViaArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, transitiveViaArg, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, thereExists, 'Quantifier', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, thereExists, 'ExistentialQuantifier', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, thereExists, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, thereExistExactly, 'ExistentialQuantifier-Bounded', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, thereExistAtMost, 'ExistentialQuantifier-Bounded', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, thereExistAtLeast, 'ExistentialQuantifier-Bounded', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termOfUnit, 'ReformulatorIrrelevantFORT', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termOfUnit, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, termOfUnit, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, termOfUnit, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termOfUnit, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termExternalIDString, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termDependsOn, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, termDependsOn, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termChosen, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, termChosen, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, synonymousExternalConcept, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, substring, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, substring, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, substring, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, substring, 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, subsetOf, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, subsetOf, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, skolemizeForward, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, skolem, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, skolem, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, singleEntryFormatInArgs, 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, singleEntryFormatInArgs, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, singleEntryFormatInArgs, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, siblingDisjointExceptions, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, siblingDisjointExceptions, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sharedNotes, 'DocumentationPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sharedNotes, 'DistributingMetaKnowledgePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sharedNotes, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceTruth, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceImplies, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceImplies, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceEquiv, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceEquiv, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceEquiv, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceEquiv, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, sentenceDesignationArgnum, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, scopingArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, salientAssertions, 'DocumentationPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, salientAssertions, 'DistributingMetaKnowledgePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, salientAssertions, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ruleTemplateDirection, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ruleTemplateDirection, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ruleAfterRemoving, tPred, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, ruleAfterRemoving, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, ruleAfterRemoving, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ruleAfterAdding, tPred, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, ruleAfterAdding, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, ruleAfterAdding, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, rewriteOf, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, rewriteOf, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, rewriteOf, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, rewriteOf, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, rewriteOf, 'CycLReformulationRulePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultQuotedIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsaArgIsa, 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsaArgIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsaArgIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsaArg, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsaArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsa, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, resultIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultGenlArg, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultGenlArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultGenl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultGenl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, resultGenl, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, requiredArg3Pred, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, requiredArg2Pred, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, requiredArg1Pred, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationMemberInstance, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationInstanceMember, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationInstanceExists, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationInstanceAll, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExpansion, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExistsMinAll, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExistsMaxAll, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExistsInstance, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExistsCountAll, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationExistsAll, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAllInstance, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAllExistsMin, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAllExistsMax, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAllExistsCount, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAllExists, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, relationAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorRuleProperties, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorRuleProperties, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorRule, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorRule, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorRule, 'CycLReformulationRulePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquiv, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquiv, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquiv, 'CycLReformulationRulePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquals, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquals, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulatorEquals, 'CycLReformulationRulePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulationPrecondition, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulationPrecondition, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulationDirectionInMode, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, reformulationDirectionInMode, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ratioOfTo, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedIsa, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnSufficient, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnSufficient, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnNecessary, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnNecessary, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnIff, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedDefnIff, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedArgument, 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quotedArgument, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, querySentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantitySubsumes, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantitySubsumes, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantitySubsumes, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantitySubsumes, 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantityIntersects, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantityIntersects, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, quantityIntersects, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, prettyString, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, preservesGenlsInArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, predicateConventionMt, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, predicateConventionMt, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticRequirement, 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticRequirement, 'ExceptionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticRequirement, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticRequirement, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticallyNormal, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pragmaticallyNormal, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, pointQuantValue, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, performSubL, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, performSubL, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, overlappingExternalConcept, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, or, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, or, 'VariableArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, or, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, or, 'LogicalConnective', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, or, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, or, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, operatorFormulas, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, openEntryFormatInArgs, 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, openEntryFormatInArgs, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, openEntryFormatInArgs, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, opaqueArgument, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, omitArgIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, oldConstantName, 'DocumentationPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, oldConstantName, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, oldConstantName, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, numericallyEquals, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, numericallyEquals, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, numericallyEquals, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, numericallyEquals, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nthSmallestElement, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nthLargestElement, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertibleMt, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertibleMt, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertibleCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertibleCollection, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertible, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, notAssertible, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, not, 'UnaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, not, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, not, 'LogicalConnective', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, not, 'FixedArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, nonAbducibleWithValueInArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationPreds, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationPreds, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationPreds, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationPreds, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationMt, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationMt, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationInverse, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, negationInverse, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestGenls, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestGenlPreds, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestGenlMt, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestDifferentIsa, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestDifferentGenls, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestCommonSpecs, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestCommonIsa, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestCommonGenls, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, nearestCommonGenlMt, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, natFunction, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, natFunction, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, natArgumentsEqual, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, natArgument, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, natArgument, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreator, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreator, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreator, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationTime, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationTime, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationSecond, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationSecond, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationPurpose, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, myCreationPurpose, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, multiplicationUnits, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, multiplicationUnits, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, mtVisible, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, mtVisible, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, minQuantValue, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, minimizeExtent, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, minimize, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, microtheoryDesignationArgnum, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, meetsPragmaticRequirement, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, meetsPragmaticRequirement, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, means, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, means, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, means, 'AntiTransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, maxQuantValue, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, knownSentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, knownAntecedentRule, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, knownAntecedentRule, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ist, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, ist, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ist, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, isa, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, isa, 'ReformulatorIrrelevantFORT', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, isa, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, isa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, irrelevantTerm, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, irrelevantPredAssertion, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, irrelevantMt, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, irrelevantAssertion, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultIsaReln, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultIsaReln, 'QuintaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultIsa, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultGenlReln, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultGenlReln, 'QuintaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultGenl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgResultGenl, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgIsa, 'QuintaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgIsa, 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgDifferent, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgDifferent, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgDifferent, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgDifferent, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, interArgDifferent, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, integerBetween, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, instanceElementType, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, instanceElementType, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, indexicalReferent, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, independentArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, implies, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, implies, 'LogicalConnective', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, implies, 'FixedArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, implies, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, hypotheticalTerm, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, hypotheticalTerm, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, holdsIn, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, hlPrototypicalInstance, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, highlyRelevantTerm, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, highlyRelevantPredAssertion, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, highlyRelevantMt, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, highlyRelevantAssertion, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThanOrEqualTo, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThanOrEqualTo, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThanOrEqualTo, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThanOrEqualTo, 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThan, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThan, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, greaterThan, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genMassNoun, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genls, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genls, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genls, 'ReformulatorIrrelevantFORT', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genls, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genls, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, genls, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlRules, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlPreds, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlPreds, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlPreds, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlPreds, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlMt, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlMt, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlMt, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlMt, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, genlMt, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlInverse, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlInverse, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genlCanonicalizerDirectives, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genKeyword, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, genFormat, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, forwardNonTriggerLiteral, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, formulaArity, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, forAll, 'Quantifier', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, forAll, 'Quantifier', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, forAll, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, followingValue, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, followingValue, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, fanOutArg, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, fanOutArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, extentCardinality, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, extConceptOverlapsColAndReln, 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, expresses, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, expresses, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, expansionDefn, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, expansion, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, expansion, 'CycLReformulationRulePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, expansion, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exceptWhen, 'ExceptionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exceptWhen, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exceptMt, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exceptFor, 'ExceptionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exceptFor, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, except, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exampleAssertions, 'DocumentationPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exampleAssertions, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, exactlyAssertedEL, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluationResultQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluationResultQuotedIsa, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluationDefn, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, evaluationDefn, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluationDefn, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluateImmediately, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluateAtEL, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, evaluate, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equiv, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equiv, 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equiv, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equiv, 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equiv, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equalSymbols, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equalSymbols, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equalSymbols, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equals, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equals, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equals, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, equals, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, equals, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ephemeralTerm, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ephemeralTerm, 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, elInverse, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, elInverse, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, elInverse, 'AntiTransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, elementOf, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, distributesOutOfArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, disjointWith, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, disjointWith, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, disjointWith, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, disjointWith, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, differentSymbols, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, differentSymbols, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, differentSymbols, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, different, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, different, 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, different, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, denotes, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, denotes, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, denotes, 'AntiTransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnSufficient, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnSufficient, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, defnSufficient, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnNecessary, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnNecessary, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, defnNecessary, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnIff, 'WFFConstraintSatisfactionPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defnIff, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, defnIff, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, defnIff, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, definingMt, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, definingMt, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defaultReformulatorModePrecedence, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defaultReformulatorModePrecedence, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defaultReformulationDirectionInModeForPred, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, defaultReformulationDirectionInModeForPred, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, decontextualizedPredicate, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, decontextualizedPredicate, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, decontextualizedCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycTransformationProofRule, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycTransformationProofBindings, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycTacticID, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProofID, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreTerms, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreProofs, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreProofCount, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreProblems, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreProblemCount, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreLinks, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreLinkCount, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreInferences, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreInferenceCount, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemStoreID, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemQueryTerms, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemQuerySentence, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemProvabilityStatus, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemLinkID, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemID, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemDependentLinks, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycProblemArgumentLinks, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycInferenceRelevantProblems, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, cycInferenceAnswerLink, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constraint, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constrainsArg, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constrainsArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constantName, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constantID, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, constantGUID, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, consistent, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, conceptuallyRelated, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completelyEnumerableCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completelyDecidableCollection, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerableViaBackchain, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerableViaBackchain, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerableForValueInArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerableForArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerable, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentEnumerable, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentDecidableForValueInArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentDecidable, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentAssertedForValueInArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, completeExtentAsserted, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgsAndRest, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgsAndRest, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgsAndRest, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgs, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgs, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, commutativeInArgs, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, comment, 'DocumentationPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, comment, 'DistributingMetaKnowledgePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, comment, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, comment, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionIsaBackchainRequired, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionIsaBackchainRequired, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionIsaBackchainEncouraged, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionIsaBackchainEncouraged, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionGenlsBackchainRequired, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionGenlsBackchainRequired, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionGenlsBackchainEncouraged, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionGenlsBackchainEncouraged, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionExpansion, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionConventionMt, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionCompletelyEnumerableViaBackchain, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionBackchainRequired, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionBackchainRequired, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionBackchainEncouraged, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, collectionBackchainEncouraged, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, coExtensional, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, coExtensional, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, coExtensional, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, canonicalizerDirectiveForArgAndRest, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, canonicalizerDirectiveForArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, canonicalizerDirectiveForAllArgs, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, backchainRequired, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, backchainRequired, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, backchainForbiddenWhenUnboundInArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, backchainForbidden, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, backchainForbidden, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertionUtility, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertionDirection, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertionDirection, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertedTermSentences, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertedSentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, assertedPredicateArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arityMin, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arityMin, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arityMax, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arityMax, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arity, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, arity, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arity, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsQuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argSometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argSometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argSometimesIsa, 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argSometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsIsa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsGenl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argsGenl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argQuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argQuotedIsa, 'ArgQuotedIsaTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argIsa, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, argIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argIsa, 'ArgIsaTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestQuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestQuotedIsa, 'ArgQuotedIsaTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestIsa, tPred, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, argAndRestIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestIsa, 'ArgIsaTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestGenl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestGenl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, argAndRestGenl, 'ArgGenlTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg6Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Isa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Genl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Format, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg5Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Isa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Genl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Format, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg4Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Isa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Genl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Format, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg3Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Isa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Genl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Format, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg2Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1SometimesIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1SometimesIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1SometimesIsa, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1SometimesIsa, 'ArgSometimesIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1QuotedIsa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1QuotedIsa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1QuotedIsa, 'ArgQuotedIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Isa, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Isa, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Isa, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Genl, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Genl, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Genl, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Format, 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Format, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, arg1Format, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, and, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, and, 'VariableArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, and, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, and, 'LogicalConnective', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, and, 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, and, 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, afterRemoving, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, afterRemoving, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, afterRemoving, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, afterAdding, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, afterAdding, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, afterAdding, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, admittedSentence, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, admittedNAT, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, admittedArgument, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, admittedAllArgument, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, abnormal, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, abnormal, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'wsl-NonFunctionalParameter', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'wsl-ClassificationRoot', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'WFFSupportedTerm', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'WFFSupportedPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'WFFDirectivePredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'WFFConstraintSatisfactionPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'WFFConstraintPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Wednesday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'VariableAritySkolemFunction', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'VariableAritySkolemFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'VariableAritySkolemFuncN', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'VariableAritySkolemFuncN', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'VariableArityRelation', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'VariableArityRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnreifiableFunction', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'UnreifiableFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Unknown-HLTruthValue', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Unknown-HLTruthValue', 'CycHLTruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UniversalVocabularyMt', 'BroadMicrotheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UniversalVocabularyImplementationMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Unity', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnitProductFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnitProductFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnitProductFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnitProductFn', 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnitOfMeasure', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'UnitOfMeasure', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UncanonicalizerAssertionFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UncanonicalizerAssertionFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryPredicate', 'PredicateTypeByArity', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'UnaryFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Tuesday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TruthValue', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TruthValue', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'TruthFunction', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'TruthFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'True', 'TruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'True', 'TruthValue', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'TransitiveBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TransitiveBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TransformationModuleSupportedPredicate', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TransformationModuleSupportedPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TransformationModuleSupportedCollection', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TransformationModuleSupportedCollection', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLVariableFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLVariableFn', 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLVariableFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLReifiedNatFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLReifiedNatFn', 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLAssertionFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLAssertionFn', 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLAssertionFn', 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TLAssertionFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TimesFn', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TimesFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TimesFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TimesFn', 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Thursday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Thing', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'Thing', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheUser', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheUser', 'HumanCyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheUser', 'Cyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheTerm', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'TheTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSetOf', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSetOf', 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSetOf', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSet', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSet', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheSet', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ThePrototypicalTransitiveBinaryPredicate', 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ThePrototypicalCollection', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ThePrototypicalBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheList', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheList', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheEmptySet', 'Set-Mathematical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheEmptyList', 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'ReifiableFunction', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'CollectionDenotingFunction', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TheCollectionOf', 'BinaryFunction', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryPredicate', 'PredicateTypeByArity', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'TernaryFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TemporaryEnglishParaphraseMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'TemporaryEnglishParaphraseMt', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SymmetricBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'SymmetricBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Sunday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'substring-CaseInsensitive', 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'substring-CaseInsensitive', 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'substring-CaseInsensitive', 'EvaluatablePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'substring-CaseInsensitive', 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLSymbol', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLSymbol', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLSymbol', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLString', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLString', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLString', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLSExpression', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLSExpression', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLRealNumber', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLRealNumber', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLRealNumber', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLQuoteFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLQuoteFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLPositiveInteger', 'SubLExpressionType', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLPositiveInteger', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLPositiveInteger', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLPositiveInteger', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonVariableSymbol', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonVariableSymbol', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonVariableSymbol', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonVariableNonKeywordSymbol', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonVariableNonKeywordSymbol', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonNegativeInteger', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonNegativeInteger', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLNonNegativeInteger', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLList', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLList', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLList', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLKeyword', 'SubLExpressionType', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLKeyword', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLKeyword', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLKeyword', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLInteger', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLInteger', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLInteger', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLExpressionType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLCharacter', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLCharacter', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLCharacter', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtomicTerm', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtom', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtom', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SubLAtom', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFunctionFn', 'TernaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFunctionFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFunctionFn', 'ReformulatorIrrelevantFORT', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFunction', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFuncNFn', 'QuaternaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFuncN', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SkolemFuncN', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'SingleEntry', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SingleEntry', 'Format', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SiblingDisjointCollectionType', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'SiblingDisjointCollectionType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SiblingDisjointAttributeType', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'SiblingDisjointAttributeType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SetTheFormat', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SetTheFormat', 'Format', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'SetOrCollection', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'SetOrCollection', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Set-Mathematical', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'Set-Mathematical', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'September', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'September', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'SententialRelation', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'SententialRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ScopingRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ScopingRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ScalarPointValue', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ScalarPointValue', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ScalarInterval', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ScalarInterval', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ScalarIntegralValue', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Saturday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RuleTemplate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RuleTemplate', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'RoundUpFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RoundUpFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RoundDownFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RoundDownFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RoundClosestFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RoundClosestFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedPredicate-Specific', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedPredicate-Specific', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedPredicate-Generic', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedPredicate-Generic', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedCollection-Generic', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RemovalModuleSupportedCollection-Generic', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelaxArgTypeConstraintsForVariables', 'WFFDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelaxArgTypeConstraintsForVariables', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'RelationInstanceExistsFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationInstanceExistsFn', 'TernaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationInstanceExistsFn', 'IndeterminateTermDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsInstanceFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsInstanceFn', 'TernaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsInstanceFn', 'IndeterminateTermDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsAllFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsAllFn', 'QuaternaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationExistsAllFn', 'IndeterminateTermDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationAllExistsFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationAllExistsFn', 'QuaternaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RelationAllExistsFn', 'IndeterminateTermDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, tRelation, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, tRelation, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReifiableFunction', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'ReifiableFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorIrrelevantFORT', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorIrrelevantFORT', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorHighlyRelevantFORT', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorHighlyRelevantFORT', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorDirectivePredicate', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulatorDirectivePredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulationNeitherDirection', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulationForwardDirection', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReformulationBackwardDirection', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ReflexiveBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ReflexiveBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'RealNumber', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuotientFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuotientFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Quote', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Quote', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Quote', 'UnreifiableFunction', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'Quote', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryPredicate', 'PredicateTypeByArity', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuintaryFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QueryMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryPredicate', 'PredicateTypeByArity', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'QuaternaryFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuasiQuote', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuasiQuote', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuasiQuote', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuasiQuote', tFunction, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'QuantityConversionFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'QuantityConversionFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Quantifier', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'Quantifier', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ProblemSolvingCntxt', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ProblemSolvingCntxt', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'prettyString-Canonical', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PredicateTypeByArity', 'DisjointCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, tPred, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, tPred, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PositiveInteger', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'PositiveInteger', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusFn', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusFn', 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusAll', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PlusAll', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PerFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PerFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Percent', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Percent', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'PartiallyCommutativeRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'PartiallyCommutativeRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Open-InferenceProblemLinkStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'October', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'October', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'November', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'November', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'NonNegativeScalarInterval', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'NonNegativeScalarInterval', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NonNegativeInteger', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'NonNegativeInteger', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NoGood-ProblemProvabilityStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Neutral-ProblemProvabilityStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'HypotheticalContext']), 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'HypotheticalContext']), 'RuleTemplate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'HypotheticalContext']), 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), 'RuleTemplate', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Multigraph', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'Multigraph', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtUnionFn', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtUnionFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtUnionFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtUnionFn', 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtTimeWithGranularityDimFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtTimeWithGranularityDimFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtTimeDimFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtTimeDimFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtSpace', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtSpace', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MtSpace', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonthOfYearType', 'SiblingDisjointCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonthOfYearType', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'MonthOfYearType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonotonicallyTrue', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonotonicallyTrue', 'CycHLTruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonotonicallyFalse', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MonotonicallyFalse', 'CycHLTruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Monday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ModuloFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ModuloFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MinRangeFn', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MinRangeFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MinRangeFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MinRangeFn', 'AssociativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Minimum', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Minimum', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MicrotheoryDesignatingRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'MicrotheoryDesignatingRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Microtheory', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'Microtheory', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MeaningInSystemFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MeaningInSystemFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'May', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'May', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'MaxRangeFn', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MaxRangeFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'MaxRangeFn', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Maximum', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Maximum', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'March', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'March', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalTruthMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalTruthMt', 'Microtheory', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalTruthImplementationMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalTruthImplementationMt', 'Microtheory', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalConnective', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'LogicalConnective', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'LogFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'LogFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'List', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'List', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'LeaveVariablesAtEL', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'LeaveSomeTermsAtELAndAllowKeywordVariables', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'LeaveSomeTermsAtEL', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-VariableBinding', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-TriplePatternQuery', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-SPARQLQuery', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-SetOfStatements', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Selecter', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Scalability', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Resource', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Reasoner', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-RdfGraph', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-QueryTransformer', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Query', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-pluginByDataConnectsTo', 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Plugin', 'wsl-ClassificationRoot', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, 'larkc-Plugin', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-NaturalLanguageDocument', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-LabelledGroupOfStatements', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-KeywordQuery', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-InformationSetTransformer', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-InformationSet', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Identifier', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasUri', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasScalability', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasOutputType', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasInputType', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasEndpoint', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-hasCostPerInvocation', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-GateTransformer', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-euro', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Decider', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-DataSet', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-CycSelecter', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-CycReasoner', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-CycGateDecider', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-Cost', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-BooleanInformationSet', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'larkc-ArticleIdentifier', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'KnowledgeBase', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'KnowledgeBase', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'Kappa', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Kappa', 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Kappa', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'June', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'June', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'July', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'July', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'January', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'January', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ist-Asserted', 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ist-Asserted', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IrreflexiveBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'IrreflexiveBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IntervalMinFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IntervalMinFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IntervalMaxFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IntervalMaxFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IntervalEntry', 'Format', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InterArgIsaPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'InterArgIsaPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-4', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-4', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-4', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-3', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-3', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-3', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-2', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-2', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-1', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-1', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa5-1', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-5', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-5', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-5', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-3', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-3', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-3', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-2', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-2', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-1', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-1', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa4-1', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-5', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-5', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-5', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-4', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-4', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-4', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-2', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-2', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-1', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-1', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa3-1', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-5', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-5', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-5', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-4', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-4', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-4', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-3', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-3', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-3', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-1', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-1', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa2-1', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-5', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-5', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-5', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-4', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-4', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-4', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-3', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-3', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-3', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-2', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgIsa1-2', 'InterArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgGenl1-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgGenl1-2', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgGenl1-2', 'ArgTypePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InterArgFormatPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'InterArgFormatPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgFormat1-2', 'WFFConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'interArgFormat1-2', 'InterArgFormatPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Integer', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'Integer', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedTerm', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedPredicate', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedFunction', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedFunction', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceSupportedCollection', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceRelatedBookkeepingPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'InferenceRelatedBookkeepingPredicate', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'InferencePSC', 'ProblemSolvingCntxt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Individual', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'Individual', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IndeterminateTermDenotingFunction', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'IndeterminateTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'HypotheticalContext', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'HypotheticalContext', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'HumanCyclist', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'HumanCyclist', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'HLPrototypicalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'HLExternalIDString', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'HLAssertedArgumentKeywordDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Guest', 'HumanCyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Good-ProblemProvabilityStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'genls-SpecDenotesGenlInstances', 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'genls-SpecDenotesGenlInstances', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'genls-GenlDenotesSpecInstances', 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'genls-GenlDenotesSpecInstances', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FunctionToArg', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FunctionToArg', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, tFunction, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, tFunction, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Friday', 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Forward-AssertionDirection', 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArityFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArityFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgSetFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgSetFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgListFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgListFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FormulaArgFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Format', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'Format', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-TermFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-TermFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-PredicateFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-PredicateFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-FunctionFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FOL-FunctionFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FixedAritySkolemFunction', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'FixedAritySkolemFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FixedAritySkolemFuncN', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'FixedAritySkolemFuncN', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'FixedArityRelation', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'FixedArityRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'February', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'February', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'False', 'TruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'False', 'TruthValue', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'ExpFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExpFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExpandSubLFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExpandSubLFn', tFunction, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'ExpandSubLFn', 'FixedArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'ExpandSubLFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExistentialQuantifier-Bounded', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExistentialQuantifier', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ExistentialQuantifier', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ExceptionPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ExceptionPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EverythingPSC', 'ProblemSolvingCntxt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluateSubLFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluateSubLFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluatableRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluatableRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluatablePredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluatableFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'EvaluatableFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EscapeQuote', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EscapeQuote', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EscapeQuote', 'UnreifiableFunction', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'EscapeQuote', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'equalStrings-CaseInsensitive', 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'EnglishParaphraseMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ELRelation-Reversible', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ELRelation-OneWay', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'ELRelation-OneWay', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ELRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DontReOrderCommutativeTerms', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'DocumentationPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DocumentationPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'DocumentationConstant', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DocumentationConstant', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'DistributingMetaKnowledgePredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'DistributingMetaKnowledgePredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DisjointCollectionType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DirectedMultigraph', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'DirectedMultigraph', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DifferenceFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DifferenceFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultTrue', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultTrue', 'CycHLTruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultMonotonicPredicate', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultMonotonicPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultFalse', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DefaultFalse', 'CycHLTruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'December', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'December', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'DayOfWeekType', 'SiblingDisjointCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DateEncodeStringFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DateEncodeStringFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DateDecodeStringFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'DateDecodeStringFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycTransformationProof', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycTacticFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycTacticFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycTactic', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycSupportDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProvabilityStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProofFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProofFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProof', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemStoreFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemStoreFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemStore', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLinkFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLinkFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Union', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Transformation', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Structural', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Split', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Restriction', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Removal', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Logical', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-JoinOrdered', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Join', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Disjunctive', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Content', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-Conjunctive', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink-AnswerLink', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemLink', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemFn', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblemFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycProblem', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ftVar, ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ftVar, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, ftVar, tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, ftVar, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTruthValueSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTruthValueSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTruthValueSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-ClosedPredicate', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-ClosedPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-ClosedPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Assertible', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Assertible', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Assertible', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Assertible', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Askable', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Askable', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence-Askable', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRuleAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRuleAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRuleAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLRepresentedAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiedDenotationalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiedDenotationalTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiedDenotationalTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableNonAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableNonAtomicTerm', tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableNonAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableDenotationalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableDenotationalTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReifiableDenotationalTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReformulationRulePredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLReformulationRulePredicate', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'CycLPropositionalSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLPropositionalSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLPropositionalSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenNonAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenNonAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenNonAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenFormula', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenFormula', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenFormula', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenExpression', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenExpression', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenExpression', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenDenotationalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenDenotationalTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLOpenDenotationalTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-ClosedFunctor', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-ClosedFunctor', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-ClosedFunctor', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Assertible', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Assertible', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Assertible', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Askable', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Askable', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm-Askable', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicReifiedTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicReifiedTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLNonAtomicReifiedTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CyclistDefinitionalMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Cyclist', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Cyclist', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLIndexedTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLIndexedTerm', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'CycLIndexedTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGenericRelationFormula', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGenericRelationFormula', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGenericRelationFormula', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGAFAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGAFAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLGAFAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormulaicSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormulaicSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormulaicSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormula', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormula', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLFormula', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, ttFormatType, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Assertible', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Assertible', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Assertible', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Askable', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Askable', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression-Askable', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression', tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, 'CycLExpression', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDenotationalTerm-Assertible', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDenotationalTerm-Assertible', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDenotationalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDenotationalTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDenotationalTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDeducedAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDeducedAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLDeducedAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLConstant', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLConstant', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLConstant', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedNonAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedNonAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedNonAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedFormula', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedFormula', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedFormula', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedExpression', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedExpression', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedExpression', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedDenotationalTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedDenotationalTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedDenotationalTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLClosedAtomicSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicTerm', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicTerm', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicTerm', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicSentence', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicSentence', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicSentence', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAtomicAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertionDirection', 'SiblingDisjointCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertionDirection', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertionDirection', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertedAssertion', ttFormatType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertedAssertion', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CycLAssertedAssertion', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycKBDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceProblemLinkStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceFn', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceDataStructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceBindingsDataStructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceAnswerJustification', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInferenceAnswer', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycInference', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycHLTruthValue', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycHLTruthValue', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'CycHLSupportDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycDeductionDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycArgumentDatastructure', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CycAdministrator', 'HumanCyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CurrentWorldDataCollectorMt-NonHomocentric', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CoreCycLMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CoreCycLImplementationMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CommutativeRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CommutativeRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CollectionRuleTemplateFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CollectionRuleTemplateFn', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CollectionDenotingFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'CollectionDenotingFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, tCol, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(isa, tCol, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Code-AssertionDirection', 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Closed-InferenceProblemLinkStatus', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CharacterString', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'CanonicalizerDirective', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BroadMicrotheory', tCol, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'BroadMicrotheory', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BookkeepingPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'BookkeepingPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BookkeepingMt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BookkeepingMt', 'BroadMicrotheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryPredicate', 'PredicateTypeByArity', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryFunction', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'BinaryFunction', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'BaseKB', 'BroadMicrotheory', 'BaseKB', vStrDef).
exactlyAssertedEL(isa, 'Backward-AssertionDirection', 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Average', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'Average', 'BinaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'August', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'August', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AtemporalNecessarilyEssentialCollectionType', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AsymmetricBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AsymmetricBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AssociativeRelation', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AssociativeRelation', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'assertionUtility-1', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AssertedTrueMonotonic', 'HLAssertedArgumentKeywordDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AssertedTrueDefault', 'HLAssertedArgumentKeywordDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AssertedFalseMonotonic', 'HLAssertedArgumentKeywordDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AssertedFalseDefault', 'HLAssertedArgumentKeywordDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypeTernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypeTernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypePredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypePredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypeBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgTypeBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgSometimesIsaPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgQuotedIsaTernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgQuotedIsaTernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgQuotedIsaPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgQuotedIsaBinaryPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgIsaTernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgIsaTernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgIsaPredicate', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgIsaBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgIsaBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlTernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlTernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlQuantityTernaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlQuantityTernaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlQuantityBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlQuantityBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgGenlBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'ArgConstraintPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'ArgConstraintPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'April', 'MonthOfYearType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'April', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AntiTransitiveBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AntiTransitiveBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AntiSymmetricBinaryPredicate', tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(isa, 'AntiSymmetricBinaryPredicate', 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AllowKeywordVariables', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'AllowGenericArgVariables', 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(isa, 'AbsoluteValueFn', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(isa, 'AbsoluteValueFn', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'WFFSupportedPredicate', 'WFFSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'WFFDirectivePredicate', 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'WFFConstraintSatisfactionPredicate', 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'WFFConstraintPredicate', 'WFFSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Wednesday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFunction', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFunction', 'VariableArityRelation', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFunction', 'SkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFunction', 'SkolemFunction', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFuncN', 'VariableAritySkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFuncN', 'VariableAritySkolemFunction', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFuncN', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFuncN', 'SkolemFuncN', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableAritySkolemFuncN', 'SkolemFuncN', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'VariableArityRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'VariableArityRelation', tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'UnreifiableFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnreifiableFunction', tFunction, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'UnitOfMeasure', 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnitOfMeasure', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryRelation', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryPredicate', 'UnaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryPredicate', 'UnaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryFunction', 'UnaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryFunction', 'UnaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'UnaryFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Tuesday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TruthValue', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TruthFunction', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TruthFunction', tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'TransitiveBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TransitiveBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'TransformationModuleSupportedPredicate', 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TransformationModuleSupportedPredicate', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TransformationModuleSupportedCollection', 'InferenceSupportedCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Thursday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TheTerm', 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryRelation', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryPredicate', 'TernaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryPredicate', 'TernaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryFunction', 'TernaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryFunction', 'TernaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'TernaryFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'SymmetricBinaryPredicate', 'CommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SymmetricBinaryPredicate', 'CommutativeRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'SymmetricBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SymmetricBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Sunday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLSymbol', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLSymbol', 'SubLAtom', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLSymbol', 'SubLAtom', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLSymbol', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLSymbol', 'CycLExpression', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLString', 'SubLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLString', 'SubLAtomicTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLString', 'SubLAtom', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLString', 'SubLAtom', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLRealNumber', 'SubLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLRealNumber', 'SubLAtomicTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLRealNumber', 'SubLAtom', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLPositiveInteger', 'SubLNonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLPositiveInteger', 'SubLNonNegativeInteger', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLPositiveInteger', 'SubLInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLPositiveInteger', 'SubLInteger', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableSymbol', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableSymbol', 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableSymbol', 'SubLSymbol', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableSymbol', 'SubLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableSymbol', 'SubLAtomicTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonVariableNonKeywordSymbol', 'SubLNonVariableSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonNegativeInteger', 'SubLInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonNegativeInteger', 'SubLInteger', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonNegativeInteger', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLNonNegativeInteger', 'CycLExpression', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLList', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLKeyword', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLKeyword', 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLKeyword', 'SubLNonVariableSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLInteger', 'SubLRealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLInteger', 'SubLRealNumber', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLExpressionType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLCharacter', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLCharacter', 'SubLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLCharacter', 'SubLAtomicTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLAtomicTerm', 'CycLClosedAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SubLAtomicTerm', 'CycLClosedAtomicTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SubLAtom', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SkolemFunction', 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SkolemFunction', 'ReifiableFunction', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SkolemFunction', 'IndeterminateTermDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SkolemFuncN', 'SkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SkolemFuncN', 'SkolemFunction', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'SiblingDisjointCollectionType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SiblingDisjointAttributeType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SetOrCollection', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SetOrCollection', 'Thing', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Set-Mathematical', 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Set-Mathematical', 'SetOrCollection', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'September', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SententialRelation', 'TruthFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'SententialRelation', 'TruthFunction', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'ScopingRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ScopingRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ScalarPointValue', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ScalarPointValue', 'ScalarInterval', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ScalarInterval', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ScalarIntegralValue', 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Saturday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RuleTemplate', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RemovalModuleSupportedPredicate-Specific', 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RemovalModuleSupportedPredicate-Specific', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RemovalModuleSupportedPredicate-Generic', 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RemovalModuleSupportedPredicate-Generic', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RemovalModuleSupportedCollection-Generic', 'InferenceSupportedCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tRelation, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReifiableFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReifiableFunction', tFunction, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'ReformulatorIrrelevantFORT', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReformulatorHighlyRelevantFORT', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReformulatorDirectivePredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReflexiveBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ReflexiveBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'RealNumber', 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'RealNumber', 'ScalarPointValue', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryRelation', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryPredicate', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryPredicate', 'QuintaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryFunction', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryFunction', 'QuintaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuintaryFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryRelation', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryPredicate', 'QuaternaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryPredicate', 'QuaternaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryFunction', 'QuaternaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryFunction', 'QuaternaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'QuaternaryFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Quantifier', 'SententialRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Quantifier', 'SententialRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'Quantifier', 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Quantifier', 'ScopingRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ProblemSolvingCntxt', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ProblemSolvingCntxt', 'Microtheory', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'PredicateTypeByArity', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tPred, 'TruthFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tPred, 'TruthFunction', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'PositiveInteger', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'PositiveInteger', 'NonNegativeInteger', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'PositiveInteger', 'Integer', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'PartiallyCommutativeRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'PartiallyCommutativeRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Open-InferenceProblemLinkStatus', 'CycInferenceProblemLinkStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'October', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'November', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'NonNegativeScalarInterval', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'NonNegativeScalarInterval', 'ScalarInterval', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'NonNegativeInteger', 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'NonNegativeInteger', 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'NonNegativeInteger', 'Integer', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'NoGood-ProblemProvabilityStatus', 'CycProvabilityStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Neutral-ProblemProvabilityStatus', 'CycProvabilityStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Multigraph', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'MonthOfYearType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Monday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'MicrotheoryDesignatingRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'MicrotheoryDesignatingRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Microtheory', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'May', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'March', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'LogicalConnective', 'SententialRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'LogicalConnective', 'SententialRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'List', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'larkc-VariableBinding', 'larkc-InformationSet', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-TriplePatternQuery', 'larkc-Query', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-SPARQLQuery', 'larkc-Query', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-SetOfStatements', 'larkc-InformationSet', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Selecter', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Scalability', 'wsl-NonFunctionalParameter', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Reasoner', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-RdfGraph', 'larkc-SetOfStatements', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-QueryTransformer', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Query', 'larkc-Resource', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-NaturalLanguageDocument', 'larkc-InformationSet', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-LabelledGroupOfStatements', 'larkc-SetOfStatements', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-KeywordQuery', 'larkc-Query', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-InformationSetTransformer', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-InformationSet', 'larkc-Resource', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Identifier', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-GateTransformer', 'larkc-InformationSetTransformer', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Decider', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-DataSet', 'larkc-SetOfStatements', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-CycSelecter', 'larkc-Selecter', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-CycReasoner', 'larkc-Reasoner', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-CycGateDecider', 'larkc-Decider', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-Cost', 'wsl-NonFunctionalParameter', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-BooleanInformationSet', 'larkc-InformationSet', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'larkc-ArticleIdentifier', 'larkc-Identifier', 'BaseKB', vStrDef).
exactlyAssertedEL(genls, 'KnowledgeBase', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'June', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'July', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'January', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'IrreflexiveBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'IrreflexiveBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'InterArgIsaPredicate', 'ArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InterArgFormatPredicate', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InterArgFormatPredicate', 'TernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'InterArgFormatPredicate', 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Integer', 'ScalarIntegralValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Integer', 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InferenceSupportedTerm', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InferenceSupportedPredicate', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InferenceSupportedFunction', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InferenceSupportedCollection', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'InferenceRelatedBookkeepingPredicate', 'BookkeepingPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Individual', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Individual', 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'IndeterminateTermDenotingFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'IndeterminateTerm', 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'HypotheticalContext', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'HypotheticalContext', 'Microtheory', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'HumanCyclist', 'Cyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'HumanCyclist', 'Cyclist', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'HLPrototypicalTerm', 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'HLExternalIDString', 'SubLAtom', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'HLAssertedArgumentKeywordDatastructure', 'CycArgumentDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Good-ProblemProvabilityStatus', 'CycProvabilityStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tFunction, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tFunction, tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'Friday', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Forward-AssertionDirection', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Format', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFunction', 'SkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFunction', 'SkolemFunction', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFunction', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFunction', 'FixedArityRelation', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFuncN', 'SkolemFuncN', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFuncN', 'SkolemFuncN', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFuncN', 'FixedAritySkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedAritySkolemFuncN', 'FixedAritySkolemFunction', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'FixedArityRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'FixedArityRelation', tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'February', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ExistentialQuantifier-Bounded', 'TernaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ExistentialQuantifier-Bounded', 'ExistentialQuantifier', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ExistentialQuantifier', 'Quantifier', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ExistentialQuantifier', 'Quantifier', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ExceptionPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatablePredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatablePredicate', 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableFunction', 'UnreifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableFunction', 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'EvaluatableFunction', 'EvaluatableRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ELRelation-Reversible', 'ELRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ELRelation-OneWay', 'ELRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ELRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DocumentationPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DocumentationConstant', 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DocumentationConstant', 'CycLConstant', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'DistributingMetaKnowledgePredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DisjointCollectionType', 'SiblingDisjointCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DirectedMultigraph', 'Multigraph', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DirectedMultigraph', 'Multigraph', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'DefaultMonotonicPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'December', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'DayOfWeekType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycTransformationProof', 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycTactic', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycSupportDatastructure', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProvabilityStatus', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProof', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemStore', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Union', 'CycProblemLink-Disjunctive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Transformation', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Structural', 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Split', 'CycProblemLink-Conjunctive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Restriction', 'CycProblemLink-Structural', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Removal', 'CycProblemLink-Content', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Logical', 'CycProblemLink-Structural', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-JoinOrdered', 'CycProblemLink-Conjunctive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Join', 'CycProblemLink-Conjunctive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Disjunctive', 'CycProblemLink-Logical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Content', 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-Conjunctive', 'CycProblemLink-Logical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink-AnswerLink', 'CycProblemLink-Structural', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblemLink', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycProblem', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLRepresentedAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLRepresentedAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLOpenDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLOpenDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, ftVar, 'CycLAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLTruthValueSentence', 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLTruthValueSentence', 'CycLClosedSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLTruthValueSentence', 'CycLClosedSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLTerm', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLTerm', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-ClosedPredicate', 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-ClosedPredicate', 'CycLSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Assertible', 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Assertible', 'CycLSentence-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Assertible', 'CycLExpression-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Assertible', 'CycLExpression-Assertible', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Askable', 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Askable', 'CycLSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Askable', 'CycLExpression-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence-Askable', 'CycLExpression-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence', 'CycLTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLSentence', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRuleAssertion', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRuleAssertion', 'CycLAssertion', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedTerm', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedTerm', 'CycLDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedAtomicTerm', 'CycLRepresentedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedAtomicTerm', 'CycLRepresentedTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedAtomicTerm', 'CycLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLRepresentedAtomicTerm', 'CycLAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiedDenotationalTerm', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiedDenotationalTerm', 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiedDenotationalTerm', 'CycLReifiableDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLIndexedTerm', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLExpression', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableNonAtomicTerm', 'CycLClosedNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableDenotationalTerm', 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableDenotationalTerm', 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReifiableDenotationalTerm', 'CycLClosedDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLReformulationRulePredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLPropositionalSentence', 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLPropositionalSentence', 'CycLSentence-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLPropositionalSentence', 'CycLClosedSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLPropositionalSentence', 'CycLClosedSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLOpenFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLOpenFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLOpenExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLFormulaicSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenSentence', 'CycLFormulaicSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLOpenFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLOpenFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLOpenDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLOpenDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenNonAtomicTerm', 'CycLNonAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenFormula', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenFormula', 'CycLOpenExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenFormula', 'CycLOpenExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenFormula', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenFormula', 'CycLFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenExpression', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenExpression', 'CycLTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenExpression', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenExpression', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenDenotationalTerm', 'CycLOpenExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenDenotationalTerm', 'CycLOpenExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenDenotationalTerm', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLOpenDenotationalTerm', 'CycLDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-ClosedFunctor', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-ClosedFunctor', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-ClosedFunctor', 'CycLNonAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'CycLNonAtomicTerm-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'CycLNonAtomicTerm-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'CycLExpression-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'CycLExpression-Assertible', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Assertible', 'CycLDenotationalTerm-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Askable', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Askable', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Askable', 'CycLNonAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Askable', 'CycLExpression-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm-Askable', 'CycLExpression-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLRepresentedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLRepresentedTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicTerm', 'CycLDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycLReifiedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycLReifiedDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycLClosedNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycLClosedNonAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLNonAtomicReifiedTerm', 'CycKBDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Cyclist', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLIndexedTerm', 'CycLClosedExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGenericRelationFormula', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGenericRelationFormula', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGenericRelationFormula', 'CycLFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGAFAssertion', 'CycLClosedAtomicSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGAFAssertion', 'CycLClosedAtomicSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGAFAssertion', 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGAFAssertion', 'CycLAtomicAssertion', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLGAFAssertion', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormulaicSentence', 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormulaicSentence', 'CycLSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormulaicSentence', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormulaicSentence', 'CycLFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormula', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormula', 'CycLTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormula', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLFormula', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, ttFormatType, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Assertible', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Assertible', 'CycLExpression-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Assertible', 'CycLExpression-Askable', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Askable', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Askable', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression-Askable', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression', 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression', 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLExpression', 'SubLSExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDenotationalTerm-Assertible', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDenotationalTerm', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDenotationalTerm', 'CycLTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDenotationalTerm', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDenotationalTerm', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDeducedAssertion', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLDeducedAssertion', 'CycLAssertion', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLRepresentedAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLRepresentedAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLReifiedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLReifiedDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLReifiableDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLClosedAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLConstant', 'CycLClosedAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedSentence', 'CycLSentence-ClosedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedSentence', 'CycLSentence-ClosedPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedSentence', 'CycLClosedExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLNonAtomicTerm-ClosedFunctor', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLNonAtomicTerm-ClosedFunctor', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLNonAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLClosedFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedNonAtomicTerm', 'CycLClosedDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedFormula', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedFormula', 'CycLFormula', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedFormula', 'CycLClosedExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedFormula', 'CycLClosedExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedExpression', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedExpression', 'CycLTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedExpression', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedExpression', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedDenotationalTerm', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedDenotationalTerm', 'CycLDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedDenotationalTerm', 'CycLClosedExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedDenotationalTerm', 'CycLClosedExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicTerm', 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicTerm', 'CycLClosedDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicTerm', 'CycLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicTerm', 'CycLAtomicTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicSentence', 'CycLClosedSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicSentence', 'CycLClosedFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicSentence', 'CycLAtomicSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLClosedAtomicSentence', 'CycLAtomicSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicTerm', 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicTerm', 'CycLExpression', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicTerm', 'CycLDenotationalTerm-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicTerm', 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicTerm', 'CycLDenotationalTerm', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicSentence', 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicSentence', 'CycLSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicSentence', 'CycLFormulaicSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicSentence', 'CycLFormulaicSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicAssertion', 'CycLAtomicSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicAssertion', 'CycLAtomicSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicAssertion', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAtomicAssertion', 'CycLAssertion', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertionDirection', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertion', 'CycSupportDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertion', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertion', 'CycLSentence-Assertible', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertion', 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertedAssertion', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycLAssertedAssertion', 'CycLAssertion', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CycKBDatastructure', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInferenceProblemLinkStatus', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInferenceDataStructure', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInferenceBindingsDataStructure', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInferenceAnswerJustification', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInferenceAnswer', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycInference', 'CycInferenceDataStructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycHLTruthValue', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycHLSupportDatastructure', 'CycSupportDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycHLSupportDatastructure', 'CycKBDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycDeductionDatastructure', 'CycArgumentDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CycArgumentDatastructure', 'CycKBDatastructure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CommutativeRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CommutativeRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'CollectionDenotingFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CollectionDenotingFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, tCol, 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genls, tCol, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, tCol, 'SetOrCollection', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Code-AssertionDirection', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'Closed-InferenceProblemLinkStatus', 'CycInferenceProblemLinkStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'CanonicalizerDirective', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BroadMicrotheory', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BookkeepingPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BookkeepingPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryRelation', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', 'FixedArityRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryPredicate', 'BinaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryFunction', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryFunction', tFunction, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryFunction', 'BinaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'BinaryFunction', 'BinaryRelation', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'Backward-AssertionDirection', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'August', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AtemporalNecessarilyEssentialCollectionType', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AsymmetricBinaryPredicate', 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AsymmetricBinaryPredicate', 'IrreflexiveBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'AsymmetricBinaryPredicate', 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AsymmetricBinaryPredicate', 'AntiSymmetricBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'AssociativeRelation', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AssociativeRelation', tRelation, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeTernaryPredicate', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeTernaryPredicate', 'TernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeTernaryPredicate', 'ArgTypePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeTernaryPredicate', 'ArgTypePredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypePredicate', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypePredicate', 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypePredicate', 'ArgConstraintPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeBinaryPredicate', 'ArgTypePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgTypeBinaryPredicate', 'ArgTypePredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgSometimesIsaPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaTernaryPredicate', 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaTernaryPredicate', 'ArgTypeTernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaTernaryPredicate', 'ArgQuotedIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaPredicate', 'ArgTypePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaBinaryPredicate', 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaBinaryPredicate', 'ArgTypeBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgQuotedIsaBinaryPredicate', 'ArgQuotedIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaTernaryPredicate', 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaTernaryPredicate', 'ArgTypeTernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaTernaryPredicate', 'ArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaPredicate', 'ArgTypePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaBinaryPredicate', 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaBinaryPredicate', 'ArgTypeBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgIsaBinaryPredicate', 'ArgIsaPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlTernaryPredicate', 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlTernaryPredicate', 'ArgTypeTernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlQuantityTernaryPredicate', 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlQuantityTernaryPredicate', 'ArgTypeTernaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlQuantityBinaryPredicate', 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlQuantityBinaryPredicate', 'ArgTypeBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlBinaryPredicate', 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'ArgGenlBinaryPredicate', 'ArgTypeBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'ArgConstraintPredicate', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'April', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AntiTransitiveBinaryPredicate', 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AntiTransitiveBinaryPredicate', 'IrreflexiveBinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genls, 'AntiSymmetricBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genls, 'AntiSymmetricBinaryPredicate', 'BinaryPredicate', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arityMin, differentSymbols, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, different, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, commutativeInArgsAndRest, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, commutativeInArgs, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, and, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'Unity', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'TimesFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'TheSet', 0, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'PlusFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'Percent', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'MinRangeFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMin, 'MaxRangeFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMax, 'Unity', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arityMax, 'Percent', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, xor, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, unknownSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, unitMultiplicationFactor, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, trueSubL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, trueSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, trueRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, transitiveViaArgInverse, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, transitiveViaArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, thereExists, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, thereExists, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, thereExistExactly, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, thereExistAtMost, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, thereExistAtLeast, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, termOfUnit, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, termOfUnit, 2, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(arity, termExternalIDString, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, termDependsOn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, termChosen, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, synonymousExternalConcept, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, substring, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, subsetOf, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, skolemizeForward, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, skolem, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, singleEntryFormatInArgs, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, siblingDisjointExceptions, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, sharedNotes, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, sentenceTruth, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, sentenceImplies, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, sentenceEquiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, sentenceDesignationArgnum, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, scopingArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, salientAssertions, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ruleTemplateDirection, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ruleAfterRemoving, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ruleAfterAdding, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, rewriteOf, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultQuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultIsaArgIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultIsaArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultIsa, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, resultGenlArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, resultGenl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, requiredArg3Pred, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, requiredArg2Pred, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, requiredArg1Pred, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationMemberInstance, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationInstanceMember, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationInstanceExists, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationInstanceAll, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExpansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExistsMinAll, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExistsMaxAll, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExistsInstance, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExistsCountAll, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationExistsAll, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAllInstance, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAllExistsMin, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAllExistsMax, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAllExistsCount, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAllExists, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, relationAll, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulatorRuleProperties, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulatorRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulatorEquiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulatorEquals, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulationPrecondition, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, reformulationDirectionInMode, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ratioOfTo, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quotedDefnSufficient, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quotedDefnNecessary, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quotedDefnIff, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quotedArgument, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, querySentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quantitySubsumes, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, quantityIntersects, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, prettyString, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, preservesGenlsInArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, predicateConventionMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, pragmaticRequirement, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, pragmaticallyNormal, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, pointQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, performSubL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, overlappingExternalConcept, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, operatorFormulas, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, openEntryFormatInArgs, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, opaqueArgument, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, omitArgIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, oldConstantName, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, numericallyEquals, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nthSmallestElement, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nthLargestElement, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, notAssertibleMt, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, notAssertibleCollection, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, notAssertible, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, not, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, not, 1, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, nonAbducibleWithValueInArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, negationPreds, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, negationMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, negationInverse, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestGenls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestGenlPreds, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestGenlMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestDifferentIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestDifferentGenls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestCommonSpecs, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestCommonIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestCommonGenls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, nearestCommonGenlMt, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, natFunction, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, natArgumentsEqual, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, natArgument, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, myCreator, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, myCreationTime, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, myCreationSecond, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, myCreationPurpose, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, multiplicationUnits, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, mtVisible, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, minQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, minimizeExtent, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, minimize, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, microtheoryDesignationArgnum, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, meetsPragmaticRequirement, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, means, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, maxQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, knownSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, knownAntecedentRule, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ist, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, ist, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, isa, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, irrelevantTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, irrelevantPredAssertion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, irrelevantMt, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, irrelevantAssertion, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgResultIsaReln, 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgResultIsa, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgResultGenlReln, 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgResultGenl, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgIsa, 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, interArgDifferent, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, integerBetween, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, instanceElementType, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, indexicalReferent, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, independentArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, implies, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, implies, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, hypotheticalTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, holdsIn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, hlPrototypicalInstance, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, highlyRelevantTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, highlyRelevantPredAssertion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, highlyRelevantMt, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, highlyRelevantAssertion, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, greaterThanOrEqualTo, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, greaterThan, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genMassNoun, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genls, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, genlRules, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genlPreds, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genlMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genlMt, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, genlInverse, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genlCanonicalizerDirectives, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genKeyword, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, genFormat, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, forwardNonTriggerLiteral, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, formulaArity, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, forAll, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, forAll, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, followingValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, fanOutArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, extentCardinality, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, extConceptOverlapsColAndReln, 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, expresses, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, expansionDefn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, expansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, exceptWhen, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, exceptMt, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, exceptFor, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, except, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, exampleAssertions, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, exactlyAssertedEL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, evaluationResultQuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, evaluationDefn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, evaluateImmediately, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, evaluateAtEL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, evaluate, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, equiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, equalSymbols, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, equals, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, equals, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, ephemeralTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, elInverse, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, elementOf, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, distributesOutOfArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, disjointWith, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, disjointWith, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, denotes, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, denotes, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, defnSufficient, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, defnNecessary, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, defnIff, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, defnIff, 2, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(arity, definingMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, defaultReformulationDirectionInModeForPred, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, decontextualizedPredicate, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, decontextualizedCollection, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycTransformationProofRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycTransformationProofBindings, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycTacticID, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProofID, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreTerms, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreProofs, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreProofCount, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreProblems, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreProblemCount, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreLinks, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreLinkCount, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreInferences, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreInferenceCount, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemStoreID, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemQueryTerms, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemQuerySentence, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemProvabilityStatus, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemLinkID, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemID, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemDependentLinks, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycProblemArgumentLinks, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycInferenceRelevantProblems, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, cycInferenceAnswerLink, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, constraint, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, constrainsArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, constantName, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, constantID, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, constantGUID, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, consistent, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, conceptuallyRelated, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completelyEnumerableCollection, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completelyDecidableCollection, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentEnumerableViaBackchain, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentEnumerableForValueInArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentEnumerableForArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentEnumerable, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentDecidableForValueInArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentDecidable, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentAssertedForValueInArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, completeExtentAsserted, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, comment, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionIsaBackchainRequired, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionIsaBackchainEncouraged, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionGenlsBackchainRequired, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionGenlsBackchainEncouraged, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionExpansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionConventionMt, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionCompletelyEnumerableViaBackchain, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionBackchainRequired, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, collectionBackchainEncouraged, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, coExtensional, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, canonicalizerDirectiveForArgAndRest, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, canonicalizerDirectiveForArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, canonicalizerDirectiveForAllArgs, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, backchainRequired, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, backchainForbiddenWhenUnboundInArg, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, backchainForbidden, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, assertionUtility, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, assertionDirection, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, assertedTermSentences, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, assertedSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, assertedPredicateArg, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arityMin, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arityMax, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arity, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arity, 2, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, argsQuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argSometimesIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argsIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argsGenl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argQuotedIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argIsa, 3, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, argAndRestQuotedIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argAndRestIsa, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, argAndRestIsa, 3, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(arity, argAndRestGenl, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg6SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg6QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg6Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg6Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg6Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg5SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg5QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg5Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg5Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg5Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg4SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg4QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg4Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg4Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg4Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg3SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg3QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg3Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg3Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg3Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg2SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg2QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg2Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg2Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg2Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg1SometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg1QuotedIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg1Isa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg1Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, arg1Format, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, afterRemoving, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, afterRemoving, 2, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(arity, afterAdding, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, afterAdding, 2, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(arity, admittedSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, admittedNAT, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, admittedArgument, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, admittedAllArgument, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, abnormal, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'UnitProductFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'UncanonicalizerAssertionFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'TLVariableFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'TLReifiedNatFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'TLAssertionFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'TheSetOf', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ThePrototypicalTransitiveBinaryPredicate', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ThePrototypicalBinaryPredicate', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'TheCollectionOf', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'substring-CaseInsensitive', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'SubLQuoteFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'SkolemFunctionFn', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'SkolemFuncNFn', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RoundUpFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RoundDownFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RoundClosestFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RelationInstanceExistsFn', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RelationExistsInstanceFn', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RelationExistsAllFn', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'RelationAllExistsFn', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'QuotientFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'Quote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'QuasiQuote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'QuantityConversionFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'prettyString-Canonical', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'PlusAll', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'PerFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'MtTimeWithGranularityDimFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'MtTimeDimFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ModuloFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'Minimum', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'MeaningInSystemFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'Maximum', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'LogFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-pluginByDataConnectsTo', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasUri', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasScalability', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasOutputType', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasInputType', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasEndpoint', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'larkc-hasCostPerInvocation', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'Kappa', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ist-Asserted', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'IntervalMinFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'IntervalMaxFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa5-4', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa5-3', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa5-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa5-1', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa4-5', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa4-3', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa4-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa4-1', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa3-5', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa3-4', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa3-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa3-1', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa2-5', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa2-4', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa2-3', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa2-1', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa1-5', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa1-4', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa1-3', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgIsa1-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgGenl1-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'interArgFormat1-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'genls-SpecDenotesGenlInstances', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'genls-GenlDenotesSpecInstances', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FunctionToArg', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FormulaArityFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FormulaArgSetFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FormulaArgListFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FormulaArgFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FOL-TermFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FOL-PredicateFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'FOL-FunctionFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ExpFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'ExpandSubLFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'EvaluateSubLFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'EscapeQuote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'equalStrings-CaseInsensitive', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'DifferenceFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'DateEncodeStringFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'DateDecodeStringFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycTacticFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycProofFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycProblemStoreFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycProblemLinkFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycProblemFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CycInferenceFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'CollectionRuleTemplateFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'Average', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'assertionUtility-1', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arity, 'AbsoluteValueFn', 1, 'UniversalVocabularyMt', vStrDef).

exactlyAssertedEL(resultQuotedIsa, 'RelationInstanceExistsFn', 'IndeterminateTerm', 'BaseKB', vStrDef).
exactlyAssertedEL(resultQuotedIsa, 'RelationExistsInstanceFn', 'IndeterminateTerm', 'BaseKB', vStrDef).
exactlyAssertedEL(resultQuotedIsa, 'RelationExistsAllFn', 'IndeterminateTerm', 'BaseKB', vStrDef).
exactlyAssertedEL(resultQuotedIsa, 'RelationAllExistsFn', 'IndeterminateTerm', 'BaseKB', vStrDef).
exactlyAssertedEL(resultIsaArgIsa, 'IntervalMinFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsaArgIsa, 'IntervalMaxFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsaArg, 'RelationInstanceExistsFn', 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(resultIsaArg, 'RelationExistsInstanceFn', 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(resultIsaArg, 'RelationExistsAllFn', 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(resultIsaArg, 'RelationAllExistsFn', 4, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(resultIsa, 'Unity', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'UnitProductFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'UncanonicalizerAssertionFn', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TLVariableFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TLVariableFn', 'SubLAtom', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TLReifiedNatFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TLReifiedNatFn', 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TLAssertionFn', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TimesFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TheSetOf', 'Set-Mathematical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TheSet', 'Set-Mathematical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TheList', 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'TheCollectionOf', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'SkolemFunctionFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'SkolemFuncNFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RoundUpFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RoundDownFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RoundClosestFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RelationInstanceExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RelationExistsInstanceFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RelationExistsAllFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'RelationAllExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'QuotientFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Quote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Quote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Quote', 'CycLTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(resultIsa, 'QuasiQuote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'QuasiQuote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'QuasiQuote', 'CycLTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(resultIsa, 'QuantityConversionFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'PlusFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'PlusAll', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'PerFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Percent', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MtUnionFn', 'ProblemSolvingCntxt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MtTimeWithGranularityDimFn', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MtTimeDimFn', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MtSpace', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'ModuloFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MinRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Minimum', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MeaningInSystemFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'MaxRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Maximum', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'LogFn', 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Kappa', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'IntervalMinFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'IntervalMaxFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FunctionToArg', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FormulaArityFn', 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FormulaArgSetFn', 'Set-Mathematical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FormulaArgListFn', 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FormulaArgFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FOL-TermFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FOL-PredicateFn', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'FOL-FunctionFn', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'ExpFn', 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'EvaluateSubLFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'EscapeQuote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'EscapeQuote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'EscapeQuote', 'CycLTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(resultIsa, 'DifferenceFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'DateEncodeStringFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'DateDecodeStringFn', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycTacticFn', 'CycTactic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycProofFn', 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycProblemStoreFn', 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycProblemLinkFn', 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycProblemFn', 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CycInferenceFn', 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'CollectionRuleTemplateFn', 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'Average', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(resultIsa, 'AbsoluteValueFn', 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).


exactlyAssertedEL(argsQuotedIsa, or, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsQuotedIsa, or, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argsQuotedIsa, differentSymbols, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsQuotedIsa, and, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsQuotedIsa, and, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argsIsa, different, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, defaultReformulatorModePrecedence, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'Unity', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'TimesFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'TheSet', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'TheList', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'PlusFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'Percent', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'MtUnionFn', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'MtSpace', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'MinRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argsIsa, 'MaxRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, unknownSentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, trueSentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, transitiveViaArgInverse, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, transitiveViaArg, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, transitiveViaArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, termOfUnit, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, termExternalIDString, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, termChosen, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, subsetOf, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, skolemizeForward, 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, siblingDisjointExceptions, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, sentenceImplies, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, sentenceEquiv, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, ruleAfterRemoving, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, ruleAfterAdding, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationInstanceExists, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationInstanceAll, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationExistsInstance, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationExistsAll, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationAllInstance, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationAllExists, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, relationAll, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, quotedIsa, 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, quotedArgument, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, pragmaticRequirement, 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, performSubL, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, operatorFormulas, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nthSmallestElement, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nthLargestElement, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, negationPreds, 'TransformationModuleSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, negationPreds, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, negationPreds, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, negationInverse, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestIsa, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestGenls, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestGenlPreds, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestGenlMt, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestDifferentIsa, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestDifferentGenls, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestCommonSpecs, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestCommonIsa, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestCommonGenls, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, nearestCommonGenlMt, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, natFunction, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, natArgumentsEqual, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, natArgument, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreator, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreator, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationTime, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationTime, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationSecond, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationSecond, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationPurpose, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, myCreationPurpose, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, minQuantValue, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, minimizeExtent, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, maxQuantValue, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, knownSentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, ist, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, isa, 'TransformationModuleSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, isa, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, isa, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, interArgDifferent, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, integerBetween, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, indexicalReferent, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, hlPrototypicalInstance, 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genls, 'TransformationModuleSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genls, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genls, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlPreds, 'TransformationModuleSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlPreds, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlPreds, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlMt, 'TransformationModuleSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlMt, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlInverse, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlInverse, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, genlInverse, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, forwardNonTriggerLiteral, 'InferenceSupportedPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, formulaArity, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, extentCardinality, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, exactlyAssertedEL, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, evaluationDefn, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, evaluate, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, equalSymbols, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, equals, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, elInverse, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, elementOf, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, disjointWith, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, disjointWith, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, differentSymbols, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, different, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycTransformationProofRule, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycTransformationProofBindings, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreTerms, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreProofCount, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreProblems, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreProblemCount, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreLinkCount, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemStoreInferenceCount, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemQueryTerms, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemQuerySentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, cycProblemProvabilityStatus, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, constantName, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, constantID, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, constantGUID, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, consistent, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, conceptuallyRelated, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentEnumerableForValueInArg, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentEnumerableForArg, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentEnumerable, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentDecidableForValueInArg, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentDecidable, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentAssertedForValueInArg, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, completeExtentAsserted, 'RemovalModuleSupportedPredicate-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, comment, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, assertionDirection, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, assertedTermSentences, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, assertedSentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, assertedPredicateArg, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, arityMax, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, arity, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, argAndRestIsa, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, afterAdding, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, admittedSentence, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, admittedArgument, 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'True', 'CycLTruthValueSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'True', 'CycLTruthValueSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'True', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'TransitiveBinaryPredicate', 'RemovalModuleSupportedCollection-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'TheUser', 'TheTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'ThePrototypicalTransitiveBinaryPredicate', 'HLPrototypicalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'ThePrototypicalCollection', 'HLPrototypicalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'ThePrototypicalBinaryPredicate', 'HLPrototypicalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'TheCollectionOf', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'SymmetricBinaryPredicate', 'TransformationModuleSupportedCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'SymmetricBinaryPredicate', 'RemovalModuleSupportedCollection-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'SubLPositiveInteger', 'InferenceSupportedCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'ReflexiveBinaryPredicate', 'RemovalModuleSupportedCollection-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'Quote', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'Quote', 'CycLExpression', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'QueryMt', 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'QuasiQuote', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'Kappa', 'InferenceSupportedFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'ist-Asserted', 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'IrreflexiveBinaryPredicate', 'RemovalModuleSupportedCollection-Generic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'Guest', 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'genls-SpecDenotesGenlInstances', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'genls-GenlDenotesSpecInstances', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'False', 'CycLTruthValueSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'False', 'CycLTruthValueSentence', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'EscapeQuote', 'InferenceSupportedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'EscapeQuote', 'CycLExpression', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'equalStrings-CaseInsensitive', 'RemovalModuleSupportedPredicate-Specific', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'DocumentationPredicate', 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'CycAdministrator', 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'AsymmetricBinaryPredicate', 'TransformationModuleSupportedCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedIsa, 'AsymmetricBinaryPredicate', 'RemovalModuleSupportedCollection-Generic', 'UniversalVocabularyMt', vStrDef).

exactlyAssertedEL(quotedDefnIff, 'SubLSymbol', 'SubLQuoteFn'('SYMBOLP'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLSymbol', 'SubLQuoteFn'('SYMBOLP'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLString', 'SubLQuoteFn'('CYC-SYSTEM-STRING-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLSExpression', 'SubLQuoteFn'('CYC-SUBL-EXPRESSION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLRealNumber', 'SubLQuoteFn'('CYC-SYSTEM-REAL-NUMBER-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLPositiveInteger', 'SubLQuoteFn'('CYC-POSITIVE-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLPositiveInteger', 'SubLQuoteFn'('CYC-POSITIVE-INTEGER'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLNonVariableSymbol', 'SubLQuoteFn'('CYC-SYSTEM-NON-VARIABLE-SYMBOL-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLNonVariableNonKeywordSymbol', 'SubLQuoteFn'('SUBL-NON-VARIABLE-NON-KEYWORD-SYMBOL-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLNonNegativeInteger', 'SubLQuoteFn'('CYC-NON-NEGATIVE-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLNonNegativeInteger', 'SubLQuoteFn'('CYC-NON-NEGATIVE-INTEGER'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLList', 'SubLQuoteFn'('LISTP'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLKeyword', 'SubLQuoteFn'('KEYWORDP'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLInteger', 'SubLQuoteFn'('CYC-SYSTEM-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLCharacter', 'SubLQuoteFn'('CYC-SYSTEM-CHARACTER-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLAtomicTerm', 'SubLQuoteFn'('CYC-SYSTEM-TERM-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'SubLAtom', 'SubLQuoteFn'('CYC-SYSTEM-ATOM'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, ftVar, 'SubLQuoteFn'('CYCL-VARIABLE-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLTerm', 'SubLQuoteFn'('CYCL-EXPRESSION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLSentence-Assertible', 'SubLQuoteFn'('CYCL-SENTENCE-ASSERTIBLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLSentence-Askable', 'SubLQuoteFn'('CYCL-SENTENCE-ASKABLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLSentence', 'SubLQuoteFn'('CYCL-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLRuleAssertion', 'SubLQuoteFn'('CYCL-RULE-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLRepresentedTerm', 'SubLQuoteFn'('CYCL-REPRESENTED-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLRepresentedAtomicTerm', 'SubLQuoteFn'('CYCL-REPRESENTED-ATOMIC-TERM-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLReifiedDenotationalTerm', 'SubLQuoteFn'('CYCL-REIFIED-DENOTATIONAL-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLReifiableNonAtomicTerm', 'SubLQuoteFn'('CYCL-REIFIABLE-NON-ATOMIC-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLReifiableNonAtomicTerm', 'SubLQuoteFn'('CYCL-REIFIABLE-NON-ATOMIC-TERM?'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLReifiableDenotationalTerm', 'SubLQuoteFn'('CYCL-REIFIABLE-DENOTATIONAL-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLPropositionalSentence', 'SubLQuoteFn'('CYCL-PROPOSITIONAL-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLOpenSentence', 'SubLQuoteFn'('CYCL-OPEN-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLOpenNonAtomicTerm', 'SubLQuoteFn'('CYCL-OPEN-NON-ATOMIC-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLOpenFormula', 'SubLQuoteFn'('CYCL-OPEN-FORMULA?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLOpenExpression', 'SubLQuoteFn'('CYCL-OPEN-EXPRESSION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLOpenDenotationalTerm', 'SubLQuoteFn'('CYCL-OPEN-DENOTATIONAL-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLNonAtomicTerm-Assertible', 'SubLQuoteFn'('CYCL-NON-ATOMIC-TERM-ASSERTIBLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLNonAtomicTerm-Askable', 'SubLQuoteFn'('CYCL-NON-ATOMIC-TERM-ASKABLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLNonAtomicTerm', 'SubLQuoteFn'('CYCL-NON-ATOMIC-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLNonAtomicReifiedTerm', 'SubLQuoteFn'('CYCL-NON-ATOMIC-REIFIED-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLIndexedTerm', 'SubLQuoteFn'('CYCL-INDEXED-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLGenericRelationFormula', 'SubLQuoteFn'('CYCL-UNBOUND-RELATION-FORMULA-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLGAFAssertion', 'SubLQuoteFn'('CYCL-GAF-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLFormula', 'SubLQuoteFn'('CYCL-FORMULA?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLExpression-Assertible', 'SubLQuoteFn'('CYCL-EXPRESSION-ASSERTIBLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLExpression-Askable', 'SubLQuoteFn'('CYCL-EXPRESSION-ASKABLE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLExpression', 'SubLQuoteFn'('CYCL-EXPRESSION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLExpression', 'SubLQuoteFn'('CYCL-EXPRESSION?'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLDenotationalTerm', 'SubLQuoteFn'('CYCL-DENOTATIONAL-TERM-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLDeducedAssertion', 'SubLQuoteFn'('CYCL-DEDUCED-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLConstant', 'SubLQuoteFn'('CYCL-CONSTANT-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedSentence', 'SubLQuoteFn'('CYCL-CLOSED-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedNonAtomicTerm', 'SubLQuoteFn'('CYCL-CLOSED-NON-ATOMIC-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedFormula', 'SubLQuoteFn'('CYCL-CLOSED-FORMULA?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedExpression', 'SubLQuoteFn'('CYCL-CLOSED-EXPRESSION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedDenotationalTerm', 'SubLQuoteFn'('CYCL-CLOSED-DENOTATIONAL-TERM?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedAtomicTerm', 'SubLQuoteFn'('CYCL-CLOSED-ATOMIC-TERM-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLClosedAtomicSentence', 'SubLQuoteFn'('CYCL-CLOSED-ATOMIC-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLAtomicTerm', 'SubLQuoteFn'('CYCL-ATOMIC-TERM-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLAtomicSentence', 'SubLQuoteFn'('CYCL-ATOMIC-SENTENCE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLAtomicAssertion', 'SubLQuoteFn'('CYCL-ATOMIC-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLAssertion', 'SubLQuoteFn'('CYCL-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedDefnIff, 'CycLAssertedAssertion', 'SubLQuoteFn'('CYCL-ASSERTED-ASSERTION?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, xor, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, xor, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, unknownSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, trueSubL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, trueSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, trueRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExists, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExists, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, thereExistExactly, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExistExactly, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExistAtMost, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExistAtMost, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExistAtLeast, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, thereExistAtLeast, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, termOfUnit, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, termOfUnit, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, termExternalIDString, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, termDependsOn, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, termDependsOn, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, skolemizeForward, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, skolem, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sharedNotes, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sharedNotes, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sentenceImplies, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sentenceImplies, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sentenceEquiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, sentenceEquiv, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, salientAssertions, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, salientAssertions, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, ruleAfterRemoving, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, ruleAfterAdding, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, rewriteOf, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, rewriteOf, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, relationExpansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorRuleProperties, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorRule, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorEquiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorEquiv, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorEquals, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulatorEquals, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulationPrecondition, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, reformulationDirectionInMode, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, quotedIsa, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, quotedDefnSufficient, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, quotedDefnNecessary, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, quotedDefnIff, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, quotedArgument, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, querySentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, prettyString, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, pragmaticRequirement, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, pragmaticRequirement, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, pragmaticallyNormal, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, pointQuantValue, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, performSubL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, overlappingExternalConcept, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, or, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, operatorFormulas, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, operatorFormulas, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, opaqueArgument, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, oldConstantName, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, oldConstantName, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, not, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, natFunction, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, natArgumentsEqual, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, natArgumentsEqual, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, natArgument, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, myCreator, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, myCreationTime, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, myCreationSecond, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, myCreationPurpose, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, minimize, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, meetsPragmaticRequirement, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, knownSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, knownAntecedentRule, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, ist, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, irrelevantTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, irrelevantPredAssertion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, irrelevantAssertion, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, indexicalReferent, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, implies, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, implies, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, hypotheticalTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, holdsIn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, hlPrototypicalInstance, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, highlyRelevantTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, highlyRelevantPredAssertion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, highlyRelevantAssertion, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genMassNoun, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genlRules, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genlRules, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genKeyword, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genKeyword, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genFormat, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, genFormat, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, forwardNonTriggerLiteral, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, formulaArity, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, forAll, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, forAll, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, expansionDefn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, expansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exceptWhen, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exceptWhen, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exceptFor, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exceptFor, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, except, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exampleAssertions, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exampleAssertions, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, exactlyAssertedEL, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, evaluationDefn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, evaluate, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, equiv, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, equiv, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, equalSymbols, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, equalSymbols, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, ephemeralTerm, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, differentSymbols, 5, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, differentSymbols, 4, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, differentSymbols, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, differentSymbols, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, differentSymbols, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, differentSymbols, '$VAR'('ALL'), 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, defnSufficient, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, defnNecessary, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, defnIff, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, definingMt, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, cycTransformationProofRule, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, cycProblemStoreTerms, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, cycProblemQueryTerms, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, cycProblemQuerySentence, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, constraint, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, constantName, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, constantName, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, constantID, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, constantGUID, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, consistent, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, comment, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, comment, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, collectionExpansion, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, assertionUtility, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, assertionDirection, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, assertedTermSentences, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, assertedTermSentences, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, assertedSentence, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, arity, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, argSometimesIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, argIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, argAndRestIsa, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, and, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, afterRemoving, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, afterAdding, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, admittedSentence, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, admittedNAT, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, abnormal, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'UncanonicalizerAssertionFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TLVariableFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TLAssertionFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TheSetOf', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TheSetOf', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TheCollectionOf', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'TheCollectionOf', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SubLQuoteFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFunctionFn', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFunctionFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFunctionFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFuncNFn', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFuncNFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'SkolemFuncNFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'Quote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'QuasiQuote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'prettyString-Canonical', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'Kappa', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'Kappa', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'ist-Asserted', 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(quotedArgument, 'FormulaArityFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'FormulaArgSetFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'FormulaArgListFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'FormulaArgFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'ExpandSubLFn', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'ExpandSubLFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'EvaluateSubLFn', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'EscapeQuote', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(quotedArgument, 'assertionUtility-1', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, xor, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, xor, 2, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, xor, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, xor, 1, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, unknownSentence, 1, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, trueSubL, 1, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, trueSentence, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, trueRule, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExists, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExists, 2, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExists, 1, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExists, 1, ftVar, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistExactly, 3, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistExactly, 2, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistAtMost, 3, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistAtMost, 2, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistAtLeast, 3, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, thereExistAtLeast, 2, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termOfUnit, 2, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termOfUnit, 1, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termOfUnit, 1, 'CycLReifiableNonAtomicTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termExternalIDString, 1, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termDependsOn, 2, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, termDependsOn, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sharedNotes, 2, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sharedNotes, 1, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sentenceImplies, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sentenceImplies, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sentenceEquiv, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, sentenceEquiv, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, salientAssertions, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, salientAssertions, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, ruleAfterRemoving, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, ruleAfterAdding, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, rewriteOf, 2, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, rewriteOf, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, relationExpansion, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorRuleProperties, 2, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorRule, 2, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorRule, 1, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorEquiv, 2, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorEquiv, 1, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorEquals, 2, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulatorEquals, 1, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulationPrecondition, 3, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, reformulationDirectionInMode, 3, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, quotedDefnSufficient, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, quotedDefnNecessary, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, quotedDefnIff, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, querySentence, 1, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, prettyString, 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, pragmaticRequirement, 2, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, pragmaticRequirement, 1, 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, pragmaticallyNormal, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, pointQuantValue, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, performSubL, 1, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, or, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, operatorFormulas, 2, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, operatorFormulas, 1, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, oldConstantName, 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, oldConstantName, 2, 'SubLString', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, oldConstantName, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, oldConstantName, 1, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, not, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, not, 1, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, not, 1, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, natFunction, 1, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, natArgumentsEqual, 2, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, natArgumentsEqual, 1, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, natArgument, 1, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreator, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreator, 1, 'CycLReifiableDenotationalTerm', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreationTime, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, myCreationTime, 1, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreationSecond, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreationSecond, 1, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreationPurpose, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, myCreationPurpose, 1, 'CycLReifiableDenotationalTerm', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, minimize, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, meetsPragmaticRequirement, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, knownSentence, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, knownAntecedentRule, 1, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, ist, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, ist, 2, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, irrelevantTerm, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, irrelevantPredAssertion, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, irrelevantAssertion, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, indexicalReferent, 1, 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 2, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 2, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 1, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, implies, 1, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, hypotheticalTerm, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, holdsIn, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, hlPrototypicalInstance, 1, 'HLPrototypicalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, hlPrototypicalInstance, 1, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, highlyRelevantTerm, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, highlyRelevantPredAssertion, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, highlyRelevantAssertion, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genMassNoun, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genlRules, 2, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genlRules, 1, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genKeyword, 2, 'SubLKeyword', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genKeyword, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, genFormat, 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, forwardNonTriggerLiteral, 1, 'CycLOpenSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, formulaArity, 1, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, forAll, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, forAll, 2, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, forAll, 1, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, forAll, 1, ftVar, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, expansionDefn, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, expansion, 2, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, expansion, 2, 'CycLExpression', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exceptWhen, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exceptWhen, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exceptFor, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exceptFor, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, except, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exampleAssertions, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exampleAssertions, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, exactlyAssertedEL, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, evaluationDefn, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, equiv, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, equiv, 2, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, equiv, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, equiv, 1, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(argQuotedIsa, ephemeralTerm, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, defnSufficient, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, defnNecessary, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, defnIff, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, definingMt, 1, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, cycTransformationProofRule, 2, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, cycProblemStoreTerms, 2, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, cycProblemQueryTerms, 2, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, cycProblemQuerySentence, 2, 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, constraint, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, constantName, 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, constantName, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, constantID, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, constantGUID, 1, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, consistent, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, comment, 2, 'SubLString', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, comment, 1, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, collectionExpansion, 2, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, collectionExpansion, 2, 'CycLExpression', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, assertionUtility, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, assertionDirection, 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, assertedTermSentences, 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, assertedTermSentences, 1, 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, assertedSentence, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, arity, 2, 'SubLNonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, arity, 2, 'SubLNonNegativeInteger', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, argSometimesIsa, 2, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, argIsa, 2, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, argIsa, 2, 'SubLPositiveInteger', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, argAndRestIsa, 2, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, argAndRestIsa, 2, 'SubLPositiveInteger', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, and, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, afterRemoving, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, afterAdding, 2, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, admittedSentence, 1, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, admittedNAT, 1, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, abnormal, 2, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'UncanonicalizerAssertionFn', 1, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TLVariableFn', 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TLAssertionFn', 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TheSetOf', 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TheSetOf', 1, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TheCollectionOf', 2, 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'TheCollectionOf', 1, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SubLQuoteFn', 1, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFunctionFn', 3, 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFunctionFn', 2, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFunctionFn', 1, 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFuncNFn', 3, 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFuncNFn', 2, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'SkolemFuncNFn', 1, 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'Quote', 1, 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'Quote', 1, 'CycLTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'QuasiQuote', 1, 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'QuasiQuote', 1, 'CycLTerm', 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(argQuotedIsa, 'prettyString-Canonical', 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'Kappa', 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'Kappa', 1, 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'ist-Asserted', 2, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'FormulaArityFn', 1, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'FormulaArgSetFn', 1, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'FormulaArgListFn', 1, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'FormulaArgFn', 2, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'ExpandSubLFn', 2, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'ExpandSubLFn', 1, 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'EvaluateSubLFn', 1, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'EscapeQuote', 1, 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'EscapeQuote', 1, 'CycLTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argQuotedIsa, 'assertionUtility-1', 1, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, unitMultiplicationFactor, 3, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, unitMultiplicationFactor, 3, 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, unitMultiplicationFactor, 2, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, unitMultiplicationFactor, 1, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, trueSubL, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, trueRule, 1, 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArgInverse, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArgInverse, 2, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArgInverse, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArg, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArg, 2, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, transitiveViaArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, thereExistExactly, 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, thereExistAtMost, 1, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, thereExistAtLeast, 1, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termOfUnit, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termOfUnit, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termExternalIDString, 2, 'HLExternalIDString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termExternalIDString, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termDependsOn, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termDependsOn, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, termChosen, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, synonymousExternalConcept, 3, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, synonymousExternalConcept, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, synonymousExternalConcept, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, substring, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, substring, 1, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, subsetOf, 2, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, subsetOf, 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, skolemizeForward, 1, 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, skolem, 1, 'SkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, singleEntryFormatInArgs, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, singleEntryFormatInArgs, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, siblingDisjointExceptions, 2, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, siblingDisjointExceptions, 2, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, siblingDisjointExceptions, 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, siblingDisjointExceptions, 1, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, sharedNotes, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sharedNotes, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceTruth, 2, 'TruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 2, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 2, 'Individual', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 1, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceEquiv, 1, 'Individual', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, sentenceDesignationArgnum, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, sentenceDesignationArgnum, 1, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, scopingArg, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, scopingArg, 1, 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, salientAssertions, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleTemplateDirection, 2, 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleTemplateDirection, 1, 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleAfterRemoving, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleAfterRemoving, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleAfterAdding, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ruleAfterAdding, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, rewriteOf, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, rewriteOf, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultQuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultQuotedIsa, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsaArgIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsaArgIsa, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsaArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsaArg, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsa, 2, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsa, 2, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, resultIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultIsa, 1, tRelation, 'BaseKB', vStrMon).
exactlyAssertedEL(argIsa, resultIsa, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultGenlArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultGenlArg, 1, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultGenl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultGenl, 2, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, resultGenl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, resultGenl, 1, tRelation, 'BaseKB', vStrMon).
exactlyAssertedEL(argIsa, resultGenl, 1, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg3Pred, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg3Pred, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg2Pred, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg2Pred, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg1Pred, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, requiredArg1Pred, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationMemberInstance, 3, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationMemberInstance, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationMemberInstance, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceMember, 3, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceMember, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceMember, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceExists, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceExists, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceExists, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceAll, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceAll, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationInstanceAll, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExpansion, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMinAll, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMinAll, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMinAll, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMinAll, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMaxAll, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMaxAll, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMaxAll, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsMaxAll, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsInstance, 3, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsInstance, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsInstance, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsCountAll, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsCountAll, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsCountAll, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsCountAll, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsAll, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsAll, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationExistsAll, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllInstance, 3, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllInstance, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllInstance, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMin, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMin, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMin, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMin, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMax, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMax, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMax, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsMax, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsCount, 4, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsCount, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsCount, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExistsCount, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExists, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExists, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAllExists, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAll, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, relationAll, 1, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulatorRuleProperties, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulatorRule, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulatorRule, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulatorEquals, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulatorEquals, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulationPrecondition, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulationPrecondition, 2, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, reformulationPrecondition, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulationDirectionInMode, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, reformulationDirectionInMode, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ratioOfTo, 3, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ratioOfTo, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ratioOfTo, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedIsa, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnSufficient, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnSufficient, 1, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnNecessary, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnNecessary, 1, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnIff, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedDefnIff, 1, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedArgument, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quotedArgument, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quantitySubsumes, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quantitySubsumes, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quantityIntersects, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, quantityIntersects, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, prettyString, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, prettyString, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, preservesGenlsInArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, preservesGenlsInArg, 1, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, predicateConventionMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, predicateConventionMt, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, pragmaticallyNormal, 1, 'List', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, pointQuantValue, 2, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, pointQuantValue, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, pointQuantValue, 1, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, performSubL, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, overlappingExternalConcept, 3, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, overlappingExternalConcept, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, operatorFormulas, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, operatorFormulas, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, operatorFormulas, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, openEntryFormatInArgs, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, openEntryFormatInArgs, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, opaqueArgument, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, opaqueArgument, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, omitArgIsa, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, omitArgIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, oldConstantName, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, oldConstantName, 2, 'CharacterString', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, oldConstantName, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, oldConstantName, 1, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, numericallyEquals, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, numericallyEquals, 2, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, numericallyEquals, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, numericallyEquals, 1, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, nthSmallestElement, 4, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthSmallestElement, 3, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthSmallestElement, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthSmallestElement, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthLargestElement, 4, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthLargestElement, 3, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthLargestElement, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nthLargestElement, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, notAssertibleMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, notAssertibleCollection, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, notAssertible, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nonAbducibleWithValueInArg, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nonAbducibleWithValueInArg, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nonAbducibleWithValueInArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationPreds, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationPreds, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationInverse, 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, negationInverse, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestIsa, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenls, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenls, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenlPreds, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenlPreds, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenlMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestGenlMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentIsa, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentIsa, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentGenls, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentGenls, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestDifferentGenls, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonSpecs, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonSpecs, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonSpecs, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonIsa, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonIsa, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenls, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenls, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenls, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenlMt, 3, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenlMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, nearestCommonGenlMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natFunction, 2, 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natFunction, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natArgumentsEqual, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natArgumentsEqual, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natArgument, 3, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natArgument, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, natArgument, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreator, 2, 'Cyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreator, 2, 'Cyclist', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, myCreator, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreator, 1, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationTime, 2, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationTime, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationTime, 1, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationSecond, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationSecond, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationSecond, 1, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationPurpose, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationPurpose, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, myCreationPurpose, 1, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(argIsa, multiplicationUnits, 3, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, multiplicationUnits, 2, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, multiplicationUnits, 1, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, mtVisible, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, minQuantValue, 2, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, minQuantValue, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, minimizeExtent, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, microtheoryDesignationArgnum, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, microtheoryDesignationArgnum, 1, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, meetsPragmaticRequirement, 1, 'List', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, means, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, means, 1, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, maxQuantValue, 2, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, maxQuantValue, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ist, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, ist, 1, 'Microtheory', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, isa, 2, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, isa, 2, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, isa, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, isa, 1, 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, isa, 1, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, irrelevantTerm, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, irrelevantPredAssertion, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, irrelevantMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsaReln, 5, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsaReln, 4, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsaReln, 3, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsaReln, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsaReln, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsa, 4, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultIsa, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenlReln, 5, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenlReln, 4, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenlReln, 3, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenlReln, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenlReln, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenl, 4, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenl, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenl, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgResultGenl, 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgIsa, 5, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgIsa, 4, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgDifferent, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgDifferent, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, interArgDifferent, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, integerBetween, 3, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, integerBetween, 2, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, integerBetween, 1, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, instanceElementType, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, instanceElementType, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, indexicalReferent, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, indexicalReferent, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, independentArg, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, independentArg, 1, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, independentArg, 1, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, hypotheticalTerm, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, holdsIn, 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, hlPrototypicalInstance, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, hlPrototypicalInstance, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, highlyRelevantTerm, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, highlyRelevantPredAssertion, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, highlyRelevantMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, greaterThanOrEqualTo, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, greaterThanOrEqualTo, 2, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, greaterThanOrEqualTo, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, greaterThanOrEqualTo, 1, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, greaterThan, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, greaterThan, 2, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, greaterThan, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, greaterThan, 1, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genMassNoun, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genls, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genls, 2, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, genls, 2, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genls, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genls, 1, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, genls, 1, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genlPreds, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlPreds, 2, tPred, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genlPreds, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlPreds, 1, tPred, 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 2, 'Microtheory', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 2, 'Microtheory', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 1, 'Microtheory', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, genlMt, 1, 'Microtheory', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, genlInverse, 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlInverse, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlCanonicalizerDirectives, 2, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genlCanonicalizerDirectives, 1, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genKeyword, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genFormat, 3, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genFormat, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, genFormat, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, formulaArity, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, formulaArity, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, followingValue, 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, followingValue, 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, fanOutArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, fanOutArg, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extentCardinality, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extentCardinality, 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extConceptOverlapsColAndReln, 4, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extConceptOverlapsColAndReln, 3, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extConceptOverlapsColAndReln, 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, extConceptOverlapsColAndReln, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expresses, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expresses, 1, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expansionDefn, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expansionDefn, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expansion, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, expansion, 2, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, expansion, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, exceptMt, 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, exceptFor, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, exampleAssertions, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluationResultQuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluationResultQuotedIsa, 1, 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluationDefn, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluationDefn, 1, 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluateImmediately, 1, 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluateAtEL, 1, 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluate, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, evaluate, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, equalSymbols, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, equalSymbols, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, equals, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, equals, 2, 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, equals, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, equals, 1, 'Thing', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, ephemeralTerm, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, elInverse, 2, 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, elInverse, 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, elInverse, 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, elementOf, 2, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, elementOf, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, distributesOutOfArg, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, distributesOutOfArg, 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, distributesOutOfArg, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, disjointWith, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, disjointWith, 2, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, disjointWith, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, disjointWith, 1, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, different, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, denotes, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, denotes, 1, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnSufficient, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnSufficient, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnNecessary, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnNecessary, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnIff, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnIff, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defnIff, 1, tCol, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, definingMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, definingMt, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defaultReformulatorModePrecedence, 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defaultReformulationDirectionInModeForPred, 3, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defaultReformulationDirectionInModeForPred, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, defaultReformulationDirectionInModeForPred, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, decontextualizedPredicate, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, decontextualizedCollection, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTransformationProofRule, 1, 'CycTransformationProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTransformationProofBindings, 2, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTransformationProofBindings, 1, 'CycTransformationProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTacticID, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTacticID, 2, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycTacticID, 1, 'CycTactic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProofID, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProofID, 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProofID, 1, 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreTerms, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreTerms, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProofs, 2, 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProofs, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProofCount, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProofCount, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProblems, 2, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProblems, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProblemCount, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreProblemCount, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreLinks, 2, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreLinks, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreLinkCount, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreLinkCount, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreInferences, 2, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreInferences, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreInferenceCount, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreInferenceCount, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreID, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemStoreID, 1, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemQueryTerms, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemQueryTerms, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemQuerySentence, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemProvabilityStatus, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemProvabilityStatus, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemLinkID, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemLinkID, 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemLinkID, 1, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemID, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemID, 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemID, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemDependentLinks, 2, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemDependentLinks, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemArgumentLinks, 2, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycProblemArgumentLinks, 1, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycInferenceRelevantProblems, 2, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycInferenceRelevantProblems, 1, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycInferenceAnswerLink, 2, 'CycProblemLink-AnswerLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, cycInferenceAnswerLink, 1, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constrainsArg, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constrainsArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantName, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantName, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantID, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantID, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantGUID, 2, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, constantGUID, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, conceptuallyRelated, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, conceptuallyRelated, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completelyEnumerableCollection, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completelyDecidableCollection, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableViaBackchain, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableForValueInArg, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableForValueInArg, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableForValueInArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableForArg, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerableForArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentEnumerable, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentDecidableForValueInArg, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentDecidableForValueInArg, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentDecidableForValueInArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentDecidable, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentAssertedForValueInArg, 3, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentAssertedForValueInArg, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentAssertedForValueInArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, completeExtentAsserted, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, commutativeInArgsAndRest, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, commutativeInArgsAndRest, 1, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, commutativeInArgs, 3, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, commutativeInArgs, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, commutativeInArgs, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, comment, 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, comment, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionIsaBackchainRequired, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionIsaBackchainEncouraged, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionGenlsBackchainRequired, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionGenlsBackchainEncouraged, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionExpansion, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionExpansion, 2, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, collectionExpansion, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionConventionMt, 2, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionConventionMt, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionCompletelyEnumerableViaBackchain, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionBackchainRequired, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, collectionBackchainEncouraged, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, coExtensional, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, coExtensional, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArgAndRest, 3, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArgAndRest, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArgAndRest, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArg, 3, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForArg, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForAllArgs, 2, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, canonicalizerDirectiveForAllArgs, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, backchainRequired, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, backchainForbiddenWhenUnboundInArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, backchainForbiddenWhenUnboundInArg, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, backchainForbidden, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertionUtility, 2, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertionDirection, 2, 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertedTermSentences, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertedPredicateArg, 3, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertedPredicateArg, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, assertedPredicateArg, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arityMin, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arityMin, 1, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arityMax, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arityMax, 1, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arity, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arity, 2, 'NonNegativeInteger', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, arity, 2, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arity, 1, 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arity, 1, 'FixedArityRelation', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argsQuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argsQuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argSometimesIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argSometimesIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argSometimesIsa, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argSometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argsIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argsIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argsGenl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argsGenl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argQuotedIsa, 3, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argQuotedIsa, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argQuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 3, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 2, 'PositiveInteger', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argIsa, 1, tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestQuotedIsa, 3, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestQuotedIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestQuotedIsa, 1, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 3, tCol, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 2, 'PositiveInteger', 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 1, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestIsa, 1, tRelation, 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestGenl, 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestGenl, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, argAndRestGenl, 1, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg6Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg5Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg4Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg3Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg2Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1SometimesIsa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1SometimesIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1QuotedIsa, 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1QuotedIsa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Isa, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Isa, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Genl, 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Genl, 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Format, 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, arg1Format, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, afterRemoving, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, afterRemoving, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, afterRemoving, 1, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, afterAdding, 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, afterAdding, 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, afterAdding, 1, tPred, 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(argIsa, admittedNAT, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedArgument, 3, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedArgument, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedArgument, 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedAllArgument, 3, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedAllArgument, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, admittedAllArgument, 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, abnormal, 1, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Unity', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'UnitProductFn', 2, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'UnitProductFn', 1, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'UncanonicalizerAssertionFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TLVariableFn', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TLVariableFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TLReifiedNatFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TLAssertionFn', 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TimesFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TheSet', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'TheList', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'substring-CaseInsensitive', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'substring-CaseInsensitive', 1, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'SkolemFuncNFn', 4, 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RoundUpFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RoundDownFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RoundClosestFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationInstanceExistsFn', 3, tCol, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationInstanceExistsFn', 2, 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationInstanceExistsFn', 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationExistsInstanceFn', 3, 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationExistsInstanceFn', 2, tCol, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationExistsInstanceFn', 1, 'BinaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argIsa, 'RelationExistsAllFn', 4, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationExistsAllFn', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationExistsAllFn', 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationExistsAllFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationAllExistsFn', 4, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationAllExistsFn', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationAllExistsFn', 2, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'RelationAllExistsFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'QuotientFn', 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'QuotientFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Quote', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'QuasiQuote', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'QuantityConversionFn', 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'QuantityConversionFn', 1, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'prettyString-Canonical', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'prettyString-Canonical', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PlusFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PlusAll', 2, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PlusAll', 2, 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'PlusAll', 2, 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PlusAll', 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PlusAll', 1, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'PerFn', 2, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'PerFn', 1, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Percent', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MtUnionFn', 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MtTimeWithGranularityDimFn', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MtTimeWithGranularityDimFn', 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MtTimeDimFn', 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MtSpace', 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'ModuloFn', 2, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'ModuloFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MinRangeFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Minimum', 2, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Minimum', 2, 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'Minimum', 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Minimum', 1, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'MeaningInSystemFn', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MeaningInSystemFn', 1, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'MaxRangeFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Maximum', 2, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Maximum', 2, 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'Maximum', 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Maximum', 1, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'LogFn', 1, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'LogFn', 1, 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasUri', 2, 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasUri', 1, 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasScalability', 2, 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasScalability', 1, 'larkc-Scalability', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasEndpoint', 2, 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasEndpoint', 1, 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasCostPerInvocation', 2, 'larkc-euro', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'larkc-hasCostPerInvocation', 1, 'larkc-Cost', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'ist-Asserted', 1, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'IntervalMinFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'IntervalMaxFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-4', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-4', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-4', 1, 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-3', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-3', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-3', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-3', 1, 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-2', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-2', 1, 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-1', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-1', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa5-1', 1, 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-5', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-5', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-5', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-3', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-3', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-3', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-2', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-2', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-1', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-1', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa4-1', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-5', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-5', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-5', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-4', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-4', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-4', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-2', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-2', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-1', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-1', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa3-1', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-5', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-5', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-5', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-4', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-4', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-4', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-3', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-3', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-3', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-1', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-1', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa2-1', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-5', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-5', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-5', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-4', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-4', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-4', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-3', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-3', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-3', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-2', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgIsa1-2', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgGenl1-2', 3, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgGenl1-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgGenl1-2', 1, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgFormat1-2', 3, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgFormat1-2', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'interArgFormat1-2', 1, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'genls-SpecDenotesGenlInstances', 2, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'genls-SpecDenotesGenlInstances', 1, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'genls-GenlDenotesSpecInstances', 2, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'genls-GenlDenotesSpecInstances', 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FunctionToArg', 2, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FunctionToArg', 1, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FormulaArityFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FormulaArgSetFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FormulaArgListFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FormulaArgFn', 2, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FormulaArgFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FOL-TermFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FOL-PredicateFn', 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FOL-PredicateFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FOL-FunctionFn', 2, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'FOL-FunctionFn', 1, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'ExpFn', 1, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'EvaluateSubLFn', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'EscapeQuote', 1, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'equalStrings-CaseInsensitive', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'equalStrings-CaseInsensitive', 1, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DifferenceFn', 2, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DifferenceFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DateEncodeStringFn', 2, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DateEncodeStringFn', 1, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DateDecodeStringFn', 2, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'DateDecodeStringFn', 1, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycTacticFn', 2, 'CycTactic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycTacticFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProofFn', 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProofFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProblemStoreFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProblemLinkFn', 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProblemLinkFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProblemFn', 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycProblemFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycInferenceFn', 2, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CycInferenceFn', 1, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'CollectionRuleTemplateFn', 1, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Average', 2, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Average', 2, 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'Average', 1, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'Average', 1, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(argIsa, 'assertionUtility-1', 2, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argIsa, 'AbsoluteValueFn', 1, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(argAndRestQuotedIsa, or, 1, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(argAndRestQuotedIsa, and, 1, 'CycLSentence-Assertible', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(argAndRestIsa, commutativeInArgsAndRest, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(argAndRestIsa, commutativeInArgs, 2, 'PositiveInteger', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg6Format, different, 'SetTheFormat', 'BaseKB', vStrDef).
exactlyAssertedEL(arg5Isa, interArgResultIsaReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Isa, interArgResultGenlReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Isa, interArgIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Genl, interArgIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Format, interArgResultIsaReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Format, interArgResultGenlReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg5Format, interArgIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg5Format, different, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationExistsMinAll, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationExistsMaxAll, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationExistsCountAll, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationAllExistsMin, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationAllExistsMax, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, relationAllExistsCount, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, nthSmallestElement, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, nthLargestElement, 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, interArgResultIsaReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, interArgResultIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, interArgResultGenlReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, interArgResultGenl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, interArgIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, extConceptOverlapsColAndReln, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, 'SkolemFuncNFn', 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, 'RelationExistsAllFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Isa, 'RelationAllExistsFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Genl, interArgResultIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Genl, interArgResultGenl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Genl, 'RelationExistsAllFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Genl, 'RelationAllExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationExistsMinAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationExistsMaxAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationExistsCountAll, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationAllExistsMin, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationAllExistsMax, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, relationAllExistsCount, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, nthSmallestElement, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg4Format, interArgResultIsaReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, interArgResultIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, interArgResultGenlReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, interArgResultGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, interArgIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, extConceptOverlapsColAndReln, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg4Format, different, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, thereExistExactly, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, thereExistAtMost, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, thereExistAtLeast, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, reformulationPrecondition, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, reformulationDirectionInMode, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, 'SkolemFunctionFn', 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3QuotedIsa, 'SkolemFuncNFn', 'SubLSymbol', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, unitMultiplicationFactor, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, unitMultiplicationFactor, 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, transitiveViaArgInverse, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, transitiveViaArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, synonymousExternalConcept, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationMemberInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationInstanceMember, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationInstanceExists, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationInstanceAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationExistsMinAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationExistsMaxAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationExistsInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationExistsCountAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationExistsAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationAllInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationAllExistsMin, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationAllExistsMax, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationAllExistsCount, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, relationAllExists, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, ratioOfTo, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, overlappingExternalConcept, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nthSmallestElement, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nthLargestElement, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nonAbducibleWithValueInArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestDifferentIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestDifferentGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestCommonSpecs, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestCommonIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestCommonGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, nearestCommonGenlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, natArgument, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, multiplicationUnits, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgResultIsaReln, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgResultIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgResultGenlReln, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgResultGenl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, interArgDifferent, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, integerBetween, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, genFormat, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, extConceptOverlapsColAndReln, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, distributesOutOfArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, defaultReformulationDirectionInModeForPred, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, cycTacticID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, cycProofID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, cycProblemLinkID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, cycProblemID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, completeExtentEnumerableForValueInArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, completeExtentDecidableForValueInArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, completeExtentDecidableForValueInArg, 'NonNegativeInteger', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg3Isa, completeExtentAssertedForValueInArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, completeExtentAssertedForValueInArg, 'NonNegativeInteger', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg3Isa, commutativeInArgs, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, canonicalizerDirectiveForArgAndRest, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, canonicalizerDirectiveForArgAndRest, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg3Isa, canonicalizerDirectiveForArg, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, canonicalizerDirectiveForArg, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg3Isa, assertedPredicateArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argSometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argQuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argAndRestQuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argAndRestIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, argAndRestGenl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, admittedArgument, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, admittedAllArgument, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'RelationInstanceExistsFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'RelationExistsInstanceFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'RelationExistsAllFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'RelationAllExistsFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa5-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa5-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa5-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa5-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa4-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa4-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa4-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa4-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa3-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa3-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa3-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa3-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa2-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa2-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa2-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa2-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa1-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa1-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa1-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgIsa1-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgGenl1-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Isa, 'interArgFormat1-2', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationInstanceExists, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationInstanceAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationExistsMinAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationExistsMaxAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationExistsCountAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationExistsAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationAllExistsMin, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationAllExistsMax, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationAllExistsCount, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, relationAllExists, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, nearestDifferentIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, nearestDifferentGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, nearestCommonSpecs, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, nearestCommonIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, nearestCommonGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, interArgResultIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, interArgResultGenl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, interArgIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argSometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argQuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argAndRestQuotedIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argAndRestQuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argAndRestIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, argAndRestGenl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'RelationInstanceExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'RelationExistsAllFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'RelationAllExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa5-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa5-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa5-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa5-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa4-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa4-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa4-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa4-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa3-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa3-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa3-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa3-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa2-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa2-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa2-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa2-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa1-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa1-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa1-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Genl, 'interArgIsa1-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, unitMultiplicationFactor, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, transitiveViaArgInverse, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, transitiveViaArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, synonymousExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, relationInstanceExists, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationInstanceAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, relationExistsMinAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationExistsMaxAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationExistsInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, relationExistsCountAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationExistsAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, relationAllInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, relationAllExistsMin, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationAllExistsMax, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationAllExistsCount, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, relationAllExists, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, overlappingExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, nthSmallestElement, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, natArgument, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, multiplicationUnits, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgResultIsaReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgResultIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgResultGenlReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgResultGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, interArgDifferent, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, integerBetween, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, different, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, cycTacticID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, cycProofID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, cycProblemLinkID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, cycProblemID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, argSometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, argIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, argAndRestIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, argAndRestGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, admittedArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg3Format, admittedAllArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa5-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa5-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa5-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa5-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa4-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa4-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa4-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa4-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa3-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa3-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa3-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa3-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa2-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa2-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa2-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa2-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa1-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa1-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa1-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg3Format, 'interArgIsa1-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, xor, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, xor, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, trueRule, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, thereExists, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, thereExistExactly, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, thereExistAtMost, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, thereExistAtLeast, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, termOfUnit, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, termOfUnit, 'CycLReifiableNonAtomicTerm', 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, termDependsOn, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, sharedNotes, 'DocumentationConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, sentenceImplies, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, sentenceEquiv, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, salientAssertions, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, ruleAfterRemoving, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, ruleAfterAdding, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, rewriteOf, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, relationExpansion, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, reformulatorRuleProperties, 'CycLAtomicAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, reformulatorRule, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, reformulatorEquiv, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, reformulatorEquals, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, quotedDefnSufficient, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, quotedDefnNecessary, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, quotedDefnIff, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, prettyString, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, pragmaticRequirement, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, pragmaticallyNormal, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, operatorFormulas, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, oldConstantName, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, oldConstantName, 'SubLString', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, natArgumentsEqual, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, meetsPragmaticRequirement, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, ist, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, irrelevantPredAssertion, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, implies, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, implies, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, holdsIn, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, highlyRelevantPredAssertion, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, genlRules, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, genKeyword, 'SubLKeyword', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, genFormat, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, forAll, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, expansionDefn, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, expansion, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, expansion, 'CycLExpression', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, exceptWhen, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, exceptFor, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, exampleAssertions, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, evaluationDefn, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, equiv, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, equiv, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, defnSufficient, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, defnNecessary, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, defnIff, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, cycTransformationProofRule, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, cycProblemStoreTerms, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, cycProblemQueryTerms, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, cycProblemQuerySentence, 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, constantName, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, comment, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, collectionExpansion, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, collectionExpansion, 'CycLExpression', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, assertedTermSentences, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, arity, 'SubLNonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, argSometimesIsa, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, argIsa, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, argAndRestIsa, 'SubLPositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, afterRemoving, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, afterAdding, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, abnormal, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'TLVariableFn', 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'TLAssertionFn', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'TheSetOf', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'TheCollectionOf', 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'SkolemFunctionFn', ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'SkolemFuncNFn', ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'prettyString-Canonical', 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'Kappa', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'ist-Asserted', 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'FormulaArgFn', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2QuotedIsa, 'ExpandSubLFn', 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, unitMultiplicationFactor, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, transitiveViaArgInverse, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, transitiveViaArg, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, termOfUnit, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, termExternalIDString, 'HLExternalIDString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, termDependsOn, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, synonymousExternalConcept, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, substring, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, subsetOf, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, singleEntryFormatInArgs, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, siblingDisjointExceptions, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, siblingDisjointExceptions, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, sharedNotes, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceTruth, 'TruthValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceEquiv, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceEquiv, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceEquiv, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceEquiv, 'Individual', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, sentenceDesignationArgnum, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, scopingArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, ruleTemplateDirection, 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, ruleAfterRemoving, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, ruleAfterAdding, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, rewriteOf, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultQuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultIsaArgIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultIsaArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultIsa, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, resultGenlArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultGenl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, resultGenl, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, requiredArg3Pred, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, requiredArg2Pred, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, requiredArg1Pred, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationMemberInstance, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationInstanceMember, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationInstanceExists, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationInstanceAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationExistsMinAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationExistsMaxAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationExistsInstance, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationExistsCountAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationExistsAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAllInstance, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAllExistsMin, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAllExistsMax, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAllExistsCount, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAllExists, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, relationAll, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, reformulatorRule, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, reformulatorEquals, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, reformulationPrecondition, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, reformulationPrecondition, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, reformulationDirectionInMode, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, ratioOfTo, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quotedDefnSufficient, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quotedDefnNecessary, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quotedDefnIff, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quotedArgument, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quantitySubsumes, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, quantityIntersects, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, prettyString, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, preservesGenlsInArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, predicateConventionMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, pointQuantValue, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, overlappingExternalConcept, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, operatorFormulas, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, openEntryFormatInArgs, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, opaqueArgument, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, omitArgIsa, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, oldConstantName, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, oldConstantName, 'CharacterString', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg2Isa, numericallyEquals, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, numericallyEquals, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, nthSmallestElement, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nthLargestElement, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nonAbducibleWithValueInArg, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, negationPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, negationMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, negationInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestGenlPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestGenlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestDifferentIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestDifferentGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestCommonSpecs, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestCommonIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestCommonGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, nearestCommonGenlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, natFunction, 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, natArgumentsEqual, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, natArgument, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, myCreator, 'Cyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, myCreator, 'Cyclist', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg2Isa, myCreationTime, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, myCreationSecond, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, myCreationPurpose, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, multiplicationUnits, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, minQuantValue, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, microtheoryDesignationArgnum, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, means, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, maxQuantValue, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, isa, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, interArgResultIsaReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, interArgResultIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, interArgResultGenlReln, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, interArgResultGenl, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, interArgIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, interArgDifferent, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, integerBetween, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, instanceElementType, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, indexicalReferent, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, independentArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, hlPrototypicalInstance, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, greaterThanOrEqualTo, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, greaterThanOrEqualTo, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, greaterThan, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, greaterThan, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, genls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, genls, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, genlPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, genlPreds, tPred, 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, genlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, genlMt, 'Microtheory', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, genlInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, genlCanonicalizerDirectives, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, genlCanonicalizerDirectives, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, genFormat, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, formulaArity, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, followingValue, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, fanOutArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, extentCardinality, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, extConceptOverlapsColAndReln, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, expresses, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, expansionDefn, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, expansion, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, expansion, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, evaluationResultQuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, evaluationDefn, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, evaluate, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, equalSymbols, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, equals, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, elInverse, 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, elInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, elementOf, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, distributesOutOfArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, disjointWith, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, denotes, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, defnSufficient, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, defnNecessary, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, defnIff, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, definingMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, defaultReformulationDirectionInModeForPred, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycTransformationProofBindings, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycTacticID, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProofID, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreTerms, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreProofs, 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreProofCount, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreProblems, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreProblemCount, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreLinks, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreLinkCount, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreInferences, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreInferenceCount, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemStoreID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemQueryTerms, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemProvabilityStatus, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemLinkID, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemID, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemDependentLinks, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycProblemArgumentLinks, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycInferenceRelevantProblems, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, cycInferenceAnswerLink, 'CycProblemLink-AnswerLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, constrainsArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, constantName, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, constantID, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, constantGUID, 'SubLString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, conceptuallyRelated, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentEnumerableForValueInArg, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentEnumerableForArg, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentEnumerableForArg, 'NonNegativeInteger', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentDecidableForValueInArg, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentDecidableForValueInArg, 'Thing', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentAssertedForValueInArg, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, completeExtentAssertedForValueInArg, 'Thing', 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg2Isa, commutativeInArgsAndRest, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, commutativeInArgs, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, comment, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, collectionExpansion, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, collectionExpansion, 'Thing', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, collectionConventionMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, coExtensional, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForArgAndRest, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForArgAndRest, 'PositiveInteger', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForArg, 'PositiveInteger', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForAllArgs, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, canonicalizerDirectiveForAllArgs, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg2Isa, backchainForbiddenWhenUnboundInArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, assertionUtility, 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, assertionDirection, 'CycLAssertionDirection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, assertedPredicateArg, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arityMin, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arityMax, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arity, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arity, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argsQuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argSometimesIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argSometimesIsa, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argsIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argsGenl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argQuotedIsa, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argIsa, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argAndRestQuotedIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argAndRestIsa, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argAndRestIsa, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, argAndRestGenl, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg6SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg6QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg6Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg6Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg6Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg5SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg5QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg5Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg5Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg5Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg4SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg4QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg4Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg4Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg4Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg3SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg3QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg3Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg3Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg3Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg2SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg2QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg2Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg2Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg2Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg1SometimesIsa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg1QuotedIsa, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg1Isa, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg1Genl, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, arg1Format, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, afterRemoving, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, afterAdding, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, admittedArgument, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, admittedAllArgument, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'UnitProductFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'TLVariableFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'substring-CaseInsensitive', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'RelationInstanceExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'RelationExistsInstanceFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'RelationExistsAllFn', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'RelationAllExistsFn', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'QuotientFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'QuantityConversionFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'prettyString-Canonical', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'PlusAll', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'PlusAll', 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'PlusAll', 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'PerFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'MtTimeWithGranularityDimFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'ModuloFn', 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Minimum', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Minimum', 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'MeaningInSystemFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Maximum', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Maximum', 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'larkc-hasUri', 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'larkc-hasScalability', 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'larkc-hasEndpoint', 'CharacterString', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'larkc-hasCostPerInvocation', 'larkc-euro', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa5-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa5-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa5-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa5-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa4-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa4-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa4-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa4-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa3-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa3-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa3-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa3-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa2-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa2-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa2-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa2-1', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa1-5', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa1-4', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa1-3', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgIsa1-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgGenl1-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'interArgFormat1-2', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'genls-SpecDenotesGenlInstances', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'genls-GenlDenotesSpecInstances', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'FunctionToArg', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'FormulaArgFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'FOL-PredicateFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'FOL-FunctionFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'equalStrings-CaseInsensitive', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'DifferenceFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'DateEncodeStringFn', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'DateDecodeStringFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'CycTacticFn', 'CycTactic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'CycProofFn', 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'CycProblemLinkFn', 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'CycProblemFn', 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'CycInferenceFn', 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Average', 'UnaryFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Isa, 'Average', 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Isa, 'assertionUtility-1', 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, siblingDisjointExceptions, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, resultQuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, resultIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, resultGenl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationExistsMinAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationExistsMaxAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationExistsInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationExistsCountAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationExistsAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAllInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAllExistsMin, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAllExistsMax, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAllExistsCount, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAllExists, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, relationAll, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, quotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, nearestIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, nearestGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, nearestDifferentGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, nearestCommonSpecs, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, nearestCommonGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, instanceElementType, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, genls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, evaluationResultQuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, disjointWith, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, cycProblemProvabilityStatus, 'CycProvabilityStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, coExtensional, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, argsQuotedIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, argsQuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, argsIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, argsGenl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg6SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg6QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg6Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg6Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg5SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg5QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg5Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg5Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg4SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg4QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg4Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg4Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg3SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg3QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg3Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg3Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg2SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg2QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg2Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg2Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg1SometimesIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg1QuotedIsa, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg1Isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, arg1Genl, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'RelationExistsInstanceFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'larkc-pluginByDataConnectsTo', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Genl, 'larkc-hasOutputType', 'larkc-Resource', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Genl, 'larkc-hasInputType', 'larkc-Resource', 'BaseKB', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa5-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa5-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa5-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa5-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa4-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa4-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa4-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa4-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa3-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa3-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa3-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa3-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa2-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa2-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa2-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa2-1', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa1-5', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa1-4', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa1-3', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgIsa1-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'interArgFormat1-2', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Genl, 'genls-GenlDenotesSpecInstances', 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, unitMultiplicationFactor, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, transitiveViaArgInverse, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, transitiveViaArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, termOfUnit, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, termExternalIDString, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, synonymousExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, subsetOf, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, sharedNotes, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, sentenceTruth, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, salientAssertions, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, ruleAfterRemoving, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, ruleAfterAdding, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, rewriteOf, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, resultQuotedIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, resultIsaArgIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, resultIsaArg, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, requiredArg2Pred, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, requiredArg1Pred, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationInstanceExists, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationInstanceAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, relationExpansion, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationExistsMinAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationExistsMaxAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationExistsInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, relationExistsCountAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationExistsAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, relationAllInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, relationAllExistsMin, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationAllExistsMax, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationAllExistsCount, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, relationAllExists, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, relationAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, prettyString, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, preservesGenlsInArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, predicateConventionMt, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, pointQuantValue, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, overlappingExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, operatorFormulas, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, opaqueArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, numericallyEquals, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, nthSmallestElement, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, negationPreds, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, negationInverse, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, natFunction, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, natArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, myCreator, 'SingleEntry', 'BookkeepingMt', vStrMon).
exactlyAssertedEL(arg2Format, myCreationTime, 'SingleEntry', 'BookkeepingMt', vStrMon).
exactlyAssertedEL(arg2Format, myCreationSecond, 'SingleEntry', 'BookkeepingMt', vStrMon).
exactlyAssertedEL(arg2Format, myCreationPurpose, singleEntryFormatInArgs, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg2Format, multiplicationUnits, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, minQuantValue, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, means, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, maxQuantValue, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgResultIsaReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgResultIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgResultGenlReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgResultGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, interArgDifferent, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, integerBetween, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, independentArg, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, greaterThanOrEqualTo, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, greaterThan, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, genls, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, genlMt, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, genKeyword, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, formulaArity, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, followingValue, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, fanOutArg, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, extentCardinality, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, expresses, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, expansionDefn, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, expansion, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, exampleAssertions, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, evaluationDefn, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, elInverse, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, elementOf, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, disjointWith, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, different, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, denotes, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, defnSufficient, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, defnIff, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, definingMt, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycTransformationProofBindings, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreTerms, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreProofs, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreProofCount, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreProblems, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreProblemCount, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreLinks, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreLinkCount, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreInferences, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreInferenceCount, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemStoreID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemQueryTerms, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemQuerySentence, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemProvabilityStatus, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemDependentLinks, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycProblemArgumentLinks, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycInferenceRelevantProblems, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, cycInferenceAnswerLink, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, constrainsArg, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, constantName, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, constantName, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, constantID, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, constantGUID, 'SingleEntry', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, conceptuallyRelated, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, commutativeInArgsAndRest, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, comment, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, collectionConventionMt, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, assertionDirection, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arityMin, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arityMax, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arity, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argSometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argsIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argsGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argAndRestIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, argAndRestGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg6SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg6Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg6Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg5SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg5Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg5Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg4SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg4Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg4Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg3SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg3Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg3Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg2SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg2Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg2Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg1SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg1Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, arg1Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, afterAdding, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, admittedArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg2Format, admittedAllArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'prettyString-Canonical', 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa5-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa5-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa5-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa5-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa4-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa4-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa4-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa4-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa3-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa3-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa3-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa3-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa2-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa2-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa2-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa2-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa1-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa1-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa1-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgIsa1-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg2Format, 'interArgFormat1-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, xor, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, xor, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, unknownSentence, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, trueSubL, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, trueSentence, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, thereExists, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, termOfUnit, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, termExternalIDString, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, termDependsOn, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, sharedNotes, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, sentenceImplies, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, sentenceEquiv, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, salientAssertions, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, rewriteOf, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, reformulatorRule, 'CycLExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, reformulatorEquiv, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, reformulatorEquals, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, querySentence, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, pragmaticRequirement, 'CycLSentence-Askable', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, pointQuantValue, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, performSubL, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, or, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, operatorFormulas, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, oldConstantName, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, oldConstantName, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, not, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, not, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, natFunction, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, natArgumentsEqual, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, natArgument, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreator, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreator, 'CycLReifiableDenotationalTerm', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationTime, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationTime, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationSecond, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationSecond, 'CycLConstant', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationPurpose, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, myCreationPurpose, 'CycLReifiableDenotationalTerm', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, minimize, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, knownSentence, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, knownAntecedentRule, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, irrelevantTerm, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, irrelevantAssertion, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, indexicalReferent, 'IndeterminateTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, implies, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, implies, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, hypotheticalTerm, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, hlPrototypicalInstance, 'HLPrototypicalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, hlPrototypicalInstance, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, highlyRelevantTerm, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, highlyRelevantAssertion, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, genMassNoun, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, genlRules, 'CycLRuleAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, genKeyword, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, forwardNonTriggerLiteral, 'CycLOpenSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, formulaArity, 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, forAll, ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, exceptWhen, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, exceptFor, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, except, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, exampleAssertions, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, exactlyAssertedEL, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, equiv, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, equiv, 'CycLSentence-Assertible', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, ephemeralTerm, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, definingMt, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, constraint, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, constantName, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, constantID, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, constantGUID, 'CycLConstant', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, consistent, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, comment, 'CycLIndexedTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, assertionUtility, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, assertionDirection, 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, assertedTermSentences, 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, assertedSentence, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, and, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, admittedSentence, 'CycLSentence-Assertible', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, admittedNAT, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'UncanonicalizerAssertionFn', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'TheSetOf', ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'TheCollectionOf', ftVar, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'SubLQuoteFn', 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'SkolemFunctionFn', 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'SkolemFuncNFn', 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'Quote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'QuasiQuote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'Kappa', 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'FormulaArityFn', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'FormulaArgSetFn', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'FormulaArgListFn', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'ExpandSubLFn', 'SubLList', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'EvaluateSubLFn', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'EscapeQuote', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1QuotedIsa, 'assertionUtility-1', 'CycLAssertion', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, unitMultiplicationFactor, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, trueSubL, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, trueRule, 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, transitiveViaArgInverse, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, transitiveViaArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, thereExistExactly, 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, thereExistAtMost, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, thereExistAtLeast, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, termOfUnit, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, termExternalIDString, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, termDependsOn, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, termChosen, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, synonymousExternalConcept, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, substring, 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, subsetOf, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, skolemizeForward, 'ReifiableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, skolem, 'SkolemFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, singleEntryFormatInArgs, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, siblingDisjointExceptions, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, siblingDisjointExceptions, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, sharedNotes, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, sentenceEquiv, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, sentenceEquiv, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, sentenceEquiv, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, sentenceEquiv, 'Individual', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, sentenceDesignationArgnum, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, scopingArg, 'ScopingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, salientAssertions, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ruleTemplateDirection, 'RuleTemplate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ruleAfterRemoving, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ruleAfterRemoving, tPred, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, ruleAfterAdding, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ruleAfterAdding, tPred, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, rewriteOf, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultQuotedIsa, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultIsaArgIsa, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultIsaArg, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultIsa, tRelation, 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, resultIsa, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultGenlArg, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultGenl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, resultGenl, tRelation, 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, resultGenl, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, requiredArg3Pred, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, requiredArg2Pred, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, requiredArg1Pred, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationMemberInstance, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationInstanceMember, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationInstanceExists, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationInstanceAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExpansion, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExistsMinAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExistsMaxAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExistsInstance, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExistsCountAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationExistsAll, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAllInstance, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAllExistsMin, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAllExistsMax, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAllExistsCount, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAllExists, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, relationAll, 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, reformulatorRuleProperties, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, reformulatorRule, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, reformulatorEquals, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, reformulationPrecondition, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, reformulationDirectionInMode, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ratioOfTo, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quotedIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quotedDefnSufficient, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quotedDefnNecessary, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quotedDefnIff, 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quotedArgument, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quantitySubsumes, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, quantityIntersects, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, prettyString, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, preservesGenlsInArg, 'CollectionDenotingFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, predicateConventionMt, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, pragmaticallyNormal, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, pointQuantValue, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, pointQuantValue, 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, performSubL, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, operatorFormulas, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, operatorFormulas, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, openEntryFormatInArgs, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, opaqueArgument, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, omitArgIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, oldConstantName, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, oldConstantName, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Isa, numericallyEquals, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, numericallyEquals, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, nthSmallestElement, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nthLargestElement, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, notAssertibleMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, notAssertibleCollection, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, notAssertible, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nonAbducibleWithValueInArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, negationPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, negationMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, negationInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestGenlPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestGenlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestDifferentIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestDifferentGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestCommonSpecs, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestCommonIsa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestCommonGenls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, nearestCommonGenlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, natFunction, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, natArgumentsEqual, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, natArgument, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreator, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreator, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationTime, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationTime, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationSecond, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationSecond, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationPurpose, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, myCreationPurpose, 'Thing', 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Isa, multiplicationUnits, 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, mtVisible, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, minQuantValue, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, minimizeExtent, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, microtheoryDesignationArgnum, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, meetsPragmaticRequirement, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, means, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, maxQuantValue, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ist, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, isa, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, isa, 'Thing', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, irrelevantTerm, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, irrelevantPredAssertion, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, irrelevantMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgResultIsaReln, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgResultIsa, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgResultGenlReln, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgResultGenl, tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, interArgDifferent, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, integerBetween, 'Integer', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, instanceElementType, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, indexicalReferent, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, independentArg, 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, independentArg, 'ArgConstraintPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, hypotheticalTerm, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, holdsIn, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, hlPrototypicalInstance, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, highlyRelevantTerm, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, highlyRelevantPredAssertion, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, highlyRelevantMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, greaterThanOrEqualTo, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, greaterThanOrEqualTo, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, greaterThan, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, greaterThan, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, genMassNoun, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genls, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genls, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, genlPreds, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genlPreds, tPred, 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, genlMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genlMt, 'Microtheory', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, genlInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genlCanonicalizerDirectives, 'CanonicalizerDirective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genlCanonicalizerDirectives, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, genKeyword, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, genFormat, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, formulaArity, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, followingValue, 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, fanOutArg, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, extentCardinality, 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, extConceptOverlapsColAndReln, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, expresses, 'CycLSentence', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, expansionDefn, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, expansion, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, exceptMt, 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, exceptFor, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, exampleAssertions, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, evaluationResultQuotedIsa, 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, evaluationDefn, 'EvaluatableRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, evaluateImmediately, 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, evaluateAtEL, 'EvaluatableFunction', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, evaluate, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, equalSymbols, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, equals, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, ephemeralTerm, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, elInverse, 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, elementOf, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, distributesOutOfArg, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, disjointWith, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, different, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, denotes, 'CycLDenotationalTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, defnSufficient, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, defnNecessary, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, defnIff, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, definingMt, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, defaultReformulatorModePrecedence, 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, defaultReformulationDirectionInModeForPred, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, decontextualizedPredicate, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, decontextualizedCollection, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycTransformationProofRule, 'CycTransformationProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycTransformationProofBindings, 'CycTransformationProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycTacticID, 'CycTactic', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProofID, 'CycProof', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreTerms, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreProofs, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreProofCount, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreProblems, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreProblemCount, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreLinks, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreLinkCount, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreInferences, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreInferenceCount, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemStoreID, 'CycProblemStore', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemQueryTerms, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemQuerySentence, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemProvabilityStatus, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemLinkID, 'CycProblemLink', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemID, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemDependentLinks, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycProblemArgumentLinks, 'CycProblem', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycInferenceRelevantProblems, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, cycInferenceAnswerLink, 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, constrainsArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, constantName, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, constantID, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, constantGUID, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, conceptuallyRelated, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completelyEnumerableCollection, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completelyDecidableCollection, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completelyDecidableCollection, tCol, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentEnumerableViaBackchain, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentEnumerableForValueInArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentEnumerableForArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentEnumerableForArg, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentEnumerable, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentDecidableForValueInArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentDecidableForValueInArg, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentDecidable, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentDecidable, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentAssertedForValueInArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentAssertedForValueInArg, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentAsserted, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, completeExtentAsserted, tPred, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(arg1Isa, commutativeInArgsAndRest, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, commutativeInArgs, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, comment, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionIsaBackchainRequired, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionIsaBackchainEncouraged, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionGenlsBackchainRequired, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionGenlsBackchainEncouraged, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionExpansion, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionConventionMt, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionCompletelyEnumerableViaBackchain, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionBackchainRequired, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, collectionBackchainEncouraged, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, coExtensional, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForArgAndRest, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForArgAndRest, tRelation, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForArg, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForArg, tRelation, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForAllArgs, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, canonicalizerDirectiveForAllArgs, tRelation, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(arg1Isa, backchainRequired, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, backchainForbiddenWhenUnboundInArg, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, backchainForbidden, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, assertedTermSentences, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, assertedPredicateArg, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arityMin, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arityMax, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arity, 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argsQuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argSometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argsIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argsGenl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argQuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argAndRestQuotedIsa, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argAndRestIsa, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argAndRestIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, argAndRestGenl, 'VariableArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg6SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg6QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg6Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg6Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg6Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg5SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg5QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg5Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg5Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg5Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg4SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg4QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg4Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg4Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg4Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg3SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg3QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg3Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg3Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg3Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg2SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg2QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg2Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg2Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg2Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg1SometimesIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg1QuotedIsa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg1Isa, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg1Genl, tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, arg1Format, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, afterRemoving, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, afterAdding, tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, admittedNAT, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, admittedArgument, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, admittedAllArgument, tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, abnormal, 'List', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Unity', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'UnitProductFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'UncanonicalizerAssertionFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TLVariableFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TLReifiedNatFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TLAssertionFn', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TimesFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TheSet', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'TheList', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'substring-CaseInsensitive', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RoundUpFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RoundDownFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RoundClosestFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RelationInstanceExistsFn', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RelationExistsInstanceFn', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RelationExistsAllFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'RelationAllExistsFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'QuotientFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Quote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'QuasiQuote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'QuantityConversionFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'prettyString-Canonical', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'PlusFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'PlusAll', 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'PlusAll', 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'PerFn', 'UnitOfMeasure', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Percent', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MtUnionFn', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MtTimeWithGranularityDimFn', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MtTimeDimFn', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MtSpace', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'ModuloFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MinRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Minimum', 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Minimum', 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'MeaningInSystemFn', 'Individual', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'MaxRangeFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Maximum', 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Maximum', 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'LogFn', 'RealNumber', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'LogFn', 'NonNegativeScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'larkc-hasUri', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'larkc-hasScalability', 'larkc-Scalability', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'larkc-hasEndpoint', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'larkc-hasCostPerInvocation', 'larkc-Cost', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'ist-Asserted', 'Microtheory', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'IntervalMinFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'IntervalMaxFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa5-4', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa5-3', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa5-3', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa5-2', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa5-1', 'QuintaryRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa4-5', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa4-3', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa4-2', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa4-1', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa3-5', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa3-4', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa3-2', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa3-1', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa2-5', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa2-4', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa2-3', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa2-1', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa1-5', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa1-4', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa1-3', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgIsa1-2', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgGenl1-2', tRelation, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'interArgFormat1-2', tPred, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'genls-SpecDenotesGenlInstances', 'SubLExpressionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'genls-GenlDenotesSpecInstances', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FunctionToArg', 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FormulaArityFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FormulaArgSetFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FormulaArgListFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FormulaArgFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FOL-TermFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FOL-PredicateFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'FOL-FunctionFn', tFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'ExpFn', 'ScalarPointValue', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'EvaluateSubLFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'EscapeQuote', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'equalStrings-CaseInsensitive', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'DifferenceFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'DateEncodeStringFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'DateDecodeStringFn', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycTacticFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycProofFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycProblemStoreFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycProblemLinkFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycProblemFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CycInferenceFn', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'CollectionRuleTemplateFn', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Average', 'SetOrCollection', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Isa, 'Average', 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Isa, 'AbsoluteValueFn', 'ScalarInterval', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, siblingDisjointExceptions, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, requiredArg3Pred, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, requiredArg2Pred, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, requiredArg1Pred, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, quotedDefnSufficient, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, quotedDefnNecessary, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, quotedDefnIff, 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, notAssertibleCollection, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, nearestGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, nearestDifferentGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, nearestCommonSpecs, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, nearestCommonGenls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, instanceElementType, 'Set-Mathematical', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, genls, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, extConceptOverlapsColAndReln, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, disjointWith, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, defnSufficient, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, defnNecessary, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, defnIff, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, decontextualizedCollection, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, completelyEnumerableCollection, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, completelyDecidableCollection, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionIsaBackchainRequired, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionIsaBackchainEncouraged, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionGenlsBackchainRequired, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionGenlsBackchainEncouraged, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionConventionMt, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionCompletelyEnumerableViaBackchain, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionBackchainRequired, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, collectionBackchainEncouraged, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, coExtensional, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, admittedAllArgument, 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, 'larkc-pluginByDataConnectsTo', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Genl, 'larkc-hasOutputType', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Genl, 'larkc-hasInputType', 'larkc-Plugin', 'BaseKB', vStrDef).
exactlyAssertedEL(arg1Genl, 'genls-SpecDenotesGenlInstances', 'SubLSExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Genl, 'CollectionRuleTemplateFn', 'Thing', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, unitMultiplicationFactor, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, transitiveViaArgInverse, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, transitiveViaArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, termOfUnit, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, termOfUnit, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, termExternalIDString, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, synonymousExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, sharedNotes, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, salientAssertions, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, rewriteOf, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, resultQuotedIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, resultIsaArgIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, resultIsaArg, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, resultIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, resultGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, requiredArg2Pred, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, requiredArg1Pred, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationInstanceExists, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationInstanceAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, relationExistsMinAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationExistsMaxAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationExistsInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, relationExistsCountAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationExistsAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, relationAllInstance, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, relationAllExistsMin, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationAllExistsMax, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationAllExistsCount, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, relationAllExists, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, relationAll, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, quotedIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, prettyString, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, preservesGenlsInArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, pointQuantValue, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, overlappingExternalConcept, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, operatorFormulas, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, opaqueArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, numericallyEquals, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, nthSmallestElement, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, negationPreds, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, negationInverse, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, natFunction, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, natArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, myCreationTime, 'SetTheFormat', 'BookkeepingMt', vStrMon).
exactlyAssertedEL(arg1Format, myCreationPurpose, openEntryFormatInArgs, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(arg1Format, multiplicationUnits, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, minQuantValue, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, minimizeExtent, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, means, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, maxQuantValue, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgResultIsaReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgResultIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgResultGenlReln, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgResultGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, interArgDifferent, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, integerBetween, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, independentArg, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, greaterThanOrEqualTo, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, greaterThan, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, genls, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, genlMt, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, genKeyword, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, followingValue, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, fanOutArg, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, expresses, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, evaluationResultQuotedIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, evaluationDefn, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, elInverse, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, elementOf, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, disjointWith, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, different, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, denotes, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, defnSufficient, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, defaultReformulationDirectionInModeForPred, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, cycInferenceAnswerLink, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, constrainsArg, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, constantName, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, constantID, 'SingleEntry', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, constantGUID, singleEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, conceptuallyRelated, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, completelyEnumerableCollection, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, completelyDecidableCollection, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, completeExtentEnumerable, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, completeExtentDecidable, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, completeExtentAsserted, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, commutativeInArgsAndRest, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, comment, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arityMin, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arityMax, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arity, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argSometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argsIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argsGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argAndRestIsa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, argAndRestGenl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg6SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg6Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg6Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg6Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg5SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg5Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg5Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg5Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg4SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg4Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg4Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg4Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg3SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg3Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg3Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg3Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg2SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg2Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg2Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg2Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg1SometimesIsa, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg1Isa, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg1Genl, 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, arg1Format, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, admittedArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(arg1Format, admittedAllArgument, openEntryFormatInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'prettyString-Canonical', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa5-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa5-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa5-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa5-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa4-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa4-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa4-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa4-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa3-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa3-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa3-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa3-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa2-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa2-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa2-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa2-1', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa1-5', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa1-4', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa1-3', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgIsa1-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(arg1Format, 'interArgFormat1-2', 'SetTheFormat', 'UniversalVocabularyMt', vStrDef).


exactlyAssertedEL(singleEntryFormatInArgs, unitMultiplicationFactor, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, unitMultiplicationFactor, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, unitMultiplicationFactor, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, sentenceTruth, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, rewriteOf, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, pointQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, operatorFormulas, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, myCreationPurpose, 2, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, multiplicationUnits, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, multiplicationUnits, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, multiplicationUnits, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, minQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, means, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, maxQuantValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, expresses, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, expansion, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, evaluationDefn, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(singleEntryFormatInArgs, cycTacticID, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProofID, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemStoreProofCount, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemStoreProblemCount, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemStoreLinkCount, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemStoreInferenceCount, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemStoreID, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemQuerySentence, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemProvabilityStatus, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemLinkID, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycProblemID, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycInferenceAnswerLink, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(singleEntryFormatInArgs, cycInferenceAnswerLink, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(sentenceDesignationArgnum, ist, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(sentenceDesignationArgnum, 'TLAssertionFn', 2, 'BaseKB', vStrDef).
exactlyAssertedEL(sentenceDesignationArgnum, 'ist-Asserted', 2, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, thereExists, 1, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, thereExistExactly, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, thereExistAtMost, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, thereExistAtLeast, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, forAll, 1, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, 'TheSetOf', 1, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, 'TheCollectionOf', 1, 'BaseKB', vStrDef).
exactlyAssertedEL(scopingArg, 'Kappa', 1, 'BaseKB', vStrDef).
exactlyAssertedEL(ruleTemplateDirection, 'NART'(['CollectionRuleTemplateFn', 'HypotheticalContext']), 'Forward-AssertionDirection', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(ruleTemplateDirection, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), 'Forward-AssertionDirection', 'BaseKB', vStrMon).
exactlyAssertedEL(rewriteOf, 'TheEmptySet', 'TheSet', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(requiredArg1Pred, 'TernaryRelation', arg3Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'TernaryRelation', arg2Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'SetOrCollection', subsetOf, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(requiredArg1Pred, 'ScopingRelation', scopingArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, tRelation, genFormat, 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuintaryRelation', arg5Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuintaryRelation', arg4Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuintaryRelation', arg3Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuintaryRelation', arg2Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuaternaryRelation', arg4Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuaternaryRelation', arg3Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'QuaternaryRelation', arg2Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, tPred, arity, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, tPred, argIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, tFunction, resultIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'FixedArityRelation', arity, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'FixedArityRelation', argIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'FixedArityRelation', arg1Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'EvaluatableRelation', evaluationDefn, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'CycLAssertion', assertionDirection, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(requiredArg1Pred, 'CollectionDenotingFunction', resultGenl, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(requiredArg1Pred, 'BinaryRelation', arg2Isa, 'UniversalVocabularyMt', vStrDef).

exactlyAssertedEL(afterRemoving, unitMultiplicationFactor, 'SubLQuoteFn'('CLEAR-UNIT-MULTIPLICATION-FACTOR-CACHES'), 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, transitiveViaArgInverse, 'SubLQuoteFn'('REMOVE-TRANSITIVE-VIA-ARG-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, transitiveViaArgInverse, 'SubLQuoteFn'('CLEAR-CACHED-SOME-TVA-CHECKS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, transitiveViaArg, 'SubLQuoteFn'('REMOVE-TRANSITIVE-VIA-ARG'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, transitiveViaArg, 'SubLQuoteFn'('CLEAR-CACHED-TVA-CHECKS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, termOfUnit, 'SubLQuoteFn'('REMOVE-TERM-OF-UNIT'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, termDependsOn, 'SubLQuoteFn'('REMOVE-DEPENDENT-TERM'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, substring, 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, substring, 'SubLQuoteFn'('REMOVE-TVA-CACHE-KEY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, skolem, 'SubLQuoteFn'('SKOLEM-AFTER-REMOVING'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterRemoving, ruleAfterRemoving, 'SubLQuoteFn'('DECACHE-RULE-AFTER-REMOVINGS'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, ruleAfterAdding, 'SubLQuoteFn'('DECACHE-RULE-AFTER-ADDINGS'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, rewriteOf, 'SubLQuoteFn'('DECACHE-SOME-SOURCE-REWRITE-OF-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, rewriteOf, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, rewriteOf, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, resultQuotedIsa, 'SubLQuoteFn'('REMOVE-SUF-QUOTED-FUNCTION'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, resultIsa, 'SubLQuoteFn'('REMOVE-SUF-FUNCTION'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, relationExpansion, 'SubLQuoteFn'('REMOVE-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterRemoving, reformulatorRuleProperties, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, reformulatorRule, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, reformulatorEquiv, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, reformulatorEquals, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, reformulationPrecondition, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, reformulationDirectionInMode, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, quotedIsa, 'SubLQuoteFn'('QUOTED-INSTANCEOF-AFTER-REMOVING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, quotedDefnSufficient, 'SubLQuoteFn'('REMOVE-SUF-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, quotedDefnNecessary, 'SubLQuoteFn'('REMOVE-NEC-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, quotedDefnIff, 'SubLQuoteFn'('REMOVE-IFF-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, prettyString, 'SubLQuoteFn'('REMOVE-SEMANTIC-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, prettyString, 'SubLQuoteFn'('REMOVE-PROPER-NAME-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, oldConstantName, 'SubLQuoteFn'('REMOVE-OLD-CONSTANT-NAME'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterRemoving, negationPreds, 'SubLQuoteFn'('NEGATION-PREDICATE-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, negationInverse, 'SubLQuoteFn'('REMOVE-NEGATION-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, nearestGenls, 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, natFunction, 'SubLQuoteFn'('REMOVE-DEPENDENT-TERM'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, knownAntecedentRule, 'SubLQuoteFn'('CYC-REMOVE-KNOWN-ANTECEDENT-RULE'), 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, isa, 'SubLQuoteFn'('INSTANCEOF-AFTER-REMOVING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, isa, 'SubLQuoteFn'('CLEAR-ISA-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, interArgIsa, 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, indexicalReferent, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, hlPrototypicalInstance, 'SubLQuoteFn'('HL-PROTOTYPICAL-INSTANCE-AFTER-REMOVING'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, highlyRelevantTerm, 'SubLQuoteFn'('CYC-REMOVE-RELEVANT-TERM'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, genls, 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, genls, 'SubLQuoteFn'('PGIA-AFTER-REMOVING-GENLS'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, genls, 'SubLQuoteFn'('GENLS-AFTER-REMOVING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, genls, 'SubLQuoteFn'('CLEAR-GENLS-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, genlPreds, 'SubLQuoteFn'('REMOVE-GENL-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, genlMt, 'SubLQuoteFn'('REMOVE-BASE-MT'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, genlMt, 'SubLQuoteFn'('CLEAR-MT-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, genlInverse, 'SubLQuoteFn'('REMOVE-GENL-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, genKeyword, 'SubLQuoteFn'('REMOVE-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterRemoving, genFormat, 'SubLQuoteFn'('REMOVE-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterRemoving, expansion, 'SubLQuoteFn'('REMOVE-GEN-TEMPLATE-EXPANSION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, expansion, 'SubLQuoteFn'('REMOVE-FROM-CONTRACTION-HT'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, expansion, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, except, 'SubLQuoteFn'('CYC-EXCEPT-REMOVED'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, evaluationResultQuotedIsa, 'SubLQuoteFn'('REMOVE-SUF-QUOTED-FUNCTION'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, evaluationDefn, 'SubLQuoteFn'('DECACHE-LISP-DEFUN'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, equalSymbols, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, equals, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, equals, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, disjointWith, 'SubLQuoteFn'('MDW-AFTER-REMOVING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, defnSufficient, 'SubLQuoteFn'('REMOVE-SUF-DEFN'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterRemoving, defnNecessary, 'SubLQuoteFn'('REMOVE-NEC-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, defnIff, 'SubLQuoteFn'('REMOVE-IFF-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, definingMt, 'SubLQuoteFn'('REMOVE-DEPENDENT-TERM'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, defaultReformulatorModePrecedence, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, defaultReformulationDirectionInModeForPred, 'SubLQuoteFn'('CYC-REMOVE-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, coExtensional, 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, canonicalizerDirectiveForArgAndRest, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, canonicalizerDirectiveForArg, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, canonicalizerDirectiveForAllArgs, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arityMin, 'SubLQuoteFn'('REMOVE-MAX-ARITY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, arityMin, 'SubLQuoteFn'('REMOVE-ARITY-MIN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, arityMax, 'SubLQuoteFn'('REMOVE-MAX-ARITY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, arityMax, 'SubLQuoteFn'('REMOVE-ARITY-MAX'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, arity, 'SubLQuoteFn'('REMOVE-ARITY'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, arg6Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arg5Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arg4Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arg3Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arg2Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, arg1Isa, 'SubLQuoteFn'('CYC-REMOVE-FROM-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterRemoving, afterRemoving, 'SubLQuoteFn'('DECACHE-AFTER-REMOVINGS'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, afterAdding, 'SubLQuoteFn'('DECACHE-AFTER-ADDINGS'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterRemoving, 'prettyString-Canonical', 'SubLQuoteFn'('REMOVE-SEMANTIC-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'prettyString-Canonical', 'SubLQuoteFn'('REMOVE-PROPER-NAME-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa5-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa5-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa5-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa5-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa4-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa4-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa4-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa4-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa3-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa3-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa3-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa3-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa2-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa2-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa2-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa2-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa1-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa1-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa1-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgIsa1-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'interArgFormat1-2', 'SubLQuoteFn'('INTER-ARG-FORMAT-AFTER-REMOVING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterRemoving, 'equalStrings-CaseInsensitive', 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, unitMultiplicationFactor, 'SubLQuoteFn'('CLEAR-UNIT-MULTIPLICATION-FACTOR-CACHES'), 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, trueRule, 'SubLQuoteFn'('ADD-TRUE-RULE'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterAdding, transitiveViaArgInverse, 'SubLQuoteFn'('CLEAR-CACHED-SOME-TVA-CHECKS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, transitiveViaArgInverse, 'SubLQuoteFn'('ADD-TRANSITIVE-VIA-ARG-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, transitiveViaArg, 'SubLQuoteFn'('CLEAR-CACHED-TVA-CHECKS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, transitiveViaArg, 'SubLQuoteFn'('ADD-TRANSITIVE-VIA-ARG'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, termOfUnit, 'SubLQuoteFn'('ADD-TERM-OF-UNIT'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, substring, 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, substring, 'SubLQuoteFn'('ADD-TVA-CACHE-KEY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, ruleAfterRemoving, 'SubLQuoteFn'('DECACHE-RULE-AFTER-REMOVINGS'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, ruleAfterAdding, 'SubLQuoteFn'('DECACHE-RULE-AFTER-ADDINGS'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, rewriteOf, 'SubLQuoteFn'('REWRITE-OF-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, rewriteOf, 'SubLQuoteFn'('DECACHE-SOME-SOURCE-REWRITE-OF-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, rewriteOf, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, rewriteOf, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, resultQuotedIsa, 'SubLQuoteFn'('ADD-SUF-QUOTED-FUNCTION'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, resultIsa, 'SubLQuoteFn'('ADD-SUF-FUNCTION'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, relationExpansion, 'SubLQuoteFn'('ADD-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterAdding, reformulatorRuleProperties, 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-ISA'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulatorRuleProperties, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulatorRule, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulatorEquiv, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulatorEquals, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulationPrecondition, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, reformulationDirectionInMode, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, quotedIsa, 'SubLQuoteFn'('QUOTED-INSTANCEOF-AFTER-ADDING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, quotedDefnSufficient, 'SubLQuoteFn'('ADD-SUF-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, quotedDefnNecessary, 'SubLQuoteFn'('ADD-NEC-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, quotedDefnIff, 'SubLQuoteFn'('ADD-IFF-QUOTED-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, prettyString, 'SubLQuoteFn'('ADD-SEMANTIC-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, prettyString, 'SubLQuoteFn'('ADD-PROPER-NAME-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, preservesGenlsInArg, 'SubLQuoteFn'('PGIA-AFTER-ADDING-PGIA'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterAdding, oldConstantName, 'SubLQuoteFn'('ADD-OLD-CONSTANT-NAME'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterAdding, negationPreds, 'SubLQuoteFn'('NEGATION-PREDICATE-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, negationInverse, 'SubLQuoteFn'('ADD-NEGATION-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, nearestIsa, 'SubLQuoteFn'('PROPAGATE-TO-ISA'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, nearestGenls, 'SubLQuoteFn'('PROPAGATE-TO-GENLS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, nearestGenls, 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, nearestGenlPreds, 'SubLQuoteFn'('PROPAGATE-TO-GENLPREDS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, nearestGenlMt, 'SubLQuoteFn'('PROPAGATE-TO-GENLMT'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, knownAntecedentRule, 'SubLQuoteFn'('CYC-ADD-KNOWN-ANTECEDENT-RULE'), 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, ist, 'SubLQuoteFn'('ADD-IST'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, isa, 'SubLQuoteFn'('PGIA-AFTER-ADDING-ISA'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, isa, 'SubLQuoteFn'('INSTANCEOF-AFTER-ADDING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, isa, 'SubLQuoteFn'('CLEAR-ISA-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, irrelevantTerm, 'SubLQuoteFn'('CYC-REMOVE-IRRELEVANT-TERM'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, irrelevantTerm, 'SubLQuoteFn'('CYC-ADD-IRRELEVANT-TERM'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, interArgIsa, 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, indexicalReferent, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, hlPrototypicalInstance, 'SubLQuoteFn'('HL-PROTOTYPICAL-INSTANCE-AFTER-ADDING'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, highlyRelevantTerm, 'SubLQuoteFn'('CYC-ADD-RELEVANT-TERM'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, genls, 'SubLQuoteFn'('GENLS-AFTER-ADDING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, genls, 'SubLQuoteFn'('CLEAR-GENLS-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, genls, 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, genlPreds, 'SubLQuoteFn'('ADD-GENL-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, genlMt, 'SubLQuoteFn'('CLEAR-MT-DEPENDENT-CACHES'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, genlMt, 'SubLQuoteFn'('ADD-BASE-MT'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, genlInverse, 'SubLQuoteFn'('ADD-GENL-INVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, genKeyword, 'SubLQuoteFn'('ADD-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterAdding, genKeyword, 'SubLQuoteFn'('ADD-GEN-KEYWORD'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, genFormat, 'SubLQuoteFn'('ADD-GENERATION-ASSERTION'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(afterAdding, expansion, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, expansion, 'SubLQuoteFn'('ADD-TO-CONTRACTION-HT'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, expansion, 'SubLQuoteFn'('ADD-GEN-TEMPLATE-EXPANSION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, except, 'SubLQuoteFn'('CYC-EXCEPT-ADDED'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, evaluationResultQuotedIsa, 'SubLQuoteFn'('ADD-SUF-QUOTED-FUNCTION'), 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, evaluationDefn, 'SubLQuoteFn'('DECACHE-LISP-DEFUN'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, equalSymbols, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, equals, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, equals, 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, elInverse, 'SubLQuoteFn'('PROPAGATE-TO-GENLINVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, elInverse, 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLINVERSE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, elementOf, 'SubLQuoteFn'('CYC-ADD-ELEMENT-OF'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterAdding, disjointWith, 'SubLQuoteFn'('MDW-AFTER-ADDING'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, defnSufficient, 'SubLQuoteFn'('ADD-SUF-DEFN'), 'BaseKB', vStrMon).
exactlyAssertedEL(afterAdding, defnNecessary, 'SubLQuoteFn'('ADD-NEC-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, defnIff, 'SubLQuoteFn'('ADD-IFF-DEFN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, defaultReformulatorModePrecedence, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, defaultReformulationDirectionInModeForPred, 'SubLQuoteFn'('CYC-ADD-REFORMULATION-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, coExtensional, 'SubLQuoteFn'('PROPAGATE-TO-GENLS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, coExtensional, 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLS'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, coExtensional, 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, canonicalizerDirectiveForArgAndRest, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, canonicalizerDirectiveForArg, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, canonicalizerDirectiveForAllArgs, 'SubLQuoteFn'('RECACHE-SOME-CANONICALIZER-DIRECTIVE-ASSERTIONS-SOMEWHERE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arityMin, 'SubLQuoteFn'('ADD-MAX-ARITY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, arityMin, 'SubLQuoteFn'('ADD-ARITY-MIN'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, arityMax, 'SubLQuoteFn'('ADD-MAX-ARITY'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, arityMax, 'SubLQuoteFn'('ADD-ARITY-MAX'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, arity, 'SubLQuoteFn'('ADD-ARITY'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, arg6Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arg5Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arg4Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arg3Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arg2Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, arg1Isa, 'SubLQuoteFn'('CYC-ADD-TO-ARG-TYPE-CACHE'), 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(afterAdding, afterRemoving, 'SubLQuoteFn'('DECACHE-AFTER-REMOVINGS'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, afterAdding, 'SubLQuoteFn'('DECACHE-AFTER-ADDINGS'), 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(afterAdding, 'prettyString-Canonical', 'SubLQuoteFn'('ADD-SEMANTIC-ASSERTION'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'prettyString-Canonical', 'SubLQuoteFn'('ADD-PROPER-NAME-PREDICATE'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa5-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa5-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa5-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa5-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa4-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa4-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa4-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa4-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa3-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa3-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa3-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa3-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa2-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa2-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa2-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa2-1', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa1-5', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa1-4', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa1-3', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgIsa1-2', 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'interArgFormat1-2', 'SubLQuoteFn'('INTER-ARG-FORMAT-AFTER-ADDING'), 'BaseKB', vStrDef).
exactlyAssertedEL(afterAdding, 'equalStrings-CaseInsensitive', 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE'), 'BaseKB', vStrDef).



exactlyAssertedEL('larkc-pluginByDataConnectsTo', 'larkc-GateTransformer', 'larkc-CycSelecter', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-pluginByDataConnectsTo', 'larkc-GateTransformer', 'larkc-CycReasoner', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-pluginByDataConnectsTo', 'larkc-CycSelecter', 'larkc-CycSelecter', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-pluginByDataConnectsTo', 'larkc-CycSelecter', 'larkc-CycReasoner', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-pluginByDataConnectsTo', 'larkc-ArticleIdentifier', 'larkc-GateTransformer', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasOutputType', 'larkc-GateTransformer', 'larkc-RdfGraph', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasOutputType', 'larkc-CycSelecter', 'larkc-RdfGraph', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasOutputType', 'larkc-CycReasoner', 'larkc-VariableBinding', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasOutputType', 'larkc-ArticleIdentifier', 'larkc-NaturalLanguageDocument', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasInputType', 'larkc-GateTransformer', 'larkc-NaturalLanguageDocument', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasInputType', 'larkc-CycSelecter', 'larkc-SetOfStatements', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasInputType', 'larkc-CycReasoner', 'larkc-SetOfStatements', 'BaseKB', vStrDef).
exactlyAssertedEL('larkc-hasInputType', 'larkc-ArticleIdentifier', 'larkc-SPARQLQuery', 'BaseKB', vStrDef).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'VariableArityRelation', 'VariableArityRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'UnaryPredicate', 'UnaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'TernaryPredicate', 'TernaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'QuintaryPredicate', 'QuintaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'QuaternaryPredicate', 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', negationPreds, 'BinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genls, 'SubLExpressionType', 'SubLExpressionType', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'UnaryPredicate', 'UnaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'TernaryPredicate', 'TernaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'QuintaryPredicate', 'QuintaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'QuaternaryPredicate', 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'FixedArityRelation', 'FixedArityRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa2-1', genlPreds, 'BinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'VariableArityRelation', 'VariableArityRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'UnaryPredicate', 'UnaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'TernaryPredicate', 'TernaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'QuintaryPredicate', 'QuintaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'QuaternaryPredicate', 'QuaternaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa1-2', negationPreds, 'BinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('interArgIsa1-2', genlPreds, 'VariableArityRelation', 'VariableArityRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('interArgIsa1-2', arity, tPred, 'PositiveInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'TheTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLString', 'CharacterString', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLPositiveInteger', 'PositiveInteger', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLPositiveInteger', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLNonNegativeInteger', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLNonNegativeInteger', 'Integer', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'SubLInteger', 'Integer', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'HLPrototypicalTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'DocumentationPredicate', tPred, 'CoreCycLMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLRepresentedTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLReifiedDenotationalTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLReifiableNonAtomicTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLReifiableDenotationalTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLNonAtomicTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLNonAtomicReifiedTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLIndexedTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLFormula', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLExpression', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLDenotationalTerm-Assertible', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLDenotationalTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLConstant', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLClosedNonAtomicTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLClosedExpression', 'Thing', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL('genls-SpecDenotesGenlInstances', 'CycLClosedDenotationalTerm', 'Thing', 'UniversalVocabularyMt', vStrMon).


exactlyAssertedEL(backchainRequired, sentenceTruth, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, unknownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, unknownSentence, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, trueSubL, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, termOfUnit, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, termOfUnit, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, termExternalIDString, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, termDependsOn, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, termChosen, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, termChosen, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, sentenceImplies, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, sentenceEquiv, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, sentenceEquiv, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, salientAssertions, 'BaseKB', vStrDef).
exactlyAssertedEL(backchainForbidden, resultIsaArgIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, quotedArgument, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, pragmaticRequirement, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, performSubL, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, performSubL, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, operatorFormulas, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, omitArgIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, nthSmallestElement, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestIsa, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestGenls, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestGenlPreds, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestGenlMt, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestDifferentIsa, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestDifferentGenls, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestCommonSpecs, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestCommonIsa, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestCommonGenls, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, nearestCommonGenlMt, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, natFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, natFunction, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, natArgumentsEqual, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, natArgumentsEqual, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, natArgument, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, natArgument, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, myCreator, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, myCreator, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(backchainForbidden, myCreationTime, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, myCreationTime, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(backchainForbidden, myCreationSecond, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, myCreationSecond, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(backchainForbidden, myCreationPurpose, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, myCreationPurpose, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, mtVisible, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, knownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, knownSentence, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, integerBetween, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, integerBetween, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, instanceElementType, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, indexicalReferent, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, hypotheticalTerm, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, formulaArity, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, formulaArity, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, extentCardinality, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, exactlyAssertedEL, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, exactlyAssertedEL, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, evaluate, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, evaluate, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, equalSymbols, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, equalSymbols, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, elInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, differentSymbols, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, differentSymbols, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, different, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, definingMt, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycTransformationProofRule, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycTransformationProofRule, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycTransformationProofBindings, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycTransformationProofBindings, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycTacticID, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProofID, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreTerms, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreTerms, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProofs, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProofCount, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProofCount, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProblems, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProblems, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProblemCount, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreProblemCount, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreLinks, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreLinkCount, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreLinkCount, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreInferences, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreInferenceCount, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemStoreInferenceCount, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemStoreID, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemQueryTerms, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemQueryTerms, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemQuerySentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemQuerySentence, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemProvabilityStatus, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, cycProblemProvabilityStatus, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemLinkID, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemID, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemDependentLinks, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycProblemArgumentLinks, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycInferenceRelevantProblems, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, cycInferenceAnswerLink, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, constantName, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, constantName, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, constantID, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, constantID, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, constantGUID, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, constantGUID, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, consistent, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, conceptuallyRelated, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, comment, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, collectionIsaBackchainRequired, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, collectionIsaBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, collectionGenlsBackchainRequired, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, collectionGenlsBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, collectionBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, backchainRequired, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, backchainForbiddenWhenUnboundInArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, backchainForbidden, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, backchainForbidden, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, assertionDirection, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, assertionDirection, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, assertedTermSentences, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, assertedTermSentences, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, assertedSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, assertedSentence, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, assertedPredicateArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, assertedPredicateArg, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, admittedSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, admittedSentence, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, admittedNAT, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, admittedArgument, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, admittedArgument, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, admittedAllArgument, 'BaseKB', vStrMon).
exactlyAssertedEL(backchainForbidden, 'ist-Asserted', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(backchainForbidden, 'ist-Asserted', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(backchainForbidden, 'equalStrings-CaseInsensitive', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(backchainForbidden, 'equalStrings-CaseInsensitive', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(opaqueArgument, conceptuallyRelated, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(opaqueArgument, conceptuallyRelated, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(omitArgIsa, thereExists, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(omitArgIsa, thereExists, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(omitArgIsa, forAll, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(omitArgIsa, forAll, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(omitArgIsa, 'SubLQuoteFn', 1, 'UniversalVocabularyMt', vStrMon).

exactlyAssertedEL(notAssertibleMt, 'LogicalTruthMt', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertibleMt, 'InferencePSC', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertibleMt, 'EverythingPSC', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertibleCollection, 'ELRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(notAssertibleCollection, 'CycLTruthValueSentence', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertibleCollection, 'CanonicalizerDirective', 'BookkeepingMt', vStrMon).
exactlyAssertedEL(notAssertible, unknownSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, trueSubL, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, trueSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, termExternalIDString, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertible, termChosen, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, sentenceTruth, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertible, sentenceImplies, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, sentenceEquiv, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, relationExpansion, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, querySentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertible, operatorFormulas, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestIsa, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestGenls, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestGenlPreds, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestGenlMt, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestDifferentIsa, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestDifferentGenls, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestCommonSpecs, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestCommonIsa, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestCommonGenls, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, nearestCommonGenlMt, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, natFunction, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, natArgumentsEqual, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, natArgument, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, knownSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, integerBetween, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, genlCanonicalizerDirectives, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(notAssertible, forwardNonTriggerLiteral, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertible, exactlyAssertedEL, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, evaluate, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(notAssertible, cycTransformationProofRule, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, cycTransformationProofBindings, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, constantID, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, constantGUID, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(notAssertible, consistent, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, assertedSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, assertedPredicateArg, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, admittedSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, admittedNAT, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, admittedArgument, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, admittedAllArgument, 'BaseKB', vStrMon).
exactlyAssertedEL(notAssertible, 'ist-Asserted', 'BaseKB', vStrMon).


exactlyAssertedEL(predicateConventionMt, termOfUnit, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(predicateConventionMt, quotedArgument, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, predicateConventionMt, 'BaseKB', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(predicateConventionMt, predicateConventionMt, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, notAssertibleMt, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(predicateConventionMt, nearestGenlMt, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(predicateConventionMt, ist, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, genlMt, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, definingMt, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, decontextualizedPredicate, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, decontextualizedCollection, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(predicateConventionMt, collectionConventionMt, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, canonicalizerDirectiveForArgAndRest, 'UniversalVocabularyImplementationMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, canonicalizerDirectiveForArg, 'UniversalVocabularyImplementationMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, canonicalizerDirectiveForAllArgs, 'UniversalVocabularyImplementationMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, assertionDirection, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, arityMin, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, arityMax, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, arity, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(predicateConventionMt, 'ist-Asserted', 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, rewriteOf, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, pointQuantValue, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, operatorFormulas, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, myCreationPurpose, 1, 'BookkeepingMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, minQuantValue, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, maxQuantValue, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, followingValue, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, followingValue, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, expresses, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, evaluationDefn, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, cycTransformationProofBindings, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, completelyEnumerableCollection, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, completelyDecidableCollection, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, completeExtentEnumerable, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, completeExtentDecidable, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, completeExtentAsserted, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(openEntryFormatInArgs, argSometimesIsa, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, argSometimesIsa, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, argSometimesIsa, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, admittedAllArgument, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, admittedAllArgument, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(openEntryFormatInArgs, admittedAllArgument, 1, 'UniversalVocabularyMt', vStrMon).


exactlyAssertedEL(oldConstantName, unknownSentence, "unknownFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, trueSentence, "trueFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, thereExists, "ThereExists", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, thereExistExactly, "ThereExistExactly", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, thereExistAtMost, "ThereExistAtMost", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, thereExistAtLeast, "ThereExistAtLeast", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, sentenceImplies, "formulaImplies", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, sentenceEquiv, "formulaEquiv", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, sentenceDesignationArgnum, "formulaDesignationArgnum", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, resultIsa, "resultType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, resultGenl, "usesAreSpecsOf", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, relationAllExistsCount, "relationTypeCount", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, pragmaticRequirement, "pragmaticImplies", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, or, "LogOr", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, numericallyEquals, "numericallyEqual", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, not, "LogNot", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, knownSentence, "knownFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, isa, "instanceOf", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, interArgResultGenl, "interArgResultGenls", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, implies, "LogImplication", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, genlMt, "baseMt", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, forAll, "ForAll", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, except, "exceptedAssertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, evaluationDefn, "lispDefun", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, equalSymbols, "equals-Symbols", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, disjointWith, "mutuallyDisjointWith", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, differentSymbols, "different-Symbols", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, defnSufficient, "defn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, defnIff, "necessaryDefn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, conceptuallyRelated, "mysteryLink", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, completelyEnumerableCollection, "completeCollectionExtent", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, completeExtentEnumerableForValueInArg, "completeExtentKnownForArg", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, completeExtentEnumerable, "completeExtentKnown", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, commutativeInArgs, "symmetricInArgs", 'BookkeepingMt', vStrMon).
exactlyAssertedEL(oldConstantName, comment, "english", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, collectionCompletelyEnumerableViaBackchain, "collectionCompletelyEnumerableViaBackchains", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, assertedTermSentences, "assertedTermFormulas", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, assertedSentence, "assertedFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arity, "expressionArity", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, argsIsa, "argumentTypes", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg5Isa, "argumentFiveType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg4Isa, "argumentFourType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg3Isa, "argumentThreeType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg3Genl, "argumentThreeGenls", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg2Isa, "argumentTwoType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg2Genl, "argumentTwoGenls", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg1Isa, "argumentOneType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, arg1Genl, "argumentOneGenls", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, and, "LogAnd", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, admittedSentence, "admittedFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'Unknown-HLTruthValue', "Unknown-TruthValue", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'TransitiveBinaryPredicate', "TransitiveSlot", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'TimesFn', "Times", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLSymbol', "LispSymbol", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLSymbol', "CycSystemSymbol", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLString', "CycSystemString", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLSExpression', "SubLExpression", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLRealNumber', "LispRealNumber", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLRealNumber', "CycSystemRealNumber", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLList', "CycSystemList", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLKeyword', "CycSystemKeyword", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLInteger', "CycSystemInteger", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLAtom', "LispAtom", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SubLAtom', "CycSystemAtom", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SiblingDisjointAttributeType', "MutuallyDisjointAttributeType", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'SententialRelation', "NonPredicateTruthFunction", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, tRelation, "Relationship", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'QuotientFn', "Quotient", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'PlusFn', "Plus", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'MtTimeWithGranularityDimFn', "MtTimeDimWithGranularityFn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'LogicalTruthImplementationMt', "CycInferenceMt", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'LogFn', "Log", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'List', "List", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'LeaveSomeTermsAtELAndAllowKeywordVariables', "CanonicalizeForNL", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'IntervalMinFn', "IntervalMin", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'IntervalMaxFn', "IntervalMax", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'InferencePSC', "ForwardInferencePSC", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'HLAssertedArgumentKeywordDatastructure', "HLAssertedArgumentKeyword", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'FormulaArityFn', "RelationExpressionArityFn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'FormulaArgSetFn', "RelationArgSetFn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'FormulaArgListFn', "RelationArgsListFn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'FormulaArgFn', "RelationArgFn", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'ExpFn', "Exp", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'ExceptionPredicate', "ExceptionRelation", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'EvaluatableRelation', "EvaluatableRelationship", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'equalStrings-CaseInsensitive', "equals-CaseInsensitive", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'ELRelation-Reversible', "ELRelation-SemiReversible", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'DifferenceFn', "Difference", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycSupportDatastructure', "CycLSupportDatastructure", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLTerm', "CycTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLSentence', "CycSyntacticFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLSentence', "ConstraintLanguageExpression", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLRuleAssertion', "RuleAssertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLReifiableNonAtomicTerm', "ReifiableNAT", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLReifiableDenotationalTerm', "ReifiableTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLOpenExpression', "CycOpenTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLNonAtomicTerm', "NonAtomicTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLIndexedTerm', "CycIndexedTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLGAFAssertion', "GAFAssertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLFormula', "RelationExpression", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLDeducedAssertion', "DeducedAssertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLConstant', "CycConstant", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLClosedExpression', "CycClosedTerm", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLAtomicSentence', "CycAtomicFormula", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLAssertion', "Assertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycLAssertedAssertion', "AssertedAssertion", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycKBDatastructure', "CycLKBDatastructure", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycHLTruthValue', "CyclTruthValue", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycDeductionDatastructure', "CycLDeductionDatastructure", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CycArgumentDatastructure', "CycLArgumentDatastructure", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'CurrentWorldDataCollectorMt-NonHomocentric', "CurrentWorldDataCollectorMtt-NonHomocentric", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'ArgGenlQuantityBinaryPredicate', "ArgGenlQuanityBinaryPredicate", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(oldConstantName, 'AbsoluteValueFn', "AbsoluteValue", 'BookkeepingMt', vStrDef).


exactlyAssertedEL(negationPreds, unknownSentence, trueSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationPreds, unknownSentence, knownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationPreds, unknownSentence, knownSentence, 'BaseKB', vStrMon).
exactlyAssertedEL(negationPreds, highlyRelevantPredAssertion, irrelevantPredAssertion, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationPreds, highlyRelevantMt, irrelevantMt, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationPreds, highlyRelevantAssertion, irrelevantAssertion, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationPreds, conceptuallyRelated, genls, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationInverse, nearestGenlPreds, nearestGenlPreds, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(negationInverse, nearestGenlMt, nearestGenlMt, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(negationInverse, means, means, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationInverse, greaterThan, greaterThan, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationInverse, followingValue, followingValue, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationInverse, elInverse, elInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(negationInverse, denotes, denotes, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(negationInverse, conceptuallyRelated, isa, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(negationInverse, conceptuallyRelated, genls, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(multiplicationUnits, 'Unity', '$VAR'('UNIT'), '$VAR'('UNIT'), 'BaseKB', vStrMon).
exactlyAssertedEL(minimizeExtent, termOfUnit, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, natFunction, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, genls, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, genlPreds, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, genlMt, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(minimizeExtent, equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimizeExtent, abnormal, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(minimize, disjointWith('$VAR'('COL'), '$VAR'('COL')), 'BaseKB', vStrDef).
exactlyAssertedEL(microtheoryDesignationArgnum, ist, 1, 'BaseKB', vStrDef).
exactlyAssertedEL(microtheoryDesignationArgnum, 'TLAssertionFn', 1, 'BaseKB', vStrDef).
exactlyAssertedEL(microtheoryDesignationArgnum, 'ist-Asserted', 1, 'BaseKB', vStrDef).

exactlyAssertedEL(interArgResultIsa, 'RoundUpFn', 1, 'ScalarPointValue', 'ScalarPointValue', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'RoundUpFn', 1, 'RealNumber', 'Integer', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'RoundDownFn', 1, 'ScalarPointValue', 'ScalarPointValue', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'RoundDownFn', 1, 'RealNumber', 'Integer', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'RoundClosestFn', 1, 'ScalarPointValue', 'ScalarPointValue', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'RoundClosestFn', 1, 'RealNumber', 'Integer', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'ModuloFn', 1, 'Integer', 'NonNegativeInteger', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'IntervalMinFn', 1, 'NonNegativeScalarInterval', 'NonNegativeScalarInterval', 'BaseKB', vStrMon).
exactlyAssertedEL(interArgResultIsa, 'FunctionToArg', 2, 'TernaryPredicate', 'BinaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(interArgResultIsa, 'FunctionToArg', 2, 'BinaryPredicate', 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(interArgDifferent, interArgDifferent, 2, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 4, 5, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 3, 5, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 3, 4, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 2, 5, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 2, 4, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(interArgDifferent, commutativeInArgs, 2, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(instanceElementType, 'Set-Mathematical', 'Thing', 'BaseKB', vStrMon).
exactlyAssertedEL(independentArg, 'interArgIsa5-4', 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa5-3', 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa5-2', 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa5-1', 5, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa4-5', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa4-3', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa4-2', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa4-1', 4, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa3-5', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa3-4', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa3-2', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa3-1', 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa2-5', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa2-4', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa2-3', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa2-1', 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa1-5', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa1-4', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa1-3', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgIsa1-2', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgGenl1-2', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(independentArg, 'interArgFormat1-2', 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(hlPrototypicalInstance, 'ThePrototypicalTransitiveBinaryPredicate', 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(hlPrototypicalInstance, 'ThePrototypicalCollection', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(hlPrototypicalInstance, 'ThePrototypicalBinaryPredicate', 'BinaryPredicate', 'UniversalVocabularyMt', vStrDef).


exactlyAssertedEL(genlPreds, trueSentence, consistent, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, synonymousExternalConcept, overlappingExternalConcept, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, siblingDisjointExceptions, different, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, sentenceEquiv, sentenceImplies, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, rewriteOf, equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, relationAllExistsCount, relationAllExistsMin, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, relationAllExistsCount, relationAllExistsMax, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, reformulatorEquiv, reformulatorRule, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, reformulatorEquals, reformulatorRule, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, quotedArgument, opaqueArgument, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, quantitySubsumes, quantityIntersects, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, pointQuantValue, numericallyEquals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, pointQuantValue, minQuantValue, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, pointQuantValue, maxQuantValue, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, numericallyEquals, quantitySubsumes, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, numericallyEquals, greaterThanOrEqualTo, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, nearestIsa, isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, nearestGenls, genls, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, nearestGenlPreds, genlPreds, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, nearestGenlMt, genlMt, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, natFunction, termDependsOn, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, minQuantValue, quantitySubsumes, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, maxQuantValue, quantitySubsumes, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, knownSentence, trueSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, knownAntecedentRule, highlyRelevantAssertion, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, isa, elementOf, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, indexicalReferent, equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, greaterThan, greaterThanOrEqualTo, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, greaterThan, different, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, genls, subsetOf, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, followingValue, different, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, expresses, means, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, exactlyAssertedEL, assertedSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, equalSymbols, equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, elInverse, genlInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, different, differentSymbols, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, denotes, means, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, defnIff, defnSufficient, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, defnIff, defnNecessary, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, definingMt, termDependsOn, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, consistent, admittedSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completelyEnumerableCollection, completelyDecidableCollection, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completelyEnumerableCollection, completelyDecidableCollection, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableViaBackchain, minimizeExtent, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableViaBackchain, minimizeExtent, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableForValueInArg, nonAbducibleWithValueInArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableForValueInArg, nonAbducibleWithValueInArg, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableForValueInArg, completeExtentDecidableForValueInArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerableForValueInArg, completeExtentDecidableForValueInArg, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerable, minimizeExtent, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerable, minimizeExtent, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerable, completeExtentDecidable, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentEnumerable, completeExtentDecidable, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentDecidable, backchainForbidden, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentAssertedForValueInArg, completeExtentEnumerableForValueInArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentAssertedForValueInArg, completeExtentEnumerableForValueInArg, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentAsserted, completeExtentEnumerable, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, completeExtentAsserted, completeExtentEnumerable, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(genlPreds, commutativeInArgsAndRest, commutativeInArgs, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionIsaBackchainRequired, collectionIsaBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionGenlsBackchainRequired, collectionGenlsBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionBackchainRequired, collectionIsaBackchainRequired, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionBackchainRequired, collectionGenlsBackchainRequired, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionBackchainRequired, collectionBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionBackchainEncouraged, collectionIsaBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, collectionBackchainEncouraged, collectionGenlsBackchainEncouraged, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, coExtensional, genls, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, canonicalizerDirectiveForArgAndRest, canonicalizerDirectiveForArg, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, canonicalizerDirectiveForArgAndRest, canonicalizerDirectiveForArg, 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(genlPreds, assertedSentence, knownSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, assertedPredicateArg, admittedArgument, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, argsIsa, arg1Isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, argIsa, argSometimesIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, argAndRestQuotedIsa, argQuotedIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, argAndRestIsa, argIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, 'ist-Asserted', ist, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, 'equalStrings-CaseInsensitive', equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlPreds, 'equalStrings-CaseInsensitive', 'substring-CaseInsensitive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyMt', 'UniversalVocabularyImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyMt', 'CoreCycLImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyImplementationMt', 'UniversalVocabularyMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyImplementationMt', 'CoreCycLImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'UniversalVocabularyImplementationMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'TemporaryEnglishParaphraseMt', 'EnglishParaphraseMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'TemporaryEnglishParaphraseMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'QueryMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'LogicalTruthMt', 'LogicalTruthImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'LogicalTruthMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'LogicalTruthImplementationMt', 'LogicalTruthMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'LogicalTruthImplementationMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'InferencePSC', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'EverythingPSC', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'EnglishParaphraseMt', 'CurrentWorldDataCollectorMt-NonHomocentric', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'EnglishParaphraseMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CyclistDefinitionalMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CurrentWorldDataCollectorMt-NonHomocentric', 'CyclistDefinitionalMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CurrentWorldDataCollectorMt-NonHomocentric', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLMt', 'LogicalTruthMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLMt', 'CoreCycLImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLImplementationMt', 'LogicalTruthImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLImplementationMt', 'CoreCycLMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'CoreCycLImplementationMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BookkeepingMt', 'EnglishParaphraseMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BookkeepingMt', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BaseKB', 'UniversalVocabularyMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BaseKB', 'UniversalVocabularyImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BaseKB', 'CoreCycLImplementationMt', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, 'BaseKB', 'BaseKB', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlMt, '$VAR'('X'), '$VAR'('X'), 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(genlInverse, siblingDisjointExceptions, siblingDisjointExceptions, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, sentenceEquiv, sentenceImplies, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, sentenceEquiv, sentenceEquiv, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, reformulatorRuleProperties, isa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, quantitySubsumes, quantityIntersects, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, quantityIntersects, quantityIntersects, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, numericallyEquals, numericallyEquals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, negationPreds, negationPreds, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, negationMt, negationMt, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, negationInverse, negationInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, natFunction, operatorFormulas, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, minQuantValue, quantityIntersects, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, maxQuantValue, quantityIntersects, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, greaterThan, different, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, followingValue, greaterThan, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, equalSymbols, equalSymbols, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, equals, equals, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, elInverse, genlInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, disjointWith, disjointWith, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, coExtensional, genls, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, coExtensional, coExtensional, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlInverse, 'equalStrings-CaseInsensitive', 'substring-CaseInsensitive', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(genlCanonicalizerDirectives, 'LeaveSomeTermsAtELAndAllowKeywordVariables', 'LeaveSomeTermsAtEL', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(genlCanonicalizerDirectives, 'LeaveSomeTermsAtELAndAllowKeywordVariables', 'AllowKeywordVariables', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(genlCanonicalizerDirectives, 'LeaveSomeTermsAtEL', 'LeaveVariablesAtEL', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(genlCanonicalizerDirectives, 'AllowKeywordVariables', 'AllowGenericArgVariables', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(genKeyword, thereExists, ((':THERE_EXISTS')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, thereExistExactly, ((':THERE_EXIST_EXACTLY')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, thereExistAtMost, ((':THERE_EXIST_AT_MOST')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, thereExistAtLeast, ((':THERE_EXIST_AT_LEAST')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, termOfUnit, ((':TERM_OF_UNIT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, relationExpansion, ((':RELATION_EXPANSION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, prettyString, ((':PRETTY_NAME')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, or, ((':OR')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, nthSmallestElement, ((':NTH_SMALLEST_ELEMENT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, nthLargestElement, ((':NTH_LARGEST_ELEMENT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, not, ((':NOT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, myCreator, ((':MY_CREATOR')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, myCreationTime, ((':MY_CREATION_TIME')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, isa, ((':ISA')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, implies, ((':IMPLIES')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, genMassNoun, ((':GEN_MASS_NOUN')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, genls, ((':GENLS')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, genFormat, ((':GEN_FORMAT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, forAll, ((':FOR_ALL')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, exceptWhen, ((':EXCEPT_WHEN')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, exceptFor, ((':EXCEPT_FOR')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, equals, ((':EQUALS')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, different, ((':DIFFERENT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, and, ((':AND')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'VariableArityRelation', ((':VARIABLE_ARITY_RELATION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'UnitOfMeasure', ((':UNIT_OF_MEASURE')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'Thing', ((':THING')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'TheTerm', ((':THE_TERM')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'TemporaryEnglishParaphraseMt', ((':TEMPORARY_ENGLISH_PARAPHRASE_MT')), 'TemporaryEnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'SetOrCollection', ((':SET_OR_COLLECTION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'Set-Mathematical', ((':SET_MATHEMATICAL')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'September', ((':SEPTEMBER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, tRelation, ((':RELATIONSHIP')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'Quantifier', ((':QUANTIFIER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'PerFn', ((':PER_FN')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'October', ((':OCTOBER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'November', ((':NOVEMBER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'NonNegativeInteger', ((':NON_NEGATIVE_INTEGER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'MeaningInSystemFn', ((':MEANING_IN_SYSTEM_FN')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'May', ((':MAY')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'March', ((':MARCH')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'LogicalConnective', ((':LOGICAL_CONNECTIVE')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'Kappa', ((':KAPPA')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'June', ((':JUNE')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'July', ((':JULY')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'January', ((':JANUARY')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'Individual', ((':INDIVIDUAL')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'FunctionToArg', ((':FUNCTION_TO_ARG')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, tFunction, ((':NON_PREDICATE_FUNCTION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'FixedAritySkolemFunction', ((':SKOLEM_FUNCTION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'February', ((':FEBRUARY')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'EnglishParaphraseMt', ((':ENGLISH_PARAPHRASE_MT')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'December', ((':DECEMBER')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, tCol, ((':COLLECTION')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'BaseKB', ((':BASE_K_B')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'August', ((':AUGUST')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genKeyword, 'April', ((':APRIL')), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, xor, "either ~a or ~a (but not both)", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, trueRule, "~a is true, and ~a is an instantiation of the rule template ~a", 'TheList'(2, 2, 1), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, thereExistAtMost, "there ~a at most ~a ~a such that ~a", 'TheList'('TheList'("is", "are"), 1, 2, 3), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, thereExistAtLeast, "there ~a at least ~a ~a such that ~a", 'TheList'('TheList'("is", "are"), 1, 2, 3), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, synonymousExternalConcept, "~s is synonymous with ~s in ~a", 'TheList'('TheList'(1, ((':SINGULAR'))), 3, 2), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, substring, "~s is a substring of ~s", 'TheList'(1, 2), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, sentenceEquiv, "the formula ~a is logically equivalent to the formula ~a", 'TheList'('TheList'(1, ((':QUOTE'))), 'TheList'(2, ((':QUOTE')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, requiredArg2Pred, "every ~a is arg 2 of ~a relation", 'TheList'(1, 'TheList'(2, ((':QUOTE')), ((':A_THE_WORD')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, relationExpansion, "one CycL expansion for assertions which have ~a in the operator position is ~a", 'TheList'('TheList'(1, ((':EQUALS'))), 'TheList'(2, ((':EQUALS')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, notAssertibleMt, "Sentences cannot be asserted in ~a", 'TheList'('TheList'(1, ((':EQUALS')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, nearestCommonIsa, "both ~a and ~a are ~a", 'TheList'(1, 2, 'TheList'(3, 'TheList'(((':PN_MASS_NUMBER')), ((':PN_SINGULAR')), ((':MASS_NUMBER'))), ((':GERUND')), ((':AGENTIVE_SG')), ((':SINGULAR')), ((':A_THE_WORD')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, indexicalReferent, "the indexical term ~a refers to ~a", 'TheList'('TheList'(1, ((':QUOTE'))), 2), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, implies, "if ~a, then ~a", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, genFormat, "to generate English for assertions formed with ~a, the format string ~a is used with the extra information in this list: ~a", 'TheList'('TheList'(1, ((':EQUALS'))), 2, 3), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, forAll, "for every ~a, ~a", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, equiv, "~a if and only if ~a", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, differentSymbols, "~a are different symbols", 'TheList'('TheList'(1, ((':AND')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycTacticID, "the inference tactic ~a contained within the inference problem ~a, has ~a as its ID", 'TheList'('TheList'(1, ((':SINGULAR'))), 'TheList'(2, ((':SINGULAR')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProofID, "the inference proof ~a contained within inference problem store ~a, has ~a as its ID", 'TheList'('TheList'(1, ((':SINGULAR'))), 'TheList'(2, ((':SINGULAR')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemStoreProofCount, "the inference problem store ~a has ~a proof~a", 'TheList'(1, 2, 'TheList'("", "s")), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemStoreProblemCount, "the inference problem store ~a has ~a inference problem~a", 'TheList'(1, 2, 'TheList'("", "s")), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemStoreLinkCount, "the inference problem store ~a has ~a inference link~a", 'TheList'(1, 2, 'TheList'("", "s")), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemStoreInferenceCount, "the inference problem store ~a has ~a inference~a", 'TheList'(1, 2, 'TheList'("", "s")), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemLinkID, "the inference problem link ~a contained within inference problem store ~a, has ~a as its ID", 'TheList'('TheList'(1, ((':SINGULAR'))), 'TheList'(2, ((':SINGULAR')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, cycProblemID, "the inference problem ~a contained within inference problem store ~a, has ~a as its ID", 'TheList'('TheList'(1, ((':SINGULAR'))), 'TheList'(2, ((':SINGULAR')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, completeExtentEnumerable, "the complete extent of the predicate ~a is known", 'TheList'('TheList'(1, ((':EQUALS')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'UnitProductFn', "~a-~a", 'TheList'('TheList'(1, ((':PLURAL'))), 'TheList'(2, ((':SINGULAR')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'TheSet', "the set containing ~a", 'TheList'('TheList'(1, ((':AND')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'substring-CaseInsensitive', "~s is a case-insensitive substring of ~s", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'RoundUpFn', "~a, truncated", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'RoundUpFn', "~a, rounded up", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'RoundDownFn', "~a, rounded down", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'PlusFn', "the sum of ~a", 'TheList'('TheList'(1, ((':AND')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'PlusAll', "the sum of ~a over ~a", 'TheList'(2, 'TheList'(1, ((':PLURAL')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'MinRangeFn', "the minimum range subsumed by ~a and ~a", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'Minimum', "the minimum ~a over ~a", 'TheList'(2, 'TheList'(1, ((':PLURAL')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'MaxRangeFn', "the maximum range subsuming ~a and ~a", 'TheEmptyList', 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'Maximum', "the maximum ~a over ~a", 'TheList'(2, 'TheList'(1, ((':PLURAL')))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(genFormat, 'FunctionToArg', "'~a'", 'TheList'(2, ((':SINGULAR')), ((':MASS_NUMBER'))), 'EnglishParaphraseMt', vStrDef).
exactlyAssertedEL(fanOutArg, substring, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(fanOutArg, genls, 1, 'BaseKB', vStrMon).
exactlyAssertedEL(fanOutArg, genlPreds, 1, 'BaseKB', vStrMon).
exactlyAssertedEL(fanOutArg, genlMt, 1, 'BaseKB', vStrMon).
exactlyAssertedEL(expansionDefn, 'TLVariableFn', 'SubLQuoteFn'('TL-VAR-TO-EL'), 'BaseKB', vStrDef).
exactlyAssertedEL(expansionDefn, 'TLReifiedNatFn', 'SubLQuoteFn'('TL-FUNCTION-TERM-TO-EL'), 'BaseKB', vStrDef).
exactlyAssertedEL(expansionDefn, 'TLAssertionFn', 'SubLQuoteFn'('TL-ASSERTION-TERM-TO-EL'), 'BaseKB', vStrDef).
exactlyAssertedEL(evaluationResultQuotedIsa, 'FormulaArgFn', 'CycLTerm', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(evaluationResultQuotedIsa, 'DateEncodeStringFn', 'SubLString', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(evaluationDefn, trueSubL, 'SubLQuoteFn'('CYC-TRUE-SUBL'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, substring, 'SubLQuoteFn'('CYC-SUBSTRING-PREDICATE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, quantitySubsumes, 'SubLQuoteFn'('CYC-QUANTITY-SUBSUMES'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, quantityIntersects, 'SubLQuoteFn'('CYC-QUANTITY-INTERSECTS'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, numericallyEquals, 'SubLQuoteFn'('CYC-NUMERICALLY-EQUAL'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, greaterThanOrEqualTo, 'SubLQuoteFn'('CYC-GREATER-THAN-OR-EQUAL-TO'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, greaterThan, 'SubLQuoteFn'('CYC-GREATER-THAN'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, differentSymbols, 'SubLQuoteFn'('CYC-DIFFERENT-SYMBOLS'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, different, 'SubLQuoteFn'('CYC-DIFFERENT'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'TimesFn', 'SubLQuoteFn'('CYC-TIMES'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'substring-CaseInsensitive', 'SubLQuoteFn'('CYC-SUBSTRING-CASE-INSENSITIVE-PREDICATE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'RoundUpFn', 'SubLQuoteFn'('CYC-ROUND-UP'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'RoundDownFn', 'SubLQuoteFn'('CYC-ROUND-DOWN'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'RoundClosestFn', 'SubLQuoteFn'('CYC-ROUND-CLOSEST'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'QuotientFn', 'SubLQuoteFn'('CYC-QUOTIENT'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'QuantityConversionFn', 'SubLQuoteFn'('CYC-QUANTITY-CONVERSION'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'PlusFn', 'SubLQuoteFn'('CYC-PLUS'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'PlusAll', 'SubLQuoteFn'('CYC-PLUS-ALL'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'Percent', 'SubLQuoteFn'('CYC-PERCENT'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'ModuloFn', 'SubLQuoteFn'('CYC-MODULO'), 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(evaluationDefn, 'MinRangeFn', 'SubLQuoteFn'('CYC-MIN-RANGE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'Minimum', 'SubLQuoteFn'('CYC-MINIMUM'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'MaxRangeFn', 'SubLQuoteFn'('CYC-MAX-RANGE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'Maximum', 'SubLQuoteFn'('CYC-MAXIMUM'), 'BaseKB', vStrMon).
exactlyAssertedEL(distributesOutOfArg, and, holdsIn, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(disjointWith, 'VariableArityRelation', 'FixedArityRelation', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'TruthValue', 'List', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'SubLString', 'TruthValue', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'SubLNonVariableNonKeywordSymbol', 'SubLKeyword', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'SubLNonNegativeInteger', 'SubLSymbol', 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(disjointWith, 'SententialRelation', tPred, 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, tRelation, 'TruthValue', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, tRelation, 'NonNegativeInteger', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, tRelation, 'Microtheory', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'ReifiableFunction', 'UnreifiableFunction', 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(disjointWith, 'ReflexiveBinaryPredicate', 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'PartiallyCommutativeRelation', 'UnaryRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'Microtheory', 'TruthValue', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'LogicalConnective', 'Quantifier', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'Individual', 'SetOrCollection', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, tFunction, 'TruthFunction', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'FixedAritySkolemFunction', 'VariableAritySkolemFunction', 'LogicalTruthImplementationMt', vStrMon).
exactlyAssertedEL(disjointWith, 'ELRelation-Reversible', 'ELRelation-OneWay', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLTruthValueSentence', 'CycLFormulaicSentence', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CycLSentence-ClosedPredicate', 'CycLNonAtomicTerm-ClosedFunctor', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CycLSentence', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLSentence', 'CycLGenericRelationFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLRuleAssertion', 'CycLGAFAssertion', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CycLRepresentedAtomicTerm', 'SubLAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLOpenSentence', 'CycLOpenDenotationalTerm', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CycLOpenExpression', 'CycLClosedExpression', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLGenericRelationFormula', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CycLClosedSentence', 'CycLNonAtomicTerm', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CycLAtomicTerm', 'CycLFormula', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(disjointWith, 'CommutativeRelation', 'UnaryRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, 'CommutativeRelation', 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, tCol, 'Set-Mathematical', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(disjointWith, tCol, 'Individual', 'LogicalTruthMt', vStrMon).
exactlyAssertedEL(disjointWith, 'BinaryRelation', 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(denotes, 'Quote'('Quote'('EscapeQuote'('$VAR'('X')))), 'Quote'('EscapeQuote'('$VAR'('X'))), 'BaseKB', vStrMon).
exactlyAssertedEL(defnSufficient, 'Wednesday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Tuesday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Thursday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Sunday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'ScalarPointValue', 'SubLQuoteFn'('SCALAR-POINT-VALUE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'ScalarInterval', 'SubLQuoteFn'('IBQE?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Saturday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Monday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'List', 'SubLQuoteFn'('CYC-LIST-OF-TYPE-SUFFICIENT'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Integer', 'SubLQuoteFn'('INTEGERP'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'Friday', 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'CharacterString', 'SubLQuoteFn'('STRINGP'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnSufficient, 'CharacterString', 'SubLQuoteFn'('CYC-LIST-OF-TYPE-SUFFICIENT'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnNecessary, 'Set-Mathematical', 'SubLQuoteFn'('CYC-SET-OF-TYPE-NECESSARY'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnNecessary, 'List', 'SubLQuoteFn'('CYC-LIST-OF-TYPE-NECESSARY'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnNecessary, 'Individual', 'SubLQuoteFn'('CYC-INDIVIDUAL-NECESSARY'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnNecessary, 'CharacterString', 'SubLQuoteFn'('CYC-LIST-OF-TYPE-NECESSARY'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'Thing', 'SubLQuoteFn'('TRUE'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'Thing', 'SubLQuoteFn'('TRUE'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(defnIff, 'RealNumber', 'SubLQuoteFn'('CYC-REAL-NUMBER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'PositiveInteger', 'SubLQuoteFn'('CYC-POSITIVE-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'PositiveInteger', 'SubLQuoteFn'('CYC-POSITIVE-INTEGER'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(defnIff, 'NonNegativeScalarInterval', 'SubLQuoteFn'('NON-NEGATIVE-SCALAR-INTERVAL?'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'NonNegativeInteger', 'SubLQuoteFn'('CYC-NON-NEGATIVE-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'NonNegativeInteger', 'SubLQuoteFn'('CYC-NON-NEGATIVE-INTEGER'), 'LogicalTruthImplementationMt', vStrDef).
exactlyAssertedEL(defnIff, 'Integer', 'SubLQuoteFn'('CYC-INTEGER'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(defnIff, 'HLExternalIDString', 'SubLQuoteFn'('HL-EXTERNAL-ID-STRING-P'), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(definingMt, termOfUnit, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, termDependsOn, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, subsetOf, 'CoreCycLMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, skolem, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, ruleAfterRemoving, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, ruleAfterAdding, 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, oldConstantName, 'BookkeepingMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, myCreator, 'BookkeepingMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, myCreationTime, 'BookkeepingMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, myCreationPurpose, 'BookkeepingMt', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, evaluationDefn, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, equals, 'LogicalTruthMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, elementOf, 'CoreCycLMt', 'BaseKB', vStrMon).
exactlyAssertedEL(definingMt, defnSufficient, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, defnNecessary, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, defnIff, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, afterRemoving, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, afterAdding, 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(definingMt, 'HumanCyclist', 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedPredicate, termOfUnit, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, quotedArgument, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, predicateConventionMt, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, notAssertibleMt, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, nearestGenlMt, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedPredicate, ist, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, genlMt, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, evaluateImmediately, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedPredicate, ephemeralTerm, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, definingMt, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, decontextualizedPredicate, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, decontextualizedCollection, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, collectionConventionMt, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, canonicalizerDirectiveForArgAndRest, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedPredicate, canonicalizerDirectiveForArg, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, canonicalizerDirectiveForAllArgs, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, assertionDirection, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, arityMin, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, arityMax, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, arity, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedPredicate, 'ist-Asserted', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'VariableAritySkolemFunction', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'VariableArityRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'UnreifiableFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'UnitOfMeasure', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'UnaryRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'UnaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'UnaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'TruthFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'TransitiveBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Thing', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'TheTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'TernaryRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'TernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'TernaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SymmetricBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SubLSymbol', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLString', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLSExpression', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLRealNumber', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLPositiveInteger', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SubLNonVariableSymbol', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLNonVariableNonKeywordSymbol', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLNonNegativeInteger', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SubLList', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLKeyword', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLInteger', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLExpressionType', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLCharacter', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SubLAtom', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SkolemFunction', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'SiblingDisjointCollectionType', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SiblingDisjointAttributeType', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SetOrCollection', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Set-Mathematical', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'SententialRelation', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'ScopingRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ScalarPointValue', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ScalarIntegralValue', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, tRelation, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ReifiableFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ReformulatorDirectivePredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ReflexiveBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'RealNumber', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuintaryRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuintaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuintaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuaternaryRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuaternaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'QuaternaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Quantifier', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ProblemSolvingCntxt', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, tPred, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'PositiveInteger', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'PartiallyCommutativeRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'NonNegativeScalarInterval', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'NonNegativeInteger', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Multigraph', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'MonthOfYearType', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'MicrotheoryDesignatingRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Microtheory', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'LogicalConnective', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'List', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'IrreflexiveBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'InterArgIsaPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'InterArgFormatPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Integer', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'Individual', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'HypotheticalContext', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'HLExternalIDString', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, tFunction, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'Format', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'FixedAritySkolemFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'FixedAritySkolemFuncN', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'FixedArityRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ExistentialQuantifier-Bounded', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'ExistentialQuantifier', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ExceptionPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'EvaluatableRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'EvaluatableFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ELRelation-Reversible', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'ELRelation-OneWay', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ELRelation', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'DistributingMetaKnowledgePredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'DisjointCollectionType', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'DirectedMultigraph', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'DefaultMonotonicPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, ftVar, 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLTruthValueSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLSentence-Assertible', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLSentence-Askable', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLRuleAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLRepresentedTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLRepresentedAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLReifiedDenotationalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLReifiableNonAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLReifiableDenotationalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLPropositionalSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLOpenSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLOpenNonAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLOpenFormula', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLOpenExpression', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLOpenDenotationalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLNonAtomicTerm-Assertible', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLNonAtomicTerm-Askable', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLNonAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLNonAtomicReifiedTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLIndexedTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLGenericRelationFormula', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLGAFAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLFormulaicSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLFormula', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, ttFormatType, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'CycLExpression-Assertible', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLExpression-Askable', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLExpression', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLDenotationalTerm-Assertible', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLDenotationalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLDeducedAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLConstant', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedNonAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedFormula', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedExpression', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedDenotationalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLClosedAtomicSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLAtomicTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLAtomicSentence', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLAtomicAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLAssertionDirection', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'CycLAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CycLAssertedAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'CommutativeRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'CollectionDenotingFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'CanonicalizerDirective', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'BroadMicrotheory', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'BookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'BinaryRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'BinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'BinaryFunction', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'AtemporalNecessarilyEssentialCollectionType', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'AsymmetricBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'AssociativeRelation', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgTypeTernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgTypePredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgTypeBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgQuotedIsaTernaryPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(decontextualizedCollection, 'ArgIsaTernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgIsaBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgGenlTernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgGenlQuantityTernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgGenlQuantityBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgGenlBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'ArgConstraintPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'AntiTransitiveBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(decontextualizedCollection, 'AntiSymmetricBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(constrainsArg, argsIsa, 0, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, argsGenl, 0, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg6SometimesIsa, 6, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg6QuotedIsa, 6, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg6Isa, 6, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg6Genl, 6, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg5SometimesIsa, 5, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg5QuotedIsa, 5, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg5Isa, 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg5Genl, 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg5Format, 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg4SometimesIsa, 4, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg4QuotedIsa, 4, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg4Isa, 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg4Genl, 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg4Format, 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg3SometimesIsa, 3, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg3QuotedIsa, 3, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg3Isa, 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg3Genl, 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg3Format, 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg2SometimesIsa, 2, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg2QuotedIsa, 2, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg2Isa, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg2Isa, 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg2Genl, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg2Genl, 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg2Format, 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg1SometimesIsa, 1, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg1QuotedIsa, 1, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg1Isa, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(constrainsArg, arg1Isa, 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg1Genl, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg1Genl, 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, arg1Format, 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa5-4', 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa5-3', 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa5-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa5-1', 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa4-5', 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa4-3', 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa4-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa4-1', 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa3-5', 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa3-4', 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa3-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa3-1', 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa2-5', 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa2-4', 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa2-3', 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa2-1', 1, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa1-5', 5, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa1-4', 4, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa1-3', 3, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgIsa1-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgGenl1-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(constrainsArg, 'interArgFormat1-2', 2, 'CoreCycLMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, querySentence, pragmaticRequirement, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, querySentence, meetsPragmaticRequirement, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, pragmaticRequirement, pragmaticallyNormal, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, pragmaticRequirement, meetsPragmaticRequirement, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, knownAntecedentRule, knownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(conceptuallyRelated, knownAntecedentRule, backchainRequired, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(conceptuallyRelated, exceptWhen, abnormal, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, exceptFor, abnormal, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, exactlyAssertedEL, assertedSentence, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, commutativeInArgs, 'CommutativeRelation', 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionIsaBackchainEncouraged, isa, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionIsaBackchainEncouraged, tCol, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionGenlsBackchainEncouraged, isa, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionGenlsBackchainEncouraged, tCol, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionBackchainRequired, isa, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionBackchainRequired, tCol, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionBackchainEncouraged, isa, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, collectionBackchainEncouraged, tCol, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, abnormal, pragmaticallyNormal, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, abnormal, meetsPragmaticRequirement, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, 'SubLQuoteFn', trueSubL, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, 'SubLQuoteFn', performSubL, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, 'SubLQuoteFn', 'ExpandSubLFn', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, 'SubLQuoteFn', 'EvaluateSubLFn', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(conceptuallyRelated, 'MonotonicallyFalse', 'False', 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, 'IrreflexiveBinaryPredicate', interArgDifferent, 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, 'DefaultFalse', 'False', 'BaseKB', vStrMon).
exactlyAssertedEL(conceptuallyRelated, 'CycHLTruthValue', 'TruthValue', 'BaseKB', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'TruthValue', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'TheTerm', 'BaseKB', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'SkolemFunction', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'SententialRelation', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'Quantifier', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ProblemSolvingCntxt', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'LogicalConnective', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'HumanCyclist', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ExistentialQuantifier-Bounded', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ExceptionPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'DayOfWeekType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'CycProvabilityStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'CycLRuleAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'CycLGAFAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'CycLDeducedAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'CycLAssertionDirection', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'CycLAssertedAssertion', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'CycInferenceProblemLinkStatus', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'CanonicalizerDirective', 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ArgIsaBinaryPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyEnumerableCollection, 'ArgGenlQuantityTernaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ArgGenlQuantityBinaryPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(completelyEnumerableCollection, 'ArgGenlBinaryPredicate', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyDecidableCollection, 'Microtheory', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completelyDecidableCollection, 'IndeterminateTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(completelyDecidableCollection, 'HLPrototypicalTerm', 'BaseKB', vStrMon).
exactlyAssertedEL(completeExtentEnumerableForValueInArg, indexicalReferent, 'TheUser', 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerableForValueInArg, indexicalReferent, 'QueryMt', 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerableForArg, termOfUnit, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerableForArg, termOfUnit, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerableForArg, conceptuallyRelated, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, termDependsOn, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completeExtentEnumerable, termChosen, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, quotedArgument, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, pragmaticRequirement, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, performSubL, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, operatorFormulas, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, natFunction, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, natArgumentsEqual, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, natArgument, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, myCreator, 'BookkeepingMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, myCreationTime, 'BookkeepingMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, myCreationSecond, 'BookkeepingMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, myCreationPurpose, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, formulaArity, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, exactlyAssertedEL, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, evaluate, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, equalSymbols, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, definingMt, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycTransformationProofRule, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycTransformationProofBindings, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreTerms, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreProofCount, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreProblems, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreProblemCount, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreLinkCount, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemStoreInferenceCount, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemQueryTerms, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemQuerySentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, cycProblemProvabilityStatus, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, constantName, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, constantID, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, constantGUID, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, comment, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, collectionIsaBackchainRequired, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, collectionIsaBackchainEncouraged, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, collectionGenlsBackchainRequired, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, collectionGenlsBackchainEncouraged, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, collectionBackchainEncouraged, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, backchainRequired, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, backchainForbiddenWhenUnboundInArg, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, backchainForbidden, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, assertionDirection, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, assertedTermSentences, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, assertedSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, assertedPredicateArg, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, admittedSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, admittedArgument, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentEnumerable, 'ist-Asserted', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, unknownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, termOfUnit, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, sentenceImplies, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, sentenceEquiv, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, mtVisible, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, knownSentence, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, integerBetween, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, indexicalReferent, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, differentSymbols, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, consistent, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, conceptuallyRelated, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentDecidable, 'equalStrings-CaseInsensitive', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentAsserted, salientAssertions, 'BaseKB', vStrDef).
exactlyAssertedEL(completeExtentAsserted, resultIsaArgIsa, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentAsserted, omitArgIsa, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(completeExtentAsserted, instanceElementType, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentAsserted, hypotheticalTerm, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(completeExtentAsserted, elInverse, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(commutativeInArgsAndRest, commutativeInArgsAndRest, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(commutativeInArgsAndRest, commutativeInArgs, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(commutativeInArgs, multiplicationUnits, 1, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(commutativeInArgs, interArgDifferent, 2, 3, 'BaseKB', vStrMon).
exactlyAssertedEL(comment, xor, "The LogicalConnective that represents exclusive-or in CycL. Unlike or, which is a VariableArityRelation, xor takes two arguments, which must be instances of ELSentence-Assertible. (xor P Q) means  one but not both of P and Q is true. (An EL formula that mentions \n  xor is translated during canonicalization into an equivalent, less compact, formula that mentions or, and, and not).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, unknownSentence, "A unary KBDependentRelation (q.v.) that takes instances of CycLSentence as arguments.  <code>(unknownSentence SENTENCE)</code> means that <code>SENTENCE</code> is not currently  \"known\" by the Cyc system to be true.  More precisely, the inference engine cannot prove <code>SENTENCE</code> <i>using only removal</i> (see CycRemovalModule) from the current state of the knowledge base.  <code>SENTENCE</code> might actually be known to be false (see the specialization contradictorySentence), or its truth-value might be simply unknown in the present sense.  \n<p>\nNote that, as a KB dependent relation, unknownSentence is notAssertible (q.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, unitMultiplicationFactor, "A ternary MetaFunction predicate that relates two interconvertible UnitOfMeasures (q.v.) to the real number by which the larger unit is a multiple of the smaller.  <code>(unitMultiplicationFactor SMALLUNIT BIGUNIT N)</code> means that there are <code>N SMALLUNIT</code>s in one <code>BIGUNIT</code>.  In other words, to convert from a measure <code>BIGUNIT</code>s to a measure in <code>SMALLUNIT</code>s, multiply by <code>N</code>.\n<p>\nFor example, (unitMultiplicationFactor Inch Foot-UnitOfMeasure 12) entails that, when converting from feet to inches, one multiplies the number of feet by twelve.\n<p>\nNote that <code>SMALLUNIT</code> and <code>BIGUNIT</code> must be instances of the same InterconvertibleUnitType (q.v.), and that <code>N</code> must be greater than or equal to 1.\n<p>\nSee also QuantityConversionFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, trueSubL, "<code>(trueSubL SUBL)</code> states that the SubL expression <code>SUBL</code> evaluates to a value other than NIL.  This predicate allows for a procedural test for programmatic 'truth' in the implementation language to be reflected as a CycL test for logical truth in the logical language.  For example, <code>(trueSubL (ExpandSubLFn () (integerp 42)))</code> states that the SubL expression <code>(integerp 42)</code> evaluates to something other than NIL.  See ExpandSubLFn for a way to denote SubL within CycL.  See also evaluate and EvaluateSubLFn, and performSubL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, trueSentence, "A KBDependentRelation (q.v.) and specialization of consistent (q.v.) that is used to state that a given CycL sentence is true.  <code>(trueSentence SENT)</code> means that <code>SENT</code> is true.\n<p>\ntrueSentence is a non-assertible predicate (see  notAssertible).  But this puts no real limitation on the expressive power of the Cyc system since one can assert that <code>SENT</code> is true by simply asserting <code>SENT</code> itself.  \n<p>\nMost occurrences of the expression 'trueSentence' in CycL assertions have been added by the canonicalizer, so that certain nested sentences (or variables occurring in argument-positions intended for sentences) can receive special handling during canonicalization or inference. See the accompanying cyclistNotes for details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, trueRule, "(trueRule TEMPLATE FORMULA) states that FORMULA is both true and an instantiation of the rule template TEMPLATE.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, transitiveViaArgInverse, "A MetaPredicate used for stating that a given predicate behaves transitively, in a specified argument-place, with respect to the inverse of a given binary predicate.  <code>(transitiveViaArgInverse PRED BINPRED N)</code> means that the <code>N</code>th argument position of <code>PRED</code> is \"transitive\" with respect to the inverse of <code>BINPRED</code>.  That is, if <code>(PRED</code> ... <code>ARGN</code> ...) and <code>(BINPRED ARGN-PRIME ARGN)</code> hold, then so does <code>(PRED</code> ... <code>ARGN-PRIME</code> ...).  For example,(transitiveViaArgInverse relationAllExists genls 2) holds; thus from (relationAllExists anatomicalParts Mammal Head-AnimalBodyPart) and (genls Horse Mammal) it follows that (relationAllExists anatomicalParts Horse Head-AnimalBodyPart).  See also transitiveViaArg.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, transitiveViaArg, "A MetaPredicate used for stating that a given predicate behaves transitively, in a specified argument-place, with respect to a given binary predicate. <code>(transitiveViaArg PRED BINPRED N)</code> means that the <code>N</code>th argument position of <code>PRED</code> is \"transitive\" with respect to <code>BINPRED</code>.  That is, if <code>(PRED ... ARG-N ...)</code> and <code>(BINPRED ARG-N ARG-N-PRIME)</code> hold, then so does <code>(PRED ... ARG-N-PRIME ...)</code>.  For example, (transitiveViaArg relationAllExists genlPreds 1) holds; thus from (relationAllExists anatomicalParts Mammal Head-AnimalBodyPart) and (genlPreds anatomicalParts physicalParts) it follows that (relationAllExists physicalParts Mammal Head-AnimalBodyPart). See also transitiveViaArgInverse.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, thereExists, "An ExistentialQuantifier (q.v.) that corresponds to the standard existential quantifier of predicate calculus.  thereExists takes as its arguments an ELVariable and an ELSentence-Assertible (such that, typically, the former occurs free in the latter).  (thereExists VAR SENT) means that there is at least one thing THING such that SENT is true of it.  That is, if some given CycL term that denotes THING were substituted for each free occurrence of VAR in SENT, the result would be a true sentence.  For example, `(thereExists ?X (mother ?X GeorgeWBush))' means that George W. Bush has a (i.e. at least one) mother; and\n<p>\n(forAll ?PER\n(implies\n(isa ?PER Person)\n(thereExists ?MOM\n(mother ?MOM ?PER))))\n<p>\nmeans that every person has a mother.  Note that some existential statements can be represented more tersely in CycL using other instances of ExistentialQuantifier, such as thereExistAtMost or thereExistExactly.  Also see the cyclistNotes for thereExists.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, thereExistExactly, "An ExistentialQuantifier (q.v.) and a specialization of both thereExistAtLeast and  thereExistAtMost (qq.v.).  Compared to the standard existential quantifier thereExists, thereExistExactly has an extra argument-place for specifying exactly how many things satisfy a given condition (specified by an CycLSentence-Assertible, in which the also-specified CycLVariable will typically occur free).  A closed sentence of the form <code>(thereExistExactly NUM VAR SENT)</code> means that there are exactly<code> NUM</code> distinct things that satisfy <code>SENT</code>, i.e. that render <code>SENT</code> true when taken as the value of <code>VAR</code>.  For example, the sentence\n<p>\n<pre>\n  (thereExistExactly 7 ?X (isa ?X Sea))\n</pre>\n<p>\nmeans that there are exactly seven seas.\n<p>\nIn the degenerate case where <code>VAR</code> does not appear free in <code>SENT</code>, then <code>(thereExistExactly NUM VAR SENT)</code> is equivalent to <code>SENT</code>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, thereExistAtMost, "An ExistentialQuantifier (q.v.) and a specialized (albeit higher arity) version of thereExists (q.v.).  Compared to the latter, standard existential quantifier, thereExistAtLeast has an extra argument-place for specifying how many things (at the most) satisfy a given condition (specified by an ELSentence-Assertible, in which the also-specified ELVariable will typically occur free).  A closed sentence of the form (thereExistAtMost NUM VAR SENT) means that there are at most NUM distinct things that satisfy SENT, i.e. that render SENT true when taken as the value of VAR.  For example, the sentence\n<p>\n<pre>\n  (thereExistAtMost 7 ?X (isa ?X Sea))\n</pre>\n<p>\nmeans that there are at most seven seas.\n<p>\nIn the degenerate case where VAR does not appear free in SENT, then (thereExistAtMost NUM VAR SENT) is equivalent to SENT.\n<p>\nSee also thereExistAtLeast, thereExistExactly.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, thereExistAtLeast, "An ExistentialQuantifier (q.v.) and a specialized (albeit higher arity) version of thereExists (q.v.).  Compared to the latter, standard existential quantifier, thereExistAtLeast has an extra argument-place for specifying how many things (at the least) satisfy a given condition (specified by an ELSentence-Assertible, in which the also-specified ELVariable will typically occur free).  A closed sentence of the form (thereExistAtLeast NUM VAR SENT) means that there are at least NUM distinct things that satisfy SENT, i.e. that render SENT true when taken as the value of VAR.  For example, the sentence\n<p>\n<pre>\n  (thereExistAtLeast 7 ?X (isa ?X Sea))\n</pre>\n<p>\nmeans that there are at least seven seas.\n<p>\nIn the degenerate case where VAR does not appear free in SENT, then (thereExistAtLeast NUM VAR SENT) is equivalent to SENT.\n<p>\nSee also thereExistAtMost, thereExistExactly.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, termOfUnit, "An InferenceRelatedBookkeepingPredicate (q.v.) that appears in system-generated assertions.  termOfUnit relates unreified reifiable non-atomic terms (\"NATs\") to indexed data structures reified by the system.  termOfUnit GAF (see CycLClosedAtomicSentence) assertions\nare added by the system when an unreified reifiable NAT first appears in a CycL sentence that is added to the knowledge base.  When such a NAT is first used in a sentence, the Cyc system automatically creates an indexed data structure to reify the NAT.  A name is automatically assigned to the new data structure by the Cyc system.  (Typically, this name is character-for-character identical to the unreified reifiable NAT itself; but one should not be misled by this into thinking that termOfUnit is a specialization of equals.)  The predicate termOfUnit relates the system-generated data structure to the original NAT.  <code>(termOfUnit DATA-STRUCTURE NAT)</code> means that the data structure <code>DATA-STRUCTURE</code> was created to reify the value of the non-atomic term <code>NAT</code>, and that <code>NAT</code> refers to <code>DATA-STRUCTURE</code>, which in turn denotes something in the range of the function in the 0th (or \"arg 0\") position of <code>NAT</code>.\n<p>\nFor example, if an assertion such as (isa (RepairingFn Automobile) ProductType) introduced the unreified reifiable NAT (RepairingFn Automobile) in the Cyc knowledge base, the system would create a data structure to reify the value of (RepairingFn Automobile).  The system would assign the name `(RepairingFn Automobile)' to the newly-created data structure.  The system would also associate the newly-reified data structure with the unreified refiable NAT by means of the termOfUnit assertion (termOfUnit (RepairingFn Automobile) (RepairingFn Automobile)).\n<p>\nNote that termOfUnit assertions are made in the BaseKB because the relation between a NAT and the data structure reified for it is meant to hold in all contexts.  \n<p>\nOne should view termOfUnit assertions as bits of bookkeeping knowledge that are very rarely, if ever, entered into the Cyc knowledge base by hand. See retainTerm -- the predicate to use to create a NART that one wishes to remain in the Cyc KB even if no substantive additional assertions are made about it. NARTs that have only termOfUnit assertions made about them are removed from the KB at build time.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, termExternalIDString, "A predicate which relates any CycLExpression to an external\nidentification string which is guaranteed to uniquely identify the\nexpression in both time and space. (termExternalIDString EXPRESSION\nID-STRING) states that the HLExternalIDString ID-STRING is the string\nrepresentation of the unique external id for the CycLExpression\nEXPRESSION. For obvious reasons, this predicate is notAssertible.\nAlso, note that this predicate is *not* a generalization of\nconstantGUID, since the latter relates a CycLConstant to an\nentirely different string.  That is to say, the termExternalIDString\nof a CycLConstant is not the same string as its constantGUID.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, termDependsOn, "(termDependsOn DEP-TERM INDEP-TERM) states that the reason for the existence of the term DEP-TERM in the Cyc knowledge base is completely dependent on the continued existence of the term INDEP-TERM.  Thus, if INDEP-TERM should ever be removed from the knowledge base, then DEP-TERM should also be immediately removed.  This relationship is automatically maintained between reified non-atomic terms (NATs) and the terms from which they are constructed.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, termChosen, "(termChosen TERM) is true for any closed Cyc TERM, and indicates that TERM has been chosen from the set of terms in the universe of discourse.  This predicate is primarily used on a variable so that the moment of choice of a particular term as the binding for that variable can be identified.  There should never be methods for generating bindings for non-closed termChosen literals.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, synonymousExternalConcept, "<code>(synonymousExternalConcept THING SOURCE STRING)</code> means that as it occurs in the external data source <code>SOURCE</code>, the string <code>STRING</code> denotes <code>THING</code>.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, substring, "A binary predicate that relates an instance of CharacterString to another intance of CharacterString. <code>(substring SUBSTRING STRING)</code> means that <code>SUBSTRING</code> is a substring of <code>STRING</code>.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, subsetOf, "This predicate relates a set or collection <code>SUB</code> to a set or collection <code>SUPER</code> whenever the extent (see extent) of <code>SUB</code> is a  subset of the extent of <code>SUPER</code>.  That is, <code>(subsetOf SUB SUPER)</code> means that  every element of (see elementOf) <code>SUB</code> is an element of <code>SUPER</code>.  subsetOf is thus a generalization both of the subset relation in set theory and of genls (q.v.); and (unlike either of those other relations) subsetOf can hold between a set and a collection, or between a collection and a set.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, skolemizeForward, "(skolemizeForward FUNC) tells the inference engine that terms should be generated for fully-bound uses of FUNC during forward inference.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, skolem, "An InferenceRelatedBookkeepingPredicate (q.v.) that appears in system-generated assertions.  skolem holds of all instances of SkolemFunction, and exists solely for internal bookkeeping purposes.  The set of supports for a skolem assertion of the form (skolem FUNCTOR) is the set of defining assertions of FUNCTOR.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, singleEntryFormatInArgs, "An instance of SpecificEntryFormatPredicate (q.v.).  <code>(singleEntryFormatInArgs PRED N)</code> means that, for any particular way of fixing the other arguments to <code>PRED</code> besides the <code>N</code>th, there is at most one thing such that, if taken as the <code>N</code>th argument, <code>PRED</code> holds of those arguments.  That is, if the sequences <code><... ARGN ...></code> and <code><... ARGN-PRIME ...></code> differ at most in their <code>N</code>th items and both <code>(PRED ... ARGN ...)</code> and <code>(PRED ... ARGN-PRIME ...)</code> hold, then <code>ARGN = ARGN-PRIME</code> (see equals).  For example, singleEntryFormatInArgs holds of biologicalMother with respect to its second argument-place, since an animal can only have one biological mother.  A predicate with a single-entry format argument-place is thus a StrictlyFunctionalPredicate (q.v.) that is \"functional\" with respect to that argument-place (see strictlyFunctionalInArgs).  Contrast with openEntryFormatInArgs.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, siblingDisjointExceptions, "A predicate that is  used to make exceptions to constraints normally imposed by some instance of SiblingDisjointCollectionType or SiblingDisjointSetOrCollectionType (qq.v.).  <code>(siblingDisjointExceptions SETORCOL1 SETORCOL2)</code> means that the pair consisting of <code>SETORCOL1</code> and <code>SETORCOL2</code> is exempt from the disjointness constraint that would otherwise be imposed because those set-or-collections are both elements of some instance of SiblingDisjointCollectionType or SiblingDisjointSetOrCollectionType.  (See these collections' comments for a full explanation of the constraints.)   \n<p>\nFor example, SensoryNerve and CranialNerve are both instances of OrganismPartType, which in turn is an instance of SiblingDisjointCollectionType.  Consequently, since SensoryNerve is not a specialization of CranialNerve (or vice versa), the two collections have a default disjointness constraint placed between them.  However, such a disjointness constraint should be blocked, since any instance of OpticNerve is an instance of both SensoryNerve and CranialNerve.  By asserting <code>(siblingDisjointExceptions SensoryNerve CranialNerve)</code>, we block the disjointness constraint between those two collections, without disturbing the constraints between each of those collections and all their other (sibling) instances of the parent collection OrganismPartType.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, sharedNotes, "A predicate-denoting constant that is an instance of DocumentationPredicate.  It is sometimes useful to include the same piece of text in the documentation of two or more constants or other CycLIndexedTerms. Rather than actually duplicating text in the Knowledge Base, one can create a SharedNote (q.v.): a piece of text that is to serve as this shared documentation, and which is itself the comment (see comment) on the SharedNote's constant.  (Thus the constants for shared-notes actually denote their own comments.)  (sharedNotes TERM NOTE) means that NOTE is a string of text (see TextString) serving as shared documentation partly about TERM.  Since SharedNotes are typically _shared_, there are likely to be one or more other indexed terms having NOTE as their shared-note as well.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, sentenceTruth, "A KBDependentRelation (q.v.) that is used to state the truth of a given CycL sentence. (sentenceTruth SENT TRUTH) means that the CycL sentence SENT has the truth value TRUTH, which is either True or False.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, sentenceImplies, "A binary predicate that represents logical entailment in CycL.  <code>(sentenceImplies ANTECEDENT CONSEQUENT)</code> means that <code>CONSEQUENT</code> can be derived from <code>ANTECEDENT</code> using purely logical transformations.  For example, this holds by double negation:\n<pre>\n  (sentenceImplies\n    (isa Muffet Poodle)\n    (not (not (isa Muffet Poodle))) .\n</pre>\nNote that there are cases in which <code>(implies ANTECEDENT CONSEQUENT)</code> is analytically true, or necessarily true in some sense of necessity weaker than logical necessity, such that <code>(sentenceImplies ANTECEDENT CONSEQUENT)</code> is false.  For example, whereas:\n<pre>\n  (implies (isa Muffet Poodle) (isa Muffet Dog))\n</pre>\nis analytically true or in some sense necessarily true,\n<pre>\n  (sentenceImplies (isa Muffet Poodle) (isa Muffet Dog))\n</pre>\nis not true, since the material conditional is not logically valid.\n<p>\nsentenceImplies also differs from implies in that whereas implies is a LogicalConnective (q.v.), sentenceImplies is merely a predicate that holds between sentences.  sentenceImplies is primarily intended to be used for rules that quantify over CycL sentences.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, sentenceEquiv, "(sentenceEquiv FORMULA-1 FORMULA-2) means that  the ELSentence-Assertible FORMULA-1 is logically equivalent to the ELSentence-Assertible FORMULA-2.  This predicate is very similar to equiv, but equiv is an instance of LogicalConnective, while sentenceEquiv is an instance of Predicate.  sentenceEquiv is primarily intended to be used for rules that quantify over CycL formulas.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, sentenceDesignationArgnum, "Used to specify which argument of a given MicrotheoryDesignatingRelation\ndesignates the CycL sentence to be interpreted in a specific microtheory.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, scopingArg, "A binary MetaRelation that relates a ScopingRelation (q.v.) to an integer indicating the argument-place of the former that takes a variable or list of variables.  (scopingArg RELN N) means that RELN's Nth argument is a variable or variable-list (see CycLVariable and CycLVariableList) such that it (they) and any other occurrences of the same variable(s) that occur free in the CycL formula serving as the \"scoped\" argument (see scopedFormulaArg) to RELN is (are) bound with respect to the entire RELN-based formula.  For example, (scopingArg thereExists 1) entails that in the sentence\n<p>\n<pre>\n  (thereExists ?KIT\n    (and\n      (isa ?KIT Cat)\n      (isa ?KIT BlackColor)))\n</pre>\n<p>\neach occurrence of the variable '?KIT' is bound by the quantifier thereExists.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, salientAssertions, "(salientAssertions TERM ASSERTION) means that ASSERTION has been deemed one of the assertions most useful to examine when one is trying to figure out the intended meaning of TERM.  Thus, ASSERTION will normally contain TERM, and should be something that has been asserted on its own in the KB as well.  Statements using salientAssertions are primarily intended for human consumption, and are not normally used by the Cyc inference engine.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, ruleTemplateDirection, "A MetaKnowledgePredicate. (ruleTemplateDirection TEMPLATE DIRECTION) states that all assertions which are instantiations of TEMPLATE should  have a direction of DIRECTION.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, ruleAfterRemoving, "Whenever a new rule is unasserted, ruleAfterRemovings are called on each literal of the rule.  The particular ruleAfterRemovings called depend on the predicate of the literal.  (ruleAfterRemoving PRED HOOK) means that HOOK will be called on each of the rule's literals whose predicate is PRED.  If the rule has multiple literals containing predicate with ruleAfterRemoving the order of execution is not guaranteed.  Also, ruleAfterRemovings are retriggered on the removal of the each argument to a rule.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, ruleAfterAdding, "Whenever a new rule is asserted, ruleAfterAddings are called on each literal of the rule.  The particular ruleAfterAddings called depend on the predicate of the literal.  (ruleAfterAdding PRED HOOK) means that HOOK will be called on each of the rule's literals whose predicate is PRED.  If the rule has multiple literals containing predicate with ruleAfterAdding, the order of execution is not guaranteed.  Also, ruleAfterAddings are retriggered on the addition of new arguments to an existing rule.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, rewriteOf, "A specialization of equals and a CycLReformulatorConstant that relates pairs of CycLClosedDenotationalTerms.   rewriteOf is, in a sense, a \"directional\" version of equals.  <code>(rewriteOf FAVORED-TERM DISFAVORED-TERM)</code> means that (1) <code>FAVORED-TERM</code> and <code>DISFAVORED-TERM</code> denote the same thing, and (2) <code>FAVORED-TERM</code> is deemed worthy of being privileged over <code>DISFAVORED-TERM</code> in the following senses: assertions made on <code>DISFAVORED-TERM</code> will be propagated to <code>FAVORED-TERM</code>, and whenever possible attempts to reason about  <code>DISFAVORED-TERM</code> will be transformed into attempts to reason about <code>FAVORED-TERM</code>.  The propagated assertions will differ from the original assertions only in that the propagated assertions will be the result of substituting <code>FAVORED-TERM</code> for <code>DISFAVORED-TERM</code> wherever <code>DISFAVORED-TERM</code> occurs in the original assertions.  Note that substitution does not happen in the opposite direction.  That is, assertions containing <code>FAVORED-TERM</code> will not propagate to <code>DISFAVORED-TERM</code>.\n<p>\nOne common use of rewriteOf is that in which <code>FAVORED-TERM</code> is a syntactically simpler term than <code>DISFAVORED-TERM</code>.  For example, <code>FAVORED-TERM</code> may contain fewer nested terms that denote Function-Denotationals than does <code>DISFAVORED-TERM</code>.  (rewriteOf UnitedStatesNavy (NavyFn UnitedStatesOfAmerica)) is a good example of this common sort of use.\n<p>\nNote that rewriteOf expresses a strictly conventional notion of \"directional\" equality. Pragmatic considerations, not ontology, will dictate which term is chosen to occur as the privileged (left-hand side) term in a rewriteOf assertion.  Thus, in the example the fact that simpler terms are generally easier to use (remember, manipulate, etc.) dictates that UnitedStatesNavy should be a rewrite of (NavyFn UnitedStatesOfAmerica), and not vice versa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, resultQuotedIsa, "A binary MetaRelation predicate that holds between functions and expression-types. resultQuotedIsa indicates that any value returned by a given Function-Denotational is a \"quoted instance\" of a given expression-type.   More correctly, <code>(resultQuotedIsa FUNC TYPE)</code> means that, for any term-sequence <code>ARGS</code>, if the expression <code>(FUNC . ARGS)</code> is an admittedNAT (q.v.), then it is an instance of the SubLExpressionType <code>TYPE</code>.  That is, the following holds:\n<pre>\n  (quotedIsa (FUNC . ARGS) TYPE)\n</pre>\nAnd, equivalently, so does:\n<pre>\n  (isa (Quote (FUNC . ARGS)) TYPE)\n</pre>\n\nTo contrast this predicate with resultIsa: <code>(resultIsa FUNC COL)</code> holds just in case each defined term of the form <code>(FUNC . ARGS)</code> <i>denotes</i> an instance of <code>COL</code>, whereas <code>(resultQuotedIsa FUNC COL)</code> holds just in case each admitted (i.e. syntactically and semantically well-formed) term of the form <code>(FUNC . ARGS)</code> <i>is itself</i> an instance of <code>COL</code>.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, resultIsaArgIsa, "(resultIsaArgIsa FUNC INT) means that the NAT resulting from a use of FUNC is a member of the same collections that the term\nin arg position INT is a member of.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, resultIsaArg, "A MetaRelation predicate.  <code>(resultIsaArg FUNC N)</code>  means that the value returned by <code>FUNC</code> for any given sequence of arguments  is an instance of the <code>N</code>th argument in that sequence.  That is, if  <code>(FUNC ARG1 ... ARGN ...) = VALUE</code>, then <code>(isa VALUE ARGN)</code> holds.  Obviously, <code>ARGN</code> must be a collection; so <code>FUNC</code>'s <code>N</code>th argument-place is likely to be constrained (via argIsa) to be an instance of Collection or some specialization thereof.\n<p>\nFor example, (resultIsaArg The 1) entails that (The Dog) is an instance of Dog.\n<p>\nSee also resultGenlArg and resultIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, resultIsa, "A binary MetaFunction that is used to indicate that any value returned by a given function (see Function-Denotational) is an instance of a given collection.  <code>(resultIsa FUNC COL)</code> means that <code>FUNC</code> returns an instance of <code>COL</code> for any sequence of arguments for which <code>FUNC</code> is defined.  That is, <code>(isa (FUNC . ARGS) COL)</code> holds for any sequence <code>ARGS</code> for which <code>FUNC</code> has a value (see valueOfFunctionForArgs and relationDomain).  \n<p>\nFor example, <code>(resultIsa PlusFn ScalarInterval)</code> holds, and it entails (e.g.) <code>(isa (PlusFn 2 2) ScalarInterval)</code>.  \n<p>\nSee also resultGenl.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, resultGenlArg, "A MetaFunction predicate that holds of certain CollectionRelatingFunctions with respect to certain argument-places.  (resultGenlArg FUNC N) means that FUNC always returns a subcollection of its own corresponding Nth-place argument, and that FUNC is \"genls preserving\" in that argument-place.  More precisely: (i) the value of FUNC for any sequence of arguments for which it is defined is a subcollection of the Nth item in that sequence (i.e. (genls (FUNC ARG1..ARGN..) ARGN)) and (ii) (preservesGenlsInArg FUNC N) holds.  For example, (resultGenlArg JuvenileFn 1) entails (genls (JuvenileFn Dog) Dog) and -- given that (genls Dog Mammal) --   (genls (JuvenileFn Dog) (JuvenileFn Mammal)).  See also resultIsaArg and resultGenl.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, resultGenl, "A MetaFunction that is used to specify that a \ngiven collection is a supercollection of any value returned by a given CollectionDenotingFunction (q.v.).  <code>(resultGenl COLFUNC COL)</code> means that when <code>COLFUNC</code> is applied to any sequence of arguments <code>ARGS</code> for which it is defined, the resulting value will be a subcollection of <code>COL</code>.  That is, <code>(genls (COLFUNC . ARGS) COL)</code> holds.  \n<p>\nFor example, <code>(resultGenl UsingAFn Action)</code> implies that the collection of acts done using any given type of object is a type of action, <code>(resultGenl AttemptingFn PurposefulAction)</code> implies that the attempts at a given type of action constitute a type of purposeful act, and <code>(resultGenl JointTypeBetweenFn Joint-Physical)</code> means that the collection of joints between two given types of things is a type of physical joint.  \n<p>\nSee also resultIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, requiredArg3Pred, "A MetaPredicate for stating that every instance of a given collection is related (as the \"arg3\") to some things by a given predicate.  <code>(requiredArg3Pred COL PRED)</code>  means that for every instance <code>INST</code> of <code>COL</code>, there exists some sequence  <<code>X1</code>, <code>X2</code>,..., <code>Xn</code>> such that <code>(PRED X1 X2 INST</code> ... <code>Xn)</code> holds.  For  example, (requiredArg3Pred ConflictEvent opponentsInConflict) means that every conflict involves (at least) two opponents.  See also requiredArg1Pred and requiredArg2Pred.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, requiredArg2Pred, "A MetaPredicate for stating that every  instance of a given collection is related (as the \"arg2\") to some  thing or things by a given predicate.  (requiredArg2Pred COL PRED)  means that for every instance INST of COL, there exists some sequence  <X1, X3, ..., Xn> of such that (PRED X1 INST X3 ... Xn) holds.  For  example, (requiredArg2Pred Side objectSides) means that every  side is the side of at least one object.  See also requiredArg1Pred.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, requiredArg1Pred, "A MetaPredicate for stating that every instance of a given collection is related to some thing or things by a given predicate.  <code>(requiredArg1Pred COL PRED)</code> means that for every  instance <code>INST</code> of <code>COL</code>, there exists some sequence <code>ARGS</code> such that <code>(PRED INST . ARGS)</code> holds.  For example, (requiredArg1Pred Organization hasMembers) means that every organization has at least one member.  \n<p>\nSee also requiredArg2Pred and requiredArg3Pred.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationMemberInstance, "(relationMemberInstance PRED GROUP INST) states that for every MEMBER of GROUP the following is true: (PRED MEMBER INST).  This predicate enables one to make claims about the members of a group by referencing only the group itself.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, relationInstanceMember, "(relationInstanceMember PRED INST GROUP) states that for every MEMBER of GROUP the following is true: (PRED INST MEMBER).  This predicate enables one to make claims about the members of a group by referencing only the group itself.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, relationInstanceExists, "A ternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate holds between a specified thing and some instance of a given collection.  <code>(relationInstanceExists PRED THING COL)</code> means that there exists an instance <code>INST</code> of <code>COL</code> such that <code>(PRED THING INST)</code> holds.  It is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n<pre>\n     (thereExists ?INST\n          (and\n               (isa ?INST COL)\n               (PRED THING ?INST))) .\n</pre>\n<p>\nFor example, '(relationInstanceExists geographicalSubRegions Iran OilField)' means that there exists an oilfield in Iran.  Cf. relationExistsInstance, and see the shared NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, relationInstanceAll, "A ternary RuleMacroPredicate that is used to state that a given binary predicate holds between a given thing and all instances of a given collection. (relationInstanceAll BINPRED THING COL) means that THING bears the relation PRED to every instance INST of COL such that (BINPRED THING INST) holds.  It is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n(implies\n(isa ?INST COL)\n(BINPRED THING ?INST)) .\n<p>\nFor example, `(relationInstanceAll geopoliticalSubdivision UnitedStatesOfAmerica State-UnitedStates)' means that each State in the Union is a subdivision of the United States.  Cf. relationAllInstance, and see NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExpansion, "ARG2 is a CycL expression which indicates the meaning of expressions in which the relation ARG1 is the operator (i.e., in which ARG1 is in the 0th argument position).  In ARG2, the variables ?arg1, ?arg2, ?arg3, ?arg4, and ?arg5 correspond to the objects in the argument positions 1, 2, 3, 4, and 5, respectively, in expressions which have ARG1 as the operator.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExistsMinAll, "A quaternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate stands in a certain numerical relation with respect to two collections.  (relationExistsMinAll BINPRED COL1 COL2 N) means that for any instance INST of COL2, there are at least N instances of (INST(1), ..., INST(N)) of COL1 such that (BINPRED INST(i) INST) holds (for 1 <= i <= N).  This is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n(implies\n(isa INST COL2)\n(thereExistAtLeast N ?INST-I\n(and\n(isa ?INST-I COL1)\n(BINPRED ?INST-I INST)))) .\n<p>\nFor example, `(relationExistsMinAll physicalParts Hand Finger 1)' means that every finger is part of at least one hand.  Cf. relationAllExistsMin, and see the shared NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExistsMaxAll, "A quaternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate stands in a certain numerical relation with respect to two collections.  <code>(relationExistsMaxAll BINPRED COL1 COL2 N)</code> means that for any instance <code>INST</code> of <code>COL2</code>, there are at most <code>N</code> instances of <code>(INST(1), ..., INST(N))</code> of <code>COL1</code> such that <code>(BINPRED INST(i) INST)</code> holds (for 1 <= <code>i</code> <= <code>N</code>).  This is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<pre>\n  (implies\n    (isa INST COL2)\n    (thereExistAtMost N ?INST-I\n      (and\n        (isa ?INST-I COL1)\n        (BINPRED ?INST-I INST)))).\n</pre>\nFor example, <code>(relationExistsMaxAll physicalParts Hand Finger 1)</code> means that every finger is part of at most one hand.  Cf. relationAllExistsMax, and see the shared NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExistsInstance, "A ternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate holds between some instance of a given collection and a given thing.  <code>(relationExistsInstance BINPRED COL THING)</code> means that there exists an instance <code>INST</code> of <code>COL</code> such that <code>(BINPRED INST THING)</code> holds.  This is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n<pre>\n(thereExists ?INST\n  (and\n     (isa ?INST COL)\n     (PRED ?INST THING))) .\n</pre>\n<p>\nFor example, (relationExistsInstance eventOccursAt IllegalDrugActivity Sweden) means that there exists illegal drug activity in Sweden.  See also the shared  NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExistsCountAll, "A quaternary RuleMacroPredicate (q.v.) that is used to state that a given binary predicate stands in a certain numerical relationship with respect to two collections.  (relationExistsCountAll BINPRED COL1 COL2 N) means that for every instance INST of COL2 there are exactly N instances of COL1 (INST(1), ..., INST(N)) such that (BINPRED INST(i) INST) holds (for 1 <= i <= N).  It is equivalent to (and so can be used in effect as shorthand for) the more complex form:\n<p>\n<pre>\n  (implies\n    (isa ?INST COL2)\n    (thereExistExactly N ?INST-I\n      (and\n             (isa ?INST COL1)\n             (BINPRED ?INST-I ?INST)))) .\n</pre>\n<p>\nFor example, (relationExistsCountAll anatomicalParts Animal Head-AnimalBodyPart 1) means that every animal head is a part of exactly one animal.  See also relationAllExistsCount and NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationExistsAll, "A ternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate stands in a certain relation to two collections.  <code>(relationExistsAll BINPRED COL1 COL2)</code> means that for any instance <code>INST2</code> of <code>COL2</code>, there exists some instance <code>INST1</code> of <code>COL1</code> such that <code>(BINPRED INST1 INST2)</code> holds.  It is equivalent to (and can thus be used in effect as shorthand for) the more complex form\n<pre>\n  (implies\n    (isa ?INST2 COL2)\n    (thereExists ?INST1\n      (and\n        (isa ?INST1 COL1)\n        (BINPRED ?INST1 ?INST2)))).\n</pre>\nFor example, <code>(relationExistsAll adjacentTo Harbor PortCity)</code> means that for every port city there exists a harbor to which the city is adjacent.  See also relationAllExists and NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationAllInstance, "A ternary RuleMacroPredicate that is used to state that a given binary predicate holds between all instances of a given collection and a given thing. <code>(relationAllInstance PRED COL THING)</code> means that every instance <code>INST</code> of <code>COL</code> bears the relation <code>PRED</code> to <code>THING</code> such that <code>(PRED INST THING)</code> holds.  It is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n<pre>\n     (implies\n          (isa ?INST COL)\n          (PRED ?INST THING)) .\n</pre>\n<p>\nFor example, '(relationAllInstance maxSpeed GolfCart (MilesPerHour 15))' means that the maximum speed of every golf cart is 15 miles per hour. Cf. relationInstanceAll, and see NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, relationAllExistsMin, "A quaternary RuleMacroPredicate that can be used to state that a given binary predicate stands in a certain numerical relationship with respect to two collections.  (relationAllExistsMin BINPRED COL1 COL2 N) means that for any instance INST of COL1 there are at least N instances (INST(1), ..., INST(N)) of COL2 such that (BINPRED INST INST(i)) holds (for 1 <= i <= N).  This is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n(implies\n(isa ?INST COL1)\n(thereExistAtLeast N ?INST-I\n(and\n(isa ?INST-I COL2)\n(BINPRED ?INST ?INST-I)))) .\n<p>\nFor example, `(relationAllExistsMin subEvents EatingEvent Swallowing 1)' means that every act of eating includes at least one swallowing. Cf. relationExistsMinAll, and see NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationAllExistsMax, "A quaternary RuleMacroPredicate that can be used to state that a given binary predicate stands in a certain numerical relationship with respect to two collections.  (relationAllExistsMax BINPRED COL1 COL2 N) means that for any instance INST of COL1 there are at most N instances (INST(1), ..., INST(N)) of COL2 such that (BINPRED INST INST(i)) holds (for 1 <= i <= N).  This is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n(implies\n(isa ?INST COL1)\n(thereExistAtMost N ?INST-I\n(and\n(isa ?INST-I COL2)\n(BINPRED ?INST INST-I)))) .\n<p>\nFor example, `(relationAllExistsMax anatomicalParts Dog Leg 4)' means that all dogs have at most four legs.\n<p>\nCf. relationExistsMaxAll; also see NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationAllExistsCount, "A quaternary RuleMacroPredicate that is a specialization of both relationAllExistsMin and relationAllExistsMax (qq.v.).  <code>(relationAllExistsCount BINPRED COL1 COL2 N)</code> means that for any instance <code>INST</code> of <code>COL1</code> there are exactly <code>N</code> instances <code>INST1</code>, ..., <code>INSTn</code> of <code>COL2</code> such that <code>(BINPRED INST INSTi)</code> holds (for 1 <code><= i <= N)</code>. It is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<pre>\n  (implies\n    (isa ?INST COL1)\n    (thereExistExactly N ?INST-I\n      (and\n        (isa ?INST-I COL2)\n        (BINPRED ?INST ?INST-I))))\n</pre>\n<p>\n(wherein the variable <code>?INST</code> is interpreted as if it were bound by an initial universal quantifier).\n<p>\nFor example, <code>(relationAllExistsCount anatomicalParts Dog Leg 4)</code> means that all dogs have four legs.\n<p>\nCf. relationExistsCountAll, and see the NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationAllExists, "A ternary RuleMacroPredicate (q.v.) that can be used to state that a given binary predicate stands in a certain relation to two collections. <code>(relationAllExists BINPRED COL1 COL2)</code> means that for any instance <code>INST1</code> of <code>COL1</code>, there exists some instance <code>INST2</code> of <code>COL2</code> such that <code>(BINPRED INST1 INST2)</code> holds.  It is equivalent to (and can thus be used in effect as shorthand for) the more complex form:\n<p>\n<pre>\n  (implies\n    (isa ?INST1 COL1)\n    (thereExists ?INST2\n      (and\n        (isa ?INST2 COL2)\n        (BINPRED ?INST1 ?INST2)))).\n</pre>\n<p>\nFor example, <code>(relationAllExists temporalBoundsContain CalendarWeek Wednesday)</code> means that every calendar week contains a Wednesday.  See also relationExistsAll and NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, relationAll, "A binary RuleMacroPredicate that relates a given unary predicate to a collection of things that the predicate holds of.  <code>(relationAll PRED COL)</code> means that, for every instance <code>INST</code> of <code>COL</code>, <code>(PRED INST)</code> holds.  Thus <code>(relationAll PRED COL)</code> is equivalent to -- and so can be used in effect as shorthand for -- (the unversal closure of) the more complex form:\n<pre>\n  (implies \n    (isa <b>?INST</b> COL) \n    (PRED <b>?INST</b>)) .\n</pre>\nFor example, <code>(relationAll assertedSentence CycLAssertion)</code> means that all CycLAssertions are asserted sentences.  \n<p>\nSee also relationOnly and the shared NoteAboutUseOfRuleMacroPredicates.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulatorRuleProperties, "(reformulatorRuleProperties PROP RULE) means that RULE has\nthe property PROP.  Most reformulator directives express an assertion\nof the form 'The reformulator should do X', for some X.  In contrast,\nreformulatorRuleProperties assertions are stronger, in that they\nexpress intrinsic properties of reformulator rules, and it is a\nconsequence that the reformulator should do X in order to be\ncorrect.  For example, a reformulator directive could say 'For this\nreformulator rule, if in tersification mode, the reformulator should reformulate\nthe second argument into the first argument.', whereas a reformulator\nrule property could say 'This reformulator rule's first argument is\nmore terse than its second argument.'  The latter implies the former.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulatorRule, "(reformulatorRule EXPR-1 EXPR-2), asserted in the\nmicrotheory MT, means that EXPR-1 may be reformulated into EXPR-2 (or\nvice versa, based on meta-properties of this rule and what mode the\nreformulator is in) in MT\nor a specMt thereof.  Free variables in EXPR-1 and EXPR-2 are shared,\nand may bind with CycL expressions which match the template. Truth\nand semantics are not necessarily preserved (see TruthPreservingReformulation).\nUse the more specific predicates reformulatorEquiv and reformulatorEquals\nwhen applicable.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulatorEquiv, "A CycLReformulationRulePredicate that relates two CycL sentences.  When asserted in a Microtheory MT, (reformulatorEquiv SENTENCE-1 SENTENCE-2) means that the CycLSentence SENTENCE-1 may be reformulated into the CycLSentence SENTENCE-2, or vice versa (based on meta-properties of this rule and what mode the reformulator is in), in any Microtheory SPEC-MT such that (genlMt SPEC-MT MT) holds.  Free variables in SENTENCE-1 and SENTENCE-2 are shared, and may bind with CycL sentences which match the template.  Note that (reformulatorEquiv SENTENCE-1 SENTENCE-2) does _not_ necessarily imply (equiv SENTENCE-1 SENTENCE-2), although this implication would hold if the reformulation is a TruthPreservingReformulation (q.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulatorEquals, "A CycLReformulationRulePredicate that relates two CycL denotational terms.  When asserted in a Microtheory MT, (reformulatorEquals TERM-1 TERM-2) means that the CycLDenotationalTerm TERM-1 may be reformulated into the CycLDenotationalTerm TERM-2, or vice-versa (based on meta-properties of this rule and what mode the reformulator is in), in any Microtheory SPEC-MT such that (genlMt SPEC-MT MT) holds.  Free variables in TERM-1 and TERM-2 are shared, and may bind with CycL terms which match the template.  Note that (reformulatorEquals TERM-1 TERM-2) does _not_ necessarily imply (equals TERM-1 TERM-2), although this implication would hold if the reformualtion is a TruthPreservingReformulation (q.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulationPrecondition, "(reformulationPrecondition DIRECTION PRECONDITION RULE), asserted in\nthe microtheory MT, means that the CycLReformulator may only use\nRULE in MT in the DIRECTION direction (reformulating the 'from' arg\ninto the 'to' arg) if PRECONDITION holds.  PRECONDITION must be a closed CycL query, which will be asked during reformulation, and either proven true or fail to be proven.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, reformulationDirectionInMode, "(reformulationDirectionInMode DIRECTION MODE RULE), when\nasserted in the microtheory MT, tells the CycLReformulator whether to use RULE\nin the forward (ReformulationForwardDirection) or backward\n(ReformulationBackwardDirection) direction when reformulating\nCycLExpressions in MT or a specMt thereof, and when operating in the mode MODE.\nIt will reformulate the 'from' arg into the 'to' arg,\nbased on DIRECTION.  ReformulationNeitherDirection\nindicates the rule is not to be used at all in this mt.\nThis concept of direction has nothing to do with the forward vs. backward rule\ndistinction in inference.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, ratioOfTo, "The predicate corresponding to QuotientFn.  (ratioOfTo NUM-1 NUM-2 NUM-3) holds just in case the ratio of NUM-1 to NUM-2 is NUM-3; that is, just in case  (QuotientFn NUM-1 NUM-2) = NUM-3.  For example, (ratioOfTo 1 2 0.5) is true because 1 divided by 2 is 0.5.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quotedIsa, "A binary MetaLanguagePredicate (q.v.) that relates CycL expressions to the SubLExpressionTypes (q.v.) of which they are instances.  quotedIsa is thus like a restricted version of isa (q.v.), but with one important difference: the first argument-place of quotedIsa is \"implicitly quoted\" (see quotedArgument).  So a ground atomic sentence of the form <code>(quotedIsa THING EXPR-TYPE)</code> does <i>not</i> mean that <code>THING</code> itself is an instance of <code>EXPR-TYPE</code>.  Rather, such a sentence is partly self-referential, and means that the particular <i>CycL expression</i> appearing in the sentence's own first argument-position is an instance of <code>EXPR-TYPE</code>.  Thus, quotedIsa provides a convenient shorthand for stating certain things that would otherwise require explicit quotation (or some other device for naming expressions).\n<p>\nThis is better illustrated with a specific example.  Suppose we wish to state that the CycL constant <code>IndianOcean</code> is an instance of the CycL expression type PublicConstant.  We cannot express this with the straightforward isa sentence <code>(isa IndianOcean PublicConstant)</code>, as that states the falsehood that the IndianOcean itself -- which is <i>not</i> a constant but a body of water -- is a public constant.  But we can express precisely what we want like this:\n<pre>\n  (quotedIsa IndianOcean PublicConstant) .\n</pre>  \nNow quotedIsa is a MacroRelation (q.v.), and by its expansion any given quotedIsa sentence is equivalent to some isa sentence with an <i>explicitly</i> quoted first argument.  The sentence displayed above turns out to be equivalent to: \n<pre>\n  (isa (Quote IndianOcean) PublicConstant).\n</pre> \nBut the quotedIsa version has two related practical advantages over the isa version.  First, the former is syntactically simpler than the latter.  Second, the simpler syntax of the former makes it easier to browse in the Knowedge Base: while the quotedIsa version is conveniently indexed under the KB Browser page for the constant <code>IndianOcean</code>, the isa version would apparently be indexed under a separate, brand new page for the term <code>(Quote IndianOcean)</code>. Generalizing the point, quotedIsa lets us avoid having potentially to double the number of pages currently in the browser.\n<p>\nFor the semantically more complicated (but rarely encountered) case in which quotedIsa's first argument-place is filled with an <i>open</i> expression, see the accompanying cyclistNotes.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, quotedDefnSufficient, "A CycInferenceDescriptorPredicate. (quotedDefnSufficient COL TEST) means that TEST is the name of a piece of code in the SubL implementation of Cyc that specifies, and tests for, a sufficient condition for a CycL term's denoting a quoted instance of (see quotedIsa) the collection COL. If TEST returns `T' (for `True') when applied to a particular term, then that term's denotatum is considered to be a quoted instance of COL. Note that TEST isn't necessarily a necessary test for quoted membership in COL; that is, not all quoted instances of COL must pass the test, unless TEST is also a defnNecessary for COL, or the term is asserted to be a quoted instance of COL using quotedIsa. See the related predicates quotedDefnNecessary and quotedDefnIff.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quotedDefnNecessary, "A CycInferenceDescriptorPredicate. (quotedDefnNecessary COL TEST) means that TEST is the name of a piece of code in the SubL implementation of Cyc that specifies, and tests for, a necessary condition for a CycL term's denoting a quoted instance of (see quotedIsa) the collection COL. Only if TEST returns `T' (for `True') when applied to a particular term can that term's denotatum be considered a quoted instance of COL; all terms that denote quoted instances of COL must fulfill TEST's requirements, although there may be additional requirements for denoting an instance of COL as well. However, terms asserted to be quoted instances of the collection COL using quotedIsa are exempt from fulfilling TEST's requirements. See also quotedDefnSufficient and quotedDefnIff.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quotedDefnIff, "A CycInferenceDescriptorPredicate. (quotedDefnIff COL TEST) means that TEST is the name of a piece of code in the SubL implementation of Cyc that specifies, and tests for, a necessary and sufficient condition for a CycL term's denoting a quoted instance of (see quotedIsa) the collection COL. If and only if TEST returns `T' (for `True') when applied to a particular term can that term's denotatum be considered a quoted instance of COL; all and only terms that denote quoted instances of COL must fulfill TEST's requirements.  However, terms asserted to be quoted instances of the collection COL using quotedIsa are exempt from fulfilling TEST's requirements. See also quotedDefnNecessary and quotedDefnSufficient.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quotedArgument, "The main (longer) comment on this predicate was written to explain the role of quotedArgument in an earlier approach for referring to CycL expressions in the CycL language that is currently (April 2002) being phased out in favor of a new approach.  Whereas the earlier approach enabled self-reference only by means of a sort of \"implicit quotation\", the new approach involves a mechanism for explicitly quoting CycL expressions (by putting them inside something analogous to quotation marks).  quotedArgument, unlike quotedCollection (q.v.), still has a role to play with respect to the new approach, and its main comment will soon revised to better explain that role.  For an explanation of the new approach to quoting, see the shared NoteAboutQuotingInCycL and the constants that share that note.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, quotedArgument, "A specialization of opaqueArgument (q.v.).  quotedArgument is a binary MetaLanguagePredicate used to state that a given argument-place of a given CycL relation-denoting expression is an <i>implicitly quoted</i> context, in the sense that a symbol appearing in that context denotes <i>itself</i> (as opposed to whatever that symbol might denote, if anything, in ordinary non-quoted contexts).  \n<p>\n<code>(quotedArgument REL N)</code> means that in a closed compound expression built from <code>REL</code> -- i.e. a ground atomic sentence (or <i>gaf</i>) if <code>REL</code> is a predicate or a closed non-atomic term (or <i>nat</i>) if <code>REL</code> is a function -- the term (i.e. the CycL expression) <code>EXPR</code> appearing in <code>REL</code>'s <code>N</code>th argument-place is taken to denote <i>itself</i> (i.e. that very expression <code>EXPR</code>).  \n<p>\nquotedArgument thus makes possible a kind of a self-reference in CycL. Relations with quoted argument-places can be used to make statements about particular CycL expressions, without quoting those expressions explicitly (cf. Quote).\n<p>\nFor example, the first argument-place of the predicate myCreator is quoted and its second argument-place is not.  Thus in the sentence <code>(myCreator PlanetEarth Maeda)</code>, the CycL constant <code>PlanetEarth</code> denotes that constant itself (and not the actual planet Earth), while the constant <code>Maeda</code> simply denotes the person Maeda (and not a CycL expression).  Hence the above sentence correctly states that Maeda created (i.e. reified) the CycL constant <code>PlanetEarth</code>; it does <i>not</i> state the absurdity that he created the planet Earth.  In ordinary non-quoted contexts, of course, <code>PlanetEarth</code> denotes the planet and not the constant.\n<p>\nSee also quotedCollection and NoteAboutUseVersusMention.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, querySentence, "querySentence is an HL level predicate that allows for special handling of a sentence (especially nested sentences) as a top level query during the process of canonicalization.  querySentence is not-assertible.  It should not be used in any assertions.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quantitySubsumes, "A specialization of both quantityIntersects and intangibleParts, this predicate relates a given numerically measurable ScalarInterval to those scalar intervals that it subsumes or that \"fall completely inside\" it.    <code>(quantitySubsumes SUPER SUB)</code> means that both (i) the maximum (see maxQuantValue) of <code>SUPER</code> is greaterThanOrEqualTo the maximum of <code>SUB</code> and (ii) the minimum (see minQuantValue) of <code>SUPER</code> is lessThanOrEqualTo the minimum of <code>SUB</code>.\n<p>\nFor example, (Meter 2 5) -- the Distance of between 2 and 5 meters inclusive -- subsumes both (Meter 3 4) and (Meter 3 5), but not (Meter 3 6).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, quantityIntersects, "A binary predicate that relates numerically measurable ScalarIntervals (q.v.) that intersect or overlap.  <code>(quantityIntersects SCALAR1 SCALAR2)</code> means that  <code>SCALAR1</code> and <code>SCALAR2</code> intersect. More precisely: there is  some scalar interval (which might even be as small as an  instance of ScalarPointValue) that is subsumed by (see quantitySubsumes) both <code>SCALAR1</code> and <code>SCALAR2</code>.\n<p>\nFor example, (Meter 2 5) -- the Distance of between 2 and 5 meters inclusive -- intersects both (Meter 3 4) and (Meter 3 7), but does not intersect (Meter 6 7).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, prettyString, "(prettyString TERM STRING) means that STRING is the English word or expression (sequence of words) commonly used to refer to TERM.  The predicate prettyString is used by the code which generates CycL to English paraphrases, but its applicability is not restricted to this use.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, preservesGenlsInArg, "<code>(preservesGenlsInArg FUNCTION N)</code> means that the CollectionDenotingFunction <code>FUNCTION</code> has the following properties: \n<p>\n(1) argument place <code>N</code> of <code>FUNCTION</code> is constrained to instances of Collection, and <br>\n(2) if <code>COLLECTION1</code> and <code>COLLECTION2</code> can both serve as the <code>N</code>th argument of <code>FUNCTION</code>, and <code>COLLECTION2</code> is a specialization of <code>COLLECTION1</code> (so that <code>(genls COLLECTION2 COLLECTION1)</code> holds), then <code>(genls (FUNCTION ARG_1 ARG_2 ... ARG_N-1 COLLECTION2   ... ARG-M) (FUNCTION ARG_1 ARG_2 .. ARG_N-1 COLLECTION1 ... ARG-M))</code> also holds, where <code>ARG_1</code>, <code>ARG_2</code>, ..., <code>ARG_M</code> (where <code>M</code> is the arity of <code>FUNCTION</code>) are admitted arguments for <code>FUNCTION</code> (see admittedArgument).  \n<p>\nFor example, (preservesGenlsInArg GroupFn 1) holds because <code>(genls COL-2 COL-1)</code> implies <code>(genls (GroupFn COL-2) (GroupFn COL-1))</code>, for all collections <code>COL-1</code> and <code>COL-2</code> that satisfy the argument constraints for GroupFn.  \n<p>\nSimilarly, (preservesGenlsInArg SubcollectionOfByTypeFn 2) holds because <code>(genls COL-2 COL-1)</code> implies <code>(genls (SubcollectionOfByTypeFn FIXED-ARG COL-2) (SubcollectionOfByTypeFn FIXED-ARG COL-1))</code> for all collections <code>COL-1</code> and <code>COL-2</code>, and all arguments <code>FIXED-ARG</code>, that satisfy the appropriate argument constraints for SubcollectionOfByTypeFn.  See also the collection GenlsPreservingFunction.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, predicateConventionMt, "(predicateConventionMt PRED MT) means that the predicate extent of the predicate PRED, by convention, is asserted in MT.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, pragmaticRequirement, "A MetaKnowledgePredicate that is used to place a certain kind of pragmatic precondition on the use of a given asserted rule (see CycLRuleAssertion). (pragmaticRequirement SENTENCE RULE) means that SENTENCE expresses a necessary condition on RULE's being used in any proof carried out by the Cyc inference engine. The effect of asserting this is virtually the same as that of asserting (exceptWhen (unknownSentence SENTENCE) RULE): it blocks the use of RULE when SENTENCE is not currently \"known\" by the Cyc system to be true. SENTENCE should not contain disjuncts (or canonicalize into disjuncts). Upon assertion to the knowledge base, a pragmaticRequirement sentence is transformed by the canonicalizer into a rule involving pragmaticallyNormal (q.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, pragmaticallyNormal, "A MetaKnowledgePredicate that is used to express that certain pragmatic preconditions on a given rule are satisfied.  The predicate takes as arguments a list of CycL variables and an asserted rule (see CycLRuleAssertion) in which those variables occur \"free\".  At the EL (\"epistemological level\"), pragmaticallyNormal sentences are not asserted as GAFs, but appear instead as the antecedents of system-generated implies rules.  For a given sequence of values for the respective variables VAR1, ..., VARn,    (pragmaticallyNormal (TheList VAR1 ... VARn) RULE) means that any pragmatic preconditions placed on RULE's being used by the Cyc inference engine (see pragmaticRequirement) are satisfied with respect to those values.\n<p>\nLet's make this more precise and explicit.  A pragmatic precondition for a rule is written like so:\n<p>\n(pragmaticRequirement CONDITION RULE)\n<p>\nand gets canonicalized into a rule involving pragmaticallyNormal like so:\n<p>\n(implies\n(pragmaticallyNormal (TheList VAR1 ... VARn) RULE)\nCONDITION),\n<p>\nwhere VAR1, ..., VARn are all and only the variables that occur free in RULE and thus include all (and possibly only) the variables that occur free in CONDITION (i.e. as RULE and CONDITION explicitly appear in the KB browser, without consideration of their having \"implicit\" initial universal quantifiers).\n<p>\nThe above pragmaticallyNormal rule is used in inference as though it were a constraint rule.  If CONDITION does not hold for a given sequence of values <VAL1, ..., VALn> for its variables <VAR1, ..., VARn>, then those values are not \"pragmatically normal\" for RULE; and hence inference will not proceed using <VAL1, ..., VALn> with RULE.\n<p>\nThe effect of the foregoing is that any asserted rule RULE is implicitly treated by the Cyc inference engine as if it had the form\n<p>\n(implies\n(pragmaticallyNormal (TheList VAR1 ... VARn) RULE)\nRULE)\n<p>\n(with VAR1, ..., VARn as described above).\n<p>\nThis convention allows the logical content of a rule to be expressed independently of any pragmatic preconditions for its being used in inference.\n<p>\nAlso see abnormal, which is syntactically similar and has a related  interpretation that makes it roughly the complement of pragmaticallyNormal.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, pointQuantValue, "A NumericComparisonPredicate and a specialization of numericallyEquals, minQuantValue, and maxQuantValue (qq.v.).  pointQuantValue is essentially the relation numericallyEquals restricted to scalar point-values, with the additional proviso that its first argument must be given using a reifiable CycL term.  Thus a sentence of the form\n<p>\n\t<code>(pointQuantValue REIFIABLE-TERM OTHER-TERM)</code>\n<p>\nis true if and only if <code>REIFIABLE-TERM</code> is a CycLReifiableDenotationalTerm (q.v.), and <code>REIFIABLE-TERM</code> and <code>OTHER-TERM</code> denote the same ScalarPointValue (q.v.).\n<p>\nThis predicate is primarily used to state the equivalence of a reified scalar-denoting term (e.g. 'Zero', 'AvogadrosNumber', 'SpeedOfLight') with an appropriate unreifiable term.  For example, both of the following sentences hold:\n<p>\n<pre>\n  (pointQuantValue Zero 0)\n</pre>\n<p>\n<pre>\n  (pointQuantValue\n    SpeedOfLight\n    (PerFn (Mile 186000) (HoursDuration 1))'  .\n</pre>", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, performSubL, "<code>(performSubL SUBL)</code> states that the SubL expression <code>SUBL</code> has been successfully evaluated for side-effect.  performSubL is evaluated as late in an inference proof as possible.  See also trueSubL which evaluates usually as soon as possible in an inference.  For example, <code>(performSubL (ExpandSubLFn () (print \"Done\")))</code> will print out the string \"Done\" as a given proof path completes.  See ExpandSubLFn for a way to denote SubL within CycL.  See also EvaluateSubLFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, overlappingExternalConcept, "A predicate for mapping terms from an external data source to closely related concepts represented in Cyc.  <code>(overlappingExternalConcept THING SOURCE STRING)</code> means that in the external data source <code>SOURCE</code>, the meaning of <code>STRING</code> has significant semantic overlap with THING.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, or, "A LogicalConnective that represents disjunction in CycL. It is a VariableArityRelation, taking an arbitrary number of instances of CycLSentence-Assertible as arguments.  (or P Q ... Z) is true if and only if at least one of the sentences P, Q, ..., or Z is true.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, operatorFormulas, "A non-assertible MetaLanguagePredicate and specialization of termFormulas (q.v.) that relates CycL operators to CycL formulas in which they occur as the main operator.  <code>(operatorFormulas OPERATOR FORMULA)</code> means that <code>OPERATOR</code> occurs as the main operator (i.e. in the \"arg0\" position) of <code>FORMULA</code>.  \n<p>\nNote that both argument-places of operatorFormulas are implicitly \"quoted\" (see quotedArgument). So if the above operatorFormulas sentence is closed (see CycLClosedAtomicSentence), the two CycL expressions it mentions, <code>OPERATOR</code> and <code>FORMULA</code>, actually <i>appear in</i> that sentence -- as names of themselves.  Thus, the sentence \n\n<pre>  (operatorFormulas bordersOn (bordersOn France Germany))</pre> \n\nis true, due to the manifest fact that the <i>term</i> <code>bordersOn</code> occurs as the main operator in the sentence <code>(bordersOn France Germany)</code>. \n<p>\nNote that <code>FORMULA</code> in the above need not be true (if it's a sentence) or even semantically well-formed.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, openEntryFormatInArgs, "An instance of SpecificEntryFormatPredicate (q.v.).  <code>(openEntryFormatInArgs PRED N)</code> means that, for any particular way of fixing the other arguments to <code>PRED</code> besides the <code>N</code>th, there might be any number (including zero) of things such that, if taken as the <code>N</code>th argument, <code>PRED</code> holds of those arguments.  For example, openEntryFormatInArgs holds of biologicalMother with respect to its first argument-place, since a given female animal might have any number of offspring.  \n<p>\nUnlike the other reified instances of SpecificEntryFormatPredicate, openEntryFormatInArgs actually places no restriction at all on what <code>PRED</code> might or might not hold of with respect to the specified argument-place.  But one should not infer from this that openEntryFormatInArgs assertions are pointless; for they forestall duplication of effort by serving notice that the entry-format of a given argument-place has previously been considered and openEntryFormatInArgs was deemed appropriate.  \n<p>\nopenEntryFormatInArgs is the most commonly-encountered specific entry-format in the Cyc Knowledge Base.  Contrast with singleEntryFormatInArgs.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, opaqueArgument, "A binary MetaLanguagePredicate that can be used to state that a given argument-place of a given CycL relation-denoting expression is <i>denotationally opaque</i>.  \n<p>\n<code>(opaqueArgument REL N)</code> means that if in a closed compound expression built from the CycL expression for <code>REL</code> -- i.e. a ground atomic formula (or <i>gaf</i>) if <code>REL</code> is a predicate or a closed non-atomic term (or <i>nat</i>) if <code>REL</code> is a function -- the term appearing in <code>REL</code>'s <code>N</code>th argument-place is replaced with another term having the same denotatum (or truth-value, if the term is a sentence), there is no guarantee that the resulting gaf (or nat) will itself have the same truth-value (or denotatum) as the original.  \n<p>\nMost argument-places of most relation-denoting expressions do  allow such substitutions to be made freely, and are thus <i>denotationally transparent</i>.  For example, given that (equals Cicero Tully), the truth of <code>(residesInRegion Cicero CityOfRomeItaly)</code> entails the truth of  <code>(residesInRegion Tully CityOfRomeItaly)</code>.  This shows that residesInRegion's first argument-place is denotationally transparent. On the other hand, if Caesar were seeking Cicero and found him then (<code>objectFound-Definite CaesarsSearchForCicero Caesar Cicero)</code> would be true; but <code>(objectFound-Definite CaesarsSearchForCicero Caesar Tully)</code> might nevertheless be false, because Caesar might not know that Tully is Cicero and thus might not realize that in finding Cicero he had found Tully.  Having such a realization is a necessary condition for objectFound-Definite's holding, which shows that this relation's third argument-place is denotationally opaque.  \n<p>\nAccording to one well-known semantics for denotational opacity (viz. GottlobFrege's), a term appearing in an opaque context (in most cases) denotes (not its ordinary denotatum, but) what is ordinarily its <i>intensional meaning</i> or <i>sense</i> (or <i>Sinn</i>, in Frege's native German).  \n<p>\nquotedArgument (q.v.) is a specialization of opaqueArgument, and a term appearing in a <i>quoted</i> context is interpreted as denoting <i>itself</i> (rather than its usual denotatum).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, omitArgIsa, "<code>(omitArgIsa RELN N)</code> means that the relation <code>RELN</code> is not asserted to have a non-quoted argument constraint in its <code>N</code>th argument position, due to limitations of the Cyc system.  Since every relation relates things to other things, in principle every argument position for every relation should have an argIsa constraint; however, asserting some argIsa constraints will cause certain Cyc tests to fail.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, oldConstantName, "This bookkeeping predicate relates a CycL constant to a former \"name\" of that constant.  More accurately, (oldConstantName CONSTANT STRING) means that the underlying data structure currently associated with the CycL expression CONSTANT was formerly associated instead with the SubL string STRING.  If CONSTANT has undergone multiple \"renames\", STRING will \nnormally be its most recent former \"name\".  While oldConstantName sentences \ncan be asserted and edited by hand, they are asserted automatically when a Rename is done in the Knowledge Base.", 'BookkeepingMt', vStrMon).
exactlyAssertedEL(comment, numericallyEquals, "A NumericComparisonPredicate that is applicable to ScalarIntervals (<i>q.v.</i>) of all sorts, including quantitative intervals (see NumericInterval and Quantity) as well as point values (see ScalarPointValue).  <code>(numericallyEquals VALUE1 VALUE2)</code> means that <code>VALUE1</code> is equal to <code>VALUE2</code> with respect to some scale that they are both on.  More precisely, there is some TotallyOrderedScalarIntervalType <code>SCALE</code> that <code>VALUE1</code> and <code>VALUE2</code> are instances of and the minimum (see minQuantValue) of <code>VALUE1</code> is equal to the minimum of <code>VALUE2</code> and the maximum (see maxQuantValue) of <code>VALUE1</code> is equal to the maximum of <code>VALUE2</code>.\n<p>\nNote that numericallyEquals is <i>not</i> a specialization of equals (<i>q.v.</i>), as numeric values of different sorts can be \"numerically  equivalent\" without being considered identical (e.g. the Integer 1 and the RealNumber 1.0).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, nthSmallestElement, "(nthSmallestElement X N SET FUNCTION) means that X is an element of SET that has precisely N-1 other elements with a smaller value for FUNCTION. For example, (nthSmallestElement RhodeIsland-State 1 State-UnitedStates (FunctionToArg 2 areaOfRegion)). Yet there may be more nthSmallestElements. For example, (nthSmallestElement ?X 3 (TheSet 1 2 3 -3) AbsoluteValueFn) is true for both 3 and -3 - when the elements in the set are ordered according to their absolute value both 3 and -3 are 3rd smallest elements. ", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nthLargestElement, "(nthLargestElement X N SET FUNCTION) means that X is an element of SET that has precisely N-1 other elements with a larger value for FUNCTION. For example, (nthLargestElement Alaska-State 1 State-UnitedStates (FunctionToArg 2 areaOfRegion)) means that Alaska is the largest state (no elements have a larger areaOfRegion). Yet there may be more nthLargestElements. For example, (nthLargestElement ?X 1 (TheSet 1 2 3 -3) AbsoluteValueFn) is true for both 3 and -3 ; when the elements in the set are ordered according to their absolute value both 3 and -3 are largest elements. See also nthSmallestElement.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, notAssertibleMt, "(notAssertibleMt MT) states that the Microtheory MT cannot be used as the microtheory of an assertion made to the KB; i.e., MT might be a microtheory used as scaffolding or one whose assertions are known to be complete.  See also notAssertibleCollection, and notAssertible.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, notAssertibleCollection, "A UnaryPredicate used for stating a certain restriction regarding the use of a given Collection in assertions to the Cyc Knowledge Base.  (notAssertibleCollection COL) means that no ground atomic formula (or \"GAF\"; see CycLClosedAtomicSentence) whose initial (or \"0th\" argument-place) term is `isa', and whose 2nd argument-place term denotes COL, can be asserted to the KB.  See also notAssertible, which constrains predicates in a similar fashion.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, notAssertible, "A MetaPredicate for stating a certain restriction regarding the use of a given Predicate in assertions to the Cyc Knowledge Base.  (notAssertible PRED) means that no ground atomic formula (or \"GAF\"; see CycLClosedAtomicSentence) whose initial (or \"0th\" argument-place) term denotes PRED can be asserted to the KB.  In many cases, PRED will be an EvaluatablePredicate whose extent is (re)computed as necessary and never cached in the KB.  \n<p>\nSee also notAssertibleCollection, which constrains collections \nin a similar fashion.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, not, "An instance of both LogicalConnective and UnaryRelation.  which takes an instance of #CycLSentence-Assertible as its argument. (not SENT) is true if and only if SENT is false (and false if and only if SENT is true).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, nonAbducibleWithValueInArg, "A ternary predicate that is an instance of AbductionConstraintConstant (q.v.) and that can apply to a predicate and a specified value for a specified argument-place. \n<p>\n(nonAbducibleWithValueInArg PRED VALUE N) means that, if asked a query of the form (PRED ... VALUE ...), where VALUE appears in the Nth argument-position and all of the other positions (>= 1) are filled with variables, the Inference Engine cannot use abduction to hypothesize that any non-abduced terms are legitimate bindings for those variables.\n<p>\nFor example, (nonAbducibleWithValueInArg hasMembers InternationalMonetaryFund 1) holds, so Cyc cannot use abduction to hypothesize that Sealand is a member of the IMF.  (Note that this does not mean that Cyc cannot prove that some abduced term is a member of the IMF.)", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, negationPreds, "A MetaPredicate for stating that two predicates are logical \"contraries\" of one another.  <code>(negationPreds PRED1 PRED2)</code> means that if <code>PRED1</code> holds among a given sequence of things, then <code>PRED2</code> does <i>not</i> hold among that sequence (and vice versa).  Thus it is equivalent to \n\n<pre>  (not (and (PRED1 . ARGS) (PRED2 . ARGS))) .</pre>  \n\nFor example, (negationPreds owns rents) holds, as one cannot both own and rent a given thing at the same time.   \n<p>\nNote that the argument types of <code>PRED1</code> and <code>PRED2</code> need not be the same, they merely must not be disjoint.  Note also that <code>PRED1</code> and <code>PRED2</code> are constrained (see e.g. interArgIsa) either to both having the same fixed-arity (see FixedArityRelation) or to both having variable-arity (see VariableArityRelations).     \n<p>\nSee also genlPreds and negationInverse.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, negationMt, "(negationMt MT-1 MT-2) means that the domain assumptions of the Microtheory MT-1 are inconsistent with those of the Microtheory MT-2, and no lifting can occur between MT-1 and MT-2 (i.e. assertions made in one microtheory should not be made visible to the other microtheory). For cases where two microtheories differ not in domain assumptions but purely in content (assertions made within those microtheories), see the less specialized contradictoryMt.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, negationInverse, "A MetaPredicate for stating that each of two binary predicates is a logical \"contrary\" of the other's inverse. <code>(negationInverse BINPRED1 BINPRED2)</code> means that if <code>BINPRED1</code> holds between a pair <code><THING1, THING2></code>, then <code>BINPRED2</code> does <i>not</i> hold between the inverse pair <code><THING2, THING1></code> (and vice versa).  In other words, <code>(negationInverse BINPRED1 BINPRED2)</code> is equivalent to <code>(not (and (BINPRED1 ARG1 ARG2) (BINPRED2 ARG2 ARG1)))</code>.\n<p>\nNote that any AsymmetricBinaryPredicate is related to itself by negationInverse.  For example, (negationInverse subordinates subordinates) holds, since if one person is a subordinate of another, the latter person cannot at the same time also be a subordinate of the former.  See also negationPreds and genlInverse.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, nearestIsa, "A TaxonomicSlotForAnyThing, and a specialization of isa (q.v.).  (nearestIsa OBJ COL) means that COL is a \"nearest\" collection of which OBJ is an instance.  That is, (isa OBJ COL) holds, OBJ is not identical to COL, and there is no reified Collection NEARER-COL distinct from OBJ and COL such that both (isa OBJ NEARER-COL) and (genls NEARER-COL COL) hold.  Note that nearestIsa is non-assertible (see notAssertible), since its extension at any given time depends upon (and so must be recomputed from) the current state of the isa and genls hierarchy in the Cyc Knowledge Base.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestGenls, "A TaxonomicSlotForCollections and a KBDependentRelation (qq.v.) that is a specialization of genls. \n<code>(nearestGenls COL NEAR-COL)</code> means that <code>NEAR-COL</code> is a \"nearest\" generalization of <code>COL</code>.  More precisely:\n<p>\n(i) <code>(genls COL NEAR-COL)</code> holds, <br>\n(ii) <code>COL</code> is not identical to <code>NEAR-COL</code>, <br>\n(iii) both <code>COL</code> and <code>NEAR-COL</code> are reified, and <br>\n(iv) there is no reified Collection <code>NEARER-COL</code> distinct from <code>COL</code> and <code>NEAR-COL</code> such that both <code>(genls COL NEARER-COL)</code> and <code>(genls NEARER-COL NEAR-COL)</code> hold.\n<p>\nNote that nearestGenls is non-assertible (see notAssertible), since its extension at any given time depends upon (and so must be recomputed from) the current state of the genls hierarchy in the Cyc Knowledge Base.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestGenlPreds, "A TaxonomicSlotForPredicates and a specialization of genlPreds (q.v.).  (nearestGenlPreds PRED NEAR-PRED) means that NEAR-PRED  is a \"nearest\" generalization of PRED.  That is, (genlPreds PRED NEAR-PRED)  holds, PRED is not identical to NEAR-PRED, and there is no reified Predicate  OTHER-PRED distinct from PRED and NEAR-PRED such that both  (genlPreds PRED OTHER-PRED) and (genlPreds OTHER-PRED NEAR-PRED) hold.  Note   that nearestGenlPreds is non-assertible (see notAssertible), since its  extension at any given time depends upon (and so must be recomputed from) the  current state of the genlPreds hierarchy in the Cyc Knowledge Base.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, nearestGenlMt, "A specialization of genlMt.  (nearestGenlMt MT NEAR-MT) means that NEAR-MT is a \"nearest\" microtheory of which MT is a specialization.  That is, (genlMt MT NEAR-MT) holds, MT is not identical to NEAR-MT, and there is no reified Microtheory NEARER-MT distinct from MT and NEAR-MT such that both (genlMt MT NEARER-MT) and (genlMt NEARER-MT NEAR-MT) hold.  Note that nearestGenlMt is non-assertible (see notAssertible), since its extension at any given time depends upon (and so must be recomputed from) the current state of the genlMt hierarchy in the Cyc Knowledge Base.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, nearestDifferentIsa, "(nearestDifferentIsa OBJ-1 OBJ-2 NEAR-DIFF) means that NEAR-DIFF is a \"nearest\" collection of which OBJ-1 is an instance, but OBJ-2 is not. That is, (isa OBJ-1 NEAR-DIFF) holds, but (isa OBJ-2 NEAR-DIFF) does not, and there is no reified Collection OTHER-COL distinct from NEAR-DIFF such that (isa OBJ-1 OTHER-COL) holds, (isa OBJ-2 OTHER-COL) does not hold, and (genls OTHER-COL NEAR-DIFF) holds. Note that this predicate is notAssertible, since it must always be recomputed from the current state of the isa and genls hierarchy. For comparison, see nearestDifferentGenls.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestDifferentGenls, "(nearestDifferentGenls COL-1 COL-2 NEAR-DIFF) relates collections COL-1 and COL-2 to the nearest unsubsumed collections NEAR-DIFF of which COL-1 is a subset but COL-2 is not. This predicate is notAssertible, since it  must always be recomputed from the current state of the genls heirarchy.  For comparison, see nearestDifferentIsa.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestCommonSpecs, "(nearestCommonSpecs COL-1 COL-2 NEAR-SPEC) relates collections COL-1 and COL-2 to the nearest unsubsumed collections NEAR-SPEC of which are subsets of both COL-1 and COL-2. This predicate is notAssertible, since it  must always be recomputed from the current state of the genls heirarchy.  For comparison, see also nearestCommonIsa and nearestCommonGenls.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestCommonIsa, "(nearestCommonIsa THING1 THING2 NEAR-COL) means that NEAR-COL is a \"nearest\" collection of which both THING1 and THING2 are instances.  That is, both (isa THING1 NEAR-COL) and (isa THING2 NEAR-COL) hold, and there is no reified Collection NEARER-COL distinct from NEAR-COL such that (isa THING1 NEARER-COL), (isa THING2 NEARER-COL) and (genls NEARER-COL NEAR-COL) all hold.  Note that this predicate is non-assertible (see notAssertible), since its extension at any given time depends upon (and so must be computed from) the current state of the isa and genls hierarchies in the Cyc Knowledge Base. See also nearestCommonGenls and nearestCommonSpecs.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestCommonGenls, "A TaxonomicPredicateForCollections that relates two collections to their nearest common generalizations represented in the Cyc Knowledge Base.  <code>(nearestCommonGenls COL1 COL2 NEAREST-GENL)</code> means that (i) <code>NEAREST-GENL</code> in known in the Cyc Knowledge Base to subsume (via genls) both <code>COL1</code> and <code>COL2</code> and (ii) there is no proper specialization of <code>NEAREST-GENL</code> that is known to subsume both <code>COL1</code> and <code>COL2</code>.\n<p>\nNote that nearestCommonGenls is <i>not</i> functional with respect to its third argument, as a pair of collections might have several nearest common generalizations, all orthogonal to each other.  Note also that this predicate is notAssertible, since it must always be recomputed from the current state of the represented genls heirarchy.  \n<p>\nSee also nearestCommonIsa and nearestCommonSpecs.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, nearestCommonGenlMt, "(nearestCommonGenlMt MT-1 MT-2 NEAR-MT) relates microtheories MT-1 and MT-2 to the nearest unsubsumed microtheories NEAR-MT of which both are spec microtheories.  This predicate is notAssertible, since it must always be recomputed from the current state of the genlMt hierarchy.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, natFunction, "(natFunction NAT FUNCTION) states that FUNCTION is the function used in the non-atomic term NAT.  For example,  (natFunction (JuvenileFn Dog) JuvenileFn).  More precisely, (termOfUnit NAT (FUNCTION ...)) implies  (natFunction NAT FUNCTION).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, natArgumentsEqual, "(natArgumentsEqual NAT1 NAT2) means that the\narguments of NAT1 and NAT2 unify.  For example,  (natArgumentsEqual (FemaleFn Dog) (MaleFn Dog).  More precisely, (and (termOfUnit NAT1 (FUNCTION1 . ARGS)) (termOfUnit NAT2 (FUNCTION2 . ARGS))) implies  (natArgumentsEqual NAT1 NAT2).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, natArgument, "(natArgument NAT N TERM) means that TERM is in the Nth argument position of the non-atomic term NAT.  For example,  (natArgument (JuvenileFn Dog) 1 Dog).  Note that (termOfUnit NAT (FUNCTION ... ARGN ...)) implies  (natArgument NAT N ARGN).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, myCreator, "<code>(myCreator X Y)</code> means that <code>Y</code> is the constant representing the person who introduced the constant <code>X</code> into the Cyc vocabulary. In general, the editing interfaces to the Cyc KB only allow the KB to be modified when an instance of Cyclist is designated as the author of the changes.  See also sourceOfTerm-Person.", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(comment, myCreationTime, "<code>(myCreationTime CONSTANT TIME)</code> means that the CycLConstant <code>CONSTANT</code> was created at <code>TIME</code>, an instance of CycUniversalDate.  The format of <code>TIME</code> is YYYYMMDD; that is, the first four digits give the year in which the constant was created, the next two digits give the month in which it was created, and the final two digits give the day of the month on which it was created. For example, 19910309 is March 9, 1991.", 'BookkeepingMt', vStrDef).
exactlyAssertedEL(comment, myCreationSecond, "(myCreationSecond CONSTANT SECOND) means that the CycLConstant CONSTANT was created at the CycUniversalSecond SECOND on the day CONSTANT was created (the related predicate myCreationTime (q.v.) relates a CycLConstant to the day it was created).  The format of SECOND is HHMMSS; that is, the first two digits give the hour of the day on which the constant was created, the second two digits give the minute of the hour at which the constant was created, and the last two digits give the second of the minute at which the constant was created.  For example, midnight is 000000 (or simply 0), noon is 120000, 3:42:59 pm is 154259, and 11:59:59 pm is 235959.", 'BookkeepingMt', vStrMon).
exactlyAssertedEL(comment, myCreationPurpose, "A BookkeepingPredicate and a DocumentationConstant that relates a CycL constant (or other reifiable denotational term) to the Cyc-based project for which the term was created.  (myCreationPurpose TERM PROJECT) means that TERM was created as part of work that was done for PROJECT, and implies that the creator of TERM (see myCreator) was working PROJECT at the time.", 'BookkeepingMt', vStrMon).
exactlyAssertedEL(comment, multiplicationUnits, "A ternary predicate that relates UnitOfMeasure (q.v.) functions.  <code>(multiplicationUnits UNIT1 UNIT2 PRODUNIT)</code> means that <code>PRODUNIT</code> is the unit-of-measure that always returns the product of the values returned by <code>UNIT1</code> and <code>UNIT2</code> for two respective arguments (or argument-sequences) when it is itself applied to the product of those arguments (or sequences).  That is, whenever <code>(UNIT1 . ARGS1) = VALUE1</code> and <code>(UNIT2 . ARGS2) = VALUE2</code>, then <code>(PRODUNIT (TimesFn ARGS1 ARGS2)) = (TimesFn VALUE1 VALUE2)</code>.\n<p>\nFor example, (multiplicationUnits Mile Mile SquareMile) holds, and thus (TimesFn (Mile 2) (Mile 3)) is equal to (SquareMile 6).\n<p>\nThe predicate multiplicationUnits corresponds to (see functionCorrespondingPredicate) both of the functions UnitProductFn and PerFn (qq.v.).  Thus,\n<p>\n\t<code>(multiplicationUnits UNIT1 UNIT2 PRODUNIT)</code>\n<p>\nis equivalent to\n<p>\n\t<code>(equals PRODUNIT (UnitProductFn UNIT1 UNIT2))</code>\n<p>\nis equivalent to\n<p>\n\t<code>(equals UNIT1 (PerFn PRODUNIT UNIT2))</code> .", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, mtVisible, "A unary EvaluatablePredicate that applies to a Microtheory.  <code>(mtVisible MT)</code> means that the contents of <code>MT</code> are visible in the current query context.  \n\nIn general, \n<pre>\n(genlMt MT1 MT2) \n</pre>\nentails \n<pre>\n(ist MT1 (mtVisible MT2),\n</pre>\nbut the converse does not hold.  In particular, it fails when <code>MT1</code> is a ProblemSolvingCntxt.  For example, \n<pre>\n(ist EverythingPSC (mtVisible HumanSocialLifeMt))\n</pre>\nholds (in BaseKB), but\n<pre>\n(genlMt EverythingPSC HumanSocialLifeMt)\n</pre>\ndoes not hold (in BaseKB).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, minQuantValue, "A specialization of scalarBounds (q.v.) that relates a given ScalarInterval (q.v.) to the minimum ScalarPointValue (q.v.) it subsumes (see quantitySubsumes). <code>(minQuantValue SCALAR POINT)</code> means that the lower limit of <code>SCALAR</code> is <code>POINT</code>.\n<p>\nFor example, if all mailroom employees earned from five to eight dollars per hour, <code>(minQuantValue \"MailroomPayRange\" (DollarsPerHour 5))</code> would hold.  Other examples:\n<pre>\n  (minQuantValue (Mile 15 20) (Mile 15))\n\n  (minQuantValue (Unity 6 12) 6).\n</pre>\n<p>\nSee also maxQuantValue and pointQuantValue.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, minimizeExtent, "An instance of both MetaKnowledgePredicate and MetaPredicate (qq.v.) that is used to state that the Cyc system will \"assume\" that a (sequence of) thing(s) is not in the extension (see relationExtension) of a given predicate if the CycInferenceEngine is unable to prove that it is.  \n<p>\n<code>(minimizeExtent PRED)</code> means that, for any sequence of things <code><THING1, ..., THINGn></code> such that <code>(PRED THING1 ... THINGn)</code> holds, the fact that this holds is either expressed by some GAF (i.e. a \"ground atomic formula\"; see CycLClosedAtomicSentence) that is asserted in the Cyc Knowledge Base or is deducible via the inference engine from what is in the KB.  \n<p>\nThe practical import of a minimizeExtent assertion is that it reflects an underlying assumption that if the inference engine cannot prove some given sentence of the form <code>(PRED ARG1 ... ARGN)</code>, then that fact constitutes an argument for its negation <code>(not (PRED ARG1 ... ARGN))</code>; and, if the \"negation by failure\" inference parameter is turned on, the inference engine will actually conclude that this negation is true.  Note that a minimizeExtent assertion is weaker than the corresponding completeExtentEnumerable (q.v.) assertion would be, in that the latter does not require that the inference engine attempt to deduce <code>(PRED ARG1 ... ARGn)</code> before concluding that it is not true.  See also minimizeExtentForArg and the shared NoteOnClosedWorldAssumption.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, minimize, "minimize allows Cyc to assume that a statement is not\ntrue unless it is known to be true.  Specifically, if for some\nbindings of the variables that appear in the minimized formula the\nformula with the bindings substituted in cannot be proved, then assume\nthe negation of the formula with the bindings substituted in.  From an\nexample in the KB: (minimize (disjointWith ?Collection\n?Collection)) and binding ?Collection to Poodle means if we cannot\nprove (disjointWith Poodle Poodle) assume (not (disjointWith\nPoodle Poodle, i.e. assume every Collection is nonempty unless\nwe know otherwise.  In the case where we bind ?Collection to some\nother variable ?Y and substituting in means if we cannot show\n(disjointWith ?Y ?Y) then assume the negation, (not (forAll ?Y\n(disjointWith ?Y ?Y))) which is equivalent to (thereExists ?Y\n(not (disjointWith ?Y ?Y))). This is one of the predicates that\nhas been created to allow Cyc to do negation by failure.  Other\nrelated predicates are minimizeExtent and minimizeExtentForArg. ", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, microtheoryDesignationArgnum, "Used to specify which argument of a given MicrotheoryDesignatingRelation\ndesignates the microtheory in which to interpret some formula.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, meetsPragmaticRequirement, "A MetaKnowledgePredicate that is used to express that a pragmatic precondition on a given rule is satisfied.  The predicate takes as arguments a list of CycL variables and an asserted rule (see CycLRuleAssertion) in which those variables occur \"free\".  At the EL (\"epistemological level\"), meetsPragmaticRequirement sentences are not asserted as GAFs, but appear instead as the consequents of system-generated implies rules.  For a given sequence of values for the respective variables <code>VAR1</code>, ..., <code>VARn</code>, <code>(meetsPragmaticRequirement (TheList VAR1 ... VARn) RULE)</code> means that some pragmatic precondition placed on <code>RULE</code>'s being used by the Cyc inference engine (see pragmaticRequirement) is satisfied with respect to those values.\n<p>\nLet's make this more precise and explicit.  A pragmatic precondition for a rule is written like so:\n<p>\n<pre>\n   (pragmaticRequirement CONDITION RULE)\n</pre>\n<p>\nand gets canonicalized into a rule involving meetsPragmaticRequirement like so:\n<p>\n<pre>\n   (implies\n     CONDITION\n    (meetsPragmaticRequirement (TheList VAR1 ... VARn) RULE)),\n</pre>\n<p>\nwhere <code>VAR1, ..., VARn</code> are all and only the variables that occur free in <code>RULE</code> and thus include all (and possibly only) the variables that occur free in <code>CONDITION</code> (i.e. as <code>RULE</code> and <code>CONDITION</code> explicitly appear in the KB browser, without consideration of their having \"implicit\" initial universal quantifiers).\n<p>\nThe above meetsPragmaticRequirement rule is used in inference similarly to an abnormal rule.  If <code>CONDITION</code> is not known to hold for a given sequence of values <code><VAL1, ..., VALn></code> for its variables <code><VAR1, ..., VARn></code>, then those values do not \"meet the pragmatic requirement\" for <code>RULE</code>; and hence inference will not proceed using <code><VAL1, ..., VALn></code> with <code>RULE</code>.\n<p>\nThe effect of the foregoing is that any asserted rule <code>RULE</code> is implicitly treated by the Cyc inference engine as if it had the form\n<p>\n<pre>\n (implies\n  (meetsPragmaticRequirement (TheList VAR1 ... VARn) RULE)\n   RULE)\n</pre>\n<p>\n(with <code>VAR1, ..., VARn</code> as described above).\n<p>\nThis convention allows the logical content of a rule to be expressed independently of any pragmatic preconditions for its being used in inference.  If a rule has multiple pragmatic requirements, it must meet all of them to be used in inference.\n<p>\nAlso see abnormal, which is syntactically similar and has a related  interpretation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, means, "A MetaLanguagePredicate (q.v.) that relates SubLSExpressions to their meanings: the things in the intended model of the CycL language that those terms denote, refer to, stand for, or express. <code>(means TERM THING)</code> means that <code>TERM</code> denotes, refers to, stands for, or expresses <code>THING</code>. <code>TERM</code> will often be explicitly quoted, by being wrapped in the syncategorematic quotation symbol 'Quote'. For example, the true sentence '(means (Quote Plato) Plato)' means that the CycL term 'Plato' means (denotes) the person Plato. (Thus means's first argument-place is <i>not</i> \"implicitly quoted\"; cf. quotedArgument).\n<p>\nBut note that the first argument of means might not be quoted at all. Suppose (e.g.) that the term 'Plato' were the CycL constant most beloved of Cyclists, and that a new constant 'CyclistsFavoriteConstant' were reified and defined so as to reflect this fact. Then 'CyclistsFavoriteConstant' would denote the CycL constant 'Plato', which in turn denotes the man Plato; and so the sentence '(means CyclistsFavoriteConstant Plato)' -- which involves no quotation -- would be true.\n<p>\nNote finally that the sentence '(means Plato Plato)' is of course <i>not</i> true, as it means that the man Plato is a CycL term that denotes the man Plato, which is a patent falsehood since no man is a CycL term and no man denotes anything.\n<p>\nSee also expresses, denotes, hasDenotatum, quotedIsa, EscapeQuote, and the shared NoteAboutQuotingInCycL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, maxQuantValue, "A specialization of scalarBounds (q.v.) that relates a given ScalarInterval (q.v.) to the maximum ScalarPointValue (q.v.) it subsumes (see quantitySubsumes). <code>(maxQuantValue SCALAR POINT)</code> means that the upper limit of <code>SCALAR</code> is <code>POINT</code>.\n<p>\nFor example, if all mailroom employees earned from five to eight dollars per hour, <code>(maxQuantValue \"MailroomPayRange\" (DollarsPerHour 8))</code> would hold.  Other examples:\n<pre>\n  (maxQuantValue (Mile 15 20) (Mile 20))\n\n  (maxQuantValue (Unity 6 12) 12).\n</pre>\n<p>\nSee also minQuantValue and pointQuantValue.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, maxQuantValue, "(maxQuantValue SCALAR POINT) means that the upper limit of the quantity SCALAR is POINT, an instance of ScalarPointValue.  SCALAR is an instance of ScalarInterval.  For example, the maxQuantValue for the pay of mail room employees might be (DollarsPerHour 6.5); e.g., (maxQuantValue `MailPay' (DollarsPerHour 6.5)).  Another example: (maxQuantValue (Unity 5 10) 10).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, knownSentence, "A KBDependentRelation (q.v.) and  specialization of trueSentence (q.v.) that is used to state  that a given sentence is \"known\" to be true to the Cyc system. More precisely, (knownSentence SENT) means that SENT is provable  by the Cyc inference engine from sentences currently in the Knowledge  Base.  knownSentence is a non-assertible predicate (see  notAssertible).  Note that this predicate is not to be confused  with assertedSentence, which is used to state that a given  sentence is explicitly asserted in the KB.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, knownAntecedentRule, "A MetaKnowledgePredicate that is used to state a strong pragmatic directive to the CycInferenceEngine.  Asserting (knownAntecedentRule RULE) tells the inference engine to automatically generate a removal module to implement RULE; i.e. to solve queries unifying with the consequent of RULE by attempting to prove the substituted antecedent of RULE.  When this removal module is used during inference, it attempts to prove the substituted antecedent via removal only (see knownSentence).  It does not preclude other uses of RULE in inference.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, ist, "This predicate relates a microtheory to any sentence that is true in it.  (ist MT SENT) means that the CycL sentence SENT (or, if you prefer, the proposition SENT expresses) is true in the microtheory MT.  Note that SENT need not actually be _asserted_ in MT; MT might for example \"inherit\" SENT from a more general microtheory.  (Cf. ist-Asserted.)", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, isa, "A TaxonomicSlot (q.v.) that relates things of any  kind to collections (see Collection) of which they are instances.   <code>(isa THING COL)</code> means that <code>THING</code> is an instance of the collection <code>COL</code>.   isa is by far the most commonly-occurring predicate in the Cyc Knowledge  Base, and is one of the relations most fundamental to the Cyc ontology. An important logical feature of isa is that it \"transfers through\"  genls (q.v.): <code>(isa THING COL)</code> and <code>(genls COL SUPERCOL)</code> jointly  imply <code>(isa THING SUPERCOL)</code>.  This logical feature is expressed in a  rule that -- along with various other rules that also sanction the  derivation of isa sentences -- has been asserted to the Knowledge Base.   As a result, only a small fraction of the isa based ground atomic  formulas (or \"GAF\"s; see CycLClosedAtomicSentence) the Cyc system  \"knows\" to be true have been manually asserted; the vast majority  have been derived, or are derivable, automatically by the Cyc inference  engine via the use of such rules.  See also elementOf.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, irrelevantTerm, "A CycInferenceHeuristicRelevancePredicate. (irrelevantTerm TERM) states that the CycLClosedDenotationalTerm TERM should be heuristically considered less relevant to inferences made in the current Microtheory.  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, irrelevantPredAssertion, "(irrelevantPredAssertion PREDICATE ASSERTION) states that the given ASSERTION should be heuristically considered very unlikely to be relevant to inferences concluding uses of the given PREDICATE in the current mt.  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, irrelevantMt, "A CycInferenceHeuristicRelevancePredicate. (irrelevantMt MT) means that all assertions made in the Microtheory MT should be heuristically considered very unlikely to be relevant to inferences done in the Microtheory MT-1 in which (irrelevantMt MT) is asserted (where MT-1 and MT need not be the same).  As a consequence, note that when (irrelevantMt MT) is asserted in a Microtheory MT-1, each of the assertions in MT will be an irrelevantAssertion (q.v.) for inferences done in MT-1.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, irrelevantAssertion, "A CycInferenceHeuristicRelevancePredicate. (irrelevantAssertion ASSERTION) states that the CycLAssertion ASSERTION should be heuristically considered very unlikely to be relevant to inferences in the current Microtheory.  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, interArgResultIsaReln, "A quintary MetaRelation predicate for stating that a certain kind of complex, partly isa based relationship holds between a given argument to a given function and the corresponding value that is returned. (interArgResultIsaReln FUNC N RELATION RELATION-NAT-TERM-ARG RELATION-COLLECTION-ARG) means that, if there is a sentence asserted in the KB relating NAT-TERM and COLLECTION via RELATION and NAT-TERM is the RELATION-NAT-TERM-ARGth argument in the sentence and COLLECTION is the RELATION-COLLECTION-ARGth argument, then when NAT-TERM appears as the Nth argument to FUNC, then (regardless of what the other arguments to FUNC might be) the value (if any) of that function for those arguments is an instance of COLLECTION.  That is: if (RELATION ... NAT_TERM ... COLLECTION ...) or (RELATION ... COLLECTION ... NAT_TERM  ...) is an asserted sentence, and (FUNC ARG(1) ... ARG(N-1) NAT_TERM ...) = VALUE, then VALUE is an instance of COLLECTION. Obviously, COLLECTION must be a collection; so RELATION's RELATION-COLLECTION-ARGth argument-place is likely to be isa constrained (see argIsa) to Collection or some specialization thereof.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, interArgResultIsa, "A quaternary MetaRelation predicate for stating that a certain kind of complex, partly isa -based relationship holds between a given argument to a given function and the corresponding value that is returned.\n<p>\n<code>(interArgResultIsa FUNC N INDEP-ARG-COL DEP-ARG-COL)</code> means that, when an instance of <code>INDEP-ARG-COL</code> appears as the <code>N</code>th argument to <code>FUNC</code>, then (regardless of what the other arguments to <code>FUNC</code> might be) the value (if any) of that function for those arguments is an instance of <code>DEP-ARG-COL</code>.  That is: if <code>INST</code> is an instance of <code>INDEP-ARG-COL</code> and <code>(FUNC ARG1 ... ARGN-1 INST ...) = VALUE</code>, then <code>VALUE</code> is an instance of <code>DEP-ARG-COL</code>.\n<p>\nFor example, <code>(interArgResultIsa RoundUpFn 1 RealNumber Integer)</code> means that the rounding-up function RoundUpFn returns an integer whenever it is given a real number as its first (and only) argument.\n<p>\nNote that, unlike (e.g.) the InterArgTypePredicates, interArgResultIsa <i>cannot</i> be used to put semantic well-formedness constraints on functions.  See also the similar but less flexible ternary interArg1ResultIsa et al.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, interArgResultGenlReln, "A quintary MetaRelation predicate for stating that a certain  kind of complex, partly genls based relationship holds between a given  argument to a given function and the corresponding value that is returned.  (interArgResultGenlReln FUNC N RELATION RELATION-NAT-TERM-ARG RELATION-COLLECTION-ARG) means that, if there is a sentence asserted in the KB relating NAT-TERM and COLLECTION via RELATION and NAT-TERM is the RELATION-NAT-TERM-ARGth argument in the sentence and COLLECTION is the RELATION-COLLECTION-ARGth argument, then when NAT-TERM appears as the Nth argument to FUNC, then (regardless of what the other arguments to FUNC might be) the value (if any) of that function for those arguments is a subcollection of COLLECTION. That is: if (RELATION ... NAT_TERM ... COLLECTION ...) or  (RELATION ... COLLECTION ... NAT_TERM  ...) is an asserted sentence, and (FUNC ARG(1) ... ARG(N-1) NAT_TERM ...) = VALUE, then VALUE is a subcollection of COLLECTION. Obviously, COLLECTION must be a collection; so RELATION's RELATION-COLLECTION-ARGth argument-place is likely to be isa  constrained (see argIsa) to Collection or some specialization thereof.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, interArgResultGenl, "A quaternary MetaRelation predicate for stating that a certain kind of complex, partly genls based relationship holds between a given argument to a given function and the corresponding value that is returned. (interArgResultGenls FUNC N INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, when a subcollection of INDEPENDENT-ARG-COL appears as the Nth argument to FUNC, then (regardless of what the other arguments to FUNC might be) the value (if any) of that function for those arguments is a subcollection of DEPENDENT-ARG-COL.  That is: if INST is a subcollection of INDEPENDENT-ARG-COL and (FUNC ARG(1) ... ARG(N-1) INST ...) = VALUE, then VALUE is a subcollection of DEPENDENT-ARG-COL.  Note that, unlike (e.g.) the InterArgTypePredicates, interArgResultGenl _cannot_ be used to put semantic well-formedness constraints on functions.  See also the similar but less flexible ternary interArg1ResultGenls et al.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, interArgIsa, "A quintary instance of InterArgIsaPredicate (q.v.).   <code>(interArgIsa RELN INDEP-ARGNUM INDEP-COL DEP-ARGNUM DEP-COL)</code> means that,  when an instance of <code>INDEP-COL</code> appears as the <code>INDEP-ARGNUM</code>th argument to <code>RELN</code>,  a necessary condition for semantic well-formedness is that the <code>DEP-ARGNUM</code>th argument must be an instance of <code>DEP-COL</code>.  That is, if <code>INDEP-INST</code> is an instance of <code>INDEP-COL</code>, then <code>(RELN</code> ... <code>INDEP-INST</code> ...), where <code>INDEP-INST</code> is the <code>INDEP-ARGNUM</code>th (or \"independent\") argument to <code>RELN</code>, is semantically well-formed only if the <code>DEP-ARGNUM</code>th (or \"dependent\") argument (which is some item in the sequence <... <code>INDEP-INST</code> ...> other than the <code>INDEP-ARGNUM</code>th) is an instance of <code>DEP-COL</code>.\n<p>\nFor example, (interArgIsa performedBy 1 PurposefulAction 2 IntelligentAgent) means that, if <code>ACT</code> is a PurposefulAction, then <code>(performedBy ACT AGENT)</code> is semantically well-formed only if <code>AGENT</code> is an IntelligentAgent.\n<p>\nFor an explanation of semantic well-formedness, see CycLExpression-Assertible and its direct specializations.  For a more general explanation of independent and dependent arguments in the present sense, see InterArgConstraintPredicate.  For similar to but less flexible predicates than interArgIsa, which have already-fixed positions for the independent and dependent arguments, see the ternary interArgIsa1-2 et al.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, interArgDifferent, "A MetaRelation used for stating a certain kind of necessary condition for being an element of the domain of a given Relation (see relationDomain).  Thus (to put it in terms of the semantics of CycL expressions) interArgDifferent can be used for stating a certain kind of truth- or denotation-condition for a given relation-denoting expression.  (interArgDifferent RELN N M) means that RELN (if it is a Predicate or other TruthFunction) only holds among or (if it is a Function-Denotational) only has a value for sequences of arguments whose Nth and Mth members are distinct (see different).  That is (assuming without loss of generality that N < M): if RELN is a predicate or other \"truth-function\" then (RELN ... ARGN ... ARGM ...) holds only if ARGN and ARGM are distinct, and if RELN is a function then it is defined for (i.e. associates a value with) a sequence <THING-1, ..., THING-N, ..., THING-M, ...> only if THING-N and THING-M are distinct.  For example, (interArgDifferent opponentsInConflict 1 2) means that no-one is his or her own opponent in a conflict.\n<p>\nNote that this predicate trivially holds for any relation with respect those argument-places it has that are subject to mutually disjoint (see disjointWith and cf. cosatisfiableInArgs) argument-type constraints (see ArgTypePredicate).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, integerBetween, "A ternary IntangibleObjectRelatingPredicate that holds among Integers only.  <code>(integerBetween LOW MED HIGH)</code> means that <code>HIGH</code> is greaterThanOrEqualTo <code>MED</code>, and <code>MED</code> is greaterThanOrEqualTo <code>LOW</code>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, instanceElementType, "A binary FirstOrderCollectionPredicate that relates types of sets to the types of elements they have in common.  More precisely, <code>(instanceElementType SETTYPE COLLECTION)</code> means that every elementOf every instance of (see isa) <code>SETTYPE</code> is an instance of <code>COLLECTION</code>.  For example, both of these hold:\n<pre>\n  (instanceElementType PointSet Point)\n\n  (instanceElementType Set-Mathematical Thing) . \n</pre>\nSee the corresponding function SetOfTypeFn, which takes a given collection to the collection of <i>all</i> sets whose elements are instances of the former.  And see typeGenls for a similar predicate that relates collections of <i>collections</i> (rather than collections of sets) to their common element types.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, indexicalReferent, "(indexicalReferent INDCONCEPT THING) means that in the context of the assertion, the IndexicalConcept INDCONCEPT has the referent THING.  This is a StrictlyFunctionalSlot, in keeping with the idea that the predicate will return one and only one 'value' for the second argument place at any given point in context space.  However, be advised that the arg2 will change from context to context.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, independentArg, "A MetaPredicate that is used to state, of a given\n(ternary) InterArgConstraintPredicate, that it is (always) used to constrain a relation in such a way that a certain specified argument-place of the relation is for the \"independent\" argument (with respect to that constraint).  (independentArg INT-ARG-PRED N) means that any sentence of the form (INT-ARG-PRED RELN ...) constrains RELN in some way that treats RELN's Nth argument as independent.  For example, (independentArg interArgIsa3-4 3) holds.  See the comment on InterArgConstraintPredicate for an explanation of what it means to be an \"independent\" argument in this sense.  Note that independentArg is contrained to apply only to _ternary_ inter-argument constraint predicates, as only they have already-fixed positions for the corresponding independent and dependent arguments; thus it cannot (on pain of semantic malformedness) be applied to the quintary inter-argument constraint predicates, such as interArgIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, implies, "A binary LogicalConnective (q.v.) that corresponds to the material implication operator of propositional calculus.  The implies relation takes two CycLSentence-Assertibles as its arguments; and the syntactic result of applying the term 'implies' to two sentences is itself a sentence, called a \"conditional\" or \"implication\".  A sentence of the form (implies ANTECEDENT CONSEQUENT) is true if and only if ANTECEDENT is false or CONSEQUENT is true (or both).  Equivalently: it is not the case that ANTECEDENT is true and CONSEQUENT is false.  For example,\n<p>\n<pre>\n  (implies\n    (knows Muffet Patches-Cat)\n    (likesAsFriend Muffet Patches-Cat))\n</pre>\n<p>\nmeans that if Muffet knows Patches then she likes him.\n<p>\nCf. the predicate sentenceImplies, which is not a logical connective, and is primarily used in rules involving quantification over CycL sentences.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, hypotheticalTerm, "(hypotheticalTerm TERM) states that TERM is a term that was hypothesized.  The most common reason a term is hypothesized is to pose a hypothetical query to Cyc.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, holdsIn, "An instance of both TemporalPredicate and ModalPredicate that is used to state (in a somewhat indirect way) that a given sentence is true during a certain time period.  <code>(holdsIn TEMP SENT)</code> means that <code>SENT</code> is true at every moment in the temporalExtent (q.v.) of the TemporalThing <code>TEMP</code>.\n<p>\nFor example, the sentence <code>(holdsIn (YearFn 2003) (hasPets Curtis Patches-Cat))</code> means that throughout all of the year 2003 Curtis had Patches as a pet.  This entails (e.g.) that Curtis had Patches on 5 July 2003:\n<pre>\n  (holdsIn\n    (DayFn 5 (MonthFn July (YearFn 2003)))\n    (hasPets Curtis Patches-Cat))</code> .\n</pre>\n<p>\nSimilarly, <code>(holdsIn Patches-Cat (hasPets Curtis Patches-Cat))</code> means that Curtis has Patches as a pet for Patches's entire life.\n<p>\nSee also the more general predicate holdsSometimeDuring.\n<p>\nNote that a sentence of the form <code>(holdsIn TEMP (PRED ... ARGi ...))</code>, where <code>ARGi</code> is a TemporalThing, does <i>not</i> in general imply that <code>ARGi</code> temporally subsumes or even temporally intersects <code>TEMP</code>.  For example, <code>(holdsIn (YearFn 2003) (awareOf Curtis GeorgeWashington))</code> obviously doesn't imply that GeorgeWashington was alive in 2003.  <code>ARGi</code>'s temporally subsuming <code>TEMP</code> <i>does</i> follow, however, if <code>PRED</code> is a CotemporalPredicate that is contemporaryInArg (q.v.) in its <code>i</code>th argument-place (as hasPets is, in both argument-places).\n<p>\nNote also that there are two other ways to temporally-qualify sentences in CycL, which do not involve using holdsIn (or holdsSometimeDuring).  Both involve temporally qualifying the Microtheory in which the (otherwise unqualified) sentence is asserted, and either can be used to state something roughly equivalent to a holdsIn sentence.  Consider the first Curtis/Patches example above.  First, one could assert <code>(hasPets Curtis Patches-Cat)</code> in some microtheory <code>MT</code> such that <code>(holdsInTime-Always MT (YearFn 2003))</code>.  Second, one could assert <code>(hasPets Curtis Patches-Cat)</code> in a microtheory <code>MT'</code> such that both <code>(mtTimeIndex MT' (YearFn 2003))</code> and <code>(mtTimeParameter MT' TimePoint)</code> hold.  This later method, being the most developed and well-supported, is generally preferred over the others.\n<p>\nNote finally that it would be incorrect to assert a sentence like <code>(hasPets Curtis Patches-Cat)</code> in a non-temporally-qualified microtheory like the BaseKB, since Curtis didn't have Patches when (e.g.) he was a young boy, let alone in 3500 BCE.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, hlPrototypicalInstance, "(hlPrototypicalInstance TERM COL) means that TERM is a prototypical instance of COL at the HL.  It is assumed that TERM has only two asserted assertions on it: one hlPrototypicalInstance assertion and one assertion of the form (isa TERM COL).  The CycInferenceEngine makes use of the prototypical instance during assertions to cache the work done by forward inference.  It is used when asserting the first isa assertion on a term with no other assertions about it yet.  <b>Do not assert comments, cyclistNotes or any other assertions on prototypical instances.</b>  They are intentionally minimal.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, highlyRelevantTerm, "A CycInferenceHeuristicRelevancePredicate. (highlyRelevantTerm TERM) states that the CycLClosedDenotationalTerm TERM should be heuristically considered highly relevant to inferences made in the current Microtheory.  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, highlyRelevantPredAssertion, "(highlyRelevantPredAssertion PREDICATE ASSERTION) states that the given ASSERTION should be heuristically considered highly relevant to inferences concluding uses of the given PREDICATE in the current mt.  See also other instances CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, highlyRelevantMt, "A CycInferenceHeuristicRelevancePredicate. (highlyRelevantMt MT) means that all assertions in the Microtheory MT should be heuristically considered highly relevant to inferences done in the Microtheory MT-1 in which (highlyRelevantMt MT) is asserted (where MT-1 and MT need not be the same).  As a consequence, note that when (highlyRelevantMt MT) is asserted in a Microtheory MT-1, each of the assertions in MT will be a highlyRelevantAssertion (q.v.) for inferences done in MT-1.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, highlyRelevantAssertion, "A CycInferenceHeuristicRelevancePredicate. <code>(highlyRelevantAssertion ASSERTION)</code> states that the CycLAssertion <code>ASSERTION</code> should be heuristically considered highly relevant to inferences that are performed in a context in which <code>(highlyRelevantAssertion ASSERTION)</code> is visible.  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, greaterThanOrEqualTo, "A NumericComparisonPredicate (q.v.) that is a generalization of the mathematical greater-than-or equal-to <code>(>=)</code> relation to ScalarIntervals (q.v.) of all sorts, including quantitative intervals (see NumericInterval and Quantity) as well as point values (see ScalarPointValue).  <code>(greaterThanOrEqualTo VALUE1 VALUE2)</code> means that <code>VALUE1</code> is greater than or equal to <code>VALUE2</code> with respect to some scale that they are both on.  More precisely, there is some TotallyOrderedScalarIntervalType <code>SCALE</code> that both <code>VALUE1</code> and <code>VALUE2</code> are instances of and either (i) <code>SCALE</code> is a specialization of NumericInterval (e.g. RealNumber) and the minimum (see minQuantValue) of <code>VALUE1</code> is greater than or equal to the maximum (see maxQuantValue) of <code>VALUE2</code>, (ii) <code>(followingValueOnScale VALUE2 VALUE1 SCALE)</code> holds, or (iii) <code>(equals VALUE1 VALUE2)</code> holds.\n<p>\nSee also greaterThan and lessThanOrEqualTo.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, greaterThan, "A NumericComparisonPredicate that is a generalization of the  mathematical greater-than ( > ) relation to ScalarIntervals (q.v.) of all sorts, including quantitative intervals (see NumericInterval and MeasurableQuantity) as well as point values (see ScalarPointValue).  <code>(greaterThan VALUE1 VALUE2)</code> means that  <code>VALUE1</code> is greater than <code>VALUE2</code> with respect to some scale that they  are both on.  More precisely, there is some TotallyOrderedScalarIntervalType SCALE that both <code>VALUE1</code> and <code>VALUE2</code> are instances of and either (i) <code>SCALE</code> is a specialization of  NumericInterval (e.g. RealNumber) and the minimum (see minQuantValue) of <code>VALUE1</code> is greater than the maximum (see maxQuantValue) of <code>VALUE2</code> or (ii) <code>(followingValueOnScale VALUE2 VALUE1 SCALE)</code> holds.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genMassNoun, "(genMassNoun TERM) means that the CycLReifiableDenotationalTerm TERM should be treated as a mass noun when CycL formulae containing TERM are paraphrased into English.  See also the related predicate prettyName.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genls, "A instance of TaxonomicSlotForCollections (q.v.) and  a specialization of generalizations.  genls relates a given collection  (see Collection) to those collections that subsume it.  More precisely, <code>(genls SUBCOL SUPERCOL)</code> means that <code>SUPERCOL</code> is a supercollection of <code>SUBCOL</code>:  anything that is an instance of (see isa) <code>SUBCOL</code> is also an instance of <code>SUPERCOL</code>.  For example, <code>(genls Dog Mammal)</code> holds.  genls is one of the most commonly-occurring predicates in the Cyc Knowledge Base, and one of  the relations most fundamental to the Cyc ontology.  See also subsetOf.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genlRules, "(genlRules RULE-SPEC RULE-GENL) means that the set of binding tuples that satisfy the open (universally quantified) variables in the consequent of RULE-SPEC via an application of RULE-SPEC will be a subset of the set of binding tuples that satisfy the open (universally quantified) variables in the consequent of RULE-GENL via an application of RULE-GENL.  For example, the following holds\n\n<pre>\n   (genlRules\n      (ist CCFBridgingMt\n        (implies\n          (and\n           (cCFCardiacValveRepairProcedure ?CVRP Plication-ValvularProcedure)\n           (rdf-type ?PROC HeartValveRepair-SurgicalProcedure)\n           (cCF-contains ?CVD ?CVRP)\n           (cCF-contains ?PROC ?CVD))\n          (isa ?PROC Plication-ValvularProcedure)))\n      (ist CCFBridgingMt \n       (implies\n         (rdf-type ?X HeartValveRepair-SurgicalProcedure)\n         (isa ?X HeartValveRepair-SurgicalProcedure)))) </pre>\n\n\nHence, if one was looking to return instances of HeartValveRepair-SurgicalProcedure, all other things being equal, there would be no need to query using both of these rules.  The rule in arg2 of genlRules here would get a superset of the answers that the rule in arg1 would return.\n ", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genlPreds, "A MetaPredicate for stating that one predicate is a generalization of another.  <code>(genlPreds SPEC-PRED GENL-PRED)</code> means that <code>GENL-PRED</code> is a generalization of <code>SPEC-PRED</code>.  That is, <code>(GENL-PRED ARG1..ARGN)</code> holds whenever <code>(SPEC-PRED ARG1..ARGN)</code> holds.  For example, <code>(genlPreds touches near)</code> holds, as touching something implies being near it.\n<p>\nAs for the respective arities (see arity) of <code>SPEC-PRED</code> and <code>GENL-PRED</code>, (i) both predicates might have the same fixed-arity (see FixedArityRelation), (ii) both might have variable-arity (see VariableArityRelation), or (iii) <code>SPEC-PRED</code> might have a fixed-arity and <code>GENL-PRED</code> variable-arity.  (It cannot be the case that <code>SPEC-PRED</code> has variable-arity and <code>GENL-PRED</code> has a fixed-arity.)\n<p>\nSee also negationPreds, genlInverse, and negationInverse.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genlMt, "A reflexive and transitive BinaryPredicate that relates a Microtheory to a Microtheory.  <code>(genlMt SPEC-MT GENL-MT)</code> means that <code>SPEC-MT</code> is a specialization or extension of <code>GENL-MT</code>.  (Note that it need not be a <i>proper</i> specialization or extension.)  In particular, this entails that everything that is true in <code>GENL-MT</code> is also true in <code>SPEC-MT</code>.  This relation is sometimes expressed informally by saying that <code>SPEC-MT</code> \"sees\" <code>GENL-MT</code>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genlInverse, "A MetaPredicate for stating that one binary  predicate is a generalization of the <i>inverse</i> of another binary predicate.   <code>(genlInverse PRED GENL-INV-PRED)</code> means that <code>GENL-INV-PRED</code> is a  \"generalized inverse\" of <code>PRED</code>.  That is, <code>(PRED ARG1 ARG2)</code> implies  <code>(GENL-INV-PRED ARG2 ARG1)</code>.  For example, <code>(genlInverse grandchildren ancestors)</code> means that grandparents are  ancestors of their grandchildren.  See also genlPreds and negationInverse.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genlCanonicalizerDirectives, "A transitive binary predicate that relates a given \nCanonicalizerDirective (q.v.) to more general ones.\n(genlCanonicalizerDirectives SPEC-DIRECTIVE GENL-DIRECTIVE) \nmeans that SPEC-DIRECTIVE is at least as specific a (set of) \ndirection(s) to the CycCanonicalizer as GENL-DIRECTIVE.  \nThat is, all the commands indicated by GENL-DIRECTIVE (and\npossibly others as well) are indicated by SPEC-DIRECTIVE.  \nFor example, (genlCanonicalizerDirectives\nLeaveSomeTermsAtELAndAllowKeywordVariables \nAllowKeywordVariables) holds.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, genKeyword, "An NLGenerationPredicate that\nrelates a given CycL denotational term to the SubL keyword \nthat is used to represent it in generating natural language \nfrom CycL.  (genKeyword CYCL-TERM KEYWORD) means that \nKEYWORD represents CYCL-TERM in the generation of natural \nlanguage paraphrases of CycL expressions, e.g. in genFormat \n(q.v.) assertions.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, genFormat, "The Common Lisp format string ARG2 can be applied to the argument list ARG3 to generate pseudo-English for the Cyc Relation ARG1", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, forwardNonTriggerLiteral, "An HLPredicate that is used to state which literals in a forward rule should not be allowed to re-trigger forward inference.  This is useful for placing pragmatic restrictions on the applicability of forward rules.  It is only useful when used via pragmaticRequirement on a forward rule.\n<p>\nA pragmatic requirement of the form\n<pre>\n(pragmaticRequirement (forwardNonTriggerLiteral FORMULA) RULE),\n</pre>\nwhere <code>FORMULA</code> is a literal in the antecedent of <code>RULE</code>, ensures that new assertions that are instantiations of <code>FORMULA</code> do not trigger <code>RULE</code>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, formulaArity, "(formulaArity FORMULA INTEGER) means that the CycL formula FORMULA contains INTEGER arguments. See also FormulaArityFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, forAll, "A binary Quantifier that corresponds to the standard universal quantifier of predicate calculus.  The relation forAll takes as its arguments a variable (ELVariable) and a sentence (ELSentence-Assertible) in which, typically, that variable occurs free.  A closed formula (see CycLClosedFormula) of the form (forAll VAR SENT) is a \"universally quantified\" sentence that states (roughly) that every thing in the universe of discourse satisfies SENT.  For example,\n<p>\n<pre>\n  (forAll ?THING (isa ?THING Individual))\n</pre>\n<p>\nmeans that everything is an individual.  And the sentence\n<p>\n<pre>\n  (forAll ?X\n    (implies\n      (isa ?X Cat)\n      (eatsWillingly ?X Grass-Plant)))\n</pre>\n<p>\nmeans that all cats eat grass.\n<p>\nA more precise definition of forAll is as follows.  Any occurence of VAR that is free in SENT is bound in (forAll VAR SENT).  If VAR is the only variable free in SENT, then (forAll VAR SENT) is a closed sentence that is true if and only if every thing that meets all of the argument-type constraints (see ArgTypePredicate) to which the position(s) in SENT occupied by VAR is (are) subject to satisfies SENT. If the variable VAR does _not_ occur free in SENT, then (forAll VAR SENT) is equivalent to SENT (and the 'forAll' is said to be \"vacuous\").  If variables other than VAR occur free in SENT, then (forAll VAR SENT) is an open sentence in which those other variables are still free.\n<p>\nNote that, for the sake of convenience and readability, universally quantified assertions (i.e. \"rules\") in the Cyc Knowledge Base appear in the KB browser -- and may be asserted to the KB -- without (any of) their initial 'forAll's.  Such assertions are considered to be \"implicitly quantified\": they are interpreted by the system just as if their initial quantifiers were explicitly present.  Thus the above sentence about cats would actually appear in the KB as:\n<p>\n<pre>\n  (implies\n    (isa ?X Cat)\n    (eatsWillingly ?X Grass-Plant)) .\n</pre>\n<p>\nNote also that certain RuleMacroPredicates (e.g. those with 'All' in their names) can be used to abbreviate universally quantified sentences.  Thus the same statement about cats can be even more tersely expressed with the atomic sentence\n<p>\n<pre>\n  (relationAllInstance eatsWillingly Cat Grass-Plant) .\n</pre>\n<p>\nCf. the existential quantifier thereExists.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, followingValue, "An instance of both OrderingPredicate and ComparisonPredicate (qq.v.), and a specialization of both colinearQuantities and lessThan (qq.v.).  followingValue is simply the restriction of the very general lessThan relation to colinear Quantity[ies] (q.v.).  <code>(followingValue LO-QUANT HI-QUANT)</code> means that <code>LO-QUANT</code> and <code>HI-QUANT</code> are colinear quantities such that <code>HI-QUANT</code> is a higher or greater value than <code>LO-QUANT</code>.  It follows that there is some (unspecified) linear ordering (see TotallyOrderedQuantityType) to which both <code>LO-QUANT</code> and <code>HI-QUANT</code> belong.\n<p>\nNote that the above sentence would typically be asserted only if one or both of <code>LO-QUANT</code> and <code>HI-QUANT</code> are instances of GenericQuantity (or the more general NonNumericScalarQuantity), and -- as is usually the case -- they are not grounded in numerically-quantifiable units of measure (see NoteAboutGivingGenericValueFunctionsNumericValues).  If <code>LO-QUANT</code> and <code>HI-QUANT</code> <i>do</i> have numerical grounding, a followingValue assertion is unnecessary since numericallyEquals, greaterThanOrEqualTo, and greaterThan are automatically computable using arithmetic relations holding between the respective minimums and maximums (see minQuantValue and maxQuantValue) of <code>LO-QUANT</code> and <code>HI-QUANT</code>.  For example, one might well use followingValue to state that (HighAmountFn Glamour) is more glamorous than (LowAmountFn Glamour); but it is unnecessary to make a followingValue assertion about (MilesPerHour 5) and (MilesPerHour 25 35), since greaterThan is automatically computable in that case.\n<p>\nSee also GenericValueFunction and followingValueOnScale.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, fanOutArg, "<code>(fanOutArg PRED N)</code> means that transitively-related assertions using <code>PRED</code> usually \"fan out\" in the direction of argument position <code>N</code>.  For example, (fanOutArg geographicalSubRegions 2) means that usually a geographical region has more direct sub-regions than super-regions, so for any region <code>REG</code> there will likely be more assertions of the form <code>(geographicalSubRegions REG SUB)</code> than there are assertions of the form <code>(geographicalSubRegions SUPER REG)</code>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, extentCardinality, "<code>(extentCardinality SETORCOL N)</code> means that there are <code>N</code> terms in the currently represented extent of SetOrCollection <code>SETORCOL</code>.  See also cardinality.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, extConceptOverlapsColAndReln, "(extConceptOverlapsColAndReln COL RELN SOURCE STRING) means\nthat the external structured data source SOURCE variously uses the term\nnamed by STRING as a value that semantically maps to the Cyc Collection\nCOL, and as a slot that maps to the Cyc BinaryPredicate RELN.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, expresses, "A MetaLanguagePredicate (q.v.) and a specialization of means (q.v.) that relates a CycL sentence to the Proposition (if any) it expresses with respect to the intended model of the CycL language.  <code>(expresses SENTENCE PROPOSITION)</code> means that <code>SENTENCE</code> expresses, or has as its <i>intensional</i> meaning, <code>PROPOSITION</code>.\nIn order to express a proposition (see CycLPropositionalSentence), a CycL sentence must at the very least be closed and obey the arity of its main operator.\n<p>\nFor example, the sentence\n<pre>\n  (likesAsFriend Muffet Murray)\n</pre>\nexpresses the proposition that Muffet likes Murray, and we can represent that fact as follows:\n<pre>\n  (expresses\n    (Quote (likesAsFriend Muffet Murray))\n    (ThatFn (likesAsFriend Muffet Murray)))\n</pre>\nNow the above sentence is of course nearly trivial, given the intimate connection that exists between the function ThatFn and the expresses relation.  But, as we shall see, not all <code>expresses</code> sentences are trivial.\n<p>\nAs the example illustrates, the first argument-term in an <code>expresses</code> statement might consist of a particular CycL sentence wrapped with <code>Quote</code>.  But note that this need not be the case.  Suppose the above <code>likesAsFriend</code> sentence happened to be the first CycL assertion made by Muffet.  We might then reify a constant named <i>MuffetsFirstCycLAssertion</i> to denote that sentence.  Then we could say:\n<pre>\n  (expresses\n    MuffetsFirstCycLAssertion\n    (ThatFn (likesAsFriend Muffet Murray)))\n</pre> \nAs the example also illustrates, the second argument-term in an <code>expresses</code> statement might consist of a non-atomic term formed by applying the functor <code>ThatFn</code> to a particular CycL sentence.  But this also need not be the case.  Suppose the proposition that Muffet likes Murray happened to be Murray's favorite proposition.  We might then reify a constant named <i>MurraysFavoriteProposition</i> to denote that proposition.  Then we could say:\n<pre>\n  (expresses\n    MuffetsFirstCycLAssertion\n    MurraysFavoriteProposition)\n</pre> \nSee also denotes.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, expansionDefn, "(expansionDefn <Relation> <Symbol>) denotes that during canonicalization\nthe subl function definition of <Symbol> is used to transform an EL expression\n(<Relation> . <args>) into the appropriate HL formula.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, expansion, "Some relations (namely, instances of MacroRelation (q.v.)) can be defined in terms of more basic or primitive constructs. <code>(expansion RELATION FORMULA)</code> associates <code>RELATION</code> with the <code>FORMULA</code> that defines it. The arg2 is allowed to reference generic-argument keywords, such as :ARG1 :ARG2 which represent respectively the arg1 and the arg2 within uses of <code>RELATION</code>.  For example, <code>(expansion genls (implies (isa ?object :ARG1) (isa ?object :ARG2)))</code> indicates that the gaf <code>(genls Poodle Dog)</code> is defined as <code>(implies (isa ?object Poodle) (isa ?object Dog)))</code>. Importantly, the expansion-formula arg2 must be necessary and sufficient; it denotes the definition of the uses of relation arg1; there can be only one expansion for any relation.  Furthermore, no two relations can share a common expansion; thus, there can be only one possible contraction from a formula that corresponds to an expansion into a compact form that references expandable relations.  For example, <code>(implies (isa ?object Poodle) (isa ?object Dog)))</code> has the unambiguous contraction of <code>(genls Poodle Dog)</code>. The expansion arg2 can (and should when possible) make use of relations that have expansions.  Note that the example above references implies which would itself have the expansion <code>(or (not :ARG1) :ARG2)</code>.  Thus, the full expansion of a relation can involve recursive expansions.  For example, the full expansion of genls would be <code>(or (isa ?object :ARG1) (not (isa ?object :ARG2))))</code>.  No relation may reference itself (either directly or indirectly via recursion) in its expansion (or in its full recursive expansion).  See ELRelation, TermMacroFunction, expansionAxiom.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, exceptWhen, "A binary ExceptionPredicate that relates a general CycLAssertion to a condition (specified by a CycLSentence-Assertible) under which the assertion fails to hold, and thus under which the assertion should not be used as justification for other inferences.  <code>(exceptWhen EXCEPTION ASSERTION)</code> means that <code>ASSERTION</code> fails to hold in the case of <code>EXCEPTION</code>.  A default assumption is that <code>ASSERTION</code> <i>does</i> hold for all cases other than those covered by <code>EXCEPTION</code> (or by any other exception assertions there might be on <code>ASSERTION</code>).  For example, \n<pre>\n  (exceptWhen\n    (spatiallySubsumes NorthPoleOfEarth ?THING)\n    (implies \n      (isa ?THING GeographicalThing) \n      (thereExists ?OTHER \n        (northOf ?OTHER ?THING)))\n</pre>\t\nmeans that every geographical thing has something to the north of it, except when the former is spatially subsumed by the North Pole.  \n<p>\nNormally, as in the foregoing example, the <code>ASSERTION</code> is an (implicitly) universally quantified sentence, and the <code>EXCEPTION</code>, in effect, places a restriction on the range of values (for the universally quantified variables in <code>ASSERTION)</code> for which <code>ASSERTION</code> is true.  Since implicit universal quantification is always interpreted as having the widest possible scope, in the above example the occurrence of the variable <code>?THING</code> in the exception-giving sentence is interpreted as if it were bound by the same wide-scope universal quantifer that binds the two occurrences of <code>?THING</code> in the implies rule.\n<p>\nA common special case of exceptWhen is handled by exceptFor (q.v.).  \n<p>\nNote that assertions made at the EL level with exceptWhen are canonicalized into statements that do not contain exceptWhen, but instead contain the predicate abnormal (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, exceptMt, "(exceptMt MT) means that (except ASSERTION) is true for all ASSERTIONs asserted in MT. In other words, in the current microtheory ASSERTION is not known to be true.  If ASSERTION is a rule, it will not fire.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, exceptFor, "A binary ExceptionPredicate that relates a general CycLAssertion to a thing (specified by a CycLReifiableDenotationalTerm) for which the assertion fails to hold, and thus under which the assertion should not be used as justification for other inferences.  <code>(exceptFor TERM ASSERTION)</code> means that <code>ASSERTION</code> fails to hold for the denotatum of <code>TERM</code>.  A default assumption is that <code>ASSERTION</code> <i>does</i> hold for everything other than the denotatum of <code>TERM</code> (or any other known exceptions there might be on <code>ASSERTION</code>).  For example,\n<pre>\n     (exceptFor\n      Taiwan-RepublicOfChina\n      (implies\n        (isa ?X ChineseProvince)\n        (geopoliticalSubdivision China-PeoplesRepublic ?X)))\n</pre>\nmeans that Taiwan-RepublicOfChina is an exception to the rule that every Chinese province is a geo-political subdivision of the People's Republic of China.\n<p>\nexceptFor is a special case of exceptWhen (q.v.), and is only applicable when <code>ASSERTION</code> has exactly one (implicitly) universally quantified variable.  <code>(exceptFor TERM ASSERTION)</code> prevents <code>TERM</code> from binding to that variable, thereby blocking any conclusions about the denotatum of <code>TERM</code> that Cyc might otherwise draw from <code>ASSERTION</code>.\n<p>\nNote that assertions made at the EL level with exceptFor are canonicalized into statements that do not contain exceptFor, but instead contain the predicate abnormal (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, except, "(except ASSERTION) means that there is an exception to ASSERTION in the current microtheory such that ASSERTION is not known to be true.  If ASSERTION is a rule, it will not fire.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, exampleAssertions, "(exampleAssertions TERM ASSERTION) means that the CycLAssertion ASSERTION provides a good example of how to use the CycLReifiableDenotationalTerm TERM.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, exactlyAssertedEL, "A KBDependentRelation (q.v.) and specialization of assertedSentence (q.v.) that is used to state that a given CycLSentence-Assertible has been asserted in the KB (in some accessible Microtheory). More exactly, (exactlyAssertedEL SENT) is true in microtheory MT precisely when SENT canonicalizes without commutative handling of the sentence args into a set of clauses of the same form as the canonicalized form of some assertion in a microtheory accessible to MT. (The predicate is thus true both of assertions entered into the KB by hand and assertions deduced by Cyc from forward rules.)\n<p>\nThis predicate enables Cyc to select a subset of information when answering queries, filtering out more generic (asserted-without-commutative-canonicalization) information. Thus, for example, the query:\n<p>\n(assertedSentence (bordersOn CentralUSATimeZone EasternUSATimeZone))\n<p>\nwill return True (in appropriate microtheories), whereas:\n<p>\n(exactlyAssertedEL (bordersOn CentralUSATimeZone EasternUSATimeZone))\n<p>\nwill not.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, evaluationResultQuotedIsa, "A binary MetaRelation that holds between relations and collections. evaluationResultQuotedIsa is primarily used to indicate that any value returned by a given evaluatable function is a quoted instance of a given collection. Where FUNC is a Function-Denotational, (evaluationResultQuotedIsa FUNC COL) means that FUNC returns a quoted instance of COL for any sequence of arguments for which FUNC is defined. That is, (quotedIsa (FUNC ARG1 ... ARGn) COL) holds for any sequence <ARG1, ..., ARGN> for which FUNC has a value. For example, '(evaluationResultQuotedIsa SubstringFn SubLString)' holds, and it entails (e.g.) '(quotedIsa (SubstringFn \"ABC\" 1 2) SubLString)'.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, evaluationDefn, "A CycInferenceDescriptorPredicate and InferenceRelatedBookkeepingPredicate that is used to relate an Cyc-evaluatable function or predicate to the name of the piece of code that is used to evaluate it.  (evaluationDefn RELN NAME) means that the SubLSymbol NAME is the name of a piece of Heuristic Level (SubL) code in the Cyc system that is used to compute the value of closed CycL formulas built from (the CycL name of) the EvaluatableRelation RELN.  For example, the sentence '(evaluationDefn MinusFn CYC-MINUS)' is asserted in the Knowledge Base.'", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, evaluateImmediately, "(evaluateImmediately FUNCTION) means that the canonicalizer will translate each non-atomic term (see the collection CycLNonAtomicTerm) whose initial (or \"0th\" argument-place) term denotes FUNCTION into the value to which the non-atomic term evaluates.  For example, if (evaluateImmediately PlusFn) held, then the non-atomic term `(PlusFn 2 3 4)' would canonicalize as `9'.  Note that a non-atomic term containing a nested non-atomic term whose initial term denotes another instance of EvaluatableFunction (call that instance OTHER-FUNCTION) will not canonicalize in this way, unless (evaluateImmediately OTHER-FUNCTION) is also true.  For example, `(PlusFn 2 (DifferenceFn 3 4))' would not canonicalize as `1' unless    \n(evaluateImmediately DifferenceFn) were also true.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, evaluateAtEL, "(evaluateAtEL FUNCTION) means that the canonicalizer will translate each non-atomic term (see the collection CycLNonAtomicTerm) whose  initial (or \"0th\" argument-place) term denotes FUNCTION into the value to which the non-atomic term evaluates.  For example, if (evaluateAtEL PlusFn) holds in  a Microtheory MT, then the non-atomic term `(PlusFn 2 3 4)' will canonicalize as `9' in that MT.  Note that a non-atomic term containing a nested non-atomic term whose initial term denotes another instance of EvaluatableFunction (call that instance OTHER-FUNCTION) will not canonicalize in this way, unless (evaluateAtEL OTHER-FUNCTION) is also true in MT.  For example, `(PlusFn 2 (DifferenceFn 3 4))' will not canonicalize as `1' in MT unless    \n(evaluateAtEL DifferenceFn) is also true in MT.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, evaluate, "A binary MetaLanguagePredicate that relates a thing to a thing that is known to denote it.  <code>(evaluate THING TERM)</code> means that <code>TERM</code> evalutes to <code>THING</code>: the Cyc system \"knows\" that <code>TERM</code> denotes <code>THING</code>.\n<p>\nNote that evaluate is notAssertible (q.v.).  Its most common uses are in rules or queries, with its first argument-place filled (syntactically speaking) with a variable.  In a query, evaluate is typically used to establish a binding between such a variable and an evaluatable expression.  If VAR is a variable, a literal of the form <code>(evaluate VAR TERM)</code> is satisfied by an HL module that evaluates <code>TERM</code> and binds <code>VAR</code> to the result.  For example, the literal '<code>(evaluate ?SUM (PlusFn 1 2))</code>' would bind '<code>?SUM</code>' to 3.  If evaluate's arg1 position is filled instead with a closed expression, then the HL module checks to see if the arg2 term evaluates to the denotatum of that arg1 expression.  For example, if asked the sentence '<code>(evaluate 3 (PlusFn 1 2))</code>' the system will return 'True'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, equiv, "A LogicalConnective that represents bi-directional implication in CycL.  It takes two arguments, each of which must be an instance of ELSentence-Assertible. (equiv FORMULA-1 FORMULA-2) means that FORMULA-1 is true precisely when FORMULA-2 is true; in other words, FORMULA-1 is true if and only if FORMULA-2 is true.  (An EL equiv formula is translated during canonicalization into an equivalent, less compact, conjunction of implies formulas.) See also the predicate sentenceEquiv.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, equalSymbols, "A binary MetaPredicate and a specialization of equals, both of whose arguments are quotedArguments (q.v.), that can be used to make identity assertions about symbols.  Stated loosely,  <code>(equalSymbols X Y)</code> means that <code>X</code> and <code>Y</code> are one and the same symbol.  Given that the arguments are \"quoted\", however, it is more accurate to say: A closed atomic formula consisting of the expression <code>equalSymbols</code> followed by CycL expressions <code>A</code> and <code>B</code> (all enclosed within a pair of parentheses) is true if and only if <code>A</code> and <code>B</code> are (two occurrences of) the same expression.\n<p>\nNote that this is stronger than merely saying that <code>A</code> and <code>B</code> denote the same thing.  As an example (using English expressions for convenience), the name 'Bertrand Russell' and the description 'the author of \"On Denoting\"' are two different expressions, even though they both denote the same person.  Two symbols can even share the same intensional meaning and still be different symbols; e.g. 'bachelor' and 'unmarried male'.  The relation equalSymbols <i>does</i> hold, however, between 'bachelor' and 'bachelor' (at least if we pretend that 'bachelor' is a CycL expression), as it does between the CycL constant <code>BertrandRussell</code> and the CycL constant <code>BertrandRussell</code>.\n<p>\nSee also differentSymbols.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, equals, "The binary identity relation.  <code>(equals THING1 THING2)</code> means that <code>THING1</code> and <code>THING2</code> are \"numerically\" (as opposed to \"qualitatively\") identical, i.e. they are one and the same thing.  A sentence of the above form is true if and only if the terms occupying the two argument-places of 'equals' denote the same thing.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, ephemeralTerm, "(ephemeralTerm TERM) states that TERM is a term that only has meaning in this particular copy of the knowledge base.  A such, it can be viewed as an ephemeral concept which could likely be forgotten at some future point in time, perhaps by an explicit 'forgetting' process.  See also termDependsOn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, elInverse, "A binary RuleMacroPredicate and a specialization of genlInverse that relates a binary EL-only (see ELRelation-OneWay) predicate with its non-EL-only \"inverse correlate\".   (elInverse PRED EL-PRED) means that whenever a sentence of the form (EL-PRED ARG1 ARG2) is used to make an assertion, the CycCanonicalizer \"transforms\" it into the logically equivalent form (PRED ARG2 ARG1), and the latter is what actually gets stored in the Knowledge Base.\n<p>\nFor example, (genlInverse genls specs) entails that if I assert the sentence '(specs Animal Cat)', what gets stored in the KB is the sentence '(genls Cat Animal)'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, elementOf, "A very general binary predicate that relates a thing to any set or collection (see SetOrCollection) that it is a member or element of. <code>(elementOf THING SETORCOL)</code> means that <code>THING</code> is an element of <code>SETORCOL</code>.  \n<p>\nelementOf is a more general relation than isa.  Whereas isa is used exclusively to talk about membership in Collections,  elementOf can also be used to talk about membership in mathematical sets (see Set-Mathematical).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, distributesOutOfArg, "(distributesOutOfArg <reln> <pred> <n>) is a directive to the canonicalizer that relation <reln> distrbutes out of a predicate <pred> when it appears as the top-most relation in the predicate's arg <n>.  Specifically, it denotes (distributesOutOfArg <reln> <pred> <n>) denotes that the canonicalizer will translate\n<p>\n(<pred> <arg-1> ... <arg-n-1> (<reln> <arg-n1> <arg-n2> ... <arg-nm>) <arg-n+1> ..)\n<p>\ninto\n<p>\n(<reln> (<pred> <arg-1> ... <arg-n-1> <arg-n1> <arg-n+1> ...)\n(<pred> <arg-1> ... <arg-n-1> <arg-n2> <arg-n+1> ...)\n...\n(<pred> <arg-1> ... <arg-n-1> <arg-nm> <arg-n+1> ...))", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, disjointWith, "A TaxonomicSlot predicate that relates Collections  (q.v.) that have no instances in common. <code>(disjointWith COL1 COL2)</code> means that <code>COL1</code> is disjoint with <code>COL2</code>: nothing is an instance of both. That is, there is no <code>THING</code> such that both <code>(isa THING COL1)</code> and <code>(isa THING COL2)</code> hold. For example, <code>(disjointWith Herbivore Carnivore)</code> holds because no animal is both a herbivore and a carnivore. Note that disjointWith is <b>not</b> irreflexive (see IrreflexiveBinaryPredicate): it is possible for a collection to be disjoint with itself, though only if it is empty (i.e. has no instances). Thus, for example, <code>(disjointWith Nothing Nothing)</code> holds.  Cf. intersectsWith.\n<p>\nAlso note that it is quite possible for two second (or higher) order collections to be disjoint even if an instance of one collection and an instance of the other collection themselves share instances.  Consider, for example, the disjoint collections SpatialThingTypeByShape and SpatialThingTypeByDimensionality.  RoundObject is an instance of the first and ThreeDimensionalThing is an instance of the second; and any solid spherical object is an instance of both of these latter collections.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, differentSymbols, "This variable-arity predicate (see VariableArityRelation), all of whose argument-places are quotedArguments (q.v.), is used to make non-identity statements about two or more symbols. Stated loosely, (differentSymbols X1 X2 ... Xn) means that each of the Xi is a symbol that is different from all of the others.  Given that the arguments are \"quoted\", however, it is more accurate to say: A ground atomic formula (or \"GAF\"; see CycLClosedAtomicSentence) consisting of the expression `differentSymbols' followed by the CycL expressions E1, ..., En (all enclosed within a pair of parentheses) is true if and only if each Ei is a different expression from all of the others.  Note that two symbols can denote the same thing (in ordinary circumstances) and still be different symbols.  As an example (using English expressions for convenience), the proper name `Bertrand Russell' and the descriptive phrase `the author of \"On Denoting\"' are two different expressions, even though they both denote the same person. Two symbols can even share the same intensional meaning and yet be different symbols; e.g. `bachelor' and `unmarried man'.  The sentence `(differentSymbols BertrandRussell BertrandRussell)', on the other hand, is false.  See also equalSymbols and different.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, different, "A variable-arity predicate (see VariableArityRelation) that is used to state the non-identity of two or more things. <code>(different THING1..THINGn)</code> means that for any <code>THING</code>i and <code>THING</code>j (where 0 <= i <= n, 0 <= j <= n, and i =/ j), <code>THING</code>i is not identical with <code>THING</code>j.  That is, each of <code>THING</code>1, ..., <code>THING</code>n is distinct from all of the others.  Cf. equals.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, denotes, "A MetaLanguagePredicate (q.v.) that relates CycLDenotationalTerm to their denotata: the things in the intended model of the CycL language that those terms denote or stand for.  <code>(denotes TERM THING)</code> means that <code>TERM</code> denotes <code>THING</code>.  <code>TERM</code> will often be explicitly quoted, by being wrapped in the syncategorematic quotation symbol 'Quote'.  For example, the true sentence '(denotes (Quote Plato) Plato)' means that the CycL term 'Plato' denotes the person Plato.  (Thus denotes's first argument-place is <i>not</i> \"implicitly quoted\"; cf. quotedArgument).\n<p>\nBut note that the first argument of denotes might <i>not</i> be quoted at all.  Suppose (e.g.) that the term 'Plato' were the CycL constant most beloved of Cyclists, and that a new constant 'CyclistsFavoriteConstant' were reified and defined so as to reflect this fact.  Then 'CyclistsFavoriteConstant' would refer to the CycL constant 'Plato', which in turn denotes the man Plato; and so the sentence '(denotes CyclistsFavoriteConstant Plato)' -- which involves no quotation -- would be true.\n<p>\nNote also that not all CycL terms denote, not even all CycLClosedDenotationalTerms (q.v.).  For example, the term '(BorderBetweenFn Canada Mexico)' fails to denote anything (except perhaps in certain counterfactual contexts).\n<p>\nNote finally that the sentence '(denotes Plato Plato)' is of course <i>not</i> true, as it means that the man Plato is a CycL term that denotes the man Plato, which is a patent falsehood since no man is a CycL term and no man denotes anything.\n<p>\nSee also means, expresses, hasDenotatum, quotedIsa, EscapeQuote, and the shared NoteAboutQuotingInCycL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, defnSufficient, "A CycInferenceDescriptorPredicate.  (defnSufficient COL TEST) means that TEST is the name of a piece of code in the SubL implementation of Cyc that specifies, and tests for, a sufficient condition for a CycL term's denoting an instance of (see isa) the collection COL.  If TEST returns `T' (for `True') when applied to a particular term, then that term's denotatum is considered to be an instance of COL.  Note that TEST isn't necessarily a necessary test for membership in COL; that is, not all instances of COL must pass the test, unless TEST is also a defnNecessary for COL.  See the related predicates defnNecessary and defnIff.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, defnNecessary, "A CycInferenceDescriptorPredicate.  \n(defnNecessary COL TEST) means that TEST is the name of a piece \nof code in the SubL implementation of Cyc that specifies, and tests \nfor, a necessary condition for a CycL term's denoting an instance of \n(see isa) the collection COL.  Only if TEST returns `T' (for \n`True') when applied to a particular term can that term's \ndenotatum be considered an instance of COL; all terms that denote \ninstances of COL must fulfill TEST's requirements, although there \nmay be additional requirements for denoting an instance of COL as \nwell.  See also defnSufficient and defnIff.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, defnIff, "A CycInferenceDescriptorPredicate.  (defnIff COL TEST) means \nthat TEST is the name of a piece of code in the SubL implementation \nof Cyc that specifies, and tests for, a necessary and sufficient \ncondition for a CycL term's denoting an instance of (see isa) the \ncollection COL.  If and only if TEST returns `T' (for `True') when \napplied to a particular term can that term's denotatum be considered \nan instance of COL; all and only terms that denote instances of COL \nmust fulfill TEST's requirements.  See also defnNecessary and \ndefnSufficient.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, definingMt, "(definingMt TERM MT) states that TERM only begins to have semantic meaning in microtheory MT. In microtheories in which MT is not  accessible, TERM is undefined. Additionally,  (termDependsOn TERM MT).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, defaultReformulatorModePrecedence, "(defaultReformulatorModePrecedence PRIMARY-MODE\nSECONDARY-MODE TERTIARY-MODE ...), asserted in the microtheory MT,\nmeans that in MT or a specMt thereof (unless overridden),\nthe CycLReformulator will use PRIMARY-MODE as its primary mode,\nSECONDARY-MODE as its secondary mode, etc.  This helps the\nreformulator establish precedence of CycLReformulatorDirectives.\nDo not specify both tersify and verbosify.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, defaultReformulationDirectionInModeForPred, "If the CycLReformulator is operating in MT in the mode MODE, and it\nencounters a reformulation rule with no reformulationDirectionInMode\nmeta-assertion for MODE stated in MT or a genlMt thereof, the extent of this\npredicate will be used to determine the reformulation direction of the\nrule.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, decontextualizedPredicate, "(decontextualizedPredicate PRED) states that PRED is a predicate which is context-independent.  In effect, any use of PRED can be lifted into any microtheory.  Predicates which are labelled with decontextualizedPredicate typically have an argument which either implicitly or explicitly provides the implied context.  A good example of such a predicate is ist.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, decontextualizedCollection, "(decontextualizedCollection COL) states that COL is a collection in which membership is context-independent.  In effect, any instance of COL is an instance of COL in every microtheory.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, cycTransformationProofRule, "(cycTransformationProofRule PROOF RULE) means that RULE is the rule used by PROOF to prove its proven query.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, cycTransformationProofBindings, "(cycTransformationProofBindings TRANSFORMATION-PROOF BINDING) means that BINDING is an InferenceBinding (using the appropriate variable from the transformation rule for TRANSFORMATION-PROOF) proven by TRANSFORMATION-PROOF.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, constraint, "(constraint RULE) labels a given RULE assertion as a constraint.  Constraints are typically used to verify that a given logical expectation is already true, rather than to deduce (and then add) a new formula which would satisfy the expectation.  In other words, if a rule (implies P(?X) Q(?X)) is labelled as a constraint, then when P(?X) is determined to be true, we verify that Q(?X) is already true rather than add a new argument for Q(?X) using the rule and P(?X) as justification.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, constrainsArg, "A MetaRelation predicate for stating that a given meta-relation is used to put an argument-type or format constraint (see e.g. ArgConstraintPredicate) on a given argument-place of a relation. (constrainsArg METARELN N) means that METARELN is always used to put a constraint on a relation's Nth argument-place.  For example, (constrainsArg arg2Isa 2) holds.  A slight deviation from the above occurs when N is 0: we take (constrainsArg METARELN 0) to mean that METARELN is used to constrain _all_ of a relation's argument-places; see e.g. argsIsa and argsGenl.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, constantName, "(constantName CONSTANT STRING) means that the SubLString STRING is the \"name\" for the CycLConstant CONSTANT.  That is, STRING is the string of characters that make up CONSTANT, minus the initial \"#\" and the following \"$\".", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, constantID, "A predicate which relates each Cyc constant to an internal identification number for it. This number is unique within any given image, though not necessarily across images (for that, see constantGUID). <code>(constantID CONSTANT ID)</code> states that the NonNegativeInteger <code>ID</code> is the unique internal id for the CycLConstant <code>CONSTANT</code> (in the current image). For obvious reasons, this predicate is notAssertible.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, constantGUID, "A strictly functional slot used to associate CycL constants with the GUID strings they are assigned. <code>(constantGUID CONSTANT GUID-STR)</code> means that the CycLConstant <code>CONSTANT</code> is associated with the GUIDString <code>GUID-STR</code>.  The arg1 position of this predicate is \"quoted\", so, for example, (constantGUID Dog  \"bd58daa0-9c29-11b1-9dad-c379636f7270\") means that the constant \"Dog\" itself, not the collection of dogs, is associated with the GUIDString \"bd58daa0-9c29-11b1-9dad-c379636f7270\".", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, consistent, "A predicate which asserts of sentences that they do not contradict currently known facts. (consistent SENTENCE) means that the CycLSentence-Assertible SENTENCE is consistent with assertions known in the current context.  Consequently, (consistent SENTENCE) holds in a Microtheory MT just in case, for any assertion ASSERT that holds in MT, SENTENCE does not imply the negation of ASSERT.  Note that this predicate is notAssertible. See also inconsistentWithMt.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, conceptuallyRelated, "This predicate is used to state the fact of a conceptual link between two things, where a very complex sentence would be required in order to describe the precise nature of this link explicitly.  Examples of such conceptually-linked couples include PublicTransportationDevice / PublicTransportationScheduleDocument and Dog / DogFood.  The rationale for having such a predicate as conceptuallyRelated is similar to that behind many RuleMacroPredicates (q.v.).  Having complex relationships represented -- possibly redundantly -- in a more compact fashion makes for faster retrieval. Because things can be conceptually related in many different ways, no explicit definition for this predicate is provided.  Note that conceptuallyRelated is _not_ a SymmetricBinaryPredicate (q.v.); but see conceptuallyCoRelated for a specialization of this predicate that is symmetric.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, completelyEnumerableCollection, "A unary InferenceCompletenessPredicate that is a specialization of completelyDecidableCollection (qq.v.).  <code>(completelyEnumerableCollection COL)</code> means that the CycInferenceEngine can generate a list of all of (and only) the instances of <code>COL</code>.  More precisely: given a query of the form <code>(isa VAR COL)</code>, the Inference Engine can (without using transformations) return a list of terms -- bindings for the variable <code>VAR</code> -- such that every instance (and no non-instance) of the collection <code>COL</code> is denoted by some binding on the list.\n<p>\nFor example, SkolemFunction is a completely enumerable collection.  (But note that SkolemFunction does <i>not</i> satisfy the more specialized completelyAssertedCollection (q.v.), as most of its instances are only asserted to be instances of one of its specializations, such as FixedAritySkolemFunction.)\n<p>\nSee also completeExtentEnumerable, which applies to Predicates.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completelyDecidableCollection, "A unary InferenceCompletenessPredicate (q.v.) that applies to collections.  <code>(completelyDecidableCollection COL)</code> means that the CycInferenceEngine can determine if any given thing is an instance of <code>COL</code>.  More precisely: for any given instance <code>INST</code> whatsoever (and for no non-instances) of <code>COL</code>, there is a CycL term <code>INST-TERM</code> that denotes <code>INST</code> such that (without using transformations) the Inference Engine, given a query of the form <code>(isa INST-TERM COL)</code>, will return the answer <code>True</code>.\n<p>\nFor example, the collection Integer is completely decidable. Given any integer <code>INT</code>, the Cyc query <code>(isa INT Integer)</code> -- wherein <code>INT</code> is given its standard base-10 arabic numeral representation -- will come back <code>True</code>.\n<p>\nIf <code>COL</code> is completely decidable and Cyc fails to return <code>True</code> for some query <code>(isa TERM COL)</code>, that fact consitutes a strong argument for the truth of its negation <code>(not (isa TERM COL))</code>.  But note that it is not a conclusive argument: the normally-reliable \"unique name assumption\" might fail here, and the term <code>TERM</code> could conceivably denote something that Cyc can prove to be an instance of <code>COL</code> only under some <i>other</i> CycL name it has.  For suppose Pace's favorite number happens to be 3, but nobody has told that to Cyc.  Cyc can prove the sentence <code>(isa 3 Integer)</code>; but it might nevertheless fail to prove the equally true sentence\n<pre>\n  (isa (<b>FavoriteNumberOfFn</b> Pace) Integer) .\n</pre>\nSee also the more specific predicates completelyEnumerableCollection and completelyAssertedCollection.  And see completeExtentDecidable, which applies to Predicates.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentEnumerableViaBackchain, "A unary InferenceCompletenessPredicate and a specialization of  minimizeExtent (qq.v.) that applies to predicates whose entire extents can be enumerated by reference to the transformation rules currently asserted on it.  For example, surgicalIncisionEmployed is completeExtentEnumerableViaBackchain in the context of certain medical domain microtheories because the pair of rules on it are sufficient to completely generate its entire extent within those microtheories.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentEnumerableForValueInArg, "A ternary InferenceCompletenessPredicate and a specialization of completeExtentDecidableForValueInArg (q.v.) that can apply to a predicate and a specified value for a specified argument-place.  <code>(completeExtentEnumerableForValueInArg PRED VALUE N)</code> means that the CycInferenceEngine can enumerate every sequence in the extent of <code>PRED</code> whose <code>N</code>th item is <code>VALUE</code>.  In practical terms this means that, if asked a query of the form <code>(PRED ... VALUE ...)</code>, where <code>VALUE</code> appears in the <code>N</code>th argument-position and all of the other positions (>= 1) are filled with variables, the Inference Engine can return an extensionally complete list of binding-sequences for those variables.  That is, for every sequence <code>SEQ</code> in <code>PRED</code>'s extension whose <code>N</code>th member is <code>VALUE</code> (and for nothing else), the returned list contains a sequence of bindings (i.e. CycL terms) whose members denote, pointwise, the members of <code>SEQ</code> excepting <code>VALUE</code>.\n<p>\nFor example, (completeExtentEnumerableForValueInArg hasMembers InternationalMonetaryFund 1) holds, as Cyc can enumerate all the members of the International Monetary Fund.\n<p>\nIf PRED's extent is completely enumerable for <code>VALUE</code> in the <code>N</code>th argument and a given sequence of bindings <<code>TERM1</code>, ..., <code>TERM(N-1)</code>, <code>TERM(N+1)</code>, ...> (whose length matches the arity of <code>PRED</code>, if fixed) is <i>not</i> returned for the above query, that fact consitutes a strong argument for the truth of the negation (not <code>(PRED TERM1 ... TERM(N-1) VALUE TERM(N+1) ...))</code>.  But note that it is not a conclusive argument: the normally-reliable \"unique name assumption\" might fail here, and a term <code>TERM</code>i could conceivably denote something that Cyc can prove a member of a sequence in the extent of <code>PRED</code> only under some <i>other</i> CycL name it has.  For suppose Pace resides in Texas, but nobody has told that to Cyc.  Cyc can return the binding 'Texas-State' for the query '(cityInState CityOfDallasTX ?X)'; but it might nevertheless fail to return the equally correct binding '(StateOfResidenceFn Pace)'.\n<p>\nSee also the specialization completeExtentAssertedForValueInArg and see completeExtentEnumerableForArg.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentEnumerableForArg, "A binary InferenceCompletenessPredicate (q.v.) that can apply to a predicate and a specified argument-place.  (completeExtentEnumerableForArg PRED N) means that, for any given thing ARGN, the CycInferenceEngine can enumerate every sequence in the extent of PRED whose Nth item is ARGN (see relationExtension and relationHoldsAmong).  In practical terms this means that, if asked a query of the form (PRED ... ARGN ...), where all of PRED's argument-places save the Nth are filled with variables, the Inference Engine can return an extensionally complete list of binding-sequences for the other (i.e. non-Nth) arguments.  That is, for every sequence SEQ in PRED's extension whose Nth member is ARGN (and for nothing else), the returned list contains a sequence of bindings (i.e. CycL terms) whose members denote, pointwise, the members of SEQ excepting ARGN.\n<p>\nFor example, (completeExtentEnumerableForArg cityInState 1) holds: given any city, Cyc can return a list of all the states (i.e. the one state, if any) in which it is located.\n<p>\nIf PRED's extent is completely enumerable for the Nth argument and a given sequence of bindings <TERM1, ..., TERM(N-1), TERM(N+1), ...> (whose length matches the arity of PRED, if fixed) is not returned for the above query, that fact consitutes a strong argument for the truth of the negation (not (PRED TERM1 ... TERM(N-1) ARGN TERM(N+1) ...)).  But note that it is not a conclusive argument: the normally-reliable \"unique name assumption\" might fail here, and a term TERMi could conceivably denote something that Cyc can prove a member of a sequence in the extent of PRED only under some _other_ CycL name it has.  For suppose Pace resides in Texas, but nobody has told that to Cyc.  Cyc can return the binding 'Texas-State' for the query '(cityInState CityOfDallasTX ?X)'; but it might nevertheless fail to return the equally correct binding '(StateOfResidenceFn Pace)'.\n<p>\nSee also completeExtentEnumerable and completeExtentEnumerableForValueInArg).", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentEnumerableForArg, "(completeExtentEnumerableForArg PRED ARGNUM) means that when the CycInferenceEngine   is asked a query of the form (PRED ... ARG ...) where ARG is any closed term in the                  ARGNUMth position, it can completely enumerate all possible bindings for the other argument          positions.                                                                                           This means that for any arguments (PRED ... NOT-ARGi ... ARG ... NOT-ARGj) for which the             NOT-ARGs are not a member of the enumerated bindings,                                                (not (PRED ... NOT-ARGi ... ARG ... NOT-ARGj)) is true.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentEnumerable, "A unary InferenceCompletenessPredicate and a specialization of completeExtentDecidable and minimizeExtent (qq.v.) that applies to predicates whose entire extents can be enumerated by the CycInferenceEngine.  <code>(completeExtentEnumerable PRED)</code> means that the Inference Engine can, without using transformations, generate a list of all of (and only) the sequences of things among which <code>PRED</code> holds (see relationExtension and relationHoldsAmong).\n<p>\nFor example, (completeExtentEnumerable assertedSentence) holds, as the Inference Engine could, if asked, list all of the assertions in the Knowledge Base.  Conversely, although the Inference engine could correctly determine if any given CycL sentence is in the extent of knownSentence (i.e completeExtentDecidable holds of knownSentence), it could not generate a list of all CycL sentences in the extent of knownSentence.\n<p>\nThe practical import of completeExtentEnumerable can be stated more precisely as follows.  Let's say that an N-length sequence of terms \"pointwise-denotes\" an N-length sequence of things just in case each term in the former denotes the corresponding item in the latter.  Suppose <code>(completeExtentEnumerable PRED)</code> holds.  If <code>PRED</code> is a FixedArityRelation of arity N and <code>VAR1...VARN</code> are N distinct CycLVariables, then, given a query of the form <code>(PRED VAR1 ... VARN)</code>, the Inference Engine can, without the use of Transformation Modules, return a list of N-length sequences of terms -- each sequence consisting of bindings for the respective variables <code>VAR1-VARN</code> -- such that every sequence in <code>PRED</code>'s extent (and nothing else) is pointwise-denoted by some term-sequence on the list.   If <code>PRED</code> is a VariableArityRelation, it is the same, except the given query should then have the form <code>(PRED . VARS)</code>, and there might be no constant length N shared by all of the term-sequences in the returned list.\n<p>\nIf <code>PRED</code>'s extent is completely enumerable and a given term-sequence <code><TERM-1, ..., TERM-N></code> is <i>not</i> in the list returned for the above query, that fact consitutes a <i>strong argument</i> for the truth of the negation <code>(not (PRED TERM-1 ... TERM-N))</code>, assuming that it's semantically well-formed.  But note that it is <i>not a conclusive argument</i>: the normally-reliable \"unique name assumption\" might fail here, and some term <code>TERM-I</code> could conceivably denote something that Cyc can prove to be a member of something in the extent of <code>PRED</code> only under some <i>other</i> CycL name it has.  For suppose Pace was also denoted by the (imaginary) CycL term <code>ErasmusCAnderson</code>, but Cyc did not know that Pace and Erasmus C. Anderson are the same person.  Cyc will return the term-sequence <<code>Pace, GeneralCycKE</code>> for the query <code>(cyclistPrimaryProject ?X ?Y)</code>; but it might nevertheless <i>fail</i> to return the sequence <<code>ErasmusCAnderson, GeneralCycKE</code>>, even though the sentence\n<pre>\n  (cyclistPrimaryProject ErasmusCAnderson GeneralCycKE)\n</pre>\nwas in fact true.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentDecidableForValueInArg, "(completeExtentDecidableForValueInArg PRED VALUE ARGNUM) means that when the            CycInferenceEngine                                                                                 is asked a closed query of the form (PRED ... VALUE ...) where VALUE appears in the                  ARGNUMth position, either it can prove (PRED ... VALUE ...) without transformation,                  or (not (PRED ... VALUE ...)) is true.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentDecidable, "A unary InferenceCompletenessPredicate (q.v.) that applies to predicates.  <code>(completeExtentDecidable PRED)</code> means that the CycInferenceEngine can determine if any given sequence of things is in the extent of <code>PRED</code> (see relationExtension and relationHoldsAmong).  More precisely: for any given n-length sequence <code>SEQ</code> among which <code>PRED</code> holds (and for nothing else), there are CycL terms <code>TERM<sub>1</sub></code>, ..., <code>TERM<sub>N</sub></code> that denote the respective items in <code>SEQ</code> such that (without using transformations) the Inference Engine, given a query of the form <code>(PRED TERM<sub>1</sub> ... TERM<sub>N</sub>)</code>, will return the answer <code>True<code>.\n<p>\nFor example, <code>(completeExtentDecidable integerBetween)</code> holds, as the Inference engine can correctly determine if any given triple of integers is such that the second member is numerically between the first and third.  Conversely, the extent of likesAsFriend is not decidable, as many of the friendships in the world are beyond Cyc's ken.\n<p>\nIf <code>PRED</code>'s extent is completely decidable and there are CycL terms <code>TERM<sub>1</sub>, ..., TERM<sub>N</sub></code> such that the sentence <code>(PRED TERM<sub>1</sub> ... TERM<sub>N</sub>)</code> is semantically well-formed but <i>not</i> provable by the Inference Engine, that fact consitutes a strong argument for the truth of its negation <code>(not (PRED TERM<sub>1</sub> ... TERM<sub>1</sub>))</code>.  But note that it is not a conclusive argument: the normally-reliable \"unique name assumption\" might fail here, and some <code>TERM<sub>I</sub></code> could conceivably denote something that Cyc can prove to be a member of a sequence in the extent of <code>PRED</code> only under some <i>other</i> CycL name it has.  For suppose Pace's favorite number happens to be 3, but nobody has told that to Cyc.  Cyc can prove the sentence <code>(integerBetween 1 2 3)</code>; but it might nevertheless fail to prove the equally true sentence\n<pre>\n  (integerBetween 1 2 (FavoriteNumberOfFn Pace)) .\n</pre>\nSee also the more specific predicates completeExtentEnumerable and completeExtentAsserted.  And see completelyDecidableCollection.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentAssertedForValueInArg, "A ternary InferenceCompletenessPredicate and a specialization of completeExtentEnumerableForValueInArg (q.v.) that can apply to a predicate and a specified value for a specified argument-place.  (completeExtentAssertedForValueInArg PRED VALUE N) means that for every sequence of arguments that PRED holds of and whose Nth member is VALUE, there is an explicit assertion to that effect in the Cyc Knowledge Base.  Thus, if asked a query of the form (PRED ... VALUE ...), where VALUE appears in the Nth argument-position and all of the other positions (>= 1) are filled with variables, the Inference Engine -- simply via lookup of assertions in the KB -- can return an extensionally complete list of binding-sequences for those variables.  That is, for every sequence SEQ in PRED's extension whose Nth member is VALUE (and for nothing else), the returned list contains a sequence of bindings (i.e. CycL terms) whose members denote, pointwise, the members of SEQ excepting VALUE.\n<p>\nFor example, (completeExtentAssertedForValueInArg hasMembers InternationalMonetaryFund 1) holds, as all the members of the International Monetary Fund are asserted to be such in the KB.\n<p>\nIf PRED's extent is completely asserted for VALUE in the Nth argument and a given sequence of bindings <TERM1, ..., TERM(N-1), TERM(N+1), ...> (whose length matches the arity of PRED, if fixed) is not returned for the above query, that fact consitutes a strong argument for the truth of the negation (not (PRED TERM1 ... TERM(N-1) VALUE TERM(N+1) ...)).  But note that it is not a conclusive argument: the normally-reliable \"unique name assumption\" might fail here, and a term TERMi could conceivably denote something that Cyc can prove a member of something in the extent of PRED only under some _other_ CycL name it has.  For suppose Pace resides in Texas, but nobody has told that to Cyc.  The KB contains the assertion '(cityInState CityOfDallasTX Texas-State)'; but it might nevertheless fail to contain the equally true sentence '(cityInState CityOfDallasTX (StateOfResidenceFn Pace))'.\n<p>\nSee also completeExtentAsserted.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, completeExtentAsserted, "A unary InferenceCompletenessPredicate and a specialization of completeExtentEnumerable (q.v.) that applies to predicates whose entire extents are explicitly asserted in the Cyc Knowledge Base.  <code>(completeExtentAsserted PRED)</code> means that, for every sequence <code><THING1,..., THING<sub>N</sub>></code> that satisfies <code>PRED</code>, <code>(PRED THING1 ... THING<sub>N</sub>)</code> is asserted in the Knowledge Base.  That is, for each such sequence, there are reified CycL terms <code>PRED-NAME</code>, <code>TERM1</code>, ..., <code>TERM<sub>N</sub></code> -- which denote <code>PRED</code>, <code>THING1</code>, ..., <code>THING<sub>N</sub></code>, respectively -- such that the sentence <code>(PRED-NAME TERM1 ... TERM<sub>N</sub>)</code> built from those terms is an assertion in the KB.\n<p>\nIf completeExtentAsserted is true of <code>PRED</code>, then the CycInferenceEngine, when asked a query of the form <code>(PRED <b>. VARS</b>)</code>, can return a complete set of bindings for the variables in <code>VARS</code> simply via a lookup of assertions in the KB.  By a \"complete set of bindings\" is meant a set of sequences of terms such that, for each sequence <code><THING1, ..., THING<sub>N</sub>></code> in the extent of <code>PRED</code>, there is a corresponding sequence of terms <code><TERM1, ..., TERM<sub>N</sub>></code> returned wherein each <code>TERM<sub>I</sub></code> denotes <code>THING<sub>I</sub></code> (for 1 <= <code>I</code> <= <code>N</code>).\n<p>\nFor example, (completeExtentAsserted hourOfDayIndex-24Hour) holds.  Thus, the sentence <code>(hourOfDayIndex-24Hour TimeOfDay-1AM 1)</code> is one of twenty-four similar ground-atomic sentences asserted in the KB.  Conversely, (completeExtentAsserted argN) does <i>not</i> hold.  Thus, while the Inference Engine could generate the set of all true <code>argN</code> based ground-atomic sentences (i.e. completeExtentEnumerable holds of argN), the members of this set are not all asserted in the KB.\n<p>\nSee also completelyAssertedCollection, which applies to collections rather than predicates.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, commutativeInArgsAndRest, "A variable-arity MetaRelation used for \nstating that a given PartiallyCommutativeRelation (q.v.) is \"commutative\" \nwith respect to two or more argument-places, including all argument-places that \ncome after the ordinally highest one that is explicitly specified.  \n(commutativeInArgsAndRest RELN ARGNUM-1 ARGNUM-2 ... ARGNUM-N) means that \nRELN is commutative in its ARGNUM-1th, ARGNUM-2th, ..., and ARGNUM-Nth \narguments-places, along with any of its argument-places whose ordinal positions \nare greater than the greatest of the ARGNUM-i.  Thus RELN admits unrestricted \npermutation among any of these arguments.  More precisely (and assuming without \nloss of generality that ARGNUM-N is the numerically greatest of the ARGNUM-i):  \n(i) if RELN is a Predicate that holds of a given argument-sequence SEQ, then \nRELN also holds of any other sequence SEQ-PERMUTE obtainable from SEQ by \npermuting some or all of SEQ's ARGNUM-1th, ARGNUM-2th, ..., ARGNUM-Nth, and \nsubsequent items (while leaving all of SEQ's other items unchanged).  \n(ii) if RELN is a Function-Denotational that associates a given \nargument-sequence SEQ with the value VALUE, then RELN also associates any \nsequence SEQ-PERMUTE (as described above) with VALUE.  For example, \n(commutativeInArgsAndRest commutativeInArgsAndRest 2) \nhas as a consequence that whenever a sentence of the form \n(commutativeInArgsAndRest RELN 2 3 5) holds, so do the corresponding \nsentences (commutativeInArgsAndRest RELN 2 5 3), \n(commutativeInArgsAndRest RELN 3 2 5), and so on.  Note that since RELN \nis an instance of PartiallyCommutativeRelation, it must have at \nleast two argument-places that are commutative with each other and at \nleast one that is _not_ commutative with any other argument-place.  See\nalso commutativeInArgs.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, commutativeInArgs, "A variable-arity MetaRelation used for stating that a given PartiallyCommutativeRelation (q.v.) is \"commutative\" with respect to two or more specified argument-places.\n<p>\n<code>(commutativeInArgs RELN ARGNUM-1 ... ARGNUM-N)</code> means that  <code>RELN</code> is commutative in its <code>ARGNUM-1</code>th, ..., and <code>ARGNUM-N</code>th arguments.  Thus <code>RELN</code> admits unrestricted permutation among  these arguments.  More precisely: (i) if <code>RELN</code> is a Predicate that  holds of a given argument-sequence <code>SEQ</code>, then <code>RELN</code> also holds of any other sequence <code>SEQ-PERMUTE</code> obtainable from <code>SEQ</code> by permuting some or all of <code>SEQ</code>'s <code>ARGNUM-1</code>th, ..., and <code>ARGNUM-N</code>th items (while leaving all of <code>SEQ</code>'s other items unchanged).  (ii) if <code>RELN</code> is a Function-Denotational that associates a given argument-sequence <code>SEQ</code> with the value <code>VALUE</code>, then <code>RELN</code> also associates any sequence <code>SEQ-PERMUTE</code> (as described above) with <code>VALUE</code>.\n<p>\nFor example, <code>(commutativeInArgs formsBorderBetween 2 3)</code> has as a consequence that whenever a sentence of the form <code>(formsBorderBetween BORDER REG1 REG2)</code> holds, so does the corresponding sentence  <code>(formsBorderBetween BORDER REG2 REG1)</code>.\n<p>\nIf <code>RELN</code> is commutative in at least two argument-places it is an AtLeastPartiallyCommutativeRelation.  If <code>RELN</code> is commutative in <i>all</i> argument-places it is, more specifically, a CommutativeRelation.  If <code>RELN</code> is commutative in at least two, but <i> not all</i>,\nargument-places it is, instead, a PartiallyCommutativeRelation.\n<p>\nNote that the fact that each argument-place of a given relation commutes with some other argument-place is not sufficient for its being fully commutative.  For example, a partially-commutative quaternary relation might be such that its first and third places commute with each other and its second and fourth places commute with each other.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, comment, "A DocumentationPredicate (q.v.) that is used to relate a CycLIndexedTerm (usually a CycLConstant) to a SubLString containing an English explanation of the term's meaning and use, as an aid to humans (whether Cyclists or not) browsing the Cyc Knowledge Base.  <code>(comment TERM STRING)</code> means that <code>STRING</code> is a piece of Cyc documentation that explains the meaning and use of <code>TERM</code>.  For example, the passage you are reading now is the comment for the CycL constant `comment'.  See also cyclistNotes.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, collectionIsaBackchainRequired, "<code>(collectionIsaBackchainRequired COLLECTION)</code>\n<p>\nmeans that rules that conclude\n<p>\n<code>(isa <anything> COLLECTION)</code>\n<p>\nmust be used in order to prove literals of the form\n<p>\n<code>(isa <anything> COLLECTION)</code>.\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled.  See also backchainRequired for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionIsaBackchainEncouraged, "<p>\n(collectionIsaBackchainEncouraged COLLECTION)\n<p>\nmeans that rules that conclude\n<p>\n(isa <anything> COLLECTION)\n<p>\nare most likely going to have to be used in order to prove literals of the form\n<p>\n(isa <anything> COLLECTION).\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled.  Note that it will not necessarily use rules of the form\n<p>\n(isa <anything> <variable>)\n<p>\nwhere <variable> might bind to COLLECTION, and it will not necessarily use rules of the form\n<p>\n(isa <anything> SPEC),\n<p>\nwhere (genls SPEC COLLECTION).\n<p>\nSee also backchainEncouraged for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionGenlsBackchainRequired, "<code>(collectionGenlsBackchainRequired COLLECTION)</code>\n<p>\nmeans that rules that conclude\n<p>\n<code>(genls <anything> COLLECTION)</code>\n<p>\nmust be used in order to prove literals of the form\n<p>\n<code>(genls <anything> COLLECTION)</code>.\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled. See also backchainRequired for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionGenlsBackchainEncouraged, "<p>\n(collectionGenlsBackchainEncouraged COLLECTION)\n<p>\nmeans that rules that conclude\n<p>\n(genls <anything> COLLECTION)\n<p>\nare most likely going to have to be used in order to prove literals of the form\n<p>\n(genls <anything> COLLECTION).\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled.  Note that it will not necessarily use rules of the form\n<p>\n(genls <anything> <variable>)\n<p>\nwhere <variable> might bind to COLLECTION, and it will not necessarily use rules of the form\n<p>\n(genls <anything> SPEC),\n<p>\nwhere (genls SPEC COLLECTION).\n<p>\nSee also backchainEncouraged for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionExpansion, "(collectionExpansion COL FORMULA) states that membership\nof a term in the collection COL is equivalent to FORMULA involving\nthat term being true.  The meta-variable :ARG1 is used to stand for\nthe term in FORMULA, and the meta-variable :ARG2 is used to stand for\nthe collection in FORMULA.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionConventionMt, "(collectionConventionMt COL MT) means that assertions of the form (isa INS COL), for any INS, are by convention asserted in MT.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionCompletelyEnumerableViaBackchain, "A unary InferenceCompletenessPredicate.  <code>(collectionCompletelyEnumerableViaBackchain COL)</code> means that the CycInferenceEngine can generate a list of all of (and only) the instances of <code>COL</code> by appeal to isa consequent rules.  For example, in certain medical domain microtheories, MazeProcedure-SurgicalProcedure is collectionCompletelyEnumerableViaBackchain because backchaining on its single rule is sufficient to generate all the relevant instances in those microtheories.", 'CoreCycLMt', vStrMon).
exactlyAssertedEL(comment, collectionBackchainRequired, "<code>(collectionBackchainRequired COLLECTION)</code>\n<p>\nmeans that rules that conclude\n<p>\n<code>(isa <anything> COLLECTION)</code>\n<p>\nmust be used in order to prove literals of the form\n<p>\n<code>(isa <anything> COLLECTION)</code>\n<p>\nand rules that conclude\n<p>\n<code>(genls <anything> COLLECTION)</code>\n<p>\nmust be used in order to prove literals of the form\n<p>\n<code>(genls <anything> COLLECTION)</code>.\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled.  See also backchainRequired for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, collectionBackchainEncouraged, "<p>\n(collectionBackchainEncouraged COLLECTION)\n<p>\nmeans that rules that conclude\n<p>\n(isa <anything> COLLECTION)\n<p>\nare most likely going to have to be used in order to prove literals of the form\n<p>\n(isa <anything> COLLECTION),\n<p>\nand rules that conclude\n<p>\n(genls <anything> COLLECTION)\n<p>\nare most likely going to have to be used in order to prove literals of the form\n<p>\n(genls <anything> COLLECTION).\n<p>\nThis directs the inference engine to use such rules even if HL predicate transformation is disabled. Note that it will not necessarily use rules of the form\n<p>\n([isa|genls] <anything> <variable>)\n<p>\nwhere <variable> might bind to COLLECTION, and it will not necessarily use rules of the form\n<p>\n([isa|genls] <anything> SPEC), where (genls SPEC COLLECTION).\n<p>\nSee also backchainEncouraged for the analogue of this predicate applicable to predicates rather than collections.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, coExtensional, "A TaxonomicSlotForCollections (q.v.) that holds between collections whose extents (see extent) are exactly the same. (coExtensional COL1 COL2) means that COL1 and COL2 have all their elements in common: every instance of (see isa) one is an instance of the other.  Note that since collections (see Collection), unlike mathematical sets (see Set-Mathematical), are \"intensionally defined\", two collections can be coextensional without thereby being identical (see equals).  See also \ncoextensionalSetOrCollections.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, canonicalizerDirectiveForArgAndRest, "A  CanonicalizerDirectivePredicate (q.v.) used (in conjunction with a  CanonicalizerDirective) to control the behavior of the CycCanonicalizer. (canonicalizerDirectiveForArgAndRest RELN N DIRECTIVE) means that  the CycCanonicalizer obeys DIRECTIVE when canonicalizing the Nth and subsequent (i.e. (N+1)th, (N+2)th, ...) arguments of any CycLFormula  whose main (or \"0th place\") operator denotes RELN.  See the instances  of CanonicalizerDirective for more information on how particular  directives affect canonicalization.  Also see canonicalizerDirectiveForArg and canonicalizerDirectiveForAllArgs.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, canonicalizerDirectiveForArg, "A CanonicalizerDirectivePredicate  (q.v.) used (in conjunction with a CanonicalizerDirective) to control the  behavior of the CycCanonicalizer.  (canonicalizerDirectiveForArg RELN  N DIRECTIVE) means that the CycCanonicalizer obeys DIRECTIVE when  canonicalizing the Nth argument of a CycLFormula whose main (or \"0th place\") operator denotes RELN.  See the instances of CanonicalizerDirective  for more information on how particular directives affect canonicalization. Also see canonicalizerDirectiveForArgAndRest and  canonicalizerDirectiveForAllArgs.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, canonicalizerDirectiveForAllArgs, "A  CanonicalizerDirectivePredicate (q.v.) used (in conjunction with a  CanonicalizerDirective) to control the behavior of the CycCanonicalizer. (canonicalizerDirectiveForAllArgs RELN DIRECTIVE) means that the  CycCanonicalizer obeys DIRECTIVE when canonicalizing any argument of a  CycLFormula whose main (or \"0th place\") operator denotes RELN.  See the  instances of CanonicalizerDirective for more information on how particular  directives affect canonicalization.  Also see canonicalizerDirectiveForArg and canonicalizerDirectiveForArgAndRest.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, backchainRequired, "(backchainRequired PREDICATE) means that rules that conclude PREDICATE must be used in order to prove literals involving PREDICATE.  In other words, when performing inferences, all literals involving PREDICATE must be eliminated using rules since there won't be any other way to prove them.  See also backchainEncouraged, backchainDiscouraged, and backchainForbidden.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, backchainForbiddenWhenUnboundInArg, "backchainForbiddenWhenUnboundInArg is a predicate that\nallows users to prevent the inference engine from backchaining on a\nliteral when one or more of its arguments are unbound. That is, if\nPRED is a Predicate, N a positive integer less than or equal to the\narity of PRED, then (backchainForbiddenWhenUnboundInArg PRED N) that\nno rules concluding to a positive literal with PREDICATE as the arg0\n(in other words, no implies assertions in which a literal with\nPREDICATE as the arg0 appears in the consequent) will be used when\nattempting to prove (non-negated) literals with PREDICATE as the arg0\n*unless* argN in the literal is fully bound. For instance, the sentence\n<pre>\n(backchainForbiddenWhenUnboundInArg interestingSentence 1)\n</pre>\nprevents the inference engine from applying any rule concluding\ninterestingSentence, such as \n<pre>\n(implies\n  (maleficiary ?PROGRAM ?AGENT) \n  (interestingSentence ?AGENT (maleficiary ?PROGRAM ?AGENT)))\n</pre>\nunless and until <code>?AGENT</code> is bound.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, backchainForbidden, "backchainForbidden is a predicate that allows users to cut down on the number of rules used to prove certain literals, and thus to increase the speed of inferences that involve proving those literals.  <code>(backchainForbidden PREDICATE)</code> means that no rules containing a positive literal with <code>PREDICATE</code> as the arg0 (in other words, no implies assertions in which a literal with <code>PREDICATE</code> as the arg0 appears in the consequent) will be used when attempting to prove (non-negated) literals with <code>PREDICATE</code> as the arg0.  Asserting <code>(backchainForbidden PREDICATE)</code> is useful when all (non-negated) literals with <code>PREDICATE</code> as the arg0 are expected to be solvable by lookup of ground atomic formulas (GAF's) already in the KB, and so rules won't be needed to prove them.  However, asserting <code>(backchainForbidden PREDICATE)</code> is usually counter-productive in contexts where some literals with <code>PREDICATE</code> as the arg0 are expected to be proven via backchaining on rules containing a positive literal with <code>PREDICATE</code> as the arg0.  See also the related predicates backchainRequired, backchainEncouraged, and backchainDiscouraged.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, assertionUtility, "A CycInferenceHeuristicRelevancePredicate. (assertionUtility ASSERTION NUM) states that the CycLAssertion ASSERTION should be heuristically considered of utility NUM to inferences made in the current Microtheory. NUM should be a RealNumber between 1 and -1, with 1 indicating maximum utility, -1 indicating minimum utility, and 0 being agnostic with respect to utility.  (assertionUtility ASSERTION 1) is equivalent to (highlyRelevantAssertion ASSERTION). (assertionUtility ASSERTION -1) is equivalent to (irrelevantAssertion ASSERTION).  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, assertionDirection, "An AssertionDescriptorPredicate that \nis used to state that a given CycLAssertion has a certain inference \n\"direction\", which indicates something about how and when the assertion \ncan be used in inferences by the Cyc system. (assertionDirection ASSERTION DIRECTION) means that ASSERTION has DIRECTION as its CycLAssertionDirection (q.v.).  DIRECTION is normally Backward-AssertionDirection (q.v.) when \nASSERTION is a rule and Forward-AssertionDirection (q.v.) when ASSERTION is \na ground atomic formula (or \"GAF\"; see CycLClosedAtomicSentence).  Note \nthat a CycL sentence is given a direction at the time of its assertion to the \nKnowledge Base, and this fact _need_not_ in general be reflected in another, \nassertionDirection GAF's being asserted (as that would of course lead to an infinite regress).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, assertedTermSentences, "(assertedTermSentences THING SENTENCE) means that SENTENCE has been asserted to the Cyc Knowledge Base (and is thus a  CycLAssertion) and that THING is mentioned in SENTENCE.  More precisely, and assuming the assertedTermSentences formula contains no free variables (and \nis thus a \"ground atomic formula\" or \"GAF\"): the CycL term immediately following the constant `assertedTermSentences' in the formula occurs in SENTENCE.  For example, (assertedTermSentences France (bordersOn France Germany)) holds.  See also assertedSentence and assertedPredicateArg for related predicates about assertions; and see termFormulas for a more general predicate that does not entail that SENTENCE has been asserted.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, assertedSentence, "A KBDependentRelation (q.v.) and specialization of knownSentence (q.v.) that is used to state that a given CycLSentence-Assertible has been asserted in the KB (in some accessible Microtheory). More exactly, (assertedSentence SENT) is true in microtheory MT precisely when SENT canonicalizes into a set of clauses of the same form as the canonicalized form of some assertion in a microtheory accessible to MT. (The predicate is thus true both of assertions entered into the KB by hand and assertions deduced by Cyc from forward rules.) For the more specific claim that SENT is asserted <b>in MT</b>, see the predicate ist-Asserted.\n<p>\nThis predicate enables Cyc to select a subset of information when answering queries, filtering out more generic (inferrable-but-not-asserted) information. Thus, for example, the query:\n<p>\n(genls Dog Thing)\n<p>\nwill return True (in appropriate microtheories), whereas:\n<p>\n(assertedSentence (genls Dog Thing))\n<p>\nwill not.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, assertedPredicateArg, "(assertedPredicateArg OBJ N PREDICATE) means that a ground atomic formula (or \"GAF\"; see CycLClosedAtomicSentence) whose initial (or \"0th\" argument-place) term denotes PREDICATE, and whose Nth argument-place term denotes OBJ, is asserted in the Cyc Knowledge Base. Note that this predicate is itself notAssertible (q.v.), since it must be computed from the state of the knowledge base.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arityMin, "A MetaRelation for specifying the minimum number\nof arguments a given VariableArityRelation must take if the resulting formula is to be semantically well-formed.  <code>(arityMin RELN N)</code> means that semantic well-formedness requires that <code>RELN</code> take at least <code>N</code> arguments at a time.  More precisely: a formula <code>(RELN ARG<sub>1</sub> ... ARG<sub>M</sub>)</code> is semantically well-formed only if <code>M</code> is greater than or equal to <code>N</code>.  For example, the minimum-arity of any instance of UnitOfMeasure is 1.  Note that full semantic well-formedness requires obeying argument-type constraints (see ArgTypePredicate) as well as arity constraints. For a general explanation of semantic well-formedness, see CycLExpression-Assertible.  See also arityMax and arity.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arityMax, "A MetaRelation for specifying the maximum number\nof arguments a given VariableArityRelation can take if the \nresulting formula is to be semantically well-formed.  <code>(arityMax RELN N)</code> means \nthat semantic well-formedness requires that <code>RELN</code> take at most <code>N</code> arguments at \na time.  More precisely: a formula <code>(RELN ARG<sub>1</sub> ... ARG<sub>M</sub>)</code> is semantically \nwell-formed only if <code>M</code> is less than or equal to <code>N</code>.  For example, the \nmaximum-arity of any instance of UnitOfMeasure is 2.  Note that full semantic \nwell-formedness requires obeying argument-type constraints (see \nArgTypePredicate) as well as arity constraints.  For a general explanation \nof semantic well-formedness, see CycLExpression-Assertible.  See also \narityMin and arity.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arity, "A MetaRelation used for stating that a given  relation takes a specified number of arguments.  <code>(arity RELN N)</code>  means that that semantic well-formedness requires that <code>RELN</code> take  exactly <code>N</code> arguments at a time.  That is, a formula  <code>(RELN ARG<sub>1</sub> ... ARG<sub>M</sub>)</code> is semantically well-formed only if <code>M</code> = <code>N</code>.\n<p>\nFor example, the arity of any instance of BinaryPredicate is 2.\n<p>\nNote that full semantic well-formedness requires obeying argument-type constraints (see ArgTypePredicate) as well as arity constraints.  For a general explanation of semantic well-formedness, see CycLExpression-Assertible.  See also CycLExpression-Askable.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, argsQuotedIsa, "A binary ArgQuotedIsaPredicate (q.v.) that is used to put a specified quoted-isa based argument-type constraint on all of a given relation's argument-places at once. (argsQuotedIsa RELN COL) means that semantic well-formedness requires that each argument to which RELN is applied (regardless of argument-place) be a quoted instance of COL. For example, '(argsQuotedIsa and CycLSentence-Assertible)' means that the relation and must only be applied to assertible CycL sentences. argsQuotedIsa is particularly useful for constraining (any and all of) the arguments of a VariableArityRelation (the preceding example being a case in point); though argQuotedIsa may be applied to fixed-arity relations as well. For an explanation of semantic well-formedness, see CycLExpression-Assertible and its immediate specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, argSometimesIsa, "(argSometimesIsa RELATION POSITIVE-INTERGER-N COLLECTION) means that semantic\nwell-formedness requires that anything given as the Nth argument to RELN must be\nan instance of COL at sometime or other.  More precisely, if (argSometimesIsa RELATION POSITIVE-INTERGER-N COLLECTION) then in order to assert: (RELATION ARG-N ... OTHER-ARGS)<MT TIME PAR>, it must be the case that there exists some time interval, t, such that (isa ARG-N COLLECTION)<MT t PAR>.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, argsIsa, "A binary ArgIsaPredicate (q.v.) that is used to put a specified isa based argument-type constraint on all of a given relation's argument-places at once.  (argsIsa RELN COL) means that semantic well-formedness requires that each argument to which RELN is applied (regardless of argument-place) be an instance of COL.  For example, '(argsIsa PlusFn ScalarInterval)' means that the function PlusFn must only be applied to scalar intervals.   argsIsa is particularly useful for constraining (any and all of) the arguments to a VariableArityRelation (the preceding example being a case in point); though argsIsa may be applied to fixed-arity relations as well.  For an explanation of semantic well-formedness, see CycLExpression-Assertible and its immediate specializations.  See also argsGenl.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, argsGenl, "A binary ArgGenlPredicate (q.v.) that is used to put \na specified genls based argument-type constraint on all of a given relation's \nargument-places at once.  (argsGenl RELN COL) means that semantic well-formedness requires that each argument to which RELN is applied (regardless of argument-place) be an subcollection of COL.  For example, `(argsGenl PerformSimultaneouslyFn Event)' means that the function PerformSimultaneouslyFn must only be applied to types of events.  argsGenl is particularly useful for constraining (any and all of) the arguments to a VariableArityRelation (the preceding example being a case in point); though argsGenl may be applied to fixed-arity relations as well.  For an explanation of semantic well-formedness, see CycLExpression-Assertible and its immediate specializations.  See also argsIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, argQuotedIsa, "A ternary Predicate (argQuotedIsa RELN N COL) means that semantic well-formedness requires that the term given as the Nth argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ... ARGN ...) is semantically well-formed only if (quotedIsa ARGN COL) holds. For example, (argQuotedIsa examplePredSentences 1 CycLSentence) holds. ", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, argIsa, "A ternary ArgIsaPredicate (q.v.).  <code>(argIsa RELN N COL)</code> means that semantic well-formedness requires that anything given as the <code>N</code>th argument to <code>RELN</code> must be an instance of <code>COL</code>.  That is, <code>(RELN ... ARG<sub>N</sub> ...)</code> is semantically well-formed only if <code>(isa ARG<sub>N</sub> COL)</code> holds.  For example, <code>(argIsa mother 1 Animal)</code> and <code>(argIsa argIsa 3 Collection)</code> both hold.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  For similar but less flexible binary predicates, see arg1Isa et al. See also argGenl.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, argAndRestQuotedIsa, "A ternary ArgQuotedIsaPredicate (q.v.) used to place a specified quoted isa based argument-type constraint on a given VariableArityRelation (q.v.) with respect to any of its argument-places whose ordinal position is greater than or equal to a specified number. (argAndRestQuotedIsa RELN N COL) means that, as a necessary condition for semantic well-formedness, anything given as the Nth or greater argument to RELN must be a quoted instance of COL. Thus a closed formula (RELN ARG1..ARG(N)..ARG(N+1)..) is well-formed only if each of ARG(N)..ARG(N+1).. is a quoted instance of COL. See also argsQuotedIsa.", 'BookkeepingMt', vStrMon).
exactlyAssertedEL(comment, argAndRestIsa, "A ternary ArgIsaPredicate (q.v.) used to \nplace a specified isa based argument-type constraint on a given \nVariableArityRelation (q.v.) with respect to any of its argument-places \nwhose ordinal position is greater than or equal to a specified number.\n(argAndRestIsa RELN N COL) means that, as a necessary condition for \nsemantic well-formedness, anything given as the Nth or greater argument \nto RELN must be an instance of COL.  Thus a closed formula\n(RELN ARG1..ARG(N)..ARG(N+1)..) is well-formed only if each of ARG(N)..ARG(N+1).. is an instance of COL.  See also argsIsa and argAndRestGenl.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, argAndRestGenl, "A ternary ArgGenlPredicate (q.v.) used to \nplace a specified genls based argument-type constraint on a given \nVariableArityRelation (q.v.) with respect to any of its argument-places \nwhose ordinal position is greater than or equal to a specified number.\n(argAndRestGenl RELN N COL) means that, as a necessary condition for \nsemantic well-formedness, anything given as the Nth or greater argument \nto RELN must be an specialization of COL.  Thus a closed formula \n(RELN ARG1..ARG(N)..ARG(N+1)..) is well-formed only if each of ARG(N)..ARG(N+1).. is an instance of COL.  See also argsGenl and argAndRestIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg6SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg6SometimesIsa\nRELATION COLLECTION)</code> means that semantic well-formedness requires that\nanything given as the sixth argument to <code>RELATION</code> must be an\ninstance of <code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg6SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ... ARG6 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG6 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg6QuotedIsa, "A binary Predicate (arg6QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the sixth argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ...) is semantically well-formed only if (quotedIsa ARG6 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg6Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg6Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the sixth argument to <code>RELN</code> must be an instance of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ...)</code> is semantically well-formed only if  <code>(isa ARG6 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argIsa for a similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg6Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg6Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the sixth argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4 ARG5 ARG6 ...)</code> is semantically well-formed only if <code>(genls ARG6 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argGenl for a  similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg6Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the sixth (or \"arg6\") argument-place of a given predicate.  (arg6Format PRED FORMAT) means that PRED's arg6 is constrained to FORMAT.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg5SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg5SometimesIsa\nRELATION COLLECTION)</code> means that semantic well-formedness requires that\nanything given as the fifth argument to <code>RELATION</code> must be an\ninstance of <code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg3SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ... ARG5 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG5 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg5QuotedIsa, "A binary Predicate (arg5QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the fifth argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ARG2 ARG3 ARG4 ARG5 ...) is semantically well-formed only if (quotedIsa ARG5 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg5Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg5Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the fifth argument to <code>RELN</code> must be an instance of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4 ARG5</code> ...) is semantically well-formed only if  <code>(isa ARG5 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argIsa for a  similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg5Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg5Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the fifth argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4 ARG5 ...)</code> is semantically well-formed only if <code>(genls ARG5 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argGenl for a  similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg5Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the fifth (or \"arg5\") argument-place of a given predicate.  (arg5Format PRED FORMAT) means that PRED's arg5 is constrained to FORMAT.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg4SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg4SometimesIsa\nRELATION COLLECTION)</code> means that semantic well-formedness requires that\nanything given as the fourth argument to <code>RELATION</code> must be an\ninstance of <code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg3SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ... ARG4 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG4 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg4QuotedIsa, "A binary Predicate (arg4QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the fourth argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ARG2 ARG3 ARG4 ...) is semantically well-formed only if (quotedIsa ARG4 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg4Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg4Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the fourth argument to <code>RELN</code> must be an instance of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4</code> ...) is semantically well-formed only if  <code>(isa ARG4 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argIsa for a  similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg4Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg4Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the fourth argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is,  <code>(RELN ARG1 ARG2 ARG3 ARG4 ...)</code> is semantically well-formed only if  <code>(genls ARG4 COL)</code> holds.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its specializations.  See argGenl for a  similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg4Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the fourth (or \"arg4\") argument-place of a given predicate.  (arg4Format PRED FORMAT) means that PRED's arg4 is constrained to FORMAT.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg3SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg3SometimesIsa\nRELATION COLLECTION)</code> means that semantic well-formedness requires that\nanything given as the third argument to <code>RELATION</code> must be an\ninstance of <code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg3SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ... ARG3 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG3 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg3QuotedIsa, "A binary Predicate (arg3QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the third argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ARG2 ARG3 ...) is semantically well-formed only if (quotedIsa ARG3 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg3Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg3Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the third argument to <code>RELN</code> must be an instance of COL.  That is, <code>(RELN ARG1 ARG2 ARG3</code> ...) is semantically well-formed only if <code>(isa ARG3 COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argIsa for a similar but more flexible ternary  predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg3Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg3Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the third argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is, <code>(RELN ARG1 ARG2 ARG3 ...)</code> is semantically well-formed only if <code>(genls ARG3 COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argGenl for a similar but more flexible ternary  predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg3Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the third (or \"arg3\") argument-place of a given predicate.  (arg3Format PRED FORMAT) means that PRED's arg3 is constrained to FORMAT.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg2SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg2SometimesIsa\nRELATION COLLECTION)</code> means that semantic well-formedness requires that\nanything given as the second argument to <code>RELATION</code> must be an\ninstance of <code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg2SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ... ARG2 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG2 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg2QuotedIsa, "A binary Predicate (arg2QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the second argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ARG2 ...) is semantically well-formed only if (quotedIsa ARG2 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg2Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg2Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the second argument to RELN must be an instance of <code>COL</code>.  That is, <code>(RELN ARG1 ARG2</code> ...) is semantically well-formed only if <code>(isa ARG2 COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argIsa for a similar but more flexible ternary  predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg2Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg2Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the second argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is, <code>(RELN ARG1 ARG2</code> ...) is semantically well-formed only if <code>(genls ARG2 COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argGenl for a similar but more flexible ternary  predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg2Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the second (or \"arg2\") argument-place of a given predicate.  <code>(arg2Format PRED FORMAT)</code> means that <code>PRED</code>'s arg2 is constrained to <code>FORMAT</code>.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, arg1SometimesIsa, "An ArgSometimesIsaPredicate and ArgTypeBinaryPredicate, <code>(arg1SometimesIsa RELATION\nCOLLECTION)</code> means that semantic well-formedness requires that anything\ngiven as the first argument to <code>RELATION</code> must be an instance of\n<code>COLLECTION</code> at some time.  More precisely, if\n<code>(arg1SometimesIsa RELATION COLLECTION)</code> holds then in order to\nassert <code>(RELATION ARG1 ...)</code>, it must only be the case that there\nexists some time interval (including Always-TimeInterval) in which\n<code>(isa ARG1 COLLECTION)</code> holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg1QuotedIsa, "A binary Predicate (arg1QuotedIsa RELN COL) means that semantic well-formedness requires that the term given as the first argument to RELN must be an instance of the SubLExpressionType COL. That is, (RELN ARG1 ...) is semantically well-formed only if (quotedIsa ARG1 COL) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg1Isa, "A binary ArgIsaPredicate (q.v.).  <code>(arg1Isa RELN COL)</code>  means that semantic well-formedness requires that anything given as the first argument to <code>RELN</code> must be an instance of <code>COL</code>.  That is, <code>(RELN ARG<sub>1</sub> ...)</code> is semantically well-formed only if <code>(isa ARG<sub>1</sub> COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argIsa for a similar but more flexible ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg1Genl, "A binary ArgGenlPredicate (q.v.).  <code>(arg1Genl RELN COL)</code>  means that semantic well-formedness requires that anything given as the first argument to <code>RELN</code> must be a subcollection of <code>COL</code>.  That is, <code>(RELN ARG1</code> ...) is semantically well-formed only if <code>(genls ARG1 COL)</code> holds.  For an  explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.  See argGenl for a similar but more flexible  ternary predicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, arg1Format, "An instance of ArgFormatPredicate (q.v.) used to place a particular Format (q.v.) constraint on the first (or \"arg1\") argument-place of a given predicate.  (arg1Format PRED FORMAT) means that PRED's arg1 is constrained to FORMAT.  See the reified instances Format for\nfurther details.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, and, "A LogicalConnective that represents conjunction in CycL. It is a VariableArityRelation, taking an arbitrary number of ELSentence-Assertibles as arguments.  <code>(and P Q ... Z)</code> is true if and only if all of the sentences <code>P</code>, <code>Q</code>, ..., and <code>Z</code> are true.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, afterRemoving, "When a gaf is unasserted, afterRemovings are called on the gaf dependent on the predicate of the gaf.  (afterRemoving PRED HOOK) means that HOOK will be called on gaf whose predicate is PRED.  If the gaf predicate has multiple afterRemovings, the order of execution is not guaranteed.  Also, afterRemovings are retriggered on the removal of each of the arguments to a gaf.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, afterAdding, "Whenever a gaf is asserted, afterAddings are called on the gaf dependent on the predicate of the gaf.  (afterAdding PRED HOOK) means that HOOK will be called on gaf whose predicate is PRED.  If the gaf predicate has multiple afterAddings, the order of execution is not guaranteed.  Also, afterAddings are retriggered on the addition of new arguments to an existing gaf.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, admittedSentence, "(admittedSentence SENTENCE) states that SENTENCE is a CycLSentence which is both syntactically and semantically well-formed with respect to argument constraints only.  For example, (admittedSentence (bordersOn Canada France)) is true in WorldGeographyDualistMt, but not in WorldGeographyMt, since Canada and France are known to be instances of GeographicalRegion in the former microtheory, but not in the latter microtheory.  See also admittedArgument.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, admittedNAT, "(admittedNAT NAT) states that NAT is a CycLNonAtomicTerm which is both syntactically and semantically well-formed wrt arg constraints.  For example, (admittedNAT (MotherFn Muffet)) is true precisely in those mts in which Muffet satisfies all the applicable arg1 constraints imposed by MotherFn.  See also admittedSentence.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, admittedArgument, "A ternary MetaRelation predicate that is used to state that a given thing meets the argument-type constraints on a given argument-place of a given relation. <code>(admittedArgument THING ARGNUM RELN)</code> means that <code>THING</code> satisfies all of the (single-argument) argument-type constraints (see ArgIsaPredicate and ArgGenlPredicate) for the <b><code>ARGNUM</b>-th</code> argument position of <code>RELN</code>.  \n<p>\nFor example, both of the following sentences hold:\n<pre>  (admittedArgument AbrahamLincoln 1 wife)\n\n  (admittedArgument Cougar 1 JuvenileFn) .</pre>\nSee also admittedAllArgument and admittedSentence.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, admittedAllArgument, "A ternary MetaRelation predicate that relates a Collection to an integer (representing an argument-place) to a Relation such that every instance of the collection is an admittedArgument (q.v.) to the specified argument-place of the relation.  <code>(admittedAllArgument COL ARGNUM RELN)</code> means that every instance of <code>COL</code> satisfies all of the (single-argument) argument-type constraints (see ArgIsaPredicate and ArgGenlPredicate) for the <code>ARGNUM</code>th argument position of <code>RELN</code>.  Note that <code>COL</code> is required <i>not</i> to be an  EmptyCollection.\n<p>\nFor example, <code>(admittedAllArgument FemaleHuman 1 spouse)</code> and <code>(admittedAllArgument PersonTypeByActivity 1 JuvenileFn)</code> both hold.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, abnormal, "A binary MetaKnowledgePredicate that is used to state exceptions to a given general CycLAssertion.  Typically, an abnormal assertion will be the result of the CycCanonicalizer having \"transformed\" a sentence asserted at the EL level that was built from an ExceptionPredicate (i.e. exceptWhen or exceptFor).  While perhaps less common-sensically intuitive than exceptWhen or exceptFor, abnormal facilitates an efficient and uniform handling of exceptions.\n<p>\nHere, in more detail, is how abnormal is used.  Every default rule in our system, schematically:\n<p>\nP[X1 ... Xn] -> Q[X1 ... Xn]\n<p>\n(with X1, ..., Xn free in both P and Q) is implicitly treated as\n<p>\n(not (\"abnormal-for-this-rule\" X1 ... Xn)) & (P[X1 ... Xn] -> Q[X1 ... Xn]) .\n<p>\nThus rules without exceptions need never incur the overhead of default reasoning.  Since a different \"abnormality\" relation would otherwise be needed for every default rule in the system, we use instead a single predicate -- abnormal -- which takes the rule in question as an argument.  And the other argument to abnormal is a List of variables (or of a single closed term) over which abnormality is computed; this allows abnormal to be binary rather than variable-arity.  Hence a sentence of the form\n<p>\n(exceptWhen EXCEPTION RULE) ,\n<p>\nin which each of the variables X1, ..., Xn occurs free in both EXCEPTION and RULE, gets canonicalized to an implies rule that concludes to an abnormal sentence:\n<p>\n<pre>\n(implies\n  EXCEPTION\n  (abnormal (TheList X1 .... Xn) RULE)) .\n</pre>\n<p>\nAnd a sentence of the form\n<p>\n(exceptFor TERM RULE) ,\n<p>\nin which exactly one variable X occurs free in RULE, gets canonicalized to a sentence of the form\n<p>\n(abnormal (TheList TERM) RULE) .\n<p>\nSee also pragmaticallyNormal.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'WFFSupportedTerm', "The collection of all CycLTerms that have some kind of special support in the CycWellFormednessChecker.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'WFFSupportedPredicate', "The collection of all Predicates that are supported in some way by the CycWellFormednessChecker, either to satisfy, impose, or relax well-formedness constraints.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'WFFDirectivePredicate', "The collection of all Predicates which can affect what WFF standards to impose on a given sentence.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'WFFConstraintSatisfactionPredicate', "The collection of all Predicates which can satisfy well-formedness constraints.  More specifically, only assertions of the form (PRED . ARGS), where PRED is an instance of WFFConstraintPredicate, can directly satisfy a well-formedness constraint, i.e. cause any previously ill-formed sentence to become well-formed, given the same WFF standards.  Any assertion could _indirectly_ satisfy a well-formedness constraint, for instance by triggering a forward rule or an afterAdding.  A common case of this is the afterAddings on spec-preds of isa and genls.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'WFFConstraintPredicate', "The collection of all Predicates which can impose well-formedness constraints.  More specifically, only assertions of the form (PRED . ARGS), where PRED is an instance of WFFConstraintPredicate, can directly impose a well-formedness constraint, i.e. cause a previously well-formed sentence to become ill-formed, given the same WFF standards.  Any assertion could _indirectly_ impose a well-formedness constraint, for instance by triggering a forward rule or an afterAdding.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Wednesday', "A collection of CalendarDays and an \ninstance of DayOfWeekType.  Wednesday is the collection of all \n(and only) wednesdays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'VariableAritySkolemFunction', "The subcollection of SkolemFunctions with variable arity. These are only created when a sequence variable is in the scope of the skolem.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'VariableAritySkolemFuncN', "The subcollection of SkolemFuncNs with variable arity. These are only created when a sequence variable is in the scope of  a bounded existential.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'VariableArityRelation', "A specialization of Relation.  Each instance of VariableArityRelation is a relation that can take a variable number of arguments. The degree of variability for a given such relation can be constrained using the predicates arityMin and arityMax. Examples of VariableArityRelations include the predicate different and the function PlusFn.  Thus the terms '(PlusFn 1 2)' and '(PlusFn 1 2 3)' are both well-formed. Cf. FixedArityRelation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'UnreifiableFunction', "A specialization of Function-Denotational instances of which are such  that their values are not reified in the Cyc system.  More precisely, an instance of UnreifiableFunction is such that closed \"NATs\" (see  CycLNonAtomicTerm) built from its standard CycL name are _not_ instances of  HLReifiedDenotationalTerm.   Constrast with ReifiableFunction.  Usually it is more efficient to make functions reifiable; but it is not desirable  to reify every non-atomic term, such as those built from (names of)  instances of FunctionFromQuantitiesToQuantities.  For example, it would be cumbersome to reify every term of the form (Inch N) that happened to appear in a CycL assertion.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Unknown-HLTruthValue', "An instance of CycHLTruthValue. Unknown-HLTruthValue is the attribute of being neither known to be true nor known to be false.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'UniversalVocabularyMt', "This is the microtheory which contains the 'definitional' assertions about everything in Cyc's universe of discourse.  Definitional assertions about a concept are those which are intrinsic to the concept's nature and cannot be violated in any context.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'UniversalVocabularyImplementationMt', "This is the microtheory which contains the assertions about CycL terms which are necessary for Cyc's inference engine to reason about those terms.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'Unity', "An instance of ZeroDimensionalUnitOfMeasure (q.v.) that takes one or two numbers or other NumericIntervals (q.v.) as argument(s) and returns the continuous numeric-interval that spans between and includes those arguments.  Given one argument, Unity behaves like an identity function.\n<p>\nMore precisely: for any numeric-interval <code>NUM</code>, <code>(Unity NUM)</code> = <code>NUM</code>; and for any two numeric-intervals <code>LO</code> and <code>HI</code> such that <code>(greaterThanOrEqualTo HI LO)</code>, <code>(Unity LO HI)</code> is the numeric-interval that ranges from the least point-value (see Number-General) subsumed by (see quantitySubsumes) <code>LO</code> to the greatest point-value subsumed by <code>HI</code>.\n<p>\nIn practice, <code>LO</code> and <code>HI</code> will typically be two distinct RealNumbers, and <code>(Unity LO HI)</code> will be the continuous ProperIntervalOnNumberLine that ranges from <code>LO</code> to <code>HI</code>.  For example, (Unity 1 10) is the interval from 1 to 10 inclusive.  But note that <code>LO</code> and/or <code>HI</code> might themselves be proper intervals: (Unity (Unity 7 9) 11) is thus the interval from 7 to 11 inclusive.\n<p>\nUnity is classified as a UnitOfMeasure mainly in order to simplify the application of quasi-mathematical operations (e.g. PerFn, UnitProductFn) to units-of-measure generally.  For example, TimesPerDay is defined as the result of \"dividing\" (via PerFn) Unity by DaysDuration.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'UnitProductFn', "A binary UnitOfMeasureDenotingFunction that takes two UnitOfMeasure (q.v.) functions and returns the unit-of-measure function whose value for any given argument is the multiplicative \"product\" of the respective values yielded by the first two units, when one unit is applied to that same argument and the other unit is applied to 1.  That is, <code>(UnitProductFn UNIT1 UNIT2)</code> is the function <code>PRODUCT-FN</code> such that, for any number or other NumericInterval <code>NUM</code>, <code>(PRODUCT-FN NUM)</code> = <code>(TimesFn (UNIT1 NUM) (UNIT2 1))</code>.\n<p>\nFor example, (UnitProductFn Meter Meter) is SquareMeter; and (e.g.) (SquareMeter 5) is equal to (TimesFn (Meter 5) (Meter 1)). Also, (UnitProductFn  Kilowatt HoursDuration) is KilowattHour.\n<p>\nSee also PerFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'UnitOfMeasure', "A specialization of ScalarDenotingFunction (q.v.).  Each instance of UnitOfMeasure is a function that takes one or two numbers or other NumericIntervals as arguments, and returns as value a MeasurableQuantity (q.v.), such as a Distance or a Speed or a Volume.  If a unit of measure is applied to one number (see Number-General) the result is a precise quantity that is a ScalarPointValue; if applied to two (different) numbers -- or to one (or two) ProperIntervalOnNumberLine(s) -- the result is a closed-interval quantity that is a ScalarProperInterval.  For example, (Meter 5) is the distance five meters and (Meter 5 10) is the distance \"five to ten meters (inclusive)\".\n<p>\n(A partial exception to the above is the unit-of-measure Unity (q.v.), which always returns a NumericInterval rather than a MeasurableQuantity.)\n<p>\nSpecializations of UnitOfMeasure grouped by what they measure include UnitOfTime, UnitOfSpeed, and UnitOfVolume.  Other specializations are OneDimensionalUnitOfMeasure, MultiDimensionalUnitOfMeasure, UnitOfMeasureWithPrefix and UnitOfMeasureNoPrefix.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'UncanonicalizerAssertionFn', "UncanonicalizerAssertionFn is used by the CycUncanonicalizer and should rarely (if ever) need to be seen by users or referenced in assertions entered at the EL level.  It is used by the uncanonicalizer to denote an CycLAssertion after it is transformed to its canonical EL formula.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'UnaryRelation', "The collection of all fixed-arity relations of arity 1 (see arity).  The most notable specializations of UnaryRelation are UnaryPredicate and UnaryFunction (qq.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'UnaryPredicate', "A specialization of both UnaryRelation and Predicate.  UnaryPredicate is the collection of all predicates whose arity (see arity) is 1.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'UnaryFunction', "A specialization of both FixedArityFunction and UnaryRelation (qq.v.).  Each instance of UnaryFunction is a function that always takes a single argument, i.e. has an arity (see arity) of 1.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Tuesday', "A collection of CalendarDays and an \ninstance of DayOfWeekType.  Tuesday is the collection of all \n(and only) tuesdays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'TruthValue', "TruthValue is a collection of mathematical objects; it contains the abstract, logical objects True and False.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'TruthFunction', "A major subcollection of Relation that subsumes the collections Predicate, LogicalConnective, and Quantifier (qq.v.). Truth-functions, or rather the expressions that represent or denote them, are used to form sentences.  More precisely, any CycL expression that denotes an instance of TruthFunction (and only such an expression) can appear in the \"0th\" argument-position (i.e. as the term immediately following the opening parenthesis) of a CycLSentence.  \n<p>\nThe name 'TruthFunction' derives in part from the fact that the sentences thus formed (if semantically well-formed and quantificationally closed; see CycLSentence-Assertible and CycLClosedSentence) are the kind of expression that can be true or false (with respect to a given context and interpretation). Though not really functions (cf. Function-Denotational), many TruthFunctions are \"truth-functional\" in the sense that the truth-value of a (closed, semantically well-formed) sentence <code>(RELN ARG1..ARGN)</code> built using a truth-function <code>RELN</code> is uniquely determined (with respect to a given context) by <code>RELN</code> together with the argument(s) <code>ARG1..ARGN</code> to which it is applied.  For example, the sentence <code>(mother ChelseaClinton HillaryClinton)</code> is made true (in the actual world) by the fact that Chelsea Clinton's mother is Hillary Clinton.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'True', "An instance of TruthValue (q.v.).  True is the logical notion of truth.  That is, the term 'True' is used as a sentential constant of CycL that is true under every model theoretic interpretation.  For example, (booleanResult T/F True) means that the result obtained from the true-or-false test T/F is True.  Cf. False.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'TransitiveBinaryPredicate', "A BinaryPredicateTypeByLogicalFeature and thus a specialization of BinaryPredicate.  A binary predicate <code>PRED</code> is an instance of TransitiveBinaryPredicate only if it has the following property: For any <code>THING1</code>, <code>THING2</code>, and <code>THING3</code>, if both of these hold:\n<pre>\n  (PRED THING1 THING2)\n  (PRED THING2 THING3)\n</pre>\nThen so does this:\n<pre>\n  (PRED THING1 THING3) .\n</pre>\nNote that a necessary condition on <code>PRED</code>'s being transitive is that its two argument-places must be co-satisfiable; see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement.\n<p>\nInstances of TransitiveBinaryPredicate include greaterThan,\ngeographicalSubRegions, and cotemporal.  \n<p>\nCf. QuasiTransitiveBinaryPredicate and AntiTransitiveBinaryPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TransformationModuleSupportedPredicate', "The collection of all Predicates which are supported by some CycTransformationModule.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'TransformationModuleSupportedCollection', "The collection of all Collections which are supported by some CycTransformationModule.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'TLVariableFn', "Denotes HL variables at the TL: arg1 is the HL index of the variable; arg2 is the EL string name of the variable.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TLReifiedNatFn', "Denotes a reified nat term at the TL: arg1 is the formula of the nat.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TLAssertionFn', "Denotes HL assertion terms at the TL (e.g., assertions appearing as terms within meta-assertions): arg1 is the mt of the assertion; arg2 is the formula of the assertion.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TimesFn', "A VariableArityRelation that represents multiplication in CycL. (TimesFn MULT1 MULT2 ...) yields a quantity which is the result of multiplying MULT1 MULT2 (...) together. All arguments to TimesFn must be instances of ScalarInterval, as is its result. Thus (TimesFn 2 3 4) returns 24; (TimesFn Pi-Number E-LogarithmBase) returns pi times e. For division see QuotientFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Thursday', "A collection of CalendarDays and an  instance of DayOfWeekType.  Thursday is the collection of all  (and only) thursdays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Thing', "Thing is the \"universal collection\": the collection which, by definition, contains everything there is.  Every thing in the Cyc ontology -- every Individual (of any kind), every Set-Mathematical, and every Collection -- is an instance of (see isa) Thing.  Similarly, every collection is a subcollection of (see genls) Thing.  Trivially, Thing is both an instance of and a subcollection of itself, and is not a subcollection of any other collection.  (Note that the above reference to \"every thing in the Cyc ontology\" is <i>not</i> meant to be limited to things actually <i>reified</i> in the Cyc system, but includes (e.g.) every instance -- reified or not, known or not -- of every collection recognized by Cyc.)", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheUser', "TheUser denotes the `current user' of an individual, running Cyc image.  Note that at any moment there may actually be many current users of an image, communicating with it through various sorts of API: HTML-based browser, telnet API connection, etc. TheUser serves as a placeholder allowing Cyc to keep track of relevant characteristics (including authorization, sophistication level) of each distinct user.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'TheTerm', "A special kind of term that allows back-reference to any individual thing that satisfies the constraints on the TheTerm.  E.g., 'Suppose a cat walks into a fish store.  The cat is likely to get into a lot of trouble.'  'The cat' in the second sentence refers back to 'a cat' in the first; i.e., any cat that walks into a fish store.  In Cyc, the constraints for a TheTerm in a given context are given by use of the predicate theTermConstraints on the unit representing that context.  In lifting assertions out of that context, the constraints are added as antecedents.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheSetOf', "A binary SetDenotingFunction and ScopingRelation that takes a variable and an open sentence to a set, where the open sentence specifies a necessary and sufficient membership condition for the set.  If <code>SENT</code> is an open CycLSentence-Assertible in which <code>VAR</code> is the only variable occuring free, (TheSetOf <code>VAR SENT</code>) is the Set-Mathematical of exactly those things that satisfy <code>SENT</code>.  For example, (TheSetOf ?X (and (isa ?X Dog) (mainColorOfObject ?X BlackColor))) is the set of black dogs.\n<p>\nNote that if <code>VAR</code> does not occur free in <code>SENT</code>, or is not the only variable occuring free in <code>SENT</code>, the term <code>(TheSetOf VAR SENT)</code> will be itself be open (see CycLOpenNonAtomicTerm) and thus will not denote anything.  Given that a true sentence is satisfied by <i>everything</i>, we stipulate that <code>(TheSetOf VAR SENT)</code> is undefined whenever <code>SENT</code> is closed in order to avoid commitment to a \"universal set\". \n<p>\nSee also TheSet, which is used to specify a set by enumerating its elements.  And see TheCollectionOf.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheSet', "A variable-arity SetDenotingFunction that is used to specify a set by enumerating its elements.  For any finite sequence <code>THING1,...,THING<sub>N</sub></code> (<code>N</code> >= 1), (TheSet <code>THING1...THING<sub>N</sub>)</code> is the Set-Mathematical whose elements (see elementOf) are precisely <code>THING1,...,THING<sub>N</sub></code>.  For example, (TheSet SonnyBono Cher) is the set whose only elements are Sonny and Cher.  \n<p>\nNote that in the degenerate case where <code>N</code> is zero, (TheSet) is TheEmptySet.  \n<p>\nSee also the related function TheSetOf, which is used to specify a set by giving a necessary and sufficient membership condition.  And see TheList and TheCollection.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheList', "TheList is a function that combines its arguments into a list.  For any ITEM(1), ..., ITEM(n), each of which is an instance of Thing, (TheList ITEM(1) ... ITEM(n)) gives the instance of List-Extensional whose first member is ITEM (1), ..., and whose last member is ITEM(n). Note that in general ITEM(1), ..., ITEM(n) do not have to be distinct, though they do if (TheList ITEM(1) ... ITEM(n)) is an instance of ListWithoutRepetition.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheEmptySet', "TheEmptySet is the empty (or \"null\") set: the unique set that has no elements.  Note that TheEmptySet is an instance of Set-Mathematical and thus _not_ an instance of Collection.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheEmptyList', "An instance of ListWithoutRepetition. TheEmptyList is a list that has no members (see listMembers).  Note that any list that has no members is identical with TheEmptyList; thus TheEmptyList is the only list whose length is 0.  Note also that TheEmptyList is a sublist (see subLists) of every list.  Note finally that TheEmptyList is not the same as TheEmptySet (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TheCollectionOf', "A collection denoting function that takes a CycL variable and an open formula with exactly one free variable to the collecion of things satisfying that formula.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'TernaryRelation', "The collection of all fixed-arity relations of arity 3 (see arity).  The most notable specializations of TernaryRelation are TernaryPredicate and TernaryFunction (qq.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'TernaryPredicate', "A specialization of both TernaryRelation and Predicate.  TernaryPredicate is the collection of all predicates whose arity (see arity) is 3.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TernaryFunction', "A specialization of FixedArityFunction and TernaryRelation.  An instance FUNC of FixedArityFunction is an instance of TernaryFunction if and only if FUNC has an arity of three.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'TemporaryEnglishParaphraseMt', "This is a temporary MT for holding paraphrase assertions prior to review, after which time they will be moved to EnglishParaphraseMt", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'SymmetricBinaryPredicate', "A specialization of both BinaryPredicate and CommutativeRelation (qq.v.).  A binary predicate <code>PRED</code> is an instance of SymmetricBinaryPredicate if and only if (i) for any things <code>X</code> and <code>Y</code>, if <code>(PRED X Y)</code> then <code>(PRED Y X)</code> and (ii) the single-argument argument type constraints (see argIsa and argGenls) on <code>PRED</code>'s two argument-places are co-satisfiable (see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement).  Note that if <code>PRED</code> satisfies condition (i), then it also satisfies condition (ii) as long as <code>(PRED A B)</code> holds for some <code>A</code> and <code>B</code>.\n<p>\nInstances of SymmetricBinaryPredicate include siblings, teammates, connectedTo, and bordersOn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Sunday', "A collection of CalendarDays and an  instance of DayOfWeekType.  Sunday is the collection of all  (and only) sundays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'substring-CaseInsensitive', "<code>(substring-CaseInsensitive SUBSTRING STRING)</code> means that the <code>CharacterString SUBSTRING</code> is a substring of the <code>CharacterString STRING</code> with case ignored in both <code>SUBSTRING</code> and <code>STRING</code>. For case-sensitive tagging use the more specialized predicate, <code>substring</code>.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'SubLSymbol', "The collection of all SubLAtoms that are also \"symbols\" in the SubL language.  That is, each instance of SubLSymbol satisfies the defnIff SYMBOLP.  Note that `symbol' has a very specific, technical meaning in SubL.  Save for those that are variables (see SubLVariable), SubLSymbols are rarely used in CycL assertions, except within those built with certain CycInferenceDescriptorPredicates like defnIff. Examples of SubL symbols include the symbols 'GENLS' and 'CYC-SYSTEM-NON-VARIABLE-SYMBOL-P'. Note also that SubLSymbol is a \"quoted-collection\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLString', "A subcollection of SubLAtomicTerm (q.v.) whose instances can be used to denote character-strings.  In the SubL language (as in English), one can refer to a particular character-string by simply putting a pair of quotation marks around it.  Semantically, what this amounts to is using a certain character-string to denote itself.  \n<p>\nMore precisely: a given SubLString STRING is a character-string such that, when it appears inside a pair of double-quotation marks, STRING is interpreted as denoting itself (i.e. STRING).  The surrounding quotation-marks are <i>not</i> considered to be parts of STRING; rather, they are syncategorematic symbols whose role is merely to indicate that a string is being referred to.  Thus, in the context of the sentence '(firstName Lenat \"Doug\")', the four-character string 'Doug' denotes itself: the string `Doug'.  \n<p>\nNote that <i>not</i> every CharacterString is a SubLString: there are some restrictions on what characters a SubL-string can contain. Note also that SubLStrings are <i>atomic</i> terms (see SubLAtomicTerm and CycLAtomicTerm), as they cannot be constructed out of other SubL (or CycL) terms via the syntax (grammar) of SubL (or CycL).  Thus although the string 'hotdog' can indeed be obtained from 'hot' and 'dog' via concatenation (see ConcatenateStringsFn), the <i>syntax</i> of SubL (or CycL) itself contains no rule that licenses such a construction (see e.g. the comments on SubLSExpression, CycLExpression, CycLTerm, CycLFormula, and various subcollections thereof).  Note finally that SubLString is a \"quoted-collection\" (see quotedCollection).  Thus the sentence '(isa \"hotdog\" SubLString)' means, just as one would expect, that the six-character string 'hotdog' (not the eight-character quote-inclusive '\"hotdog\"'; see above) is an instance of SubLString.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLSExpression', "The collection of all expressions of the SubL language.  SubL is the implementation language of the Cyc system, and it subsumes the CycL language.  The CycL grammar is more strict than the SubL grammar. Thus, while every CycLExpression is a SubLSExpression, the converse is not true. Examples of SubLSExpressions that are not CycLExpressions include Arabic decimal numeric expressions such as '123', expressions like '(1 2 3)' that denote lists of numbers, and \"dotted pair\" expressions like '(Cat . Dog)'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLRealNumber', "The collection of all number-denoting expressions in the CycL language that are _not_ CycL constants or NATs, but are terms of SubL, the underlying implementation language of the Cyc system. SubLRealNumbers are numeric strings of the Arabic decimal system, including the decimal point and scientific notation.  Examples include the terms `212' and `3.14159d0'.  Non-examples include the expressions `One', `(Meter 6)', `(Unity 3)', `:34', `PlusInfinity', and `Avogadro's number'.  Note that this collection, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLQuoteFn', "<code>(SubLQuoteFn SUBL-EXPRESSION)</code> is one of exactly two escapes to SubL from CycL, the other being ExpandSubLFn.  These are the only two ways to represent arbitrary SubL in CycL.  SubLQuoteFn encapsulates <code>SUBL-EXPRESSION</code> such that it will not be rejected by the CycL wff-checker as ill-formed CycL.  For example, <code>(SubLQuoteFn (+ 1 2))</code>, which <i>is</i> a CycLExpression, denotes the SubLSExpression (+ 1 2), which itself is <i>not</i> a CycLExpression.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'SubLPositiveInteger', "The collection of all positive-integer-denoting expressions in the CycL language that are <i>not</i> CycL constants or NATs, but are terms of SubL, the underlying implementation language of the Cyc system.  SubLPositiveIntegers  are numeric strings of the Arabic decimal system (not including the decimal point or scientific notation).  Examples include the expressions '2', '12', and '4'.  Non-examples include '0', '4.012', '(Meter 6)', '(Unity 3.3)', ':34', and 'PlusInfinity'.  Note that SubLPositiveInteger is a \"quoted-collection\" (see quotedCollection); thus the sentence '(isa 12 SubLPositiveInteger)' means that the expression '12' (not the number 12) is an instance of SubLPositiveInteger.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLNonVariableSymbol', "The collection of all SubLSymbols except SubLVariables (qq.v.); a subcollection of CycLClosedAtomicTerm.  Note that `symbol' has a very specific, technical meaning in SubL; SubLNonVariableSymbols are rarely used in CycL assertions, except within those built with certain CycInferenceDescriptorPredicates like defnIff and those whose arguments are KeywordVariableTemplates (qq.v.). Examples of SubL non-variable symbols include the symbols `GENLS', `:ARG1', and `CYC-SYSTEM-NON-VARIABLE-SYMBOL-P'.  Note that this collection, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLNonVariableNonKeywordSymbol', "The collection of all SubLSymbols except SubLVariables (q.v.) and SubLKeywords (q.v.); a subcollection of CycLClosedAtomicTerm.  Note that `symbol' has a very specific, technical meaning in SubL; SubLNonVariableNonKeywordSymbols are rarely used in CycL assertions, except within those built with certain CycInferenceDescriptorPredicates like defnIff. Examples of SubL non-variable non-keyword symbols include the symbols `GENLS' and `CYC-SYSTEM-NON-VARIABLE-NON-KEYWORD-SYMBOL-P'.  Note that this collection, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLNonNegativeInteger', "The collection of all non-negative-integer-denoting expressions in the CycL language that are _not_ CycL constants or NATs, but are terms of SubL, the underlying implementation language of the Cyc system.  SubLNonNegativeIntegers \nare numeric strings of the Arabic decimal system (not including the decimal point or scientific notation).  Examples include the expressions `0', `12', and `4'.  Non-examples include `4.012', `(Meter 6)', `(Unity 3.3)', `:34', and `PlusInfinity'.  Note that SubLNonNegativeInteger is a \"quoted-collection\" (see quotedCollection); thus the sentence `(isa 12 SubLNonNegativeInteger)' means that the expression `12' (and not \nthe number 12) is an instance of SubLNonNegativeInteger.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLList', "A collection of list-denoting expressions that are not represented in CycL (i.e. they are not CycLConstants or CycLNonAtomicTerms) but are represented in SubL, the underlying implementation language of the Cyc system.  Each instance of SubLList is a sequence of SubLListOrAtoms (q.v.) enclosed in parentheses.  SubL lists are those things that pass the defnIff LISTP. Note that this collection is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLKeyword', "The subcollection of SubLSymbol consisting of all SubL keywords.  Instances include the symbols `:KEYWORD', `:OBJECT', and `:PLURAL'.  Every instance of SubLKeyword satisfies (in the sense relevant to defnIff) `KEYWORDP'.  Note that SubLKeyword, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLInteger', "The collection of all integer-denoting expressions in the CycL language that are _not_ CycL constants or NATs, but are terms of SubL, the underlying implementation language of the Cyc system.  SubLIntegers  are numeric strings of the Arabic decimal system (including the negative-value symbol `-', but _not_ the decimal point or scientific notation) that denote integers.  Examples include the expressions `0', `12', and `-4' (which denote the integers 0, 12, and -4, respectively).  Non-examples include `4.012', `(Meter 6)', `(Unity 3.3)', `:34', and `PlusInfinity'.  Note that SubLInteger is a \"quoted-collection\" (see quotedCollection). Thus the sentence `(isa 12 SubLInteger)' means that the expression `12' (and not the number 12) is an instance of SubLInteger.  Similarly, the assertion `(genls SubLInteger Integer)' means (not that each SubL integer is an integer, but) that each  instance of SubLInteger _denotes_ an instance of Integer (see the shared NoteAboutUseVersusMention).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLExpressionType', "A collection of collections.  Each instance of SubLExpressionType is a type (i.e. a subcollection) of SubLSExpression.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'SubLCharacter', "The collection of all character-denoting terms in the CycL language that are SubLAtomicTerms (q.v.). (SubL, which subsumes CycL, is the underlying implementation language of the Cyc system.)  A given SubLCharacter CHAR-TERM is itself a string consisting of the hash-symbol (`#'), followed by the backslash (`\\'), followed (in most cases) by the character CHAR that CHAR-TERM denotes.  For example, the SubLCharacter `#\\A'\ndenotes the character `A'.  (An exception to the above is when CHAR is a non-printing or control character, in which case a specially-designated string\nappears after the `#\\'.)", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLAtomicTerm', "The collection of all atomic denotational terms in the CycL language that are not explicitly represented in CycL (i.e. they are neither CycLConstants nor CycLVariables) but are represented in SubL, the underlying implementation language of the Cyc system.  \"Atomic\" here means not constructable from other terms via the SubL syntax.  Examples include the terms '212', ':NOUN', '#x', and 'VARIABLE-P'. Do not confuse this collection with SubLAtom, most of whose instances, while they are expressions of SubL, are <i>not</i> part of CycL.  Note that this collection, like most instances of CycLExpressionType, is \"quoted\".", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SubLAtom', "A collection of SubLExpressions that are atomic: they cannot be decomposed into other SubL expressions. Save for certain variables (see SubLVariable), instances of SubLAtom are rarely used in CycL assertions (other than assertions built with certain CycInferenceDescriptorPredicates like defnIff). Many SubL atoms are not even CycLExpressions.  Do not confuse this collection with SubLAtomicTerm, which is a CycLExpressionType (though its instances are neither CycL constants nor CycL variables).  Note that SubLAtom is a \"quoted-collection\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SkolemFunctionFn', "SkolemFunctionFn is used by the CycCanonicalizer and should rarely (if ever) need to be seen by users or referenced in assertions entered at the EL level.  It is used by the canonicalizer to denote a skolem function before it is reified, when the skolem is derived from a formula asserted at the EL level that uses thereExists. Its arity is 3: the first argument is a list of the term variable arguments of the denoted skolem function, (term variables which are in the scope of the existential), the second argument is a variable which uniquely identifies the existentially quantified variable by which the denoted skolem will be represented in the canonical version of the formula, and the third is  a sequence variable if there is a sequence variable argument of the denoted skolem function (which there will be iff there is a sequence variable in the scope of the existential), and NIL otherwise.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SkolemFunction', "A specialization of IndeterminateTermDenotingFunction and ReifiableFunction (qq.v.).  SkolemFunction is a collection of system-generated functions that implement existential quantification in Cyc.  Whenever someone asserts to the Knowledge Base a sentence that contains 'thereExists' (in an arg0 position), Cyc automatically creates a new instance of SkolemFunction and rewrites the assertion using that Skolem function.\n<p>\nFor example, suppose we want Cyc to know that every animal has a birth date.   So we assert the following sentence:\n<p>\n<pre>\n  (implies\n    (isa ?X Animal)\n    (thereExists ?Y\n      (birthDate ?X ?Y))) .\n</pre>\n<p>\nIn response, Cyc automatically reifies a new unary instance of SkolemFunction (call it 'BirthDateFn') that takes any given animal to its date of birth, and then rewrites our rule using BirthDateFn instead of thereExists, as\n<p>\n<pre>\n  (implies\n    (and\n      (isa ?X Animal)\n      (termOfUnit ?Y (BirthDateFn ?X)))\n    (birthDate ?X ?Y)) .\n</pre>\n<p>\nNote that actual Cyc-generated Skolem function names currently (02/04) consist of the prefix 'SKF-' follow by a numeral.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SkolemFuncNFn', "SkolemFuncNFn is used by the CycCanonicalizer and should rarely\n(if ever) need to be seen by users or referenced in assertions entered\nat the EL level.  It is used by the canonicalizer to denote a skolem\nfunction before it is reified, when the skolem is derived from a formula\nasserted at the EL level that uses thereExistAtLeast,\nthereExistAtMost, or thereExistExactly.  Its arity is 4: the first\nargument is a list of the term variable arguments of the denoted skolem function,\n(term variables which are in the scope of the bounded existential).\nThe second argument is a variable which uniquely identifies the\nexistentially quantified variable by which the denoted skolem will\nbe represented in the canonical version of the formula.\nThe third is a sequence variable if there is a sequence variable\nargument of the denoted skolem function (which there will be iff there\nis a sequence variable in the scope of the bounded existential), and NIL otherwise.\nThe fourth is an interval specifying the number of things which may satisfy the formula.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SkolemFuncN', "SkolemFuncN is a collection of Cyc system-generated functions that partially implement existential quantifications in Cyc.  Whenever someone asserts to Cyc an expression that contains a 'thereExistAtLeast', a 'thereExistAtMost', or a 'thereExistExactly' quantifier, Cyc automatically creates a new instance of SkolemFuncN and rewrites the assertion using this skolem function instead of that existential quantifier.  See also termOfUnit. At this time (3/98), skolem functions are automatically named by the Cyc system using the prefix 'SKF-' followed by a number.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SingleEntry', "An instance of Format (q.v.) that can be specified to hold of a given predicate with respect to a given argument-place (see argFormat).  (argFormat PRED N SingleEntry) means that, for any particular way of fixing the other arguments to PRED besides the Nth, there is at most one thing such that, if taken as the Nth argument, PRED holds of those arguments.  That is, if the sequences <... ARGN ...> and <... ARGN-PRIME ...> differ at most in their Nth items and both (PRED ... ARGN ...) and (PRED ... ARGN-PRIME ...) hold, then ARGN = ARGN-PRIME (see equals).  For example, the format of biologicalMother's second argument-place is single-entry, since an animal can only have one biological mother.  A predicate with a single-entry format argument-place is thus a StrictlyFunctionalPredicate (q.v.) that is strictly functional with respect to that argument-place (see strictlyFunctionalInArgs).  Contrast with SetTheFormat.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'SiblingDisjointCollectionType', "A KBDependentCollection of collections of  collections (and thus an instance of CollectionTypeType and a specialization of CollectionType).  A sibling-disjoint collection type is such that its known  (i.e. KB-represented) instances are collections that -- save for any that are related to each other by  genls and any that are explicitly asserted to be exceptions (see  siblingDisjointExceptions) -- are disjoint from each other. \n<p>\nMore precisely, each instance <code>SIB</code> of SiblingDisjointCollectionType is a collection of collections that has the following KB-dependent property: \n<p>\nFor any two known instances <code>COL1</code> and <code>COL2</code> of   <code>SIB</code>, at least one of the following is known to hold: \n<pre>\n  (a) (genls COL1 COL2)\n  (b) (genls COL2 COL1)\n  (c) (siblingDisjointExceptions COL1 COL2)\n  (d) (disjointWith COL1 COL2)\n</pre>  \nMoreover, note that if <code>MT</code> is a context (see Microtheory) in which (i) both <code>(isa COL1 SIB)</code> and <code>(isa COL2 SIB)</code> hold and (ii)  neither <code>(genls COL1 COL2)</code> nor <code>(genls COL2 COL1)</code> nor <code>(siblingDisjointExceptions COL1 COL2)</code> is known to hold (see knownSentence), then \n<code>(disjointWith COL1 COL2)</code> holds by default in <code>MT</code>.   \n<p>\nFor example, in BiologyMt both Person and Dog are instances of the  sibling-disjoint collection type BiologicalSpecies, while neither  (genls Person Dog) nor (genls Dog Person) nor  (siblingDisjointExceptions Person Dog) is known to hold in that  context; consequently, (disjointWith Person Dog) holds by default  in BiologyMt.  Instances of SiblingDisjointCollectionType include  BiologicalTaxon (and its specializations), OrganismPartType, and RelationshipTypeByArity.\n<p>\nSee the generalization SiblingDisjointSetOrCollectionType.  Also cf. the stronger notion of DisjointCollectionType.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SiblingDisjointAttributeType', "A collection of collections.  Each instance of SiblingDisjointAttributeType is a collection of quantities.  If COL is such a collection, then nothing can have two instances of COL as quantities unless those two instances are related in a quantitySubsumes relationship to each other.  See also SiblingDisjointCollectionType.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SetTheFormat', "An instance of Format (q.v.) that can be specified to hold of a given predicate with respect to a given argument-place (see argFormat).  (argFormat PRED N SetTheFormat) means that, for any particular way of fixing the other arguments to PRED besides the Nth, there might be any number (including zero) of things such that, if taken as the Nth argument, PRED holds of those arguments.  For example, the format of biologicalMother's first argument-place is SetTheFormat, since a female animal might have any number of offspring.  Unlike the other reified instances of Format, SetTheFormat actually places no restriction at all on what PRED might or might not hold of with respect to the relevant argument-place.  But one should not infer from this that entry-format assertions using SetTheFormat are pointless; for they forestall duplication of effort by serving notice that the entry-format of a given argument-place has previously been considered and SetTheFormat was deemed the appropriate format.  SetTheFormat is the most commonly-encountered format in the Cyc Knowledge Base.  Contrast with SingleEntry.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'SetOrCollection', "A specialization of MathematicalThing.  Something is an instance of SetOrCollection just in case it is a collection (i.e. an instance of Collection) or a mathematical set (i.e. an instance of Set-Mathematical).  Instances of Set-Mathematical and instances of Collection (and thus instances of SetOrCollection) share some basic common features.  All instances of Collection and all instances of Set-Mathematical (and thus all instances of SetOrCollection) are abstract entities, lacking spatial and temporal properties.  Nearly all instances of Collection (except \"empty\" collections) and nearly all instances of Set-Mathematical (except the empty set; see TheEmptySet) have \"elements\" (i.e. instances or members; see elementOf); hence set-or-collections may stand to one another in generalized set-theoretic relations such as subsetOf and disjointWith (qq.v.).  (It is this shared feature of having elements that provides the basic rationale for reifying the collection SetOrCollection.)  Nevertheless, sets and collections differ in two important ways.  First, each collection is intrinsically associated with an intensional criterion for membership -- a more or less natural property (or group of properties) possessed by all of (and only) its elements.  Collections are thus akin to kinds.  In contrast, the elements of a set are not required to be homogeneous in any respect: any things whatsoever may together constitute the elements of a set.  The second major difference between sets and collections is that no two distinct sets can be coextensional (i.e. have exactly the same elements; see coExtensional).  Sets can thus be identified purely on the basis of their extensions (see extent).  Collections, on the other hand, are individuated by their intensional criteria for membership.  So collections that have exactly the same elements might nevertheless be distinct, differing in their respective membership criteria.  (Note that the general relationship between collections and their \"intensional criteria for membership\" in the above sense is not something that is currently represented explicitly in the Knowledge Base (though this seems a worthwhile area for future work); still the comment and other \"definitional\" assertions on a given collection should ideally convey a reasonably clear and precise idea of its associated membership criterion.)", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Set-Mathematical', "A specialization of SetOrCollection (q.v.); the collection of mathematical sets.  An instance of Set-Mathematical can be any arbitrary set of Things.  A good way to explain this notion with respect to the Cyc ontology is to contrast Set-Mathematical with Collection (q.v.).  First, while the instances of a given collection all have some more-or-less significant (often \"natural\") property or properties in common, the elements (see elementOf) in a given set might have nothing in common (besides membership in that set).  Second, while it is in principle possible for two distinct collections to have exactly the same elements (with respect to a given context), this cannot happen in the case of sets, which are individuated strictly in terms of their extensions (see extent).  Third (and specifically regarding their expression in the CycL language), unlike with collections, rarely will it be desirable to create a new constant to denote a particular set.  Instead, a set will often be either (a) intensionally specified by a defining property via TheSetOf (q.v.), as in `(TheSetOf ?X (and (isa ?X Integer) (greaterThan ?X 42)))', or (b) extensionally specified by enumerating its elements via TheSet (q.v.), as in `(TheSet 3 4 5)'; see also ThePartition and TheCovering.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'September', "A specialization of CalendarMonth.  Each instance of September is the ninth month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'SententialRelation', "A collection of mathematical objects.  Each instance of SententialRelation is by definition either a LogicalConnective or a Quantifier.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ScopingRelation', "A specialization of Relation whose instances are used to determine a \"scope\" with respect to one or more variables and to bind any free occurrences of those variables that are inside that scope.  Each instance of ScopingRelation takes as its arguments (at least) a variable or list of variables (see CycLVariable and CycLVariableList) and a formula (see CycLExpression-Assertible).  The former argument is the scoping relation's \"scoping\" argument (see scopingArg), and the latter its \"scoped formula\" argument (see scopedFormulaArg).\n<p>\nSyntactically, the formula (SCOPINGRELN VAR SENT) might either be a sentence or a non-atomic term (see CycLNonAtomicTerm), depending on which ScopingRelation it is built from.  Suppose for simplicity that the sentence SENT itself contains no ScopingRelation expressions, so that any variables occurring in SENT are not bound (i.e. they are _free_).  Then, in the formula (SCOPINGRELN VAR SENT), the _scope_ of the occurrence of the term SCOPINGRELN is SENT, and any free occurrence of the variable VAR in SENT is said to be _bound_ by that occurrence of SCOPINGRELN, and thus is bound (and hence not free) with respect to the entire formula.  (The occurrence of VAR immediately to the right of SCOPINGRELN is also considered bound with respect to the entire formula.)\n<p>\nSemantically, if the formula (SCOPINGRELN VAR SENT) is _closed_ (i.e. if it contains no free occurrence of any variable), then it will in some sense be \"about\" the value(s) of VAR that satisfy SENT.  That is, if (SCOPINGRELN VAR SENT) is a closed sentence it will state something about those values, while if (SCOPINGRELN VAR SENT) is a closed NAT it will (purport to) denote something related to those values.  For an example of the former case see thereExists; for the latter case see TheSetOf.  (If there are no free occurrences of VAR inside SENT, then (SCOPINGRELN VAR SENT) is a \"vacuous\" application of SCOPINGRELN that means exactly what SENT means.)\n<p>\nInstances of ScopingRelation include all of the Quantifiers and Lambda.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ScalarPointValue', "A specialization of ScalarInterval (q.v.).  Each instance of ScalarPointValue is a specific number or quantity, as opposed to a range of numbers or quantities (cf. ScalarProperInterval).  Instances of ScalarPointValue include all reals numbers and other Number-Generals (q.v.), as well as specific instances of Quantity such as (Meter 3) and (SecondsDuration 10).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ScalarInterval', "A specialization of TupleOfIntervals (q.v.).  Roughly put, this is the collection of all things that can be ranked according to some one-dimensional scale.  Instances of ScalarInterval are numbers or quantities possessing only sign and magnitude.  They are construed as <i>one-tuples</i> (see Tuple) of intervals.  They are to be contrasted with VectorIntervals (q.v.), which possess a direction as well as a magnitude, and are construed as two-membered tuples of intervals.\n<p>\nScalarInterval is partitioned into the two collections NumericInterval (which is the collection of numbers and number-ranges of all kinds) and Quantity (qq.v).  A Quantity is usually specified with a numeric-interval, as with (Meter 3)), but it might also be given in a generically-ranked way, as with (HighAmountFn Happiness); see the specializations MeasurableQuantity and NonNumericQuantity.  The magnitude of a scalar might be given by a specific number (see ScalarPointValue) or by a proper range of numbers (see ScalarProperInterval).\n<p>\nNote that the instances of MathematicalFunctionOnScalars (q.v.), which include artithmetic functions such as addition (see PlusFn) and division (see QuotientFn), are defined broadly so as to apply not only to numbers, but to (numerically-measured) scalar intervals generally.  Thus (PlusFn (Meter 3) (Meter 5)) is equal to (Meter 8).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ScalarIntegralValue', "A specialization of ScalarPointValue (q.v.).  Each instance of ScalarIntegralValue is either an Integer or a MeasurableQuantity  (q.v.) that is the value returned when some UnitOfMeasure (q.v.) function is applied to an Integer.  In the latter case, the quantity is said to be \"integral with respect to\" that unit-of-measure (see integralWRTUnit).\n<p>\nFor example, both 6 and (Inch 6) are scalar integral values.  The latter is integral with respect to Inch.\n<p>\nScalarIntegralValues are the admitted arguments for, and the values returned by, GreatestCommonDivisorFn and LeastCommonMultipleFn (qq.v.).\n<p>\nNote that, despite appearances to the contrary, (Foot-UnitOfMeasure 0.5) is a scalar integral value that is integral with respect to Inch, as it is equal to the scalar integral (Inch 6).  It might even be argued that, in principle, <i>every</i> MeasurableQuantity is integral with respect to some (reified or not) unit-of-measure or other.  But that is a contentious issue on which we need not take sides.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Saturday', "A collection of CalendarDays and an \ninstance of DayOfWeekType.  Saturday is the collection of all \n(and only) saturdays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RuleTemplate', "Terms denoting formulas (typically without support for efficient inference) that can be (partially) instantiated as Cyc assertions (typically with support for efficient inference); see trueRule and ruleTemplateAssertion.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RoundUpFn', "An instance of EvaluatableFunction.  When applied to an instance INTERVAL of ScalarInterval, RoundUpFn returns an instance ROUNDED-INTERVAL of ScalarInterval in which the minimum and maximum ranges of INTERVAL have been rounded upwards to integer values.  For example, (RoundUpFn (Meter 2.5 5.2)) is (Meter 3 6).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'RoundDownFn', "(RoundDownFn QUANTITY) converts QUANTITY into one where the maximum and minimum ranges have been rounded downwards to integer values.  For example, (RoundDownFn (Meter 2.5)) denotes (Meter 2).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'RoundClosestFn', "(RoundClosestFn QUANTITY) converts QUANTITY into one where the maximum and minimum ranges have been rounded to the closest integer values.  For example,  (RoundClosestFn (Meter 2.41)) denotes (Meter 2),  (RoundClosestFn (Meter 2.7)) denotes (Meter 3), and (RoundClosestFn (Meter 1.6 4.2)) denotes  (Meter 2 4). If QUANTITY is exactly between two integers (that is, in the form integer+0.5), then it is rounded to the one that is even. So, (RoundClosestFn (Meter 2.5)) denotes (Meter 2), and (RoundClosestFn (Meter 7.5)) denotes (Meter 8). See also RoundUpFn, RoundDownFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'RemovalModuleSupportedPredicate-Specific', "The collection of all Predicates which are supported by some CycRemovalModule-Specific.  Sentences of the form (PRED . ARGS), where PRED is an instance of RemovalModuleSupportedPredicate-Specific, have special inference support.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RemovalModuleSupportedPredicate-Generic', "The collection of all Predicates which are supported by some CycRemovalModule-Generic.  An assertion of the form (PRED . ARGS), where PRED is an instance of RemovalModuleSupportedPredicate-Generic, may affect the provability of sentences other than just sentences whose predicate is PRED.  This is what is meant by 'generic' in this sense.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RemovalModuleSupportedCollection-Generic', "The collection of all Collections which are supported by some CycRemovalModule-Generic.  An assertion of the form (isa INS COL), where COL is an instance of RemovalModuleSupportedCollection-Generic, may affect the provability of sentences that do not mention COL explicitly.  In particular, it may affect the provability of sentences mentioning INS.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RelaxArgTypeConstraintsForVariables', "A CanonicalizerDirective  (q.v.) that directs the CycCanonicalizer (specifically, the  CycWellFormednessChecker) to relax the argument-type constraints it usually imposes on variables.  For example, this canonicalizer directive  would allow the sentence `(and (isa ?X Collection) (isa ?X Individual))'  to be admitted, though it would otherwise be rejected as ill-formed due to  the mutually disjoint argument-type constraints (see ArgTypePredicate) on the positions occupied by the two occurrences of the variable `?X'.", 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(comment, 'RelationInstanceExistsFn', "(relationInstanceExists PRED THING COLL) says that THING stands in the relation PRED to some (not necessarily known) instance of the Collection COLL. (RelationInstanceExistsFn PRED THING COLL) denotes this instance of COLL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RelationExistsInstanceFn', "(relationExistsInstance PRED COLL THING) says that some (not necessarily known) instance INS of the Collection COLL stands in the relation PRED to THING. (RelationExistsInstanceFn PRED COLL THING) denotes INS.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RelationExistsAllFn', "The predicate relationExistsAll states that for every instance of a collection, some other term exists in a certain relationship.  An arbitrary such term is a function of the instance, the predicate, the collection, and the type of the other term.  (RelationExistsAllFn TERM PRED DEP-COL INDEP-COL) allows one to denote this `arbitrary such term that so exists' in a named fashion.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'RelationAllExistsFn', "An IndeterminateTermDenotingFunction (q.v.) that is closely related to relationAllExists.  If both (relationAllExists PRED INDEP-COL DEP-COL) and (isa INDEP-INS INDEP-COL) hold,  then (PRED INDEP-INS (RelationAllExistsFn INDEP-INS PRED INDEP-COL DEP-COL) also holds.  Thus the term '(RelationAllExistsFn INDEP-INS PRED INDEP-COL DEP-COL)' \"indeterminately denotes\" some instance of DEP-COL that is related to INDEP-INS by PRED.  For instance, since (relationAllExists citizens Country Person) and (isa Malaysia Country) both hold, so does (citizens Malaysia (RelationAllExistsFn Malaysia citizens Country Person)).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, tRelation, "A specialization of MathematicalObject and the collection of all relations.  Each instance of Relation is a relation that can hold among one or more things, depending on whether the relation is unary, binary, ternary, or whatever (see arity and relationalArity).  A unary relation (such as unknownSentence) is a sort of degenerate case that holds of  certain individual things (in this case, all sentences that are unknown to Cyc).  A binary relation (such as likesAsFriend) relates one thing to another (in this case, it relates one sentient animal to another just in case the first likes the second).  A ternary relation relates certain triples of things.  And so on.  There are also relations of no particular fixed arity; see VariableArityRelation.\n<p>\nNames of relations can be used to construct sentences and other formulas.  More precisely, CycL terms that denote Relations can appear in the \"0th\" argument (or \"arg0\") position of a CycLFormula (q.v.), i.e. as the term immediately following the formula's opening parenthesis.\n<p>\nAn important subcollection of Relation is TruthFunction (q.v.), whose instances are intimately related to truth-values, as reflected in the fact that the CycL expressions that denote truth-functions can appear in the arg0 position of a CycLSentence; and a sentence (if quantificationally closed; see CycLClosedSentence), will generally be either true or false (with respect to a given context or interpretation).  The major subcollections of TruthFunction are Predicate, LogicalConnective, and Quantifier (qq.v.).\n<p>\nAnother important subcollection of Relation is Function-Denotational (q.v.), the collection of all functions.  A CycL term that denotes a function can appear in the arg0 position of a CycLNonAtomicTerm (q.v.).\n<p>\nSee also relationExtension and relationHoldsAmong.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ReifiableFunction', "A specialization of Function-Denotational.   Each instance of ReifiableFunction is denoted by a CycL constant that can stand in the 0th (or \"arg0\") position in a CycLReifiableNonAtomicTerm  (q.v.).  For example, GovernmentFn is a reifiable function, so the term  `(GovernmentFn France)' is a reifiable non-atomic term (or \"NAT\").   And since this particular term actually _is_ reified in the Cyc Knowledge  Base, it is, more specifically, a CycLNonAtomicReifiedTerm (or \"NART\").   The NART `(GovernmentFn France)' is treated more or less the same as if  it were a CycL constant (named, say, `GovernmentOfFrance').  Similary, the constant for GovernmentFn can be applied to the constant (or other  reified or reifiable term) for _any_ instance of GeopoliticalEntity to form a reifiable NAT that denotes that region's government; and should this NAT appear in a sentence that is asserted to the KB, it will thereby become a NART. Note, however, that not all NATs are such that it is desireable that  they should become reified (i.e. become NARTs) if they appear in  assertions; for more on this see UnreifiableFunction.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ReformulatorIrrelevantFORT', "The collection of Cyc FORTs that are not relevant to the reformulator.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ReformulatorHighlyRelevantFORT', "The collection of Cyc FORTs that are highly relevant to the reformulator.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ReformulatorHighlyRelevantFORT', "The collection of Cyc FORTs that are highly relevant to the reformulator.           An example of such a FORT would be one that is referenced in a large           number of reformulator rules in the KB (see intances of            CycLReformulationRulePredicate).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ReformulatorDirectivePredicate', "The collection of Predicates which can affect the\nbehaviour of the CycLReformulator or its submodules.  When\nreformulator directive GAFs are asserted, they are only relevant to\nthe reformulator when it is reformulating expressions in the\nmicrotheory in which the directive is asserted, or a specMt thereof.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ReformulationNeitherDirection', "A meta-property of a CycLReformulatorDirective,\nmeaning that no arg is to be interpreted as either the 'from' or 'to' arg.\nSee reformulationDirectionInMode for how this\ndirection can be used.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'ReformulationForwardDirection', "A meta-property of a CycLReformulatorDirective, meaning\nthat there exist two arguments in the directive such that the\nlower-numbered arg (e.g. arg1 for a binary predicate) is the 'from'\narg, the input to the reformulator, and that the higher-numbered arg\n(e.g. arg2 for a binary predicate) is the 'to' arg, the output of the\nreformulator.  Its semantics are more fully determined by context.\nThis is the default preferredReformulationDirection for\nreformulatorRules.  See reformulationDirectionInMode for how this\ndirection can be used.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'ReformulationBackwardDirection', "A meta-property of a CycLReformulatorDirective, meaning\nthat there exist two arguments in the directive such that the\nhigher-numbered arg (e.g. arg2 for a binary predicate) is the 'from'\narg, the input to the reformulator, and that the lower-numbered arg\n(e.g. arg1 for a binary predicate) is the 'to' arg, the output of the\nreformulator.  Its semantics are more fully determined by context.\nSee reformulationDirectionInMode for how this\ndirection can be used.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'ReflexiveBinaryPredicate', "The specialization of BinaryPredicate whose instances are reflexive relations.  A reflexive binary predicate relates anything that meets the predicate's argument constraints to that thing itself.  Typically, a reflexive predicate has precisely the same constraints on both of its argument-places.\n<p>\nMore precisely: a binary predicate <code>PRED</code> is an instance of ReflexiveBinaryPredicate if and only if both (i) for every <code>X</code> that satisfies the constraints on (i.e is an admittedArgument for) <i>both</i> argument-places of <code>PRED</code>, <code>(PRED X X)</code> holds and (ii) <code>PRED</code>'s two argument-places are \"co-satisfiable\" with respect to their (single-argument) type constraints (see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement).\n<p>\nInstances of ReflexiveBinaryPredicate include physicalParts, inRegion, genls, and equals.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'RealNumber', "The collection of real numbers; a specialization of both  IntervalOnNumberLine and ScalarPointValue (qq.v.).  Each  instance of RealNumber is a single point on the real number  line, which has no upper or lower bounds.  Specializations  of this collection include Integer, RationalNumber, and  NegativeNumber.  Note that RealNumber is also a specialization  of ComplexNumber (q.v.), and any instance of the former  constitutes a degenerate case of the latter, in that the value  along the real's \"imaginary axis\" is zero (cf. ImaginaryNumber).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'QuotientFn', "An instance of both BinaryFunction and EvaluatableFunction.  When applied to an instance DIVIDEND of ScalarInterval and an instance DIVISOR of ScalarInterval, QuotientFn returns an instance of ScalarInterval that is the result of dividing DIVIDEND by DIVISOR.  For example, (QuotientFn 24 6) is 4, (QuotientFn (Meter 3) (SecondsDuration 2)) is (MetersPerSecond 1.5) (i.e., 1.5 meters per second), and (QuotientFn (SecondsDuration 2) (Meter 3)) is ((PerFn SecondsDuration Meter) 0.6666666666666666) (i.e., 0.6666666666666666 seconds per meter).  Note that (QuotientFn DIVIDEND 0) is undefined for any instance DIVIDEND of ScalarInterval.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Quote', "The symbol 'Quote' is used in CycL as a device for referring to particular CycL expressions, in much the same way that quotation marks are often used in English in order to \"mention\" (rather than simply \"use\") an English word or phrase.  (And in much the same way that single-quotes are used in the preceding sentence in order to refer to a particular CycL symbol.)  If <code>EXPR</code> is a CycL expression, the term <code>(Quote EXPR)</code> -- formed by writing 'Quote' followed by <code>EXPR</code> and enclosing the result in parentheses -- is interpreted as denoting <code>EXPR</code> itself, as opposed to whatever it is (if anything) that <code>EXPR</code> ordinarily denotes (i.e. what it denotes when not inside the scope of <code>Quote</code> or in a quotedArgument position).  For example, while the CycL constant <code>Plato</code> denotes a certain Greek philosopher, the compound expression <code>(Quote Plato)</code> denotes the term <code>Plato</code> itself.  Similarly, the expression <code>(Quote <b>?X</b>)</code> denotes the variable <code><b>?X</b></code>, and the expression <code>(Quote (isa Plato Philosopher))</code> denotes the sentence <code>(isa Plato Philosopher)</code>.\n<p>\n<code>Quote</code> is also used in conjunction with the symbol <code>EscapeQuote</code> (q.v.), as a device for making <i>general</i> statements about CycL expressions.  Let <code>EXPR = (E<sub>1</sub>...E<sub>n</sub>)</code> be a well-formed CycL expression whose <b>n</b> immediate constituents are the CycL expressions <code>E<sub>1</sub></code>, ..., and <code>E<sub>n</sub></code> (where <b>n</b> >= 1).  The expression \n<pre>\n  (Quote EXPR) = (Quote (E<sub>1</sub>...E<sub>n</sub>))\n</pre> \n-- consisting of the symbols <code>Quote</code>, <code>EXPR</code>, and a surrounding pair of parentheses -- is a term that denotes <code>EXPR</code>.  The expression (call it <i><b>EQ</b></i>) \n<pre>\n  (Quote (E<sub>1</sub>...(EscapeQuote E<sub>i</sub>) ...E<sub>n</sub>)\n</pre> \n(where 1 <= <b>i <= n</b>) is a term whose meaning is similar to <code>(Quote EXPR)</code>, except that any free occurrence of a variable in <code>E<sub>i</sub></code> remains free with respect to <b>EQ</b> as a whole.  If <code>E<sub>i</sub></code> contains no free variables, then <b>EQ</b> is a closed term (see CycLClosedDenotationalTerm) that denotes <code>EXPR</code>, and is equivalent to <code>(Quote EXPR)</code>.  If <code>E<sub>i</sub></code> does contain free variables, then <b>EQ</b> is an open term (see CycLOpenDenotationalTerm) in which exactly the same variables occur free; and any closed instantiation of <b>EQ</b> denotes the corresponding instantiation of <code>EXPR</code>.  (A <i>closed instantiation</i> of an open expression is any <i>closed</i> expression that results from simultaneously replacing each free occurrence of a variable in the open expression with some closed term, replacing any two occurrences of the same variable by the same closed term.)\n<p>\nFor a simple example, the variable <code><b>?X</b></code> occurs free in the term\n<pre>\n  (Quote (EscapeQuote (MotherFn <b>?X</b>)) ;\n</pre>\nand one instantiation of this is the closed term\n<pre>\n  (Quote (EscapeQuote (MotherFn Plato)) ,\n</pre>\nwhich denotes the non-atomic term <code>(MotherFn Plato)</code>.  \n<p>\nFor a more interesting example, consider a case where <i>some but not all</i> of the free variables in a term are quoted.  In the expression\n<pre>\n  (Quote (loves (EscapeQuote <b>?X</b>) <b>?Y</b>))\n</pre>\nonly <code><b>?X</b></code> occurs free -- the <code><b>?Y</b></code> is quoted. Thus this instantiation of the above:\n<pre>\n  (Quote loves (EscapeQuote Plato) <b>?Y</b>)\n</pre>\nis a closed term that denotes the <i>open</i> formula <code>(loves Plato <b>?Y</b>)</code>.  \n<p>\nNote that the sort of quotation done in the first example above can also be done -- and done more elegantly -- using just QuasiQuote instead of Quote and EscapeQuote.  But the sort of quotation done in the second example cannot be accomplished with QuasiQuote.\n<p>\nSee also QuasiQuote, EscapeQuote, denotes, quotedIsa, quotedArgument, NoteAboutQuotingInCycL, and NoteAboutSyncategorematicSymbols.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'QuintaryRelation', "The collection of all fixed-arity relations of arity 5 (see arity).  The most notable specializations of QuintaryRelation are QuintaryPredicate and QuintaryFunction (qq.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'QuintaryPredicate', "A specialization of Predicate and QuintaryRelation.  QuintaryPredicate is the collection of all predicates whose arity (see arity) is 5.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'QuintaryFunction', "A specialization of both QuintaryRelation and Function-Denotational. An instance of Function-Denotational FUNC is an instance of QuintaryFunction if and only if FUNC has an arity of 5.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'QueryMt', "The instance of IndexicalConcept used specifically for referring to 'the microtheory in which this particular query is being run'.  This allows for a certain amount of reflection in queries, since it allows one to pose a query about the Microtheory of the very same Ask.  It is useful for cases where one wants to obtain certain facts about the context of an Ask without specifying anything more about that context.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'QuaternaryRelation', "The collection of all fixed-arity relations of arity 4 (see arity).  The most notable specializations of QuaternaryRelation are QuaternaryPredicate and QuaternaryFunction (qq.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'QuaternaryPredicate', "A specialization of both QuaternaryRelation and Predicate.   QuaternaryPredicate is the collection of all predicates whose arity (see arity) is 4.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'QuaternaryFunction', "A specialization of both FixedArityFunction and QuaternaryRelation (qq.v.).  Each instance of QuaternaryFunction is a function that always takes four arguments at a time, i.e. has the arity (see arity) 4.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'QuasiQuote', "A quotation device for making general statements about CycL expressions.  QuasiQuote allows for any free variables occurring inside an expression to which it is applied to \"escape\" (i.e. remain free with respect to) the quotation.  It is thus similar in function to, though less flexible than, the combination of Quote and EscapeQuote (qq.v.).\n<p>\nTo be more precise: the syncategorematic symbol <code>QuasiQuote</code> is a device for allowing genuinely free variables to occur inside quoted expressions, in order that one may meaningfully \"quantify into\" such expressions and thereby <i>generalize</i> over them.  It can thus be instructively compared to the symbol <code>Quote</code> (q.v.), which is used to make statements about <i>particular</i> CycL expressions.  Let <code>EXPR</code> be a well-formed CycL expression.  The expression <code>(Quote EXPR)</code> -- consisting of the symbols <code>Quote</code>, <code>EXPR</code>, and a surrounding pair of parentheses -- is a term that denotes <code>EXPR</code>.  The expression <code>(QuasiQuote EXPR)</code> is a term whose meaning is similar to <code>(Quote EXPR)</code>, except that any free occurrence of a variable in <code>EXPR</code> remains free with respect to <code>(QuasiQuote EXPR)</code> as a whole.  If <code>EXPR</code> contains no free variables, then <code>(QuasiQuote EXPR)</code> is a closed term (see CycLClosedDenotationalTerm) that denotes <code>EXPR</code>, and is equivalent to <code>(Quote EXPR)</code>.  If <code>EXPR</code> contains any free occurrences of variables, then <code>(QuasiQuote EXPR)</code> is an open term (see CycLOpenDenotationalTerm) in which exactly the same variables occur free; and any closed instantiation of <code>(QuasiQuote EXPR)</code> denotes the corresponding instantiation of <code>EXPR</code>.  (A <i>closed instantiation</i> of <code>EXPR</code> is any closed expression that results from replacing each free occurrence of a variable in <code>EXPR</code> with some closed term, and replacing any two occurrences of the same variable by the same closed term.)\n<p>\nFor an example, the variable <code>?X</code> occurs free in the term\n<pre>\n  (QuasiQuote (MotherFn ?X)) ;\n</pre>\nand one instantiation of this is the closed term\n<pre>\n  (QuasiQuote (MotherFn Plato)) ,\n</pre>\nwhich denotes the non-atomic term <code>(MotherFn Plato)</code>.  And the (implicitly quantified) rule\n<pre>\n  (isa (QuasiQuote (MotherFn ?X)) CycLNonAtomicTerm)\n</pre>\nmeans, in effect, that any closed instantiation of the open term <code>(MotherFn ?X)</code> -- e.g. <code>(MotherFn Plato)</code> -- is a non-atomic term of CycL.\n<p>\nSee also denotes, quotedIsa, quotedArgument, NoteAboutQuotingInCycL, and NoteAboutSyncategorematicSymbols.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'QuantityConversionFn', "(QuantityConversionFn UNIT QUANTITY) converts QUANTITY into an equivalent quantity expressed using UNIT as the unit of measure.  For example, (QuantityConversionFn Inch (Foot-UnitOfMeasure 2)) denotes (Inch 24).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Quantifier', "A specialization of SententialRelation and ScopingRelation (qq.v.).  Each instance of Quantifier takes as its arguments (at least) a variable (see CycLVariable) and a sentence (see CycLSentence-Assertible), and is used to make a certain kind of generic quantitative statement regarding the things that satisfy the sentence.  Typically, the variable VAR will occur free in the sentence SENT, and in the quantified sentence (QUANT VAR SENT ...) these occurrences of VAR are bound by that occurrence of QUANT.  (If VAR does not occur free in SENT, then the quantified sentence is a \"vacuous quantification\" that is equivalent to SENT by itself.  For the definitions of 'free' and 'bound' occurrences of variables, see ScopingRelation.)  For example, '(thereExists ?X (isa ?X Dog))' means that there exists at least one dog.  Other instances of Quantifier are forAll, thereExistExactly, thereExistAtLeast, and thereExistAtMost.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ProblemSolvingCntxt', "A specialization of Microtheory.\nProblemSolvingCntxts are microtheories that are used to reason about \nparticular situations.  Queries posed in ProblemSolvingCntxts are\nexpected to draw -- via the genlMt relation -- on a large number\nof other microtheories.  A ProblemSolvingCntxt is usually created \nfor temporary use with a problem at hand, and is discarded after the \nproblem is dealt with.  In contrast, a GeneralMicrotheory (q.v.), e.g., \nis created for lasting use.  Specializations of ProblemSolvingCntxt \ninclude ParsingContext and ScenarioTestingMicrotheory.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'prettyString-Canonical', "(prettyString TERM STRING) means that STRING is the English word or expression (sequence of words) commonly used to refer to TERM.  The predicate prettyString is used by the code which generates CycL to English paraphrases, but its applicability is not restricted to this use.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PredicateTypeByArity', "A collection of collections.  Each instance of PredicateTypeByArity is a collection of Predicates having the same arity.  Instances include UnaryPredicate, BinaryPredicate, and TernaryPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, tPred, "A specialization of TruthFunction (q.v.).  Each instance of Predicate is either a property of things (see UnaryPredicate) or a relationship holding between two or more things.  Like other truth-functions, predicates, or rather the expressions that represent or denote them, are used to form sentences.  More precisely, any CycL expression that denotes an instance of Predicate (and only such an expression) can appear in the \"0th\" (or \"arg0\") position (i.e. as the term following the opening parenthesis) of a CycLAtomicSentence (q.v.).  Important specializations of Predicate include UnaryPredicate, BinaryPredicate, TernaryPredicate, QuaternaryPredicate, and QuintaryPredicate.  Note that, despite its name, Predicate is a collection of <i>relations</i>, and not a collection of expressions that represent or denote such relations.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PositiveInteger', "A specialization of Integer.  An instance INT of Integer is an instance of PositiveInteger just in case INT is an integer greater than 0.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PlusFn', "A variable-arity MathematicalFunctionOnScalars that is an extension of the arithmetical operation of addition to measurable ScalarIntervals (q.v.) generally.  Where  <code>ADDEND1</code>, ..., and <code>ADDENDn</code> are pairwise numericallyComparable (q.v.), <code>(PlusFn ADDEND1 ... ADDENDn)</code> is the arithmetic sum of <code>ADDEND1</code>, ..., and <code>ADDENDn</code>.  For example, (PlusFn 2 3 4) is 9, and (PlusFn (Meter 1.5) (Meter 0.7)) is (Meter 2.2).\n<p>\nNote that the term <code>(PlusFn ADDEND1 ... ADDENDn)</code> is undefined if there are <code>ADDENDi</code> and <code>ADDENDj</code> (1 <code><= i,j <= n)</code> that are not comparable.  For example, <code>(PlusFn (MinutesDuration 1) (Meter 3))</code> is undefined, since (MinutesDuration 1) is a Time-Quantity and (Meter 3) is a Distance, and time-quantities are not comparable with distances.\n<p>\nFor subtraction, see DifferenceFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PlusAll', "A NumericQuantifier function that takes a SetOrCollection and a UnaryFunction as its arguments. (PlusAll <b>SETORCOL FUNC</b>) is the result of adding up the results of successively applying <b>FUNC</b> to each element of <b>SETORCOL</b>.  For example:\n<pre>\n    (PlusAll (TheSet 4 9) SquareRootFn)\n  = (PlusFn (SquareRootFn 4) (SquareRootFn 9))\n  = (PlusFn 2 3)\n  = 5.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PerFn', "A binary UnitOfMeasureDenotingFunction (q.v.) that takes two UnitOfMeasure (q.v.) functions and returns a UnitOfRatio (q.v.) composed of them.  <code>(PerFn UNIT1 UNIT2)</code> is a unit <code>RATIO-FN</code> for measuring the ratio of <code>UNIT1</code> units to <code>UNIT2</code> units.   That is, for any number or other NumericInterval <code>NUM</code>, <code>(RATIO-FN NUM)</code> = <code>(QuotientFn (UNIT1 NUM) (UNIT2 1))</code>.\n<p>\nFor example, (PerFn Meter SecondsDuration) is a UnitOfSpeed function that measures meters-per-second.  When applied to (e.g.) the integer 20, this unit-of-speed returns the particular Speed equal to\n<pre>\n  (QuotientFn (Meter 20) (SecondsDuration 1))\n</pre>\nor 20 meters-per-second.\n<p>\nNote that <code>UNIT1</code> and <code>UNIT2</code> must <i>not</i> be interconvertibleUnits (q.v.), or <code>(PerFn UNIT1 UNIT2)</code> is undefined.  Otherwise, <code>UNIT1</code> and <code>UNIT2</code> would effectively \"cancel each other out\", and the value returned by PerFn for those arguments would not be a UnitOfRatio.\n<p>\nSee also UnitProductFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Percent', "A variable-arity MathematicalFunctionOnScalars (q.v.).  When applied to a number or other NumericInterval (pair of numeric-intervals), Percent returns the instance of IntervalOnNumberLine that is its argument (the interval between its two arguments) divided by 100.  For example (Percent 110) is 1.1, and (Percent 10 20) is (Unity 0.1 0.2): the interval between 0.1 and 0.2 inclusive.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'PartiallyCommutativeRelation', "An instance of RelationTypeByLogicalFeature (q.v.) and a specialization of AtLeastPartiallyCommutativeRelation.  Each instance  of PartiallyCommutativeRelation <code>PARTCOMRELN</code> is a predicate or function that is commutative in some, but not all, of its argument-places (see  commutativeInArgs).  More precisely, suppose for example that <code>PARTCOMRELN</code> is a predicate (function) that is commutative only in its odd-numbered  argument-places, and that <code>PARTCOMRELN</code> holds among (has the value <code>VAL</code> for) a given sequence of arguments <code>SEQ</code>.  It follows that <code>PARTCOMRELN</code> also holds among (has the same value <code>VAL</code> for) any other sequence <code>SEQ-PRIME</code> obtainable from <code>SEQ</code> by permuting some or all of the odd-numbered members of <code>SEQ</code> while keeping all of its even-numbered members fixed.\n<p>\nNote that <code>PARTCOMRELN</code> must  have an arity (see arity) of at least three and <i>cannot</i> be an instance of CommutativeRelation (as any instance of the latter is commutative in <i>all</i> of its argument-places).\n<p>\nInstances of PartiallyCommutativeRelation include pathsJoinAt, formsBorderBetween, and BlockOfStreetBetweenFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'October', "A specialization of CalendarMonth.  Each instance of October is the tenth month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'November', "A specialization of CalendarMonth. Each instance of November is the eleventh month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'NonNegativeScalarInterval', "A specialization of ScalarInterval.  An instance INTERVAL of ScalarInterval is also an instance of NonNegativeScalarInterval just in case INTERVAL is a non-negative number or quantity.  Instances of NonNegativeScalarInterval include all instances of NonNegativeNumber (q.v.), as well as non-negative quantities such as (Meter 212), (Kilogram 5), and (SecondsDuration 0).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'NonNegativeInteger', "NonNegativeInteger is the sub-collection of Integer that excludes the negative integers.  Each instance of NonNegativeInteger is a whole number greater than or equal to zero -- for example, 0, 1, 2, 3, ....", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Multigraph', "An instance of PathSystemType-Structural and a subcollection of PathSystem.  Each instance of Multigraph is an instance of PathSystem in which the only points are nodes in the system and all paths are made of links (i.e., no intermediate points along links). Sometime such a system is called a graph or multi-graph in graph theory.  A Multigraph consists of nodes interconnected by links, with loops on single nodes allowed, and with multiple links between the same two nodes also allowed.  (For a graph with no parallel links and no loops, see SimpleGraph-GraphTheoretic.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'MtUnionFn', "(MtUnionFn . MTS) denotes the ProblemSolvingCntxt where each of MTS and all of their genlMts are relevant.  This microtheory effectively contains all of the assertions from all of MTS, regardless of any contradictions.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'MtTimeWithGranularityDimFn', "An unreifiable BinaryFunction that takes a TimeInterval and a TimeParameter and returns a TemporalMicrotheory.  <code>(ist (MtTimeWithGranularityDimFn INTERVAL PAR) ASSERTION)</code> holds just in case <code>ASSERTION</code> holds at <code>INTERVAL</code> to granularity <code>PAR</code>.  See also MtTimeDimFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'MtTimeDimFn', "An unreifiable UnaryFunction that takes a TimeInterval and returns a TemporalMicrotheory.  <code>(ist (MtTimeDimFn INTERVAL) ASSERTION)</code> holds just in case <code>ASSERTION</code> holds at <code>INTERVAL</code> to granularity Null-TimeParameter.  See also MtTimeWithGranularityDimFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'MtSpace', "(MtSpace MT-1 ... MT-N) denotes the microtheory whose set of domain assumptions is the union of the assertions true in each of MT-1 ... MT-N. Consequently, (MtSpace MT-1 ... MT-N) has each of MT-1 ... MT-N as one of its genlMts. Typically, but not always, there will be assertions true in (MtSpace MT-1 ... MT-N) that are not true in any of its genlMts. For example,\n<p>\n(MtSpace WorldHistoryMt (MtDim mtTimeIndex (YearFn 1790)))\n<p>\ndenotes the microtheory whose domain assumption are precisely those of the WorldHistoryMt (whose basic assumption is that we are in the context of actual world history) and those of the microtheory (MtDim mtTimeIndex (YearFn 1790)) (whose basic assumption is that 1790 is the present year -- see MtDim). The conjunction of these domain assumptions implies everything that is true in real world history in the year 1790. For example, these domain assumptions imply that (president UnitedStatesOfAmerica GeorgeWashington) is true. Consequently, this assertion is true in (MtSpace WorldHistoryMt (MtDim mtTimeIndex (YearFn 1790))).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'MonthOfYearType', "A collection of Collections.\nInstances of MonthOfYearType are the canonical subcollections of CalendarMonth.  There are twelve of these in the JulianCalendar; for example, September is the collection of all Septembers.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'MonotonicallyTrue', "An instance of CycHLTruthValue.  MonotonicallyTrue is the attribute of being indefeasibly true.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'MonotonicallyFalse', "An instance of CycHLTruthValue.  MonotonicallyFalse is the attribute of being indefeasibly false.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'Monday', "A collection of CalendarDays and an \ninstance of DayOfWeekType.  Monday is the collection of all \n(and only) mondays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ModuloFn', "A binary function that takes a scalar and a comparable (non-null) point-value scalar to another comparable scalar, ModuloFn is a generalization of a basic notion of modular arithmetic, broadened to apply to ScalarIntervals of all sorts.\n<p>\n(ModuloFn <code>SCALAR BASE</code>) is the value of <code>SCALAR</code> modulo <code>BASE</code>, determined as follows.  (i) If <code>SCALAR</code> and <code>BASE</code> are both positive or both negative values, <code>SCALAR-MOD-BASE</code> is the remainder left when <code>BASE</code> is successively subtracted from <code>SCALAR</code> (zero or more times) until the result is a value that is closer to the comparable null-value (see ScalarNullValue) than <code>BASE</code> is.  (ii) If <code>SCALAR</code> and <code>BASE</code> differ in their numeric signs, <code>SCALAR-MOD-BASE</code> is the remainder left when <code>BASE</code> is successively <i>added</i> to <code>SCALAR</code> (zero or more times) until the result is a value <i>whose numeric sign agrees with that of</i> <code>BASE</code> or is null, and which is closer to the comparable null-value than <code>BASE</code> is.  (iii) If <code>SCALAR</code> is already a null-value, <code>SCALAR-MOD-BASE</code> is just <code>SCALAR</code> itself.  \n<p>\nFor example, (ModuloFn 8 3) = 2, (ModuloFn (Meter 9) (Meter -4)) = (Meter -3), and (ModuloFn (Inch -12) (Inch -4)) = (Inch 0).\n<p>\nNote that in case (i) above, if the absolute value of <code>SCALAR</code> is any value lessThan the absolute value of <code>BASE</code>, <code>SCALAR-MOD-BASE</code> is equal to <code>SCALAR</code>.  In all cases, if <code>SCALAR</code> numericallyEquals <code>BASE</code>, <code>SCALAR-MOD-BASE</code> is the comparable null-value.  In all cases, the numeric sign of the returned value <code>SCALAR-MOD-BASE</code> agrees with that of <code>BASE</code> (unless the returned value is null).  Also note that <code>(ModuloFn SCALAR BASE)</code> is undefined if <code>SCALAR</code> and <code>BASE</code> are not numericallyComparable (q.v.), or if <code>BASE</code> is null. \n<p>\nIn practice, <code>BASE</code> will usually be a positive integral value, and both <code>SCALAR</code> and the returned value will often be integral as well (see ScalarIntegralValue).  Note that if <code>SCALAR</code> and <code>BASE</code> are given in <i>different</i> (but comparable) UnitOfMeasures (e.g. Meter and (Centi Meter)), the result returned by Cyc will be given in the same units as <code>BASE</code>.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'MinRangeFn', "An instance of both VariableArityRelation and EvaluatableFunction.  When applied to instances <code>QUANTITY1</code>, ..., <code>QUANTITYN</code>  of ScalarInterval, MinRangeFn yields an instance of ScalarInterval that is the largest interval subsumed by each of <code>QUANTITY1</code> through <code>QUANTITYN</code>.  \n<p>\nFor example, (MinRangeFn  (Meter 1 3) (Meter 2 4)) is (Meter 2 3). \n<p>\nNote that if one of the instances <code>QUANTITY1</code>, ..., <code>QUANTITYN</code> fails to intersect with at least one of the other instances, then the result of applying MinRangeFn to <code>QUANTITY1</code>, ..., <code>QUANTITYN</code> is undefined (for example, both (MinRangeFn (Meter 1 1.5) (Meter 2 4) (Meter 0 5)) and (MinRangeFn (SecondsDuration 3 5) (Meter 1 4)) are undefined).  See also MaxRangeFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Minimum', "Computes the minimum of a unary function's values over all elements in a given set or collection.  That is, (Minimum SETORCOL FUNC) denotes the value of FUNC for the element ELEM of SETORCOL taken as argument (if any) such that (FUNC ELEM) is less than or equal to (FUNC OTHER) for any element OTHER of SETORCOL other than ELEM.  Note that (Minimum SETORCOL IdentityFn) denotes the minimum element of SETORCOL itself.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'MicrotheoryDesignatingRelation', "The collection of Relations which specify that a ELSentence-Assertible is to be interpreted in a given Microtheory.  It will be canonicalized and checked for well-formedness with respect to that microtheory. Each microtheory-designating relation has an argument which denotes a microtheory, and another argument which denotes a ELSentence-Assertible.  It may have other arguments as well. Use microtheoryDesignationArgnum and sentenceDesignationArgnum to specify these argument positions for each microtheory-designating relation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Microtheory', "A specialization of AspatialInformationStore and AbstractIndividual (qq.v.).  Each instance of Microtheory is an atemporal, aspatial, informational thing that represents a context in Cyc.  Each microtheory (or 'mt') serves to group a set of assertions together that share some common assumptions; the assertions in an mt constitute the content of that mt.  Note that each assertion in the Cyc knowledge base must be explicitly stated to be true in at least one microtheory.  Assertions stated to be true in one mt will also be true  (by inference) in more specialized mts that depend on the content of that mt.  For example, if something is true in the HumanSocialLifeMt (q.v.), then it should by default be true in the more specialized UnitedStatesSocialLifeMt (q.v.).  Specialized microtheories are related to the more general microtheories on which they depend by the predicate genlMt (q.v.).  Note that every query is made in some mt, and the answer one gets to a query depends on the mt in which it is asked, since the only assertions which can be used to answer a query in an mt are those  explicitly stated to be true in that mt, or in some more general mt.  See also the predicate ist, which is used to relate an assertion to the microtheories in which it is true.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'MeaningInSystemFn', "A reifiable BinaryFunction that returns the meaningful entities indexed by a particular character string in a Cyc-external information source. More precisely, (MeaningInSystemFn INFOSOURCE STRING), applied to the CharacterString STRING and the IndexedInformationSource INFOSOURCE, returns whatever is indexed by STRING in that system.  For example, (MeaningInSystemFn WordNet-1997Version \"N03585958\") returns the WordNet `synset' (`synonym set') represented by (rampart|bulwark|wall), meaning \"an embankment built around a space for defensive purposes\".\n<p>\nSTRING can have any format chosen by the person who builds the representation of the external system.  In addition, STRING may contain arbitrary further characters or information, depending on how the external information is selected and processed.  This function makes it possible to relate a concept in an external system to an arbitrarily complicated expression composed of Cyc concepts.  If the external concept has a direct, exact mapping to a single Cyc constant, then use the predicate synonymousExternalConcept rather than this function.  If there is correspondence only to one Cyc constant, but it is only approximate, use overlappingExternalConcept.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'May', "A specialization of CalendarMonth. Each instance of May is the fifth month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'MaxRangeFn', "<code>(MaxRangeFn QUANTITY<sub>1</sub> ... QUANTITY<sub>N</sub>)</code> denotes a quantity which subsumes each of <code>QUANTITY<sub>1</sub></code> through <code>QUANTITY<sub>N</sub></code>.  For example, <code>(MaxRangeFn (Meter 1 3) (Meter 2 4))</code> denotes (Meter 1 4).  See also MinRangeFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Maximum', "A NumericQuantifier.  Used to denote the maximum quantity which results from applying the function specified in the second argument to all of the elements of the set expression which appears in the first argument.--Rode 3/15/98", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'March', "A specialization of CalendarMonth. Each instance of March is the third month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'LogicalTruthMt', "This is a microtheory which contains only the assertions required to represent the logical system used in the Cyc knowledge base.  In other words, these are the assertions in CycL which must be present in order to use CycL to represent logical truths.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'LogicalTruthImplementationMt', "This is a microtheory which contains only the assertions required for the Cyc theorem prover and its underlying HL representation of the EL to function properly.  In other words, these are the assertions in CycL which are required by Cyc in order to perform any logical inferences using CycL formulas.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'LogicalConnective', "A collection of mathematical objects, including the basic logical connectives.  Each instance of LogicalConnective is a Relation which takes one or more truth-valued expressions (sentences) as arguments and returns a truth-valued sentence.  The instances of LogicalConnective include and, or, not, and implies.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'LogFn', "A unary EvaluatableFunction that returns the natural logarithm of the number taken as its argument.  (LogFn NUM) is the exponent to which e is raised to get NUM (where e is E-LogarithmBase). Its inverse (cf. inverseQuantFunctions-Nonsymmetric) is ExpFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'List', "A specialization of Tuple.  Each instance of List is a  finite sequence of things with a first and last member-position, with each member-position other than the last having a successor member-position.   As with tuples generally, lists allow for repetition of their members, so that the same item can appear at multiple member-positions in the same list.  A list can be represented formally as a function from a finite index set of counting numbers, beginning with one, into the domain of all Things (but note that Lists are _not_ explicitly represented as functions in the Cyc ontology).  Unlike an instance of Series (q.v.), a list is purely abstract (i.e. both aspatial and atemporal), and the only implied relation between an item and its successor in a list is the successor relation of the list itself.  Technically, List is more specific than Tuple only in that the index set (see tupleIndexSet) for a given list must be the counting numbers in their usual order (or some initial segment thereof), whereas the index set for a tuple, generally speaking, might be any set whatsoever.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'LeaveVariablesAtEL', "A CanonicalizerDirective (q.v.) that directs the canonicalizer to refrain from canonicalizing ELVariables into HLVariables.\nA consequence of this is that any CycLAssertion that contains no HL variables, regardless of its form, will be treated by the canonicalizer as if it were a GAF (see CycLClosedAtomicSentence) as opposed to a rule.  Note that this will inhibit nat reification if there are variables within the scope of the reifiable function.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'LeaveSomeTermsAtELAndAllowKeywordVariables', "A CanonicalizerDirective which combines the directives LeaveSomeTermsAtEL and AllowKeywordVariables.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'LeaveSomeTermsAtELAndAllowKeywordVariables', "A  CanonicalizerDirective (q.v.) that is a specialization (see  genlCanonicalizerDirectives) of both LeaveSomeTermsAtEL and  AllowKeywordVariables (qq.v.), and thus combines the commands of both of those directives.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'LeaveSomeTermsAtEL', "A CanonicalizerDirective (q.v.) that combines the following three commands:\n<p>\n(1) Do not canonicalize ELVariables into HLVariables.\n(2) Do not expand CycLFormulas whose operators are instances of ELRelation.\n(3) Do not reify CycLReifiableNonAtomicTerms.\n<p>\nA consequence of (1) is that any CycLAssertion that contains no HL variables, regardless of its form, will be treated by the canonicalizer as if it were a GAF (see CycLClosedAtomicSentence) as opposed to a rule.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'KnowledgeBase', "A specialization of Database-AbstractContent. Each instance of KnowledgeBase is a database (considered as an abstract repository of information rather than a physical storage device) containing knowledge about at least part of the world.  A notable specialization of KnowledgeBase is CycKB, the collection of all Cyc knowledge bases.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Kappa', "A binary PredicateDenotingFunction and a ScopingRelation (qq.v.), Kappa is used to define a predicate on the basis of a sentence (see CycLSentence-Assertible) and a list of variables (see CycLVariableList) some or all of which typically occur free in the sentence.  The resulting predicate holds of just those sequences that would make the sentence true.\n<p>\nMore precisely, if <code>VAR1,...,VAR<sub>N</sub></code> include all of the CycLVariables that occur free in <code>SENT</code>, then the term\n<pre>\n  (Kappa (VAR1 ... VAR<sub>N</sub>) SENT)\n</pre>\ndenotes the <code>N</code>-ary relation (i.e. the Predicate) that holds of any admitted sequence of arguments <code>ARG1...ARG<sub>N</sub></code> if and only if <code>SENT[ARG<sub>I</sub>/VAR<sub>I</sub>]</code> is true, where <code>SENT[ARG<sub>I</sub>/VAR<sub>I</sub>]</code> is the result of simultaneously replacing each free occurrence of <code>VAR<sub>I</sub></code> in <code>SENT</code> with a CycL name of the corresponding <code>ARG<sub>I</sub></code> (for 1 <= <code>I</code> <= <code>N</code>). \n<p>\n(With respect to the above, <code>ARG1...ARG<sub>N</sub></code> is an <i>admitted sequence of arguments</i> to <code>(Kappa (VAR1 ... VAR<sub>N</sub>) SENT)</code> just in case (i) each <code>ARG<sub>I</sub></code> satisfies any argument-type constraints applicable to the position(s) occupied by <code>VAR<sub>I</sub></code> in <code>SENT</code> and (ii) if any two variables <code>VAR<sub>I</sub></code> and <code>VAR<sub>J</sub></code> are the same then the corresponding sequence-members <code>ARG<sub>I</sub></code> and <code>ARG<sub>J</sub></code> are identical.)\n<p>\nA few examples.  (Kappa (<code>?X</code>) (greaterThan <code>?X</code> 1)) is a unary predicate that holds of all numbers greater than 1. (Kappa (<code>?X ?Y</code>) (greaterThan <code>?X</code> 1)) is a binary predicate that holds of any ordered pair of argument values whose first member is a number greater than 1. (Kappa (<code>?X</code>) (greaterThan 2 1)) is a unary predicate that holds of any thing.  (Kappa (<code>?X</code>) (greaterThan 1 2)) is a unary predicate that holds of no thing.  (Kappa (<code>?X ?X</code>) (greaterThan <code>?X 1</code>)) is a binary predicate that holds of any ordered pair of numbers whose first and second members are the same number <b>K</b>, where <b>K</b> is greater than 1.\n<p>\nMost of the above examples are uses of Kappa that have little utility.  The first example, however, is an example of a common and important use of Kappa, which is to reduce the arity of a predicate by fixing the value for one or more of its arguments. For example, (Kappa (<code>?COUNTRY ?RATE</code>) (exportRate <code>?COUNTRY</code> Oil <code>?RATE</code>)) defines a binary predicate that relates a country to its export rate of oil, whereas (Kappa (<code>?COUNTRY</code>) (exportRate <code>?COUNTRY</code> Oil (MillionBarrelsPerDay 2)))</code> defines a unary predicate that holds of any country that exports oil at the rate of two million barrels per day.\n<p>\nThe sentence that is an argument to Kappa may be arbitrarily complex.  For example, it may be an existentially quantified conjunction.  Thus,\n<pre>\n   (Kappa (?PERSON ?NAME)\n    (thereExists ?FATHER\n      (and\n        (isa ?PERSON Person)\n        (father ?PERSON ?FATHER)\n        (lastName ?FATHER ?NAME))\n</pre>\n<p>\nreturns a predicate that holds of any ordered pair <b><PERSON, NAME></b>, such that <b>PERSON</b> is a person whose father's last name is <b>NAME</b>.\n<p>\nSometimes it is useful to construct an expression of the form <code>(Kappa LIST SENT)</code> where some variables that occur free in <code>SENT</code> do <i>not</i> occur in <code>LIST</code>.  For example, <code>(Kappa (?X) (greaterThan ?X ?Y))</code> might be used in a context where the <code>?Y</code> appears within the scope of a quantifier that occurs outside of the Kappa expression.\n<p>\nKappa is a cousin of the function Lambda (q.v.), which is used to define a <i>function</i> on the basis of a list of variables and a non-logical term.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'June', "A specialization of CalendarMonth.  Each instance of June is the sixth month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'July', "The collection of all Julys,\n the seventh month of the year in the GregorianCalendar.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'January', "A specialization of CalendarMonth.  Each instance of January is the first month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ist-Asserted', "A MicrotheoryDesignatingPredicate that is used to relate CycL sentences to microtheories in which they are explicitly asserted. (ist-Asserted MT SENT) states that there is a CycLAssertion for SENT in the Microtheory MT.  This predicate is therefore a more specialized form of ist (q.v.) with the additional requirement that there be an actual assertion for SENT in MT.\n<p>\nNote that the above is also more precise than (ist MT (assertedSentence SENT)), which states that there is an assertion for SENT in some microtheory visible from (see genlMt) MT.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'IrreflexiveBinaryPredicate', "The collection of BinaryPredicates that are irreflexive.  A binary predicate <code>PRED</code> is an instance of IrreflexiveBinaryPredicate only if, for every <code>THING</code> that satisfies the single-argument type-constraints (i.e. argIsa and argGenls; see admittedArgument) on both of <code>PRED</code>'s argument-places, <code>(not (PRED THING THING))</code> holds.\n<p>\nTo rule out \"vacuous\" cases, there is an additional necessary condition for irreflexivity:  the constraints on <code>PRED</code>'s two argument-places must be co-satisfiable (see cosatisfiableInArgs).  Without this requirement, any binary predicate whose arguments were constrained in mutually-disjoint ways would trivially (and counterintuitively) count as irreflexive.  See NoteOnArgumentCosatisfiabilityRequirement\n<p>\nExamples of irreflexive binary predicates include spouse, causes-ThingProp, northOf, and temporallyDisjoint.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'IntervalMinFn', "<code>(IntervalMinFn SCALAR)</code> returns an interval of the same type as <code>SCALAR</code> whose minimum value is the minimum value of <code>SCALAR</code> and whose maximum value is PlusInfinity.  For example, (IntervalMinFn (Mile 3)) is the same as `the interval from three miles to an infinite number of miles', in other words, `at least three miles'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'IntervalMaxFn', "<code>(IntervalMaxFn SCALAR)</code> returns an interval of the same type as <code>SCALAR</code> whose maximum value is the maximum value of <code>SCALAR</code> and whose minimum value is minus infinity.  For example, (IntervalMaxFn (Mile 3)) is the same as `the interval from negative infinity miles to three miles'. [Technical Note: if that expression were to denote a strictly absolute, as opposed to a relative-or-absolute, distance, then it would mean `the interval from 0 miles to 3 miles'.]   (IntervalMaxFn (Unity 1)) is the same as `the interval from negative infinity to 1', in other words, `no greater than one'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'IntervalEntry', "An instance of Format (q.v.) that can be specified to hold of a given predicate with respect to a given argument-place (see argFormat), where the argument-place in question is one constrained (via argIsa) to instances of ScalarInterval.   (argFormat PRED N IntervalEntry) means that, for any particular way of fixing the other arguments to PRED besides the Nth, there may be more than one instance of ScalarInterval such that, if taken as the Nth argument, PRED holds of those arguments.  However, if there is more than one instance of ScalarInterval taken as the Nth argument in such a situation, it must be the case that each of the instances of ScalarInterval intersect one another (see quantityIntersects).  That is, if the sequences <... ARGN-1 ...>, <... ARGN-2 ...>, ..., <... ARGN-M ...> differ at most in their Nth items and each of (PRED ... ARGN-1 ...), (PRED ... ARGN-2 ...), ..., (PRED ... ARGN-M ...) holds, then for any distinct ARGN-K and ARGN-L, where K and L are greater than or equal to 1, and less than or equal to M, (quantityIntersects ARGN-K ARGN-L). For example, the format of volumeOfObject's second argument-place is IntervalEntry.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'InterArgIsaPredicate', "The subcollection of both InterArgTypePredicate and ArgIsaPredicate (qq.v.) whose instances are used to put conditional isa based argument-type constraints on polyadic relations in regards to two of their argument-places.  Each instance of InterArgIsaPredicate specifies, with respect to a given Relation, that one of its arguments (the \"dependent\" one) must be an instance of (isa) a certain collection, contingent upon another of its argument's (the \"independent\" one's) being an instance of a certain (possibly different) collection.  An inter-argument-isa predicate PRED has argument-places for designating the relation and the two collections serving as argument-types; the (numerically-specified) identities of the relation's corresponding dependent and independent arguments is in most cases fixed (as in interArgIsa1-2), but is in some cases variable and specified via two additional argument-places of PRED's (as in interArgIsa).  In cases of the former sort, where the relation's argument-places are fixed, PRED is a TernaryPredicate that takes as it first argument (or \"arg1\") a relation, as its arg2 the type specified for the relation's independent argument, and as its arg3 the type specified (contingently) for the dependent argument.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'interArgIsa5-4', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa5-4 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to RELN,  a necessary condition for semantic well-formedness is that the fourth argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 ARG3 ARG4 INST ... ARGN) is semantically  well-formed only if ARG4 is an instance of DEPENDENT-ARG-COL.  For an explanation  of semantic well-formedness, see CycLExpression-Assertible and its direct  specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa5-3', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa5-3 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to RELN,  a necessary condition for semantic well-formedness is that the third argument  must be an instance of DEPENDENT-ARG-COL.  That is, if ARG-INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 ARG3 ARG4 INST ... ARGN) is semantically well-formed  only if ARG3 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic  well-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa5-2', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa5-2 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to RELN,  a necessary condition for semantic well-formedness is that the second argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 ARG3 ARG4 INST ... ARGN) is semantically well-formed  only if ARG2 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic  well-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa5-1', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa5-1 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to RELN,  a necessary condition for semantic well-formedness is that the first argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 ARG3 ARG4 INST ... ARGN) is semantically  well-formed only if ARG1 is an instance of DEPENDENT-ARG-COL.  For an explanation  of semantic well-formedness, see CycLExpression-Assertible and its direct  specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa4-5', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa4-5 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the fourth argument to RELN, \na necessary condition for semantic well-formedness is that the fifth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 ARG2 ARG3 INST ARG5 ... ARGN) is semantically \nwell-formed only if ARG5 is an instance of DEPENDENT-ARG-COL.  For an explanation \nof semantic well-formedness, see CycLExpression-Assertible and its direct \nspecializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa4-3', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa4-3 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the fourth argument to RELN, \na necessary condition for semantic well-formedness is that the third argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 ARG2 ARG3 INST ... ARGN) is semantically well-formed only \nif ARG3 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa4-2', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa4-2 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to RELN,  a necessary condition for semantic well-formedness is that the second argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 ARG3 INST ... ARGN) is semantically well-formed only  if ARG2 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic  well-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa4-1', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa4-1 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the fourth argument to RELN, \na necessary condition for semantic well-formedness is that the first argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 ARG2 ARG3 INST ... ARGN) is semantically well-formed only \nif ARG1 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa3-5', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa3-5 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the third argument to RELN, \na necessary condition for semantic well-formedness is that the fifth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 ARG2 INST ARG4 ARG5 ... ARGN) is semantically \nwell-formed only if ARG5 is an instance of DEPENDENT-ARG-COL.  For an explanation \nof semantic well-formedness, see CycLExpression-Assertible and its direct \nspecializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa3-4', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa3-4 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the third argument to RELN, \na necessary condition for semantic well-formedness is that the fourth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 ARG2 INST ARG4 ... ARGN) is semantically well-formed only \nif ARG4 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa3-2', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa3-2 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the third argument to RELN,  a necessary condition for semantic well-formedness is that the second argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 INST ... ARGN) is semantically well-formed only  if ARG2 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic  well-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa3-1', "A ternary instance of InterArgIsaPredicate (q.v.).   (interArgIsa3-1 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that,  when an instance of INDEPENDENT-ARG-COL appears as the third argument to RELN,  a necessary condition for semantic well-formedness is that the first argument  must be an instance of DEPENDENT-ARG-COL.  That is, if INST is an instance of INDEPENDENT-ARG-COL, then  (RELN ARG1 ARG2 INST ... ARGN) is semantically well-formed only  if ARG1 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic  well-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa2-5', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa2-5 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the second argument to RELN, \na necessary condition for semantic well-formedness is that the fifth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 INST ARG3 ARG4 ARG5 ... ARGN) is semantically \nwell-formed only if ARG5 is an instance of DEPENDENT-ARG-COL.  For an explanation \nof semantic well-formedness, see CycLExpression-Assertible and its direct \nspecializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa2-4', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa2-4 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the second argument to RELN, \na necessary condition for semantic well-formedness is that the fourth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 INST ARG3 ARG4 ... ARGN) is semantically well-formed only \nif ARG4 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa2-3', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa2-3 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the second argument to RELN, \na necessary condition for semantic well-formedness is that the third argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN ARG1 INST ARG3 ... ARGN) is semantically well-formed only \nif ARG3 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa2-1', "A ternary instance of InterArgIsaPredicate (q.v.).   <code>(interArgIsa2-1 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL)</code> means that,  when an instance of <code>INDEPENDENT-ARG-COL</code> appears as the second argument to <code>RELN</code>,  a necessary condition for semantic well-formedness is that the first argument  must be an instance of <code>DEPENDENT-ARG-COL</code>.  That is, if <code>INST</code> is an instance of <code>INDEPENDENT-ARG-COL</code>, then <code>(RELN ARG1 INST ... ARGN)</code>  is semantically well-formed only if <code>ARG1</code> is an instance of <code>DEPENDENT-ARG-COL</code>. For an explanation of semantic well-formedness, see CycLExpression-Assertible  and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa1-5', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa1-5 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the first argument to RELN, \na necessary condition for semantic well-formedness is that the fifth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN INST ARG2 ARG3 ARG4 ARG5 ... ARGN) is semantically \nwell-formed only if ARG5 is an instance of DEPENDENT-ARG-COL.  For an explanation \nof semantic well-formedness, see CycLExpression-Assertible and its direct \nspecializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa1-4', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa1-4 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the first argument to RELN, \na necessary condition for semantic well-formedness is that the fourth argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN INST ARG2 ARG3 ARG4 ... ARGN) is semantically well-formed only \nif ARG4 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa1-3', "A ternary instance of InterArgIsaPredicate (q.v.).  \n(interArgIsa1-3 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, \nwhen an instance of INDEPENDENT-ARG-COL appears as the first argument to RELN, \na necessary condition for semantic well-formedness is that the third argument \nmust be an instance of DEPENDENT-ARG-COL.  That is, if INST is\nan instance of INDEPENDENT-ARG-COL, then \n(RELN INST ARG2 ARG3 ... ARGN) is semantically well-formed only \nif ARG3 is an instance of DEPENDENT-ARG-COL.  For an explanation of semantic \nwell-formedness, see CycLExpression-Assertible and its direct specializations.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgIsa1-2', "A ternary instance of InterArgIsaPredicate (q.v.).  <code>(interArgIsa1-2 RELN INDEPENDENT-ARG-COL DEPENDENT-ARG-COL)</code> means that, when an instance of <code>INDEPENDENT-ARG-COL</code> appears as the first argument to <code>RELN</code>, a necessary condition for semantic well-formedness is that the second argument must be an instance of <code>DEPENDENT-ARG-COL</code>.  That is, if <code>INST</code> is an instance of <code>INDEPENDENT-ARG-COL</code>, then <code>(RELN INST ARG2 ... ARGN)</code> is semantically well-formed only if <code>ARG2</code> is an instance of <code>DEPENDENT-ARG-COL</code>.\n<p>\nFor example, (interArgIsa1-2 performedBy PurposefulAction IntelligentAgent) means that, if <code>ACT</code> is a purposeful action, then (performedBy <code>ACT AGENT</code>) is semantically well-formed only if <code>AGENT</code> is an intelligent agent.  For an explanation of semantic well-formedness, see  CycLExpression-Assertible and its direct specializations.  See interArgIsa for a similar but more general predicate that is quintary, allowing the user to specify the positions of the independent and dependent arguments.\n<p>\nUse interArgCondIsa1-2 to conclude that arg2 is an instance of <code>DEPENDENT-ARG-COL</code> instead of having that as a constraint.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'interArgGenl1-2', "(interArgGenl1-2 REL INDEPENDENT-COL DEPENDENT-COL) means that, when a spec of INDEPENDENT-COL appears as the first argument to REL, the second argument is constrained to be a spec of DEPENDENT-COL.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'InterArgFormatPredicate', "The subcollection of both InterArgConstraintPredicate and ArgFormatPredicate (qq.v.) whose instances are used to specify, for a given predicate PRED, a certain Format requirement on one of PRED's arguments (the \"dependent\" one), contingent upon one (usually, but not always, a different one) of PRED's arguments (the \"independent\" one) being an instance of (isa) a certain collection.  Currently, each instance of InterArgFormatPredicate is ternary, where its first argument (or \"arg1\") is the predicate PRED upon which the constraint is being placed, its arg2 the collection serving as the isa condition on PRED's independent argument, and its arg3 the Format that PRED's dependent argument is (conditionally) constrained to have.  The (numerically-specified) identities of the arguments of PRED's that are to serve as the independent and dependent arguments are fixed for each instance of \nInterArgFormatPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'interArgFormat1-2', "An instance of InterArgFormatPredicate (q.v.).\n(interArgFormat1-2 PRED COL FORMAT) means that FORMAT is a Format (q.v.)\nrequirement for the second argument-place of PRED when PRED's first argument\nis an instance of COL.  That is, with respect to a sentence of the form \n(PRED ARG1 ARG2 ... ARGN) in which ARG1 is an instance of COL, PRED's arg2\nposition (i.e. the position occupied by the metavariable `ARG2' in the \npreceding sentence-form) is subject to FORMAT.  See Format and its instances \nfor further explanation.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Integer', "A specialization of RationalNumber.  Each instance of Integer is a whole number with no fractional remainder.  An integer may be positive (e.g. 42), zero, or negative (e.g. -42).\n<p>\nNote that, in the KB browser, a fixed- or floating-point number representation such as `42.00' should not be assumed to refer to the integer 42. For it might only appear to correspond to that integer within the tolerance of its representation, and might in fact be an approximation to a non-integer number such as 42.0003.\n<p>\nAlso note that, unlike Integer, SubLInteger (q.v.) is a collection of integer-denoting expressions in the SubL programming language rather than a collection of integers themselves. Still, (genls SubLInteger Integer) holds, but only under a special interpretation of genls forced by the fact that SubLInteger is a quotedCollection (q.v).)", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'InferenceSupportedTerm', "The collection of all CycLTerms that are supported in some way by the CycInferenceEngine.  This support may be provided by, for example, a CycHLModule or an evaluationDefn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'InferenceSupportedPredicate', "The collection of all Predicates that are supported in some way by the CycInferenceEngine.  This support may be provided by, for example, a CycHLModule or an evaluationDefn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'InferenceSupportedFunction', "The collection of all Function-Denotationals that are supported in some way by the CycInferenceEngine.  This support may be provided by, for example, an evaluationDefn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'InferenceSupportedCollection', "The collection of all CycL terms that denote collections, where these terms are supported in some way by the CycInferenceEngine.  If a term T denoting the collection COL is an InferenceSupportedCollection, this means that the inference engine treats instances of COL specially.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'InferenceRelatedBookkeepingPredicate', "A collection of predicates.  Each instance of InferenceRelatedBookkeepingPredicate is a predicate involved in assertions used by the Cyc application to direct inferencing.  Examples: defnIff, defnSufficient, termOfUnit, afterAdding.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'InferencePSC', "A problem solving context in which all assertions in the entire KB are initially visible.  However, down each inference path, the chain of microtheories used is required to have some common descendent microtheory which is capable of inheriting all of the microtheories in the chain.  Thus, queries made in InferencePSC in effect compute locations in the space of microtheories in which the query is satisfiable.  This context is used internally by the inference engine for certain recursive calls to itself, including forward inference.  See also EverythingPSC.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'Individual', "Individual is the collection of all individuals:  things that are <i>not</i> sets or collections.  Individuals might be concrete or abstract, and include (among other things) physical objects, events, numbers,  relations, and groups.  An instance of Individual might have parts or  structure (including discontinuous parts); but <i>no</i> individual has elements  or subsets (see elementOf and subsetOf). Thus, an individual that has parts (e.g. physicalParts or groupMembers) is <i>not</i> the same thing as either the set or the collection containing those same parts.  For example, your car is an individual, but the collection of all the parts of your car is not an individual but an instance of Collection.  This collection (unlike the car itself) is abstract: it doesn't have a location, mass, or a top speed; but it does have instances, subcollections, and supercollections.  In partial contrast, the Group (q.v.) of parts of your car (while also not the same thing as the car itself) <i>is</i> an individual that has location and mass.  Another example: A given company, the group consisting of all the company's employees, the collection of those employees, and the set of those employees are four distinct things, and only the first two are individuals.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'IndeterminateTermDenotingFunction', "IndeterminateTermDenotingFunction is the collection of all functions that denote indeterminate terms.  See also IndeterminateTerm, SkolemTerm, and SkolemFunction.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'IndeterminateTerm', "A specialization of CycLClosedDenotationalTerm.  Each instance of IndeterminateTerm is a CycL symbol for which, in oreder to establish its denotation, it is not sufficient to establish every aspect of the context of its use.\n<p>\nIn other words, instances of this collection are terms used to denote something which is known or assumed to exist, but whose precise identity -- i.e. which particular thing or things it is -- is unknown (unless, of course, the term is known to satisfy equals with another term whose precise identity is known).\n<p>\nFor instance, if Cyc knows (relationAllExists physicalExtent University SchoolCampus), and (isa MelbourneUniversity University), then Cyc knows that there is at least one instance of SchoolCampus, <i>IndeterminateCampus</i>, for which (physicalExtent MelbourneUniversity <i>IndeterminateCampus</i>) is true. This campus (or these campuses, if there happens to be more than one) would be denoted in CycL using the IndeterminateTerm:\n<p>\n(RelationAllExistsFn MelbourneUniversity physicalExtent University SchoolCampus).\n<p>\nAnalogously, instances of SkolemTerm are also instances of IndeterminateTerm, as are terms built from SomeFn, GenericInstanceFn, ArbitraryInstanceFn, et al (see the specialization NonSkolemIndeterminateTerm).", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'HypotheticalContext', "A MicrotheoryType.  Each instance of  HypotheticalContext consists of assertions that are posited strictly for the purpose of exploring their consequences, without alleging their actual truth.   A hypothetical context can be used to analyze hypothetical outcomes of actions or to examine the hypothetical consequences of assuming some theory to be true.  Also, various alternative choices might be asserted, each in its own hypothetical context, so their ramifications can be generated and compared.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'HumanCyclist', "A specialization of Cyclist and Person.  Each instance of  HumanCyclist is a person who is entitled to inspect and modify the Cyc knowledge base.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'HLPrototypicalTerm', "The collection of all CycLTerms that are the hlPrototypicalInstance of some collection.  All HLPrototypicalTerms are IndeterminateTerms.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'HLExternalIDString', "HLExternalIDString is the collection of all SubLStrings\nwhich represent valid external ID strings for CycLExpressions.\nMembership in this collection is determined for given strings by\nevaluation of the underlying SubL code which implements the object to\nID mapping.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Guest', "An instance of HumanCyclist.  A Cyc user logged in                            \nas `Guest' will be able to browse the Cyc knowledge base to some extent, but will not have full rights to inspect and modify it.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'genls-SpecDenotesGenlInstances', "An instance of TaxonomicSlotForCollections (q.v.) and a specialization of generalizations. genls-SpecDenotesGenlInstances relates a collection (see Collection) to those collections which denote instances of it. More precisely, (genls-SpecDenotesGenlInstances SUBCOL SUPERCOL) means that SUPERCOL is a quoted supercollection of SUBCOL: anything that is quoted instance of (see quotedIsa) SUBCOL is an instance (see isa) of SUPERCOL. For example, (genls-SpecDenotesGenlInstances List-Extensional List) holds.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'genls-GenlDenotesSpecInstances', "A instance of TaxonomicSlotForCollections (q.v.) and a specialization of generalizations. genls-GenlDenotesSpecInstances relates a given SubLExpressionType collection (see Collection) to those collections whose instances it denotes. More precisely, (genls-GenlDenotesSpecInstances SUBCOL SUPERCOL) means that SUBCOL is a quoted subcollection of SUPERCOL: anything that is an instance of (see quotedIsa) SUBCOL is a quoted instance (see isa) of SUPERCOL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FunctionToArg', "A binary FunctionDenotingFunction (q.v.) that takes as argument a FunctionalPredicate (and an integer indicating an argument-place in which that predicate is functional) and returns the corresponding function (whose value is always equal to the predicate's corresponding argument in the indicated place).\n<p>\nMore precisely: if <code>PRED</code> is an <code>N</code>-ary functional predicate that is functional in its <code>M</code>th argument (see functionalInArgs), then <code>(FunctionToArg M PRED)</code> is the (<code>N</code>-1)-ary function <code>FUNC-TO-ARGM</code> such that <code>(PRED ARG(1) ... ARG(N))</code> holds if and only if <code>(FUNC-TO-ARGM ARG(1) ... ARG(M-1) ARG(M+1) ... ARG(N)) = ARG(M)</code>.  If <code>PRED</code> is not functional in its <code>M</code>th argument, then <code>(FunctionToArg PRED M)</code> is undefined.\n<p>\nFor example, (FunctionToArg 2 age) is the function that returns the age of a given person.  Thus ((FunctionToArg 2 age) GeorgeWBush) = (YearsDuration 50) just in case (age GeorgeWBush (YearsDuration 50)) is true.\n<p>\nSee also Lambda and Kappa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, tFunction, "A specialization of Relation (q.v.) and the collection of all functions.  Each instance of Function-Denotational is a many-one relation that represents, with respect to any given context, a mapping from one set of things (the function's relationDomain) to another set of things (its relationRange).  As a many-one relation, a function maps each thing in its domain to exactly one thing in its range.  A function might be unary, binary, ternary, etc. (see arity; but cf. relationalArity), depending on whether the members of its domain are singletons, ordered pairs, ordered triples, etc.  In general, the domain of an N-ary function with respect to a given context is a set of ordered N-tuples (construed in CycL as Lists of length N).  The function is said to take the items from any of these N-tuples as its N <i>arguments</i> and to return a member of its range as its corresponding <i>value</i> (see valueOfFunctionForArgs).  There are also functions that are not of any particular fixed arity; see VariableArityFunction.\n<p>\nFor example, GovernmentFn is the unary function that takes each GeopoliticalEntity to its RegionalGovernment, and PlusFn is the variable-arity function that takes any sequence of two or more ScalarIntervals\n(q.v.) to their arithmetic sum.\n<p>\nNote that the domain and range (i.e. the extension) of a given function might vary from context to context.  For example, as the government of a country can change over time, GovernmentFn will in such cases map the same country to different governments with respect to different times.  Thus, an instance of Function-Denotational is closer to what is sometimes called a \"function-in-intension\" than to the purely set-theoretical notion of a \"function-in-extension\".\n<p>\nCycL terms that denote functions can be used to form non-atomic terms (or \"NATs\"; see CycLClosedNonAtomicTerm).  Specifically, when such a function-denoting expression is appropriately combined with other expressions (i.e. the former is in the 0th argument position and the latter are of the correct number and type) the resulting expression is a new CycL term (a NAT) that may then freely appear as a component in other CycL expressions.  The NAT will itself denote the value (if any) of the function denoted by the former expression for the sequence of arguments denoted, respectively, by the latter expressions.  For example, GovernmentFn is a unary function, and so the CycL constant 'GovernmentFn' requires one syntactic argument (such as the constant 'France') to form a NAT (in this case, the expression '(GovernmentFn France)').  This NAT, which denotes the government of France, can in turn serve as a syntactic argument in any CycL expression in which a term for an instance of RegionalGovernment can legally occur.\n<p>\nImportant subcollections of Function-Denotational include IndividualDenotingFunction (whose instances always return instances of Individual), CollectionDenotingFunction, SetDenotingFunction, and FunctionDenotingFunction (which is itself a subcollection of the first).  NATs formed using terms that denote instances of FunctionDenotingFunction denote instances of Function-Denotational themselves.  Thus, like most other things, functions can be denoted in CycL either by constants  (e.g. 'GovernmentFn') or -- although this is less common -- by NATs (e.g.  '(FunctionToArg 2 biologicalMother)').\n<p>\nAn important partition of Function-Denotational is into TotalFunction and PartialFunction (qq.v.).\n<p>\nNote that Function-Denotational does not include any of the so-called TruthFunctions (q.v.): Predicates, Quantifiers, or LogicalConnectives. For these relations (as construed in CycL) are not really functions at all, even though it can be heuristically useful to think of them as if they were functions from sequences of arguments to truth values.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Friday', "A collection of CalendarDays and an \ninstance of DayOfWeekType.  Friday is the collection of all \n(and only) fridays.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Forward-AssertionDirection', "An instance of CycLAssertionDirection (q.v.).  A CycL assertion that\nhas the Forward-AssertionDirection can be used in inferences carried \nout at the time the assertion is added to the Knowlege Base as well as \nthose carried out at when a query is asked.  This is the default direction \nfor ground atomic assertions (see CycLClosedAtomicSentence).  Contrast \nwith Backward-AssertionDirection and Code-AssertionDirection.  Also \nsee assertionDirection.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FormulaArityFn', "An instance of EvaluatableFunction.  When applied to a CycLFormula FORM, FormulaArityFn returns the number of arguments given to the relation (an instance of Relation (q.v.)) appearing in the initial (\"arg0\") argument place of FORM.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'FormulaArgSetFn', "(FormulaArgSetFn RELATION-EXPRESSION) denotes\na set of the arguments of the given CycLFormula RELATION-EXPRESSION.  For example, (FormulaArgSetFn (genls Dog Animal)) denotes (TheSet Dog Animal).  See also FormulaArgFn and FormulaArityFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FormulaArgListFn', "(FormulaArgListFn RELATION-EXPRESSION) denotes a list of the arguments in RELATION-EXPRESSION.  For example, (FormulaArgListFn (genls Dog Animal)) denotes (TheList Dog Animal).  See also FormulaArgFn and FormulaArityFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FormulaArgFn', "A binary function that returns an instance of CycLTerm when given an instance of NonNegativeInteger and an instance of CycLFormula as arguments.  (FormulaArgFn N RELATION-EXPRESSION) denotes the term appearing as the Nth argument within RELATION-EXPRESSION. (Note that RELATION-EXPRESSION may be a sentence or a NAT). For example:\n<p>\n(FormulaArgFn 2 (loves Gilbert Muffet)) and\n(FormulaArgFn 1 (BirthFn Muffet))\n<p>\nboth denote Muffet. Cf. ArgPositionFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Format', "A collection of argument entry-formats that can be  specified for Predicates with respect to particular argument-places (see argFormat).  An argument entry-format is a kind of restriction on  a predicate regarding how many things, or the range of things, that the  predicate holds of with respect to a given one of its argument-places.  More  precisely: given any particular way of fixing the arguments in the rest of  the predicate's argument-places, the entry-format tells us something about  the number of different things, or the range of things, that can occupy the  given argument-place such that the relation holds of those arguments.  That is, supposing the given argument-place is the Nth, the entry-format tells us  something about the number or range of different sequences of arguments  of which the predicate holds and that differ from each other only in their Nth items.  For example, the format SingleEntry (q.v.) is used to state  that in every case there is at most only one such sequence, the format  SetTheFormat (q.v.) to state that there is no particular (upper or lower)  limit to the number of such sequences that applies to every case, and the  format IntervalEntry (q.v.) to state that the Nth items of any two such  sequences must be ScalarIntervals that \"intersect\" (see quantityIntersects). Thus, the first argument-place of biologicalMother has the format (see  arg1Format) SetTheFormat, since a given female animal might have any  number (including zero) of offspring; but the second argument-place of  this predicate has (see arg2Format) SingleEntry format, since any  given animal has at most (in fact, exactly) one biological mother.  And  the format of the second argument-place of bodyTemperature is IntervalEntry because, while a given creature (at a given moment in time) has a single  exact (see ScalarPointValue) body temperature, we want the predicate bodyTemperature to be flexible enough to allow us to specify this  temperature with varying degrees of precision (e.g. as \"98.6 degrees Fahrenheit\" or as \"between 98 and 99 degrees\" or as \"less than 100 degrees\").  See the various instances of Format for further details.  See also ArgFormatPredicate.  Note that, in contrast with what ArgTypePredicates  are used for, specifying an argument entry-format for a predicate does  _not_ impose any sort of necessary condition for semantic well-formedness.   A violation of a legitimate entry-format constraint necessarily involves  two or more statements, and at least one them must be _untrue_;  but there is no implication that any of them is malformed.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'FOL-TermFn', "(FOL-TermFn TERM) denotes a first-order constant symbol\nbased on the CycL term TERM.  For example, (FOL-TermFn Dog)\ndenotes a first-order term based on the collection Dog,\n(FOL-TermFn 212) denotes a first-order term based on the integer\n212, and (FOL-TermFn isa) denotes a first-order term based on the\npredicate isa.  See also (FOL-PredicateFn isa 2) for the\nfirst-order binary predicate based on isa.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FOL-PredicateFn', "(FOL-PredicateFn TERM ARITY) denotes a predicate that has\narity ARITY in the first-order projection of CycL based on the CycL\nterm TERM, which must be either a predicate or a collection.  For\nexample, (FOL-PredicateFn eventOccursAt 2) denotes the binary\nfirst-order predicate associated with eventOccursAt,\n(FOL-PredicateFn different 2) denotes the first-order binary\nversion of the predicate different, and (FOL-PredicateFn Date 1)\ndenotes the unary first-order predicate associated with Date", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FOL-FunctionFn', "(FOL-FunctionFn FUNC ARITY) denotes a function that has\narity ARITY in the first-order projection of CycL based on the CycL\nfunction FUNC.  For example, (FOL-FunctionFn YearFn 1) denotes the\nunary first-order function associated with YearFn, and\n(FOL-FunctionFn PlusFn 2) denotes the first-order binary function\nassociated with PlusFn", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'FixedAritySkolemFunction', "The subcollection of SkolemFunctions whose arity is fixed. This is the most common type of skolem function, since variable- arity skolem functions are only created when a sequence variable is in the scope of the skolem.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'FixedAritySkolemFuncN', "The collection of SkolemFuncNs (q.v.) whose arity is fixed.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'FixedArityRelation', "A specialization of Relation.  A Relation is an instance  of FixedArityRelation just in case it takes a fixed number  of arguments.  Most relations reified in the Cyc ontology are  of fixed arity.  For example, likesAsFriend always takes two  arguments and pointOfContact three.  This collection is  disjoint with VariableArityRelation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'February', "The collection of all Februaries,  the second month of the year in the GregorianCalendar.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'False', "An instance of TruthValue (q.v.).  False is the logical notion of falsehood.  That is, the term 'False' is used as a sentential constant of CycL that is false under every model theoretic interpretation.  For example, (booleanResult T/F False) means that the result obtained from the true-or-false test T/F is False.  Cf. True.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'ExpFn', "A unary EvaluatableFunction that is the CycL version of the exponential operator. It takes instances of ComplexNumber and returns instances of ComplexNumber. (ExpFn NUM) is e^NUM, i.e. e raised to the power of NUM (where e is E-LogarithmBase).  When NUM is a RealNumber, (ExpFn NUM) is necessarily a PositiveNumber. In particular, (ExpFn 1) is e.  The inverse of this function (cf. inverseQuantFunctions-Nonsymmetric\n) is LogFn. Note that although the arg constraint for ExpFn is ComplexNumber, its evaluationDefn only evaluates to a value when NUM is a RealNumber. See also ExponentFn, a binary function which returns the result of raising a specified number to a specified exponent.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ExpandSubLFn', "<code>(ExpandSubLFn PARAMETERS SUBL-TEMPLATE)</code> denotes the SubL expression resulting from expanding the SubL template <code>SUBL-TEMPLATE</code> once all <code>PARAMETERS</code> are known.  For example, <code>(ExpandSubLFn (?X) (+ 1 ?X))</code> will denote the SubL expression <code>(+ 1 2)</code> when the parameter <code>?X</code> is bound to 2.  See also EvaluateSubLFn, trueSubL and performSubL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ExistentialQuantifier-Bounded', "A specialization of ExistentialQuantifier (q.v.).  Each instance of ExistentialQuantifier-Bounded is a ternary relation that can be used to make a certain kind of statement about the existence of a given bounded quantity of things meeting a given criterion.  For example, '(thereExistAtLeast 9 ?X (isa ?X Cat))' means that there exist at least nine cats.  What distinguishes _bounded_ existential quantifiers from existential quantifiers generally is that the former require one to specify explicitly (at least a boundary for) how many things exist that meet the specified criterion.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ExistentialQuantifier', "A specialization of Quantifier (q.v.).  Each instance of ExistentialQuantifier can be used to make a certain kind of assertion regarding the existence of some thing(s) meeting a specified criterion.  For example, `(thereExistAtLeast 9 ?X (isa ?X Cat))' means that there exist at least nine cats.  Other instances of this collection are thereExists and thereExistExactly.  Cf. forAll.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ExceptionPredicate', "A collection of mathematical objects, which are the LogicalConnectives used to express exceptions to rules.  Elements include exceptWhen and exceptFor.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'EverythingPSC', "A problem solving context in which all assertions in the entire KB are visible.  This context is only appropriate for use in queries which do not care about the consequences of possible contradictions due to conflicting information from mutually inconsistent microtheories.  See also InferencePSC.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'EvaluateSubLFn', "<code>(EvaluateSubLFn SUBL)</code> denotes the SubL term resulting from the invocation of the SubL EVAL facility on the expression <code>SUBL</code>.  For example, <code>(EvaluateSubLFn (ExpandSubLFn () (+ 1 2)))</code> evaluates to 3.  See ExpandSubLFn for a way to denote SubL within CycL.  See also trueSubL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'EvaluatableRelation', "A specialization of Relation.  Each instance of EvaluatableRelation is\na function or predicate for which there is some piece of system code that \ncan be invoked to evaluate (i.e. to determine the denotation or truth-value\nof) a closed expression built from that function or predicate (i.e. a closed \nexpression that has the constant that denotes that function or predicate in \nits initial or \"0th\" argument-place).  An evaluation of this sort is carried \nout, for example, when the system is queried using an evaluate (q.v.) \nsentence.  As one might expect, most evaluatable relations are mathematical \nor syntactic in nature; for numbers, sets, lists, and strings are the sorts \nof things that are related in various ways that can be calculated \nalgorithmically.  Examples include PlusFn, greaterThan, JoinListsFn, \nand substring.  In the case of a function that is evaluatable (see \nEvaluatableFunction), the practical result of evaluating the relevant \nexpression is another _term_ -- one that has the same denotatum as the \noriginal expression, but that is syntactically simpler and constitutes a \nmore straightforward way of referring to that denotatum.  For example, \nthe term `(PlusFn (Inch 3) (Inch 1))', when evaluated, results in \nthe term `(Inch 4)'.  So if a query using the open sentence\n`(evaluate ?X (PlusFn (Inch 3) (Inch 1)))' is asked, the answer \n(or \"binding\" for the variable `?X') returned will be the term `(Inch 4)'.  \nEvaluating a sentence built from (a constant that denotes) an \nEvaluatablePredicate, on the other hand, yields a _truth-value_.  For \nexample, the sentence `(greaterThan (Inch 3) (Inch 1))' evaluates \nto (and so if used to ask a query will return the answer) `True'.  The \npredicate evaluationDefn (q.v.) is used to specify the name of the piece \nof system code used to evaluate expressions formed with a given \nevaluatable relation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'EvaluatablePredicate', "A specialization of both EvaluatableRelation and Predicate (qq.v.).   Each instance of EvaluatablePredicate is a  predicate associated (via evaluationDefn) with a piece of HL (\"heuristic level\") code that computes the resulting truth-value when the predicate is applied to legal \narguments. These truth-values can, of course, be computed only when all of the predicate's argument positions are bound: thus Cyc inference will not generate viable inference tactics for non-fully-bound literals with evaluatable predicates in the arg 0 position.  As one might expect, most evaluatable predicates are mathematical or syntactic in nature; for numbers, sets, lists, and strings are the sorts of things that are related in various ways that can be calculated \nalgorithmically.  Examples include greaterThan and substring. Thus the sentence `(greaterThan 3 1)' evaluates to (and so if used to ask a query will return the answer) `True'.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'EvaluatableFunction', "A specialization of both EvaluatableRelation and Function-Denotational (qq.v.).  Each instance of EvaluatableFunction is a function that is associated (via evaluationDefn) with a piece of HL (\"heuristic level\") code that computes the result of applying the function to arguments for which that function is defined.  An evaluation of this sort is carried out, for example, when the system is queried using an evaluate (q.v.) sentence.  As one might expect, most evaluatable functions are mathematical or syntactic in nature; for, unlike with functions generally, operations on numbers, sets, lists, and strings can in many cases be calculated algorithmically.  Examples include PlusFn and JoinListsFn.  The practical result of evaluating a term built from (a constant that denotes) an evaluatable function is another _term_ -- one that has the same denotatum as the former term, but that is syntactically simpler and constitutes a more straightforward way of referring to that denotatum.  For example, the term '(PlusFn 2 3 4)', when evaluated, results in the term '9'.  So if a query using the open sentence '(evaluate ?X (PlusFn 2 3 4))' is asked, the answer (or \"binding\" for the free variable '?X') returned will be the term `9'.  By way of contrast, consider the non-evaluatable function BorderBetweenFn and the following arbitrarily-chosen non-atomic term built with its CycL name: '(BorderBetweenFn France Germany)'.  As there is no general algorithm for finding simpler or \"standard\" terms for given geographical borders, it is not possible for the Cyc system to \"evaluate\" non-atomic terms like this one.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'EscapeQuote', "A quotation-related device for making general statements about CycL expressions.  EscapeQuote is used to allow certain free variables occurring inside an expression that is quoted to \"escape\" (i.e. remain free with respect to) the quotation.  It is thus similar in function to, though more flexible than, QuasiQuote (q.v.).\n<p>\nTo be more precise: the syncategorematic symbol <code>EscapeQuote</code> is used in conjunction with the special quotation symbol <code>Quote</code> (q.v.) as a device for allowing genuinely free variables to occur inside quoted expressions, in order that one may meaningfully \"quantify into\" such expressions and thereby generalize over them.  Thus, <code>EscapeQuote</code> is used to indicate that the free variables occurring within its scope (which is itself inside the wider scope of an occurrence of <code>Quote</code>) are <i>not</i> themselves to be interpreted as being quoted.\n<p>\nThe syntax of <code>EscapeQuote</code> is such that it can only be used in conjunction with <code>Quote</code>.  For any CycL expression <code>EXPR</code>, <code>(EscapeQuote EXPR)</code> is not by itself a syntactically well-formed CycL expression; but the latter can appear as <i>part of</i> a well-formed expression, subject to the following restrictions.  (i) Any occurrence of <code>EscapeQuote</code> in a CycL expression must itself be inside the scope of an occurrence of <code>Quote</code>.  (ii) One occurrence of <code>EscapeQuote</code> can be inside the scope of another only if there is an intermediate occurrence of <code>Quote</code> (i.e. one whose scope subsumes that of the former and is subsumed by that of the latter).\n<p>\nThe semantics of <code>EscapeQuote</code> is such that a formula <code>(Quote ... (EscapeQuote EXPR) ...)</code> that contains only one occurrence of <code>EscapeQuote</code> means just what the corresponding formula <code>(Quote ... EXPR ...)</code> means, except that any free occurrence of a variable in <code>EXPR</code> is to be interpreted as still being genuinely free with respect to <code>(Quote ... (EscapeQuote EXPR) ...)</code>.  In <code>(Quote ... EXPR ...)</code>, by contrast, any such variables are taken to be regular quoted constituents of a quoted compound expression; thus they do not function there as variables, but as <i>quoted-names of</i> variables -- i.e. as terms that denote variables.  \n<p>\nFor example, while the term <code>(Quote (isa ?X Cat))</code> simply denotes the open sentence <code>(isa ?X Cat)</code>, the expression\n<pre>\n  (Quote (EscapeQuote (isa ?X Cat)))\n</pre>\nis itself an open term in which <code>?X</code> occurs free; it thus does not denote in its own right, though many <i>instantiations</i> of it do denote.  E.g. the instantiation <code>(Quote (EscapeQuote (isa Patches-Cat Cat)))</code> denotes the sentence <code>(isa Patches-Cat Cat)</code>).\n<p>\nThe foregoing explanation generalizes to cases where multiple occurrences of <code>EscapeQuote</code> are within the scope of the same <code>Quote</code>.  For example, in the expression\n<pre>\n  (Quote (loves (EscapeQuote ?X) (EscapeQuote ?Y)))\n</pre>\n-- which is equivalent to <code>(Quote (EscapeQuote (loves ?X ?Y)))</code> -- both <code>?X</code> and <code>?Y</code> occur free.\n<p>\nAs mentioned above, the purpose of the <code>EscapeQuote</code> device is to enable \"quantifying into\" quoted contexts: to provide a coherent interpretation of formulas in which an occurrence of a Quantifier (or other ScopingRelation) that is outside the scope of a given occurrence of <code>Quote</code> can be viewed as binding occurrences of variables that are <i>inside</i> the scope of that <code>Quote</code>.  For example, the sentence\n<pre>\n  (thereExists ?X\n    (and\n      (isa ?X Cat)\n      (isa (Quote (EscapeQuote ?X)) CycLAtomicTerm)))\n</pre>\nsays that there is at least one cat that is denoted by a CycL atomic term.  Without the <code>EscapeQuote</code> wrapper, the second conjunct of the above would be a <i>closed</i> sentence, and the entire quantified sentence would express the far less interesting claim that there exists at least one cat and the expression <code>?X</code> is an atomic term of CycL.\n<p>\nNote that the above (interesting) existential claim could be expressed more tersely using QuasiQuote.  EscapeQuote is indispensible only in cases where one wants to allow <i>some but not all</i> of the free variables in a given expression to escape quotation.  For example, in the (implicitly quantified) rule\n<pre>\n  (isa\n    (Quote (loves ?X (EscapeQuote ?Y))) \n    CycLOpenSentence)\n</pre>\nonly the variable <code>?Y</code> occurs free; the <code>?X</code> is part of what gets quoted (and thus functions like a closed term that <i>denotes</i> the CycL variable <code>?X</code>).  What the rule says, in effect, is that any well-formed expression built with the predicate-expression <code>loves</code> followed by the variable <code>?X</code> followed by a CycL term is an open sentence of CycL.\n<p>\nFor more on the use of EscapeQuote and Quote for quantifying into quoted contexts, see the shared NoteAboutQuotingInCycL. See also denotes, quotedIsa, quotedArgument, and NoteAboutSyncategorematicSymbols.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'equalStrings-CaseInsensitive', "(equalStrings-CaseInsensitive STRING1 STRING2) means that the CharacterStrings STRING1 and STRING2 contain the same characters in the same order, although some of the characters in STRING1 may differ in case from some of the characters in STRING2.  For example, (equalStrings-CaseInsensitive \"Foo\" \"fOo\") holds.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'EnglishParaphraseMt', "An instance of both ParaphraseDataMicrotheory and GeneralMicrotheory.  EnglishParaphraseMt is the default context used for generating English paraphrases for CycL expressions.  Many of the assertions required for English paraphrase generation, including those with the predicates genFormat and genPhrase (qq.v.), can be found in this context.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'ELRelation-Reversible', "A specialization of ELRelation (q.v.) instances of which appear only at the \"epistemological level\" (or EL) of the Cyc system, but whose original forms, or logically equivalent variants thereof, are retrievable via the CycUncanonicalizer.  Each instance of ELRelation-Reversible is associated, via the expansion (q.v.) or expansionDefn relation, to a sentence template to which the former is essentially equivalent and for which the former serves as a convenient alternative.  Furthermore, each instance of ELRelation-Reversible is also associated with a piece of code which can perform the inverse transformation.  Since each instance of ELRelation-Reversible requires special code support, this is a notAssertibleCollection.  More precisely:  A GAF (see CycLClosedAtomicSentence) whose main functor (or \"0th argument\") is a term that denotes a reversible EL relation can occur only at the EL, and not at the underlying HL (\"heuristic level\") of the system.  Thus, although one can use an EL-relation-based GAF to make an assertion to the system, the GAF that actually gets stored as an assertion in the Cyc Knowledge Base is a different (though logically equivalent) one that is related to the first via the expansion or expansionDefn assertion on the EL relation.  Upon assertion, the first GAF is transformed into the second GAF by the CycCanonicalizer.  Upon presentation to the user, the second GAF is transformed back into the first GAF, or a GAF which is logically equivalent, by the CycUncanonicalizer.  For example, willAlwaysBe is a reversible EL relation whose expansionDefn and associated piece of uncanonicalization code perform the following transformation:\n<p>\n(ist (MtSpace (MtTimeDimFn TIME) OTHER-DIMS) (willAlwaysBe P)\n<->\n(ist (MtSpace (MtTimeDimFn (IntervalStartedByFn TIME)) OTHER-DIMS) P)\n<p>\nSo if one makes an assertion into an MT with time index T using the sentence `(willAlwaysBe P)', the assertion that actually shows up in the KB is `P' in an MT with time index (IntervalStartedByFn T).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ELRelation-OneWay', "A specialization of ELRelation (q.v.) instances of which appear only when input at the \"epistemological level\" (or EL) of the Cyc system, and whose original EL form is thereafter irretrievable.  Each instance of ELRelation-OneWay is associated, via the expansion or expansionDefn relation, to a sentence template to which the former is essentially equivalent and for which the former serves as a convenient alternative.  More precisely: A GAF (see CycLClosedAtomicSentence) whose main  functor (or \"0th argument\") is a term that denotes a one-way EL relation can  occur only at the EL, and not at the underlying HL (\"heuristic level\") of the system.  Thus, although one can use a one-way-EL-relation-based GAF to make an assertion to the system, the GAF that actually gets stored as an assertion in the Cyc Knowledge Base is a different (though logically  equivalent) one that is related to the first via the expansion assertion  on the EL relation.  Upon assertion, the first GAF is \"transformed into\" the second GAF by the CycCanonicalizer.  For example, lessThan is a one-way EL relation whose expansion correlate is the template (greaterThan :ARG2 :ARG1).  So if one makes an assertion using the sentence `(lessThan 1 2)', the assertion that actually shows up in the KB is `(greaterThan 2 1)'.  Note that terms for one-way EL relations _do_ appear in stored assertions in which  they occur in argument places other than the 0th; e.g. the sentence `(isa lessThan OrderingPredicate)' is in the KB.  One-way EL relations afford cyclists the convenience of having alternative forms of expression, while their expansions serve to minimize redundancy in the types of GAFs that the system has to store and reason with.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ELRelation', "A specialization of MacroRelation (q.v.) instances of which appear only at the \"epistemological level\" (or EL) of the Cyc system.  Each instance of ELRelation is associated, via the expansion or expansionDefn relation, to a sentence template to which the former is essentially equivalent and for which the former serves as a convenient alternative.  Some assertions using instances of ELRelation are irretrievable after being input to the Cyc System (ELRelation-OneWay), and others' EL forms are reconstructed dynamically by the system (ELRelation-Reversible).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DontReOrderCommutativeTerms', "A CanonicalizerDirective (q.v.) that directs the CycCanonicalizer not to re-order commutative terms that appear in the CycL assertions.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'DocumentationPredicate', "A PredicateType whose instances are Predicates specifically designed for in-KB documentation purposes, such as  facilitating Cyclists in their understanding of the Cyc system, tracking knowledge representation work being done in the Cyc Knowledge Base, or noting cleanup work to be done.  \n<p>\nNote that documentation predicates are usually not involved in inference.  They may be excluded from knowledge bases in which available memory is a premium without affecting the performance of applications. DocumentationPredicate is used in code to determine which documentation to show to the user when they request to see documentation for a first-order reified term (or \"FORT\").", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DocumentationConstant', "A collection of CycL constants whose purpose is to facilitate users in their understanding of the system, tracking knowledge representation work being done, noting cleanup work to be done, etc. Documentation constants are usually not involved in inference.  Instances may be excluded from versions of the knowledge base in which available memory is a premium without affecting the performance of applications.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DistributingMetaKnowledgePredicate', "A subcollection of MetaKnowledgePredicate (q.v.).  Each instance of DistributingMetaKnowledgePredicate is a meta-knowledge predicate that can be used to make meta-assertions (i.e it can take a CycLAssertion as an argument) and is such that, when applied to an EL-level assertion that polycanonicalizes (i.e. gets transformed by the Cyc canonicalizer into multiple HL-level assertions), it is automatically \"distributed\" over each of the multiple assertions resulting from the polycanonicalization.\n<p>\nLet METAPRED be an instance of DistributingMetaKnowledgePredicate. Suppose that one asserts <code>(METAPRED ASSERTION FOO)</code> and that <code>ASSERTION</code> polycanonicalizes into <code>ASSERTION1</code> and <code>ASSERTION2</code>.  Then <code>(METAPRED ASSERTION1 FOO)</code> and <code>(METAPRED ASSERTION2 FOO)</code> will both be asserted to the Knowledge Base automatically.\n<p>\nFor example, if I assert this at the EL-level:\n<pre>\n  (comment\n    (and (isa Muffet Dog) (likesAsFriend Muffet Patches-Cat))\n    \"Muffet digs Patches.\"),\n</pre>\n<p>\nboth of these will automatically be asserted a the HL-level:\n<p>\n\t<code>(comment (isa Muffet Dog) \"Muffet digs Patches.\")</code>\n<p>\n\t<code>(comment (likesAsFriend Muffet Patches-Cat) \"Muffet digs Patches.\")</code> .\n<p>\nSee also the shared note MetaAssertionsForPolycanonicalizingAssertions.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DisjointCollectionType', "A collection of collections of collections and a specialization of SiblingDisjointCollectionType (q.v.).  A disjoint collection type is such that its instances are collections that are all disjoint from one another.  That is, each instance <code>DISCOLTYPE</code> of DisjointCollectionType is a collection whose instances are mutually disjoint collections: no two instances of <code>DISCOLTYPE</code> have any instances in common.  Instances of DisjointCollectionType include BiologicalSpecies and SportsTeamTypeBySport.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DirectedMultigraph', "A specialization of both DirectedPathSystem and Multigraph.  Each instance of DirectedMultigraph is a multigraph in which every link has one direction.  Note that there can be loops and multiple links between a pair of nodes in a given instance of DirectedMultigraph.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DifferenceFn', "A binary MathematicalFunctionOnScalars and an extension of the arithmetic subtraction operation to ScalarIntervals (q.v.) generally.  When applied to two arithmetically-comparable scalars, MINUEND and SUBTRAHEND, DifferenceFn yields the scalar that is the result of subtracting SUBTRAHEND from MINUEND.  For example, (DifferenceFn 88 11) is 77 and (DifferenceFn (Kilogram 4.2) (Kilogram 3)) is (Kilogram 1.2).\n<p>\nNote that when MINUEND and SUBTRAHEND are not arithmetically-comparable, (DifferenceFn MINUEND SUBTRAHEND) is undefined.  For example, (DifferenceFn (MinutesDuration 1) (Meter 3)) is undefined, since (MinutesDuration 1) is a Time-Quantity and (Meter 3) is a Distance, and time-quantities are not comparable with distances.\n<p>\nFor addition, see PlusFn.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DefaultTrue', "An instance of CycHLTruthValue.  DefaultTrue is the attribute of being assumed true unless otherwise known to be false.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'DefaultMonotonicPredicate', "A collection of predicates.  Each instance of DefaultMonotonicPredicate is a predicate whose use as the predicate of a locally asserted ground formula causes that formula to be entered, by default, as :MONOTONIC.  Examples: isa, genls, disjointWith, equals, arity, arg1Isa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DefaultFalse', "An instance of CycHLTruthValue.  DefaultFalse is the attribute of being assumed false unless otherwise known to be true.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'December', "A specialization of CalendarMonth.  Each instance of December is the twelth and final month of a particular year in the GregorianCalendar (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DayOfWeekType', "A collection of collections and a specialization of WeeklyTemporalObjectType.\nEach instance of DayOfWeekType is a collection of CalendarDays, all of\nwhose instances correspond to the same particular \"day of the week\" in \nthe respective weeks in which they occur.  For example, Monday -- the \ncollection of all mondays -- is an instance of DayOfWeekType.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'DateEncodeStringFn', "(DateEncodeStringFn TEMPLATE DATE) returns a string encoding of DATE (an instance of Date) in the format described by the TEMPLATE string.  For example,    (DateEncodeStringFn 'MM/DD/YYYY'      (DayFn 20 (MonthFn July (YearFn 1969))))  would return '07/20/1969'.  See also DateDecodeStringFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'DateDecodeStringFn', "(DateDecodeStringFn TEMPLATE DATE-STRING) returns a Date which is the result of decoding DATE-STRING by the format described by the TEMPLATE string.  For example,   (DateDecodeStringFn 'MM/DD/YYYY' '07/20/1969') would return (DayFn 20 (MonthFn July (YearFn 1969))).   See also DateEncodeStringFn.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycTransformationProof', "The nearestGenls of CycProof each of whose instances uses a CycLRuleAssertion to prove a query.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, ftVar, "The collection of all variables in the CycL language.\nA CycLVariable is a character string consisting of a question mark '?' (as its initial character) followed by one or more characters, where each of these latter characters is either an (upper- or lower-case) Roman letter, an Arabic numeral (i.e. '0' through '9'), a hyphen ('-'), an underscore ('_'), or another question mark.  (The letters occurring in a CycL variable used in an actual assertion will typically be all uppercase; but this convention is not enforced in any formal way.)  Examples: '?WHAT', '?OBJ-TYPE', and '?var0'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLTruthValueSentence', "A collection of CycL sentences containing only the CycL sentences <code>True</code> and <code>False</code>, both of which are sentential constants.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycLTerm', "The collection of all syntactically well-formed   expressions in the CycL language that can be used as terms, i.e. that can be combined with other expressions to form non-atomic terms or formulas.  Since the grammar of the CycL language allows any CycL expression to be used as a term, CycLTerm and CycLExpression are coextensional collections.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLSentence-ClosedPredicate', "The subcollection of CycLSentences whose arg0 does not contain a free variable although free variables may occupy other argument positions.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycLSentence-Assertible', "An instance of CycLExpressionType and a specialization of CycLExpression-Assertible and CycLSentence-Askable.  This is the collection of all CycL sentences that could be asserted to the Cyc Knowledge Base.  More precisely, each instance of CycLSentence-Assertible is a CycL sentence that is both syntactically and semantically well-formed.  By definition, any CycL sentence is syntactically well-formed.  To be semantically well-formed, a CycL sentence must be constructible via the syntax of CycL without violating any applicable arity or argument-type constraints (see arity and ArgTypePredicate).  A CycL sentence must be semantically well-formed in order to be interpretable as having a \"semantic value\", which for sentences means having a truth value.  Note that being \"assertible\" in the present sense does not require a sentences's actually being asserted in the KB.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLSentence-Askable', "The collection of CycLSentences that are askable as queries to the Cyc system.  More precisely, each  instance of CycLSentence-Askable is a CycL sentence that is  constructible via the syntax of CycL without violating any applicable  arity constraints (see arity).  Note that askable CycL sentences do  not necessarily obey other semantic constraints beyond arity, such as  argument-type constraints (see ArgTypePredicate); thus they are  not always semantically well-formed in the fullest sense (cf.  CycLSentence-Assertible).  The idea behind this criterion of  \"askability\" is that such a sentence, even if it isn't true or false (which it can't be unless it also obeys all argument-type  constraints), at least \"makes enough sense\" to be asked as a query  to the Cyc system.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLSentence', "The collection of syntactically well-formed sentences of the CycL language.  Each instance of CycLSentence consists of a CycL expression denoting an instance of TruthFunction (e.g. an instance of Predicate or SententialRelation) followed by one or more CycL terms (see CycLTerm), with the entire sequence enclosed in parentheses.  \n<p>\nFor example, (isa Collection Thing) and (genls ?FOO SpatialThing) are both CycL sentences.  Note that CycLSentences <i>need not</i> obey arity constraints (see arity) or other semantic constraints (such as argument type constraints; see ArgTypePredicate).  Thus, for example, (genls ?FOO SpatialThing EiffelTower) is a CycL sentence.\n<p>\nCycLSentences are also called \"logical formulas\", and are to be distinguished from \"denotational formulas\" (which are also known as \"NAT\"s; see CycLNonAtomicTerms).  Note that this notion of a CycL sentence is broader than the notion of \"sentence\" standardly used in formal logic, where a sentence is defined as a <i>closed</i> well-formed formula: CycL sentences may be <i>open</i> (i.e. they may contain free variables; see the specialization CycLOpenSentence).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLRuleAssertion', "The subcollection of semantically well-formed CycLAssertions whose formulas are rules.\nMore precisely, the formulas are not\nGAFs (see CycLGAFAssertion), so they either have more than one literal (and therefore are\nnon-atomic) or they quantify over some free variables (and therefore are non-ground).\nAny free variables are implicitly universally quantified.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLRepresentedTerm', "The collection of all denotational terms that are represented in the CycL language, instead of being defined in SubL, the underlying implementation language used by Cyc.  That is, each instance of CycLRepresentedTerm is either (i) an atomic term, and thus also an instance of CycLRepresentedAtomicTerm (q.v.), or (ii) a non-atomic term (or \"NAT\"), and has a CycLRepresentedTerm as its arg0 functor (the other arguments in the NAT\nneed not be CycL represented terms).  Thus CycLRepresentedTerm has as instances all CycLConstants, all CycLVariables, and all CycLNonAtomicTerms.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLRepresentedAtomicTerm', "A specialization of CycLAtomicTerm.  An instance ATOM of CycLAtomicTerm is also an instance of CycLRepresentedAtomicTerm just in case ATOM is explicitly represented in the CycL language (as opposed to being represented in SubL, the underlying implementation language of the Cyc system).  Important specializations of CycLRepresentedAtomicTerm include CycLVariable and CycLConstant.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLReifiedDenotationalTerm', "The collection of denotational terms in the CycL language which are\nreified in the KB.  Examples include Muffet and (JuvenileFn Dog); a\ncounterexample would be (JuvenileFn Platypus) because that term is not\ncurrently reified in the KB.  These are often called 'FORTs', which stands for\n'first-order reified terms'", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLReifiableNonAtomicTerm', "A collection of Cyc terms that are NATs (CycLNonAtomicTerms; see\nFunction-Denotational) whose functor is an instance of\nReifiableFunction. E.g., since GovernmentFn is an instance of\nReifiableFunction, it is true that (GovernmentFn France) is a\nCycLReifiableNonAtomicTerm.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLReifiableDenotationalTerm', "A subcollection of both CycLClosedDenotationalTerm and CycLIndexedTerm (qq.v.).  CycLReifiableDenotationalTerm is the collection of all CycL terms that both may be reified and may denote something in the universe of discourse. It thus includes all instances of CycLConstant as well as any NAT (see CycLNonAtomicTerm) whose main functor denotes an instance of ReifiableFunction.\n<p>\nFor example, the NAT '(GovernmentFn France)' is a CycLReifiableDenotationalTerm, since GovernmentFn is a ReifiableFunction.  Similarly,  '(JuvenileFn Platypus)' is a CycL reifiable denotational term; although it is not currently reified in the KB, it is reifiable and denotational (see CycLClosedDenotationalTerm).  Finally, '(BorderBetweenFn Canada Mexico)' is a CycL reifiable denotational term; although it happens not to denote anything in the universe of discourse, it is nonetheless the kind of NAT that can and usually does denote.\n<p>\nNote that CycLVariables are not considered reifiable terms.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLReformulationRulePredicate', "The collection of Predicates which may appear as the operator in a CycLReformulatorRule.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLPropositionalSentence', "The collection of CycL sentences that express propositions (see Proposition).  Two necessary conditions for a CycL sentence's expressing a proposition is that it be closed (see CycLClosedSentence) and not violate any applicable arity constraints (see CycLSentence-Askable).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLOpenSentence', "A specialization of both CycLOpenExpression and CycLSentence. The collection of CycL sentences that contain one or more free variables.  Note that those CycL sentences that are treated (in the context of representing assertions in the Cyc Knowledge Base) as implicitly containing initial universal quantifiers are in fact CycLOpenSentences.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLOpenNonAtomicTerm', "The collection of denotational CycLNonAtomicTerms that have free variables. Examples: `(JuvenileFn ?X)', `(JuvenileFn ?X ?Y ?Z)'.  Counterexample: `(TheSetOf ?X (objectHasColor ?X GreenColor))'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLOpenFormula', "A specialization of both CycLOpenExpression and CycLFormula (qq.v.).  The collection of compound CycL expressions that contain one or more free variables.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLOpenExpression', "A specialization of CycLExpression.  The collection of CycL expressions that contain one or more free variables.  A CycLVariable VAR occurs _free_ in an expression EXPR if and only if there is an occurrence of VAR in EXPR that is not bound by another term in EXPR that denotes a Quantifier or other ScopingRelation (q.v.).  For example, the expression `(isa ?X Cat)' is open, but `(thereExists ?X (isa ?X Cat))' is not.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLOpenDenotationalTerm', "The collection of all open denotational terms in the CycL language.  An expression is \"open\" if it contains one or more free variables (see CycLOpenExpression).  A CycL term is said to be \"denotational\" if it is the right sort of term to have a denotation (or value) in the universe of discourse (see CycLDenotationalTerm).  Each instance of CycLOpenDenotationalTerm is either a CycLOpenNonAtomicTerm (i.e. a \"NAT\" with a free variable) or a CycLVariable itself.  Examples include `?X', `(JuvenileFn ?X)', and `(JuvenileFn isa ?X genls JuvenileFn)' (even though the latter is semantically ill-formed).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLNonAtomicTerm-ClosedFunctor', "The subcollection of denotational CycLNonAtomicTerms which have no free variable in the arg0 position.\nExamples: (JuvenileFn Platypus), (JuvenileFn isa genls), (TheSetOf ?X (colorOfType ?X GreenColor)), (JuvenileFn ?X).  Counterexample: (?SOMEFN Gold) ((USDollarFn ?YEAR) 5).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycLNonAtomicTerm-Assertible', "A CycLExpressionType and a specialization of both CycLExpression-Assertible and CycLNonAtomicTerm (qq.v.).  The collection of all CycL non-atomic terms that could appear within a sentence that could be asserted to the Cyc Knowledge Base.  More precisely, each instance of CycLNonAtomicTerm-Assertible is a non-atomic term that is both syntactically and semantically well-formed.  By definition, any CycL non-atomic term is syntactically well-formed.  To be semantically well-formed, a non-atomic term sentence must be constructible via the syntax of CycL without violating any applicable arity or argument-type constraints (see arity and ArgTypePredicate).  A CycL term must be semantically well-formed in order to be interpretable as having a \"semantic value\", which for terms means having a denotation.  Note that being \"assertible\" in the present sense does not require a sentence's actually being asserted in the KB.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLNonAtomicTerm-Askable', "The collection of CycLNonAtomicTerms\nthat can appear within sentences that are askable as queries to the Cyc system\n(see CycLSentence-Askable).  More precisely, each instance of \nCycLNonAtomicTerm-Askable is a CycL non-atomic term that is constructible via \nthe syntax of CycL without violating any applicable arity constraints (see \narity).  Note that askable CycL non-atomic terms do not necesarily obey other \nsemantic constraints beyond arity, such as argument-type constraints (see \nArgTypePredicate); thus they are not always semantically well-formed in \nthe fullest sense (cf. CycLNonAtomicTerm-Assertible).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLNonAtomicTerm', "A CycLExpressionType and a specialization of both CycLFormula \nand CycLRepresentedTerm (qq.v.).  CycLNonAtomicTerm is the \ncollection of non-atomic denotational terms in the CycL language.  \nA CycL term is _non-atomic_ if it is constructible from other CycL \nterms via the syntax of CycL.  A CycL term is said to be \n\"denotational\" if it is the type of term that can have a \ndenotatum (or assigned value; see CycLDenotationalTerm).  \nCycLNonAtomicTerm thus includes all CycL denotational terms \nexcept constants and variables.  A CycL non-atomic term (or \"NAT\") \nconsists of a CycL expression denoting a Function-Denotational \nfollowed by one or more CycL terms, with the entire sequence \nenclosed in parentheses.  The NAT itself denotes the value (if any) \nof this function for the denotations of the other terms taken as \narguments.  (If there is no such value then the NAT has no denotatum;\nsee undefined.)  NATs are also known as \"denotational formulas\", \nin contrast to \"logical formulas\" (i.e. sentences).  Currently, \nthere are two main types of NAT: (i) HLNonAtomicReifiedTerms (or \n\"NART\"s), which are a type of HLReifiedDenotationalTerm and are \nimplemented with data structures that have indexing that enables all \nuses of the NAT to be retrieved, and (ii) ELNonAtomicTerms (or \n\"NAUT\"s), which have no such indexing and remain in the \nform of an EL expression in the assertions in which\nthey occur.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLNonAtomicReifiedTerm', "The subcollection of CycLReifiableNonAtomicTerms that are reified in the KB. Example: (JuvenileFn Dog).  Counterexample: (JuvenileFn Platypus), because that term is not currently reified in the KB.  These are often called NARTs, which stands for 'non-atomic reified term'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CyclistDefinitionalMt', "The microtheory in which instances of Cyclist are defined.  Assertions about them belong in CyclistsMt.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'Cyclist', "A specialization of IndividualAgent. Each instance of Cyclist is an agent (usually a person) entitled to inspect and modify the Cyc knowledge base.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLIndexedTerm', "The collection of indexed or indexable terms in the CycL language.\nThis includes reified HL terms as well as reifiable EL NATs and assertions.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLGenericRelationFormula', "A subcollection of CycLFormula (q.v.).  Each instance of that CycLGenericRelationFormula is a CycL formula that begins (immediately after the opening parenthesis) with a variable or other open expression (see CycLOpenExpression); i.e. it has an open expression in its \"0th\" or \"arg0\" position.  A CycL generic relation formula thus consists \nof an open expression followed by some number of terms, with the entire sequence \nenclosed in parentheses.  But note that the open expression in the formula's \narg0 position must be such that, given the syntax and intended semantics of CycL, it could conceivably have a Relation -- i.e. a Function-Denotational or a TruthFunction (such as a Predicate or LogicalConnective) -- as its semantic value.  Hence the arg0 open expression might be a variable, as in the generic relation formula `(?RELATION Muffet Dog)'; or it might be an appropriate open non-atomic term (or \"NAT\"; see CycLNonAtomicTerm), as in \n`((Kappa (?ARG1) (knows ?ARG1 ?ARG2)) Muffet)'; or it might itself be \na generic relation formula, as in `((?REL ?ARG1 Dog) Muffet)'.  On the \nother hand, `((BorderBetweenFn ?ARG1 ?ARG2) Muffet Dog)' is not a \nCycLGenericRelationFormula, since BorderBetweenFn only returns instances \nof Border, which is disjoint with Relation; thus the open NAT \n`(BorderBetweenFn ?ARG1 ?ARG2)' couldn't possibly have a Relation as its \nsemantic value, no matter what values were assigned to the variables `?ARG1' \nand `?ARG2'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLGAFAssertion', "A CycLExpressionType and a specialization of both CycLAtomicAssertion and CycLClosedAtomicSentence (qq.v.).  This is the collection of all and only the closed atomic CycL sentences that have been asserted to the Knowledge Base or deduced there by the inference engine.  GAF assertions typically express particular facts (as opposed to general rules) about the world.  The acronym `GAF' stands for \"ground atomic formula\"; see CycLClosedAtomicSentence.\n<p>\nAt the epistemological level (see ELExpression), a GAF assertion contains no free variables and is thus (at least) \"ground\".  At the heuristic level (see HLExpression), however, the HLAssertion(s) representing the GAF assertion -- the sentence(s) that are actually stored in the KB -- contain no variables whatsoever and are thus \"_fully_ ground\" (see CycLFullyGroundAtomicSentence).  For example, if the ground atomic sentence\n<p>\n(isa (TheSetOf ?X (objectHasColor ?X GreenColor)) Thing)\n<p>\nwere asserted it would be a GAF assertion, and it would be represented in the KB by some fully ground atomic sentence(s) containing no variables at all.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLFormulaicSentence', "A subcollection of syntactically well-formed sentences of the CycL language. Each instance of CycLFormulaicSentence consists of a CycL expression denoting an instance of TruthFunction (e.g., an instance of Predicate or SententialRelation) followed by one or more CycL terms (see CycLTerm), with the entire sequence enclosed in parentheses. For example, (isa Collection Thing) and (genls ?FOO SpatialThing) are both formulaic CycL sentences. The only two CycL sentences that are not formulaic are True and False. Note that CycLFormulaicSentences need not obey arity constraints (see arity) or other semantic constraints (such as argument type constraints ; see ArgTypePredicate). CycLFormulaicSentences are also called \"logical formulas\", and are to be distinguished from \"denotational formulas\" (which are also known as \"NAT\"s; see CycLNonAtomicTerms). Note that this notion of a formulaic CycL sentence is broader than the notion of \"sentence\" standardly used in formal logic, where a sentence is defined as a _closed_ well-formed formula: formulaic CycL sentences may be _open_ (i.e., contain free variables; see CycLOpenSentence).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycLFormula', "The collection of compound CycL expressions.  Each instance of CycLFormula consists of a CycL expression that denotes a relation (e.g. a Predicate, Function-Denotational, or TruthFunction) -- or at least an expression that could be interpreted as having a relation as its semantic value (see CycLGenericRelationFormula) -- followed by one or more CycL terms (see CycLTerm), with the entire sequence enclosed in parentheses.  For example, (isa Muffet Poodle) and (BirthFn Muffet) are both CycL formulas.  Two important specializations of CycLFormula are CycLNonAtomicTerm (whose instances are also called \"denotational formulas\") and CycLSentences (whose instances are also called \"logical formulas\").  Note that this notion of \"formula\" differs somewhat from that used in formal logic, where a formula is normally defined as an (atomic or non-atomic, quantificationally closed or open) sentence.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, ttFormatType, "A collection of collections.  Each instance of CycLExpressionType is a type (i.e. a subcollection) of CycLExpression.  Note that, while CycLExpressionType is not itself a quotedCollection (q.v.), most of its reified instances are quoted-collections.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLExpression-Assertible', "A CycLExpressionType.  The collection  of all compound CycL expressions that either could themselves be asserted to the  Cyc Knowledge Base (see CycLSentence-Assertible) or could appear as denotational terms within sentences that could be so asserted (see CycLDenotationalTerm-Assertible).  More precisely, each instance of CycLExpression-Assertible is a CycL expression that is both syntactically and semantically well-formed.  By definition, any compound CycL expression is  syntactically well-formed.  To be semantically well-formed, a CycL expression  must be constructible via the syntax of CycL without violating any applicable arity or argument-type constraints (see arity and ArgTypePredicate).  A CycL expression must be semantically well-formed in order to be interpretable as having a \"semantic value\", such as a truth-value (if the expression is a sentence) or a denotation (if it's a CycLDenotationalTerm).  Note that being \"assertible\" in the present sense does not require an expression's actually being asserted in (or being a component of something asserted in) the KB.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLExpression-Askable', "The collection of CycLExpressions\nthat are either themselves askable as queries to the Cyc system (see \nCycLSentence-Askable) or could appear as non-atomic terms within \nsentences that could be so asked (see CycLNonAtomicTerm-Askable). \nMore precisely, each instance of CycLExpression-Askable is a CycL \nexpression that is constructible via the syntax of CycL without \nviolating any applicable arity constraints (see arity).  Note that \naskable CycL expressions do not necesarily obey other semantic \nconstraints beyond arity, such as argument-type constraints (see \nArgTypePredicate); thus they are not always semantically \nwell-formed in the fullest sense (cf. CycLExpression-Assertible).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLExpression', "The collection of all (and only) expressions in the CycL language.  This includes all constants, variables, and formulas (i.e. non-atomic terms and sentences).  Each CycL expression is, trivially, a <i>syntactically</i> well-formed expression of CycL; but note that it might or might not be \"<i>semantically</i> well-formed\" (see CycLExpression-Assertible).  Also note that, since the CycL syntax allows any CycL expression to be used as a term, CycLExpression is coextensional with CycLTerm (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLDenotationalTerm-Assertible', "A CycLExpressionType and a specialization of both CycLDenotationalTerm and CycLExpression-Assertible (qq.v.).  This is the collection of all CycL denotational terms that could appear within a sentence that could be asserted to the Cyc Knowledge Base.  More precisely, each instance of CycLDenotationalTerm-Assertible is a denotational (i.e. non-logical) term that is both syntactically and semantically well-formed.  By definition, any CycL term is syntactically well-formed.  To be semantically well-formed, denotational term sentence must be either be atomic (see CycLAtomicTerm) or constructible via the syntax of CycL (see CycLNonAtomicTerm-Assertible) without violating any applicable arity or argument-type constraints (see arity and ArgTypePredicate).  A CycL term must be semantically well-formed in order to be interpretable as having a \"semantic value\", which for denotational terms means having a denotation.  Note that being \"assertible\" in the present sense does not require a sentence's actually being asserted in the KB.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLDenotationalTerm', "The collection of all CycL terms that are not sentences (cf. CycLSentence), and thus are either CycLAtomicTerms (such as constants or variables) or CycLNonAtomicTerms (also known as \"NAT\"s).   CycLDenotationalTerms are so-called, not because they all have denotations (not all of them do), but because they are in a certain sense the right kind of term for having a denotation.  That is, an instance of CycLDenotationalTerm -- if it is semantically well-formed and closed (i.e. contains no free variables) -- might denote something in the universe of discourse.  (Even so, it will not _necessarily_ denote something, considering (e.g.) the fact that a function need not be defined for every (sequence of) thing(s) satisfying its argument type constraints; see PartialFunction.)  But note that neither semantic well-formedness nor being closed is a requirement for being a CycL denotational term: `(JuvenileFn isa ?X genls JuvenileFn)', for example, is a NAT and thus a denotational term.  Other examples of denotational terms are the expressions: `Muffet', `?X', `(JuvenileFn ?X)', `(TheSetOf ?X (objectHasColor ?X GreenColor))', and `212'.  Note also that, like most instances of CycLExpressionType, CycLDenotationalTerm is a quotedCollection (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLDeducedAssertion', "The subcollection of semantically well-formed CycLAssertions that are supported by at least one argument which is a deduction by Cyc's inference engine, as opposed to having been explicitly asserted to Cyc. A given assertion can have more than one argument, and can therefore be both a CycLAssertedAssertion and a CycLDeducedAssertion.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLConstant', "The collection of all constants in the CycL language. CycLConstant has as instances all CycLAtomicTerms other than CycLVariables and SubLAtomicTerms (qq.v.).  Orthographically, CycL constants are those atomic terms (i.e. terms not constructable from other terms via CycL syntax) that are prefixed by '' in their printed (as opposed to their HTML-displayed) representations.  For example, 'Dog' and 'isa' are CycL constants, while other CycL terms like '?X', '42', and  '(GovernmentFn France)' are not.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedSentence', "A specialization of both CycLSentence and CycLClosedExpression.  The collection of CycL sentences that contain no free variables.  Note that those CycL sentences that are treated (in the context of representing assertions in the Cyc Knowledge Base) as implicitly containing universal quantifiers are <i>not</i> closed sentences (cf. CycLOpenSentence).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedNonAtomicTerm', "The collection of closed, non-atomic denotational terms of the CycL language.  Each instance of CycLClosedNonAtomicTerm is a CycL term that contains no free variables, is constructible from other CycL terms via the syntax of CycL, and can have a denotatum (this last requirement excludes closed CycL sentences from CycLClosedNonAtomicTerm).  Examples: `(JuvenileFn Platypus)', `(JuvenileFn isa genls)', and `(TheSetOf ?X (objectHasColor ?X GreenColor))'.  Non-example: `(JuvenileFn ?X)'.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedFormula', "A specialization of both CycLFormula and CycLClosedExpression.  The collection of compound expressions of CycL that contain no free variables.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedExpression', "The collection of CycLExpressions that contain no free variables.  (A variable VAR occurs _free_ in an expression EXPR if and only if there is an occurrence of VAR in EXPR that is not bound by a quantifier or other ScopingRelation (q.v.) in EXPR.)  Note that those CycL sentences that are treated (in the context of representing assertions in the Cyc Knowledge Base) as implicitly containing universal quantifiers are _not_ closed expressions (see CycLClosedSentence). Also cf. CycLOpenExpression.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedDenotationalTerm', "The collection of all closed denotational terms in the CycL language.  An expression is said to be \"closed\" if it contains no free variables (see CycLClosedExpression).  A CycL term is said to be \"denotational\" if it is the right sort of term to have a denotation (or value) in the universe of discourse (see CycLDenotationalTerm).  CycL sentences, while terms of CycL, are not considered denotational terms.  Each instance of CycLClosedDenotationalTerm is either a CycLClosedAtomicTerm (i.e. a CycLConstant or SubLAtomicTerm) or a CycLClosedNonAtomicTerm (i.e. a \"NAT\" with no free variables).  Examples of closed denotational terms include `Muffet', `(JuvenileFn Dog)', `(TheSetOf ?X (objectHasColor ?X GreenColor))', and `212'.  Note that these are also examples: `(BorderBetweenFn Canada Mexico)' (despite the fact that it fails actually to denote anything) and `(JuvenileFn isa genls JuvenileFn)'\n(despite the fact that it is not semantically well-formed).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedAtomicTerm', "The collection of all closed CycLAtomicTerms.  \"Closed\" here means not containing any free (i.e. unbound) variables.  Since a variable itself is the only type of _atomic_ term that contains a variable (and contains it _free_, moreover, as a single occurrence of a variable can't bind itself), CycLClosedAtomicTerm has as instances all CycLAtomicTerms except CycLVariables.  Like all CycL atomic terms, Cycl closed atomic terms are \"denotational\" (see CycLDenotationalTerm).  Note that this collection, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLClosedAtomicSentence', "A CycLExpressionType and a specialization of both CycLAtomicSentence and CycLClosedSentence (qq.v.).  This is the collection of all and only the syntactically well-formed atomic sentences in the CycL language that contain no free variables.  Syntactically, each instance of CycLClosedAtomicSentence consists of a CycL expression denoting a Predicate followed by one or more (closed) CycL terms, with the entire sequence enclosed in parentheses.  Such sentences are sometimes called \"GAFs\" (an acronym for \"ground atomic formulas\"); see also the specialization CycLFullyGroundAtomicSentence.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLAtomicTerm', "The collection of all atomic CycLDenotationalTerms (q.v.).  \"Atomic\" here means not constructible  from other CycL terms via the syntax of CycL.  Thus, subcollections  of CycLAtomicTerm include CycLConstant, CycLVariable, and SubLAtomicTerm.  Note that CycLAtomicTerm, like most instances of CycLExpressionType, is \"quoted\" (see quotedCollection).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLAtomicSentence', "The collection of syntactically well-formed atomic sentences in the CycL language. Each instance of CycLAtomicSentence consists of a CycL constant denoting a Predicate followed by one or more (closed or open) CycL terms, with the entire sequence enclosed in parentheses.  Thus CycL atomic sentences never contain other sentences as truth-functional components (see TruthFunction).  Note that \"atomic\" as used here specifically in connection with _sentences_, has a less strict meaning than it does when applied to terms generally, where it means \"not constructible from other terms via CycL syntax\" (see CycLAtomicTerm).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLAtomicAssertion', "A specialization of CycLAtomicSentence.  An instance ATOM of CycLAtomicSentence is also an instance of CycLAtomicAssertion just in case ATOM has been explicitly asserted to the Cyc Knowledge Base (see CycLAssertedAssertion), or deduced in the Knowledge Base by the Cyc inference engine (see CycLDeducedAssertion).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLAssertionDirection', "The collection of possible inference \"directions\" that a CycLAssertion\ncan have.  A given CycL assertion's direction (see assertionDirection) \nindicates something about how and when the assertion can be used in inferences\nby the Cyc system.  More precisely: Backward-AssertionDirection indicates\nthat the assertion can only be used in inferences carried out when a query\nis asked; Forward-AssertionDirection indicates that the assertion can be used \nin inferences carried out at the time the assertion is added to the Knowledge \nBase as well as those carried out at ask-time; and Code-AssertionDirection\nindicates that the assertion itself cannot be used in either backward \n(ask-time) or forward (assert-time) inferences, but is instead implemented \nin the underlying code of the Cyc system.  Each CycL assertion has exactly \none of the above three directions; the default direction is Forward for \nground atomic assertions (see CycLClosedAtomicSentence) and Backward for \nrule assertions.  Note that a CycL sentence is given a direction at the time \nof its assertion to the system, and this fact _need_not_ be reflected in \nanother, assertionDirection assertion's being added to the system (as\nthat would of course lead to an infinite regress).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycLAssertion', "The collection of semantically well-formed CycLSentences asserted to the Cyc Knowledge Base.  Each instance of CycLAssertion is either (1) an HL assertion, i.e. a CycL sentence that corresponds to a data structure actually in the Cyc KB), or (2) an EL assertion : an Epistemological Level CycL sentence that can be canonicalized into one or more already extant HL assertions.  CycLAssertion is used as a quoted argument type constraint for certain meta-predicates, such as overrides.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycLAssertedAssertion', "A specialization of CycLAssertion.  An instance ASSERT of CycLAssertion is also an instance of CycLAssertedAssertion  just in case ASSERT was explicitly asserted to the Cyc Knowledge Base by one of its users (see the collection Cyclist), as opposed to having been deduced by Cyc's inference engine (in which case it would be an instance of CycLDeducedAssertion (q.v.)).  Note that since a single assertion can be both explicitly asserted to the knowledge base and also deduced by the inference engine, the collections CycLAssertedAssertion and CycLDeducedAssertion are not disjoint.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycInferenceBindingsDataStructure', "A specialization of CycInferenceDataStructure.  Each\ninstance of CycInferenceBindingsDataStructure is a component of one\nor more CycInferenceAnswers, and encodes an assignment of bindings\nto the free variables in the query which yielded that answer\n(i.e., the query which triggered the CycInference of which that\nanswer is a part).  If the triggering query is closed, the binding\nlist value is NIL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycInferenceAnswerJustification', "A specialization of CycInferenceDataStructure.  Each\ninstance of CycInferenceAnswerJustification is a component of one or\nmore CycInferenceAnswers, and, in each case, encodes a complete set\nof supports (cf., CycSupportDatastructure) for that answer's binding\nlist.  See also CycInferenceBindingsDataStructure.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycInferenceAnswer', "A specialization of CycInferenceDataStructure.  Each\ninstance of CycInferenceAnswer is a complex data structure that is a\ncomponent of one or more CycInferences (specifically, of certain\ninferences whose root problem is proven).  A CycInferenceAnswer has\ntwo components: an assigment of bindings to query variables and sets of justifications for those bindings.  For information about the components, see the predicates inferenceAnswerBindings and inferenceAnswerJustification.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycHLTruthValue', "The truth/strength combinations used in the Cyc HL implementation of CycLAssertions and arguments.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CycHLSupportDatastructure', "A specialization of both CycHLDatastructure and\nCycSupportDatastructure (qq.v.) instances of which\nare Cyc HL datastructures that can be used as supports\nwithin a CycDeductionDatastructure (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CycAdministrator', "This constant is for use by Cyc administrators responsible for installation, setup and maintenance of Cyc images.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'CurrentWorldDataCollectorMt-NonHomocentric', "The Microtheory which collects together all of the instances of GeneralMicrotheory (including instances of DataMicrotheory) as genlMts (excepting HomoCentricNaturalismMt), so that any scenario or project microtheory which needs wide access to the KB but needs to accept either non-human Persons or supernatural things can use this as a genlMt and be assured that all generally defined terms are available.  If no need exists to access instances of TemporalThing, WorldLikeOursCollectorMt-NonHomocentric should be used instead.  If for the purposes of the project all persons are human and no supernatural things are being reasoned about use the CollectorMicrotheory CurrentWorldDataCollectorMt or WorldLikeOursCollectorMt.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'CoreCycLMt', "This is a microtheory which contains only the assertions required to represent useful logical truths in CycL.  It extends the LogicalTruthMt with additional assertions which are so useful as to be considered `core' to the CycL language.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'CoreCycLImplementationMt', "This is a microtheory which contains only the `core' assertions required for the Cyc theorem prover and its underlying HL representation of the EL to conclude useful inferences.  It extends the LogicalTruthImplementationMt with assertions necessary for Cyc's implementation to make use of the terms defined in the CoreCycLMt.", 'BaseKB', vStrMon).
exactlyAssertedEL(comment, 'CommutativeRelation', "An instance of RelationTypeByLogicalFeature (q.v.) and a specialization of AtLeastPartiallyCommutativeRelation (q.v.).  Each instance of CommutativeRelation <code>COMRELN</code> is a predicate or function that is commutative in all of its argument-places.  That is, if <code>COMRELN</code> is a predicate (function) that holds among (has a value <code>VAL</code> for) a given sequence of arguments, then <code>COMRELN</code> also holds among (has the same value <code>VAL</code> for) any permutation of that  sequence.  \n<p>\nExamples of commutative relations include PlusFn, or, bordersOn, temporallyIntersects, and teammates.  Specialization include SymmetricBinaryPredicate.  \n<p>\nNote that most relations are <i>not</i> commutative.  Cf. the disjoint collection  PartiallyCommutativeRelation.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'CollectionRuleTemplateFn', "(CollectionRuleTemplateFn COL) denotes the rule template unique to collection COL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CollectionDenotingFunction', "The subcollection of Function-Denotational whose instances return instances of Collection.  Examples include SwimmingEventFn, GroupFn, and MoleculeFn.  For example, (MoleculeFn Oxygen) denotes the collection of all oxygen molecules.  See also the collections IndividualDenotingFunction and SetDenotingFunction.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, tCol, "A specialization of SetOrCollection (q.v.).  This is the collection of all collections of things.  Each Collection is a kind or type of thing whose instances share a certain property, attribute, or feature.  For example, Cat is the collection of all and only cats, and BinaryFunction is the collection of all and only functions taking two arguments.\n<p>\nThe notion of collection is fundamental to the Cyc ontology, and is thus difficult to define in a precise and substantive way.  But it is instructive to compare it to the mathematical notion of a set (see Set-Mathematical).  Like a set, a collection is an AbstractThing (i.e. aspatial and atemporal) that is not an Individual (cf.), but instead has elements (see elementOf).  Unlike a set, however, the elements or \"instances\" (see isa) of a given collection can vary from context to context, and it is possible for distinct collections to have exactly the same elements (i.e. to have the same extent) with respect to a given context. For example, the (non-reified) collections \"Chordate\" and \"Renate\" are co-extensional in the context of the present-day actual world, but have differring extents with respect to hypothetical contexts in which there exist creatures having hearts but not kidneys.  This difference is sometimes summarized by saying that sets are \"extensional\" things and collections are \"intensional\" things.\n<p>\nMany, though by no means all, of the collections reified in the Cyc ontology correspond to natural kinds or classes.  It is particulary useful to reify collections that are difficult to define precisely, but about which there are many common-sense rules and other things to state.  For example, it would not be worthwile to introduce a constant 'WhiteCat', both because it's easy to define the collection of white cats in terms of more general, already-reified notions (e.g. '(CollectionIntersection2Fn Cat WhiteColor)'), and because there's not much to say about that particular collection.  WhiteCollarWorker, on the other hand, is a good collection to have reified, as it is hard to define precisely, yet is a collection about which there are many things to say.\n<p>\nSome of the many reified specializations of Collection are FirstOrderCollection, TimeDependentCollection, and ObjectType.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'Code-AssertionDirection', "An instance of CycLAssertionDirection (q.v.).  A CycL assertion that\nhas the Code-AssertionDirection cannot itself be used in either \nbackward (ask-time) or forward (assert-time) inferences, but is instead \nimplemented in the underlying code of the Cyc system.  Contrast with \nBackward-AssertionDirection and Forward-AssertionDirection.  Also \nsee assertionDirection.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CharacterString', "A specialization of AbstractInformationStructure.  Each instance of CharacterString is a string of characters or an abstract sequence of symbols.  Note that an instance of CharacterString is <i>not</i> any particular physical, tangible representation, since different encodings may represent the same string of characters.  An instance of CharacterString is a list (see the collection List) of characters (instances of Character-Abstract) from some fixed character set. An instance of CharacterString may be any finite length, including zero (the zero-length string is the empty string, which has no characters).  Notable specializations of CharacterString include EMailAddress, AreaCode, PhoneNumber, and TelephoneCountryCode.  Note that a CharacterString is ordered formally as a List (rather than physically left-to-right or top-to-bottom); thus the 'first' character in the CharacterString for an Arabic word happens to be the rightmost (first pronounced) character, not the leftmost character, due to the letter-order and word-order convention for Arabic writing.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'CanonicalizerDirective', "A specialization of AspatialInformationStore.  Instances  of CanonicalizerDirective are directives (or \"commands\") that can be  given to the CycCanonicalizer (via certain CanonicalizerDirectivePredicates) in order to control its behavior in certain ways during asserts and queries.   Examples include AllowGenericArgVariables and LeaveSomeTermsAtEL. See e.g. the directive predicate canonicalizerDirectiveForArg for more  information on how to use these directives.", 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(comment, 'BroadMicrotheory', "The collection of those microtheories that contain so many assertions that they are not useful for `relevance' focusing during inference.  (A BroadMicrotheory is not used internally in Cyc's indexing scheme during inference.)  Examples: BaseKB and EnglishMt.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'BookkeepingPredicate', "A PredicateType whose instances are predicates used to make assertions about the reification (or \"creation\") and internal representation of particular CycL terms (usually constants) in the Cyc system.  Bookkeeping predicates neither specify nor constrain the semantics of CycL terms.  Examples include  myCreator, myCreationTime, termOfUnit, and defnSufficient.  Many (but not all) bookkeeping predicates are also MetaKnowledgePredicates (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'BookkeepingMt', "A Microtheory for stating basic bookkeeping information regarding the Cyc Knowledge Base, such as assertions using myCreator or myCreationTime.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'BinaryRelation', "The collection of all fixed-arity relations of arity 2 (see arity).  The most notable specializations of BinaryRelation are BinaryPredicate and BinaryFunction (qq.v.).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'BinaryPredicate', "A specialization of both BinaryRelation and Predicate.  BinaryPredicate is the collection of all predicates whose arity (see arity) is 2.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'BinaryFunction', "A specialization of both BinaryRelation and Function-Denotational.  An instance of Function-Denotational FUNC is an instance of BinaryFunction if and only if FUNC has an arity of 2.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'BaseKB', "BaseKB is the most general Microtheory currently in use.  Assertions in this context are `accessible' from any other Microtheory via the genlMt relation.  In the partial order of microtheories, all microtheories have access to BaseKB.  An assertion which is true here will by default be true in every context.  The `content' of BaseKB consists of very general assertions which are expected to be usable in most or all applications of Cyc, as well as Cyc's most fundamental assertions that it uses in inference, and all completely universal, timeless truths.", 'BaseKB', vStrDef).
exactlyAssertedEL(comment, 'Backward-AssertionDirection', "An instance of CycLAssertionDirection (q.v.).  A CycL assertion that\nhas the Backward-AssertionDirection can only be used in inferences that \nare carried out when a query is asked. This is the default direction for \nrule assertions.  Contrast with Forward-AssertionDirection and Code-AssertionDirection.  Also see assertionDirection.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'Average', "Computes the average of the function values over all elements in the Set.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'August', "The collection of all Augusts,\n the eighth month of the year in the GregorianCalendar.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'AtemporalNecessarilyEssentialCollectionType', "A collection of collections.  Each instance <code>COL</code> of AtemporalNecessarilyEssentialCollectionType (<i>ANECT</i>) is a collection satisfying three conditions: (1) <code>COL</code> is disjoint with (see disjointWith) TemporalThing, (2) every instance <code>INST</code> of <code>COL</code> is an instance of <code>COL</code> essentially (i.e. <code>INST</code> is an instance of <code>COL</code>, and could not exist without being an instance of <code>COL</code>), and (3) condition (2) is a necessary truth about <code>COL</code>.\n<p>\nPositive examples of ANECTs include Collection, Integer, and Relation (each of which is a collection of atemporals and is such that, necessarily, all of its instances are in it essentially).  Negative examples include SpatialThing (though arguably it is necessary that all of its instances are essentially instances of it, it is not disjoint with TemporalThing) and UniqueAnatomicalPartType (which, though disjoint with TemporalThing, has instances, such as Heart, that could exist even if they weren't instances of it; e.g. it might have been the case that every creature with a heart had at least two hearts).  There are no known examples of Cyc-reified collections satisfying conditions (1) and (2) but not (3), but one can be contrived.  Suppose that all of today's winning lottery numbers were primes.  Now consider the collection:\n<p>\n (CollectionUnionFn \n   (TheSet PrimeNumber <i>TodaysWinningLotteryNumbers</i>))\n<p>\nThis collection is clearly disjoint with TemporalThing and, by hypothesis, all of its instances are in it essentially (as each prime number is essentially a prime number).  But this last fact is not <i>necessarily</i> true of this collection: the collection might have had instances that belonged to it only contingently (i.e. not essentially), as it might have been the case that one of today's winning lottery numbers was non-prime, and no number is such that it is essentially one of today's winning lottery numbers.\n<p>\nWhen asserting that something is an instance or specialization of a given instance of ANECT, it is appropriate to do so in the UniversalVocabularyMt (q.v.).  Indeed, ANECT was specially defined to facilitate the movement of appropriate assertions to that microtheory.\n<p>\nCf. PragmaticallyDecontextualizedCollection.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'AsymmetricBinaryPredicate', "An instance of BinaryPredicateTypeByLogicalFeature and a specialization of AntiSymmetricBinaryPredicate (q.v.).  A binary predicate <code>BINPRED</code> is an instance of AsymmetricBinaryPredicate if and only if (i) for any <code>THING1</code> and <code>THING2</code>, <code>(BINPRED THING1 THING2)</code> implies <code>(not (BINPRED THING2 THING1))</code> and (ii) the single-argument argument type (i.e. argIsa and argGenl) constraints on <code>BINPRED</code>'s two respective argument-places are \"co-satisfiable\" (see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement).\n<p>\nExamples of asymmetric binary predicates include northOf, children, greaterThan, and overrides.  Cf. SymmetricBinaryPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'AssociativeRelation', "The collection of polyadic Relations having the property of <i>associativity</i>.  Roughly speaking, a relation is associative if certain different sequences of recursive applications of it lead to the same final result.\n<p>\nMore precisely:  If <b>RELN</b> is binary, it is an instance of AssociativeRelation if and only if (for any appropriate arguments <b>A</b>, <b>B</b>, and <b>C</b>) the corresponding formulas <b>(RELN A (RELN B C))</b> and <b>(RELN (RELN A B) C)</b> are (extensionally) equivalent: if <b>RELN</b> is a Function-Denotational both formulas have the same denotatum (or both have no denotatum), while if <b>RELN</b> is a Predicate or LogicalConnective both formulas have the same truth value.  If <b>RELN</b> has a higher arity than two, the definition is similar, but with the relevant formula schemata appropriately rewritten.  If <b>RELN</b> is variable-arity (see VariableArityRelation), it is an AssociativeRelation if and only of it behaves associatively with respect to each of the particular arities it subsumes (its arityMin to arityMax).  No unary relation is associative. \n<p>\nIt follows from the above definition that that each argument-place of an associative relation must admit exactly the same class of arguments (see admittedArgument), and that its results must also be of that same class (so that it can be applied recursively).\n<p>\nExamples of associative relations include PlusFn, TimesFn, JoinListsFn, SpatialSumFn, or, and and.\n<p>\nNote that, while many AssociativeRelations are CommutativeRelations (q.v.), this is not always the case.  Consider for example ConcatenateStringsFn.  Since it is associative, (('c'^'a')^'t') = ('c'^('a'^'t')) = 'cat'.  But it is certainly <i>not</i> commutative: 'cat' =/ 'act'.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'assertionUtility-1', "A CycInferenceHeuristicRelevancePredicate. (assertionUtility ASSERTION NUM) states that the CycLAssertion ASSERTION should be heuristically considered of utility NUM to inferences made in the current Microtheory. NUM should be a RealNumber between 1 and -1, with 1 indicating maximum utility, -1 indicating minimum utility, and 0 being agnostic with respect to utility.  (assertionUtility ASSERTION 1) is equivalent to (highlyRelevantAssertion ASSERTION). (assertionUtility ASSERTION -1) is equivalent to (irrelevantAssertion ASSERTION).  See also other instances of CycInferenceHeuristicRelevancePredicate.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ArgTypeTernaryPredicate', "Those instances of both TernaryPredicate and ArgTypePredicate used to specify the required isa or genls or quotedIsa of an argument of a Relation; the arg1 is the Relation; the arg2 is the argument constrained; the arg3 is the required type: a Collection.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgTypePredicate', "The collection of ArgConstraintPredicates used to put semantic well-formedness constraints on the type of argument(s) appropriate for a given argument-place (or -places) of a given relation.  A \"type\" of argument can be specified in terms of isa or genls; see the various specializations of ArgTypePredicate for more detail. Violation of such a constraint results in an expression that is semantically malformed.  For a general explanation of semantic well-formedness, see CycLExpression-Assertible and its specializations.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgTypeBinaryPredicate', "Those instances of both BinaryPredicate and ArgTypePredicate used to specify the required isa or genls or quotedIsa of an argument of a Relation; the arg1 is the Relation; the arg2 is the required type, a Collection.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgSometimesIsaPredicate', "The collection of ArgTypePredicates (q.v.) that specify argument-types\ndirectly (by referencing certain collections) and impose constraints that\nrequire an argument of a predicate being an instance of a SubLExpressionType\ncollection at some time.  More precisely, each instance\nof ArgSometimesIsaPredicate PRED takes a Relation RELN as its first argument (or\n\"arg1\"), and has at least one other argument-place (say the Mth) for\nspecifying an argument-type for one of RELN's argument-places (say the\nNth). (The value of N might be fixed or might be given by yet another of PRED's\narguments.) Suppose M=2 and N=1. PRED then takes a SubLExpressionType Collection\nas its second argument, and a closed atomic sentence (or \"GAF\") of the form\n(PRED RELN COL ..) puts a \"sometimes isa\" constraint on RELN's first\nargument-place that is based on COL. If PRED is a \"single-argument\" constraint\npredicate, the GAF entails that a closed formula of the form (RELN ARG1 ..) is\nsemantically well-formed only if ARG1 is an instance of \nSubLExpressionType COL in some time interval\n(including Always-TimeInterval).", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ArgQuotedIsaTernaryPredicate', "A specialization of ArgQuotedIsaPredicate (q.v.). Each instance of ArgQuotedIsaTernaryPredicate. is a ternary predicate used to place an \"quoted isa\" constraint on (and thereby specify an argument-type for) one or more argument-places of a relation. To be more precise, each instance PRED of ArgQuotedIsaTernaryPredicate takes a Relation RELN as its first argument, a NonNegativeInteger N as its second argument, and a SubLExpressionType collection COL as its third argument. PRED places an \"quoted isa\" constraint on RELN's Nth argument-place that is based on COL, so that a ground atomic sentence (GAF) of the form (RELN ARG1..ARGN..) is semantically well-formed only if ARGN is a quoted instance of COL. (Note that if N = 0 then this same constraint is placed on _all_ of RELN's argument-places. An important instance of ArgQuotedIsaTernaryPredicate is argQuotedIsa.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ArgQuotedIsaPredicate', "The collection of ArgTypePredicates (q.v.) that specify argument-types directly (by referencing certain collections) and impose constraints that require a thing's being an instance of a SubLExpressionType collection thus specified. More precisely, each instance of ArgQuotedIsaPredicate PRED takes a Relation RELN as its first argument (or \"arg1\"), and has at least one other argument-place (say the Mth) for specifying an argument-type for one of RELN's argument-places (say the Nth). (The value of N might be fixed or might be given by yet another of PRED's arguments.) Suppose M=2 and N=1. PRED then takes a SubLExpressionType Collection as its second argument, and a closed atomic sentence (or \"GAF\") of the form (PRED RELN COL ..) puts an \"quoted isa\" constraint on RELN's first argument-place that is based on COL. If PRED is a \"single-argument\" constraint predicate, the GAF entails that a closed formula of the form (RELN ARG1 ..) is semantically well-formed only if ARG1 is an instance of (i.e. quotedIsa) SubLExpressionType COL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ArgQuotedIsaBinaryPredicate', "A specialization of ArgQuotedIsaPredicate . Each instance of ArgQuotedIsaBinaryPredicate takes a Relation RELN as its first argument, and a SubLExpressionType Collection COL as its second argument, and places a constraint based on COL on at least one of the argument-places of RELN. To be more precise, suppose that PRED is an ArgIsaBinaryPredicate that specifies an argument-type for the Nth argument-place of RELN. Then a sentence of the form (PRED RELN COL) entails that a closed formula of the form (RELN ... ARGN ...) is semantically well-formed only if ARGN is an instance (i.e. quotedIsa) of COL.", 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(comment, 'ArgIsaTernaryPredicate', "A specialization of both ArgTypeTernaryPredicate and ArgIsaPredicate (q.v.).  Each instance of ArgIsaTernaryPredicate is a ternary predicate used to place an \"isa\" constraint on (and thereby specify an argument-type for) one or more argument-places of a relation.  To be more precise, each instance PRED of ArgIsaTernaryPredicate takes a Relation RELN as its first argument, a NonNegativeInteger N as its second argument, and a Collection COL as its third argument.  PRED places an \"isa\" constraint on RELN's Nth argument-place that is based on COL, so that a ground atomic sentence (GAF) of the form (RELN ARG1..ARGN..) is semantically well-formed only if ARGN is an instance of COL. (Note that (i) if N = 0 then this same constraint is placed on _all_ of RELN's argument-places and (ii) if PRED is argAndRestIsa then this constraint is placed on all of RELN's argument-places whose ordinal positions are greater than or equal to the Nth.)  An important instance of ArgIsaTernaryPredicate is argIsa.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgIsaPredicate', "The collection of ArgTypePredicates (q.v.) that specify argument-types directly (by referencing certain collections) and impose constraints that require a thing's being an instance of a collection thus specified.  More precisely, each instance of ArgIsaPredicate PRED takes a Relation RELN as its first argument (or \"arg1\"), and has at least one other argument-place (say the Mth) for specifying an argument-type for one of RELN's argument-places (say the Nth).  (The value of N might be fixed or might be given by yet another of PRED's arguments.)  Suppose M=2 and N=1.  PRED then takes a Collection as its second argument, and a closed atomic sentence (or \"GAF\") of the form (PRED RELN COL ..) puts an \"isa\" constraint on RELN's first argument-place that is based on COL.  If PRED is a \"single-argument\" constraint predicate, the GAF entails that a closed formula of the form (RELN ARG1 ..) is semantically well-formed only if ARG1 is an instance of (i.e. isa) COL.  If PRED is an \"inter-argument\" constraint predicate, the GAF expresses a slightly more complicated, conditional isa constraint on a pair of RELN's argument-places (see InterArgIsaPredicate).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgIsaBinaryPredicate', "A specialization of both ArgTypeBinaryPredicate and ArgIsaPredicate.  Each instance of ArgIsaBinaryPredicate takes a Relation RELN as its first argument, and a Collection COL as its second argument, and places a constraint based on COL on at least one of the argument-places of RELN.  To be more precise, suppose that PRED is an ArgIsaBinaryPredicate that specifies an argument-type for the Nth argument-place of RELN.  Then a sentence of the form (PRED RELN COL) entails that a closed formula of the form (RELN ... ARGN ...) is semantically well-formed only if  ARGN is an instance of COL.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgGenlTernaryPredicate', "A specialization of ArgTypeTernaryPredicate and ArgGenlPredicate.  Each instance of ArgGenlTernaryPredicate is used to specify that a certain collection is required to stand in the genls relation to anything that is acceptable in a particular argument slot of a given instance of Relation.  With each instance of ArgGenlTernaryPredicate, the first argument is the relation constrained; the second argument is the argument constrained; and the third argument is the required collection that the relation's specified argument is required to be a specialization of.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgGenlQuantityTernaryPredicate', "A specialization of both ArgTypeTernaryPredicate and ArgGenlAttributePredicate.  Each instance of ArgGenlAttributeTernaryPredicate is a ternary predicate used to place a \"quantitySubsumes\" constraint on (and thereby specify an argument-type for) one or more argument-places of a relation.  To be more precise, each instance PRED of ArgGenlAttributeTernaryPredicate takes a Relation RELN as its first argument, a NonNegativeInteger N as its second argument, and an Quantity QUANT as its third argument. PRED places a \"quantitySubsumes\" constraint on RELN's Nth argument-place that is based on QUANT, so that a ground atomic sentence (GAF) of the form (RELN ARG1..ARGN..) is semantically well-formed only if ARGN is subsumed by QUANT (in the sense that (quantitySubsumes QUANT ARGN) holds).  An important instance of ArgGenlAttributeTernaryPredicate is argGenlAttribute.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgGenlQuantityBinaryPredicate', "Those instances of both ArgTypeBinaryPredicate and ArgGenlAttributePredicate used to specify the required quantity of an argument of Relation.  Each instance PRED of this collection is a binary predicate with the following properties: ARG1 is an instance of Relation, and ARG2 is an instance of Quantity.  (PRED ARG1 ARG2) means that some argument of ARG1 is constrained to be subsumed by (via quantitySubsumes) ARG2, where PRED determines the argument place in question.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgGenlBinaryPredicate', "Those instances of both BinaryPredicate and ArgGenlPredicate used to specify the required genls of an argument of a Relation; the arg1 is the Relation; the arg2 is the required genls Collection.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'ArgConstraintPredicate', "The collection of MetaRelations whose instances are used to put semantic well-formedness or entry-format constraints on one or more argument-places of a given Relation.  Such a constraint might concern an argument's <i>type</i>, an argument-place's Format (q.v.), a conditional relationship between two argument(-place)s' types or formats, or some other sort of relationship between two arguments.  For a fuller account, see the various specializations of ArgConstraintPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'April', "The collection of all Aprils, \nthe fourth month of the year in the GregorianCalendar.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'AntiTransitiveBinaryPredicate', "A BinaryPredicateTypeByLogicalFeature and a specialization of  IrreflexiveBinaryPredicate (q.v.).  A binary predicate PRED is an instance of  AntiTransitiveBinaryPredicate only if it has this property: for any THING1, THING2, and THING3 such that both (PRED THING1 THING2) and (PRED THING2 THING3) hold, (not (PRED THING1 THING3)) holds.  Equivalently: for every X, Y, and Z that satisfy the (single-argument) argument-type constraints  (see admittedArgument) for the relevant argument positions of PRED,  (not (and (PRED X Y)(PRED Y Z)(PRED X Z))) holds.  Note that  PRED's two agument-positions must also be \"co-satisfiable\" with respect to their type constraints; see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement.\n<p>\nFor example, divorcedFrom is an instance of AntiTransitiveBinaryPredicate.\n<p>\nNote also that, while not strictly disjoint with TransitiveBinaryPredicate (q.v.), in practice few if any reified predicates should be instances of both of these collections. An important specialization of AntiTransitiveBinaryPredicate is DirectBinaryPredicate (q.v.).", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'AntiSymmetricBinaryPredicate', "A BinaryPredicateTypeByLogicalFeature and thus a specialization of BinaryPredicate.  A binary predicate <code>PRED</code> is an AntiSymmetricBinaryPredicate if and only if it has the following two properties.  (i) For any <code>THING1</code> and <code>THING2</code> such that both <code>(PRED THING1 THING2)</code> and <code>(PRED THING2 THING1)</code> hold, <code>THING1</code>  = <code>THING2</code>.  (ii) <code>PRED</code>'s two argument-places must be \"co-satisfiable\" with respect to their (single-argument) type constraints (see cosatisfiableInArgs and NoteOnArgumentCosatisfiabilityRequirement).\n<p>\nInstances of AntiSymmetricBinaryPredicate include greaterThanOrEqualTo, parts, and subEvents.  See also the specialization AsymmetricBinaryPredicate; and cf. SymmetricBinaryPredicate.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(comment, 'AllowKeywordVariables', "A CanonicalizerDirective (q.v.)  that is a specialization (see genlCanonicalizerDirectives) of  AllowGenericArgVariables.  AllowKeywordVariables directs the  CycCanonicalizer to allow all \"keyword variables\" (e.g. `:NOUN'  and `:ARG1') to appear in CycL assertions and to treat them as if they  were CycLVariables.", 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(comment, 'AllowGenericArgVariables', "A CanonicalizerDirective (q.v.) that directs the CycCanonicalizer to allow \"generic argument keyword variables\" (e.g. `:ARG1' and `:ARG2') to appear in CycL assertions and  to treat them as if they were CycLVariables.  For a specialization (see genlCanonicalizerDirectives) of this directive that is used to  direct the canonicalizer to allow _all_ keyword variables, see AllowKeywordVariables.", 'CoreCycLImplementationMt', vStrDef).
exactlyAssertedEL(comment, 'AbsoluteValueFn', "AbsoluteValueFn is the unary mathematical function that returns the absolute value of its argument; e.g., (AbsoluteValueFn -2) returns 2, and (AbsoluteValueFn 2) returns 2.", 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'VariableAritySkolemFunction', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'VariableArityRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'UnreifiableFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'UnitOfMeasure', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'UnaryRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'UnaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'UnaryFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'TruthFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'TransitiveBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Thing', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'TheTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'TernaryRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'TernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'TernaryFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SymmetricBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SubLSymbol', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLString', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLSExpression', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLRealNumber', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLPositiveInteger', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SubLNonVariableSymbol', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLNonVariableNonKeywordSymbol', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLNonNegativeInteger', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SubLList', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLKeyword', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLInteger', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLExpressionType', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLCharacter', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SubLAtom', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SkolemFunction', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'SiblingDisjointCollectionType', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SiblingDisjointAttributeType', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SetOrCollection', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Set-Mathematical', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'SententialRelation', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'ScopingRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ScalarPointValue', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ScalarInterval', 'UniversalVocabularyMt', 'BaseKB', vSthrDef).
exactlyAssertedEL(collectionConventionMt, 'ScalarIntegralValue', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, tRelation, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ReifiableFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ReformulatorDirectivePredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ReflexiveBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'RealNumber', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuintaryRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuintaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuintaryFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuaternaryRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuaternaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'QuaternaryFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Quantifier', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ProblemSolvingCntxt', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, tPred, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'PositiveInteger', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'PartiallyCommutativeRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'NonNegativeScalarInterval', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'NonNegativeInteger', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Multigraph', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'MonthOfYearType', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'MicrotheoryDesignatingRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Microtheory', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'LogicalConnective', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'List', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'IrreflexiveBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'InterArgIsaPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'InterArgFormatPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Integer', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'InferenceRelatedBookkeepingPredicate', 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'Individual', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'HypotheticalContext', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'HLExternalIDString', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, tFunction, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'Format', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'FixedAritySkolemFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'FixedAritySkolemFuncN', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'FixedArityRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ExistentialQuantifier-Bounded', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'ExistentialQuantifier', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ExceptionPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'EvaluatableRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'EvaluatableFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ELRelation-Reversible', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'ELRelation-OneWay', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ELRelation', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'DistributingMetaKnowledgePredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'DisjointCollectionType', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'DirectedMultigraph', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'DefaultMonotonicPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, ftVar, 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLTruthValueSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLSentence-Assertible', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLSentence-Askable', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLRuleAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLRepresentedTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLRepresentedAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLReifiedDenotationalTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLReifiableNonAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLReifiableDenotationalTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLPropositionalSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLOpenSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLOpenNonAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLOpenFormula', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLOpenExpression', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLOpenDenotationalTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLNonAtomicTerm-Assertible', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLNonAtomicTerm-Askable', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLNonAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLNonAtomicReifiedTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLIndexedTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLGenericRelationFormula', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLGAFAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLFormulaicSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLFormula', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, ttFormatType, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'CycLExpression-Assertible', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLExpression-Askable', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLExpression', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLDenotationalTerm-Assertible', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLDenotationalTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLDeducedAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLConstant', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedNonAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedFormula', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedExpression', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedDenotationalTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLClosedAtomicSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLAtomicTerm', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLAtomicSentence', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLAtomicAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLAssertionDirection', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'CycLAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CycLAssertedAssertion', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'CommutativeRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'CollectionDenotingFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, tCol, 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'CanonicalizerDirective', 'CoreCycLImplementationMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'BroadMicrotheory', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'BroadMicrotheory', 'BaseKB', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'BookkeepingPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'BinaryRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'BinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'BinaryFunction', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'AsymmetricBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'AssociativeRelation', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgTypeTernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgTypePredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgTypeBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgQuotedIsaTernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrMon).
exactlyAssertedEL(collectionConventionMt, 'ArgIsaTernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgIsaBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgGenlTernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgGenlQuantityTernaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgGenlQuantityBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgGenlBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'ArgConstraintPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'AntiTransitiveBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).
exactlyAssertedEL(collectionConventionMt, 'AntiSymmetricBinaryPredicate', 'UniversalVocabularyMt', 'BaseKB', vStrDef).

exactlyAssertedEL(canonicalizerDirectiveForArg, trueRule, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorRule, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorRule, 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorEquiv, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorEquiv, 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorEquals, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulatorEquals, 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, reformulationPrecondition, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, formulaArity, 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(canonicalizerDirectiveForArg, expansion, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, expansion, 2, 'AllowGenericArgVariables', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, collectionExpansion, 2, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(canonicalizerDirectiveForArg, collectionExpansion, 2, 'AllowGenericArgVariables', 'UniversalVocabularyImplementationMt', vStrDef).
exactlyAssertedEL(canonicalizerDirectiveForArg, 'FormulaArityFn', 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).
exactlyAssertedEL(canonicalizerDirectiveForArg, 'FormulaArgSetFn', 1, 'LeaveSomeTermsAtEL', 'UniversalVocabularyImplementationMt', vStrMon).



assertedTinyKB_implies_first( isa('$VAR'('UNIT'), 'UnitOfMeasure'), arityMin('$VAR'('UNIT'), 1), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('UNIT'), 'UnitOfMeasure'), arityMax('$VAR'('UNIT'), 2), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('TEMPLATE'), 'RuleTemplate'), ruleTemplateDirection('$VAR'('TEMPLATE'), 'Backward-AssertionDirection'), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('REL'), 'UnaryRelation'), arity('$VAR'('REL'), 1), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('REL'), 'TernaryRelation'), arity('$VAR'('REL'), 3), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('REL'), 'QuintaryRelation'), arity('$VAR'('REL'), 5), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('REL'), 'QuaternaryRelation'), arity('$VAR'('REL'), 4), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('REL'), 'BinaryRelation'), arity('$VAR'('REL'), 2), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( interArgResultIsa('$VAR'('FN'), '$VAR'('_NUM'), 'Thing', '$VAR'('COLL')), resultIsa('$VAR'('FN'), '$VAR'('COLL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 5, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'interArgIsa5-4'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 5, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'interArgIsa5-3'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 5, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'interArgIsa5-2'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 5, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'interArgIsa5-1'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 4, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'interArgIsa4-5'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 4, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'interArgIsa4-3'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 4, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'interArgIsa4-2'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 4, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'interArgIsa4-1'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 3, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'interArgIsa3-5'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 3, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'interArgIsa3-4'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 3, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'interArgIsa3-2'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 3, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'interArgIsa3-1'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 2, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'interArgIsa2-5'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 2, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'interArgIsa2-4'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 2, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'interArgIsa2-3'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 2, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'interArgIsa2-1'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 1, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'interArgIsa1-5'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 1, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'interArgIsa1-4'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 1, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'interArgIsa1-3'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( interArgIsa('$VAR'('PRED'), 1, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'interArgIsa1-2'('$VAR'('PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( argQuotedIsa('$VAR'('PRED'), '$VAR'('N'), '$VAR'('_COL')), quotedArgument('$VAR'('PRED'), '$VAR'('N')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 6), arg6Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 5), arg5Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 4), arg4Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 3), arg3Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 2), arg2Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(resultIsaArg('$VAR'('FUNC'), 1), arg1Genl('$VAR'('FUNC'), '$VAR'('COL'))), resultIsa('$VAR'('FUNC'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(resultIsa('$VAR'('FUNCTION'), '$VAR'('COLTYPE')), genls('$VAR'('COLTYPE'), tCol)), isa('$VAR'('FUNCTION'), 'CollectionDenotingFunction'), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( instanceElementType('$VAR'('SET_TYPE'), '$VAR'('_COL')), defnSufficient('$VAR'('SET_TYPE'), 'SubLQuoteFn'('CYC-SET-OF-TYPE-SUFFICIENT')), 'UniversalVocabularyImplementationMt', vStrMon).


assertedTinyKB_implies_first( hypotheticalTerm('$VAR'('TERM')), quotedIsa('$VAR'('TERM'), 'IndeterminateTerm'), 'CoreCycLImplementationMt', vStrDef).
assertedTinyKB_implies_first( hypotheticalTerm('$VAR'('TERM')), highlyRelevantTerm('$VAR'('TERM')), 'CoreCycLImplementationMt', vStrDef).
assertedTinyKB_implies_first( hypotheticalTerm('$VAR'('TERM')), ephemeralTerm('$VAR'('TERM')), 'CoreCycLImplementationMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 6, '$VAR'('COL')), arg6SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 5, '$VAR'('COL')), arg5SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 4, '$VAR'('COL')), arg4SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 3, '$VAR'('COL')), arg3SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 2, '$VAR'('COL')), arg2SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argSometimesIsa('$VAR'('RELN'), 1, '$VAR'('COL')), arg1SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 6, '$VAR'('COL')), arg6QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 5, '$VAR'('COL')), arg5QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 4, '$VAR'('COL')), arg4QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 3, '$VAR'('COL')), arg3QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 2, '$VAR'('COL')), arg2QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argQuotedIsa('$VAR'('RELN'), 1, '$VAR'('COL')), arg1QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 6, '$VAR'('COL')), arg6Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 5, '$VAR'('COL')), arg5Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 4, '$VAR'('COL')), arg4Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 3, '$VAR'('COL')), arg3Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 2, '$VAR'('COL')), arg2Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( argIsa('$VAR'('RELN'), 1, '$VAR'('COL')), arg1Isa('$VAR'('RELN'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg6SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 6, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg6QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 6, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg6Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 6, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg5SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 5, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg5QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 5, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg4SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 4, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg4QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 4, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg4Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 4, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg5Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 5, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg3SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 3, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg3QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 3, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg3Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 3, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg2SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 2, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg2QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 2, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg2Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 2, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg1SometimesIsa('$VAR'('RELN'), '$VAR'('COL')), argSometimesIsa('$VAR'('RELN'), 1, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg1QuotedIsa('$VAR'('RELN'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), 1, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_Already( arg2Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(2, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_Already( arg1Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 1, '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).


exactlyAssertedEL(relationAllInstance, resultIsa, 'CollectionDenotingFunction', tCol, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(relationAllInstance, arityMin, 'UnitOfMeasure', 1, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arityMax, 'UnitOfMeasure', 2, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arity, 'UnaryRelation', 1, 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, arity, 'TernaryRelation', 3, 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, arity, 'QuintaryRelation', 5, 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, arity, 'QuaternaryRelation', 4, 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, arity, 'BinaryRelation', 2, 'CoreCycLMt', vStrMon).
exactlyAssertedEL(relationAllInstance, arg3Isa, 'ArgIsaTernaryPredicate', tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg3Isa, 'ArgGenlTernaryPredicate', tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg2Isa, 'ArgTypeTernaryPredicate', 'NonNegativeInteger', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg2Isa, 'ArgIsaBinaryPredicate', tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg2Isa, 'ArgGenlBinaryPredicate', tCol, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg1Isa, 'ArgTypeTernaryPredicate', tRelation, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, arg1Isa, 'ArgTypeBinaryPredicate', tRelation, 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllExists, natFunction, 'CycLNonAtomicTerm-ClosedFunctor', 'ReifiableFunction', 'BaseKB', vStrMon).


assertedTinyKB_implies_first( arg6Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(6, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( arg5Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(5, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( arg4Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(4, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( arg3Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(3, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( arg1Isa('$VAR'('PRED'), '$VAR'('TYPE')), resultIsa('FunctionToArg'(1, '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).

assertedTinyKB_implies_first( afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE')), afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-KEY')), afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('ADD-TVA-CACHE-KEY')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('ADD-TVA-CACHE-VALUE')), afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('ADD-TVA-CACHE-KEY')), afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-KEY')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( disjointWith('$VAR'('X'), '$VAR'('Y')), disjointWith('$VAR'('Y'), '$VAR'('X')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_implies_first( denotes('Quote'('EscapeQuote'('$VAR'('X'))), '$VAR'('_ANYTHING')), denotes('Quote'('EscapeQuote'('$VAR'('X'))), '$VAR'('X')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_implies_first( completelyEnumerableCollection('$VAR'('COL')), completeExtentEnumerableForValueInArg(isa, '$VAR'('COL'), 2), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies_first( completelyDecidableCollection('$VAR'('COL')), completeExtentDecidableForValueInArg(isa, '$VAR'('COL'), 2), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies_first( completeExtentEnumerableForValueInArg(isa, '$VAR'('COL'), 2), completelyEnumerableCollection('$VAR'('COL')), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies_first( completeExtentDecidableForValueInArg(isa, '$VAR'('COL'), 2), completelyDecidableCollection('$VAR'('COL')), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies_first( completeExtentDecidable('$VAR'('PRED')), backchainForbidden('$VAR'('PRED')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( collectionIsaBackchainRequired('$VAR'('PRED')), collectionIsaBackchainEncouraged('$VAR'('PRED')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( collectionGenlsBackchainRequired('$VAR'('PRED')), collectionGenlsBackchainEncouraged('$VAR'('PRED')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( collectionBackchainRequired('$VAR'('PRED')), collectionBackchainEncouraged('$VAR'('PRED')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( canonicalizerDirectiveForArgAndRest('$VAR'('RELN'), 1, '$VAR'('DIRECTIVE')), canonicalizerDirectiveForAllArgs('$VAR'('RELN'), '$VAR'('DIRECTIVE')), 'CoreCycLImplementationMt', vStrMon).
assertedTinyKB_implies_first( canonicalizerDirectiveForAllArgs('$VAR'('RELN'), '$VAR'('DIRECTIVE')), canonicalizerDirectiveForArgAndRest('$VAR'('RELN'), 1, '$VAR'('DIRECTIVE')), 'CoreCycLImplementationMt', vStrMon).
assertedTinyKB_implies_first( 'interArgIsa5-4'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 5, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa5-3'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 5, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa5-2'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 5, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa5-1'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 5, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa4-5'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 4, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa4-3'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 4, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa4-2'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 4, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa4-1'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 4, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa3-5'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 3, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa3-4'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 3, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa3-2'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 3, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa3-1'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 3, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa2-5'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 2, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa2-4'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 2, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa2-3'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 2, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa2-1'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 2, '$VAR'('IND_COL'), 1, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa1-5'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 1, '$VAR'('IND_COL'), 5, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa1-4'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 1, '$VAR'('IND_COL'), 4, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa1-3'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 1, '$VAR'('IND_COL'), 3, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( 'interArgIsa1-2'('$VAR'('CONSTRAINED_PRED'), '$VAR'('IND_COL'), '$VAR'('DEP_COL')), interArgIsa('$VAR'('CONSTRAINED_PRED'), 1, '$VAR'('IND_COL'), 2, '$VAR'('DEP_COL')), 'BaseKB', vStrDef).



assertedTinyKB_implies_first( isa('$VAR'('QUANT'), 'ExistentialQuantifier-Bounded'), arg3QuotedIsa('$VAR'('QUANT'), 'CycLSentence-Assertible'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('QUANT'), 'ExistentialQuantifier-Bounded'), arg2QuotedIsa('$VAR'('QUANT'), ftVar), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), transitiveViaArgInverse('$VAR'('PRED'), '$VAR'('PRED'), 1), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), transitiveViaArg('$VAR'('PRED'), '$VAR'('PRED'), 2), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), genlInverse('$VAR'('PRED'), '$VAR'('PRED')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ReflexiveBinaryPredicate'), genlPreds(equals, '$VAR'('PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'IrreflexiveBinaryPredicate'), genlPreds('$VAR'('PRED'), different), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgIsaPredicate'), arg1Isa('$VAR'('PRED'), tRelation), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgIsaPredicate'), afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-REMOVING')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgIsaPredicate'), afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('INTER-ARG-ISA-AFTER-ADDING')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgFormatPredicate'), arg1Isa('$VAR'('PRED'), tRelation), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgFormatPredicate'), afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('INTER-ARG-FORMAT-AFTER-REMOVING')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InterArgFormatPredicate'), afterAdding('$VAR'('PRED'), 'SubLQuoteFn'('INTER-ARG-FORMAT-AFTER-ADDING')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'InferenceRelatedBookkeepingPredicate'), definingMt('$VAR'('PRED'), 'BaseKB'), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'BookkeepingPredicate'), minimizeExtent('$VAR'('PRED')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'AsymmetricBinaryPredicate'), negationInverse('$VAR'('PRED'), '$VAR'('PRED')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgIsaTernaryPredicate'), transitiveViaArg('$VAR'('PRED'), genls, 3), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgIsaBinaryPredicate'), transitiveViaArg('$VAR'('PRED'), genls, 2), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgGenlTernaryPredicate'), transitiveViaArg('$VAR'('PRED'), genls, 3), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgGenlQuantityTernaryPredicate'), transitiveViaArgInverse('$VAR'('PRED'), quantitySubsumes, 3), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgGenlQuantityBinaryPredicate'), transitiveViaArgInverse('$VAR'('PRED'), quantitySubsumes, 2), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('PRED'), 'ArgGenlBinaryPredicate'), transitiveViaArg('$VAR'('PRED'), genls, 2), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('MT'), 'Microtheory'), ist('BaseKB', isa('$VAR'('MT'), 'Microtheory')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('MIC'), 'Microtheory'), genlMt('$VAR'('MIC'), 'BaseKB'), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('MEASURE_FN'), 'UnitOfMeasure'), resultIsa('$VAR'('MEASURE_FN'), 'ScalarInterval'), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('FUNC'), 'IndeterminateTermDenotingFunction'), resultQuotedIsa('$VAR'('FUNC'), 'IndeterminateTerm'), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( isa('$VAR'('COL1'), tCol), or(genls('$VAR'('COL1'), '$VAR'('COL2')), different('$VAR'('COL1'), '$VAR'('COL2'))), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('ANECT'), 'AtemporalNecessarilyEssentialCollectionType'), decontextualizedCollection('$VAR'('ANECT')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( isa('$VAR'('ANECT'), 'AtemporalNecessarilyEssentialCollectionType'), collectionConventionMt('$VAR'('ANECT'), 'UniversalVocabularyMt'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), resultIsaArg('$VAR'('FUNC'), '$VAR'('N')), natArgument('$VAR'('NAT'), '$VAR'('N'), '$VAR'('COL'))), isa('$VAR'('NAT'), '$VAR'('COL')), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), resultGenlArg('$VAR'('FUNC'), '$VAR'('N')), natArgument('$VAR'('NAT'), '$VAR'('N'), '$VAR'('COL'))), genls('$VAR'('NAT'), '$VAR'('COL')), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), preservesGenlsInArg('$VAR'('FUNC'), '$VAR'('NUM')), natFunction('$VAR'('INDEP_COLL_NAT'), '$VAR'('FUNC')), genls('$VAR'('TERM'), '$VAR'('INDEP_COLL')), natArgument('$VAR'('NAT'), '$VAR'('NUM'), '$VAR'('TERM')), natArgument('$VAR'('INDEP_COLL_NAT'), '$VAR'('NUM'), '$VAR'('INDEP_COLL'))), genls('$VAR'('NAT'), '$VAR'('INDEP_COLL_NAT')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), natArgument('$VAR'('NAT'), '$VAR'('N'), '$VAR'('TERM')), interArgResultIsa('$VAR'('FUNC'), '$VAR'('N'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), isa('$VAR'('NAT'), '$VAR'('DEP_COL')), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), natArgument('$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')), interArgResultIsa('$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), isa('$VAR'('NAT'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( and(natFunction('$VAR'('NAT'), '$VAR'('FUNC')), genls('$VAR'('COL'), '$VAR'('INDEP_COL')), natArgument('$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('COL')), interArgResultGenl('$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), genls('$VAR'('NAT'), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).


assertedTinyKB_implies_first( genls('$VAR'('SPEC'), 'Quantifier'), decontextualizedCollection('$VAR'('SPEC')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genls('$VAR'('SPEC'), 'LogicalConnective'), decontextualizedCollection('$VAR'('SPEC')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlPreds('$VAR'('SPEC_PRED'), genls), afterRemoving('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( genlPreds('$VAR'('PRED'), termDependsOn), afterRemoving('$VAR'('PRED'), 'SubLQuoteFn'('REMOVE-DEPENDENT-TERM')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlPreds('$VAR'('EQUALITY_PRED'), equals), afterRemoving('$VAR'('EQUALITY_PRED'), 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( genlPreds('$VAR'('EQUALITY_PRED'), equals), afterAdding('$VAR'('EQUALITY_PRED'), 'SubLQuoteFn'('DECACHE-SOME-EQUALITY-ASSERTIONS-SOMEWHERE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), isa), afterAdding('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-ISA')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), genls), afterRemoving('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('REMOVE-TVA-CACHE-VALUE')), 'BaseKB', vStrDef).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), genls), afterAdding('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLS')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), genlPreds), afterAdding('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLPREDS')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), genlMt), afterAdding('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLMT')), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( genlInverse('$VAR'('SPEC_INVERSE'), genlInverse), afterAdding('$VAR'('SPEC_INVERSE'), 'SubLQuoteFn'('PROPAGATE-INVERSE-TO-GENLINVERSE')), 'BaseKB', vStrMon).


exactlyAssertedEL(implies,A,C,MT,STR):- assertedTinyKB_implies_first(A,C,MT,STR).
exactlyAssertedEL(not,What,MT,STR):- assertedTinyKB_not_first(What,MT,STR),true.

assertedTinyKB_not_first(quotedIsa(thereExistExactly, 'InferenceSupportedTerm'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(quotedIsa(thereExistAtMost, 'InferenceSupportedTerm'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(quotedIsa(thereExistAtLeast, 'InferenceSupportedTerm'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(quotedIsa('False', 'CycLSentence-Assertible'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(subsetOf, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(subsetOf, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(siblingDisjointExceptions, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedIsa, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedIsa, 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedIsa, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedDefnSufficient, 'InferenceSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedDefnNecessary, 'InferenceSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quotedDefnIff, 'InferenceSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quantityIntersects, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(quantityIntersects, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(negationPreds, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(negationInverse, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(negationInverse, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(knownAntecedentRule, 'InferenceSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(isa, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(isa, 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(isa, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genls, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genls, 'AsymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genls, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlPreds, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlMt, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'AsymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(genlInverse, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(evaluationResultQuotedIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(evaluate, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'AsymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(elementOf, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(disjointWith, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(disjointWith, 'IrreflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(disjointWith, 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(constraint, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(conceptuallyRelated, 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(conceptuallyRelated, 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg6SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg5SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg4SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg3SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg2SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa(arg1SometimesIsa, 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('IntervalEntry', 'WFFSupportedTerm'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'AsymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-SpecDenotesGenlInstances', 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'WFFSupportedPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'TransitiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'SymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'ReflexiveBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'AsymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(isa('genls-GenlDenotesSpecInstances', 'AntiSymmetricBinaryPredicate'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(genls('CommutativeRelation', 'PartiallyCommutativeRelation'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(genls('CollectionDenotingFunction', 'ReifiableFunction'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(genlPreds(reformulatorEquals, equals), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(genlPreds(hlPrototypicalInstance, isa), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(equals('$VAR'('_SET'), 'TheSetOf'('$VAR'('X'), and(isa('$VAR'('X'), 'Set-Mathematical'), not(elementOf('$VAR'('X'), '$VAR'('X')))))), 'BaseKB', vStrMon).
assertedTinyKB_not_first(elementOf('$VAR'('X'), 'TheEmptySet'), 'BaseKB', vStrMon).
assertedTinyKB_not_first(different('$VAR'('OBJ'), '$VAR'('OBJ')), 'BaseKB', vStrMon).
assertedTinyKB_not_first(commutativeInArgsAndRest('$VAR'('REL'), 1, 2, 3), 'BaseKB', vStrDef).
assertedTinyKB_not_first(commutativeInArgsAndRest('$VAR'('REL'), 1, 2), 'BaseKB', vStrDef).
assertedTinyKB_not_first(commutativeInArgsAndRest('$VAR'('REL'), 1), 'BaseKB', vStrDef).
assertedTinyKB_not_first(arg2Isa(evaluate, 'CycLNonAtomicTerm-Askable'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(natFunction('$VAR'('NAT'), '$VAR'('FUNCTION')), resultQuotedIsa('$VAR'('FUNCTION'), '$VAR'('COL'))), quotedIsa('$VAR'('NAT'), '$VAR'('COL')), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies( and(natFunction('$VAR'('NAT'), '$VAR'('FUNCTION')), resultIsa('$VAR'('FUNCTION'), '$VAR'('COL'))), isa('$VAR'('NAT'), '$VAR'('COL')), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies( and(natFunction('$VAR'('NAT'), '$VAR'('FUNCTION')), resultGenl('$VAR'('FUNCTION'), '$VAR'('COL'))), genls('$VAR'('NAT'), '$VAR'('COL')), 'CoreCycLMt', vStrMon).




% ================================
% ================================
% ================================
% ================================
% ================================
% ================================
% ================================
% ================================
% ================================
% ================================



assertedTinyKB_implies( nearestDifferentIsa('$VAR'('OBJ_1'), '$VAR'('OBJ_2'), '$VAR'('NEAR_DIFF')), isa('$VAR'('OBJ_1'), '$VAR'('NEAR_DIFF')), 'BaseKB', vStrMon).
assertedTinyKB_implies( nearestDifferentGenls('$VAR'('COL_1'), '$VAR'('COL_2'), '$VAR'('NEAR_DIFF')), genls('$VAR'('COL_1'), '$VAR'('NEAR_DIFF')), 'BaseKB', vStrMon).

assertedTinyKB_implies( nearestCommonSpecs('$VAR'('COL'), '$VAR'('COL'), '$VAR'('NEAREST_SPEC')), nearestGenls('$VAR'('NEAREST_SPEC'), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( nearestCommonIsa('$VAR'('OBJ'), '$VAR'('OBJ'), '$VAR'('NEAR_ISA')), nearestIsa('$VAR'('OBJ'), '$VAR'('NEAR_ISA')), 'BaseKB', vStrMon).
assertedTinyKB_implies( nearestCommonGenls('$VAR'('COL'), '$VAR'('COL'), '$VAR'('NEAR_GENL')), nearestGenls('$VAR'('COL'), '$VAR'('NEAR_GENL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( nearestCommonGenlMt('$VAR'('MT'), '$VAR'('MT'), '$VAR'('NEAR_MT')), nearestGenlMt('$VAR'('MT'), '$VAR'('NEAR_MT')), 'BaseKB', vStrMon).


assertedTinyKB_implies( 'ist-Asserted'('$VAR'('MT'), '$VAR'('FORMULA')), ist('$VAR'('MT'), assertedSentence('$VAR'('FORMULA'))), 'UniversalVocabularyMt', vStrMon).


assertedTinyKB_implies( quotedIsa('$VAR'('ASSERTION'), 'CycLRuleAssertion'), assertionDirection('$VAR'('ASSERTION'), 'Backward-AssertionDirection'), 'BaseKB', vStrDef).
assertedTinyKB_implies( quotedIsa('$VAR'('ASSERTION'), 'CycLGAFAssertion'), assertionDirection('$VAR'('ASSERTION'), 'Forward-AssertionDirection'), 'BaseKB', vStrDef).


exactlyAssertedEL(implies_bc, quotedIsa('$VAR'('X'), '$VAR'('COL')), isa('Quote'('EscapeQuote'('$VAR'('X'))), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( quotedIsa('$VAR'('EXPR'), 'CycLClosedExpression'), equals('Quote'('$VAR'('EXPR')), 'Quote'('EscapeQuote'('$VAR'('EXPR')))), 'BaseKB', vStrMon).
assertedTinyKB_implies( quantitySubsumes('$VAR'('NUM2'), '$VAR'('SUBNUM2')), quantitySubsumes('Unity'('$VAR'('_NUM1'), '$VAR'('NUM2')), '$VAR'('SUBNUM2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( quantitySubsumes('$VAR'('NUM1'), '$VAR'('SUBNUM1')), quantitySubsumes('Unity'('$VAR'('NUM1'), '$VAR'('_NUM2')), '$VAR'('SUBNUM1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( pointQuantValue('$VAR'('SCALAR'), '$VAR'('VALUE')), minQuantValue('$VAR'('SCALAR'), '$VAR'('VALUE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( pointQuantValue('$VAR'('SCALAR'), '$VAR'('VALUE')), maxQuantValue('$VAR'('SCALAR'), '$VAR'('VALUE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( multiplicationUnits('$VAR'('UNIT1'), '$VAR'('UNIT2'), '$VAR'('PROD_UNIT')), multiplicationUnits('$VAR'('UNIT1'), '$VAR'('UNIT2'), '$VAR'('PROD_UNIT')), 'BaseKB', vStrMon).
assertedTinyKB_implies( isa('$VAR'('WEEKDAY'), 'DayOfWeekType'), defnSufficient('$VAR'('WEEKDAY'), 'SubLQuoteFn'('CYC-DAY-OF-WEEK-DEFN')), 'CoreCycLImplementationMt', vStrMon).
assertedTinyKB_implies( isa('$VAR'('UNIT'), 'UnitOfMeasure'), unitMultiplicationFactor('$VAR'('UNIT'), '$VAR'('UNIT'), 1), 'UniversalVocabularyMt', vStrDef).

assertedTinyKB_implies( isa('$VAR'('CONNECT'), 'ExceptionPredicate'), abnormal('TheList'('$VAR'('CONNECT'), '$VAR'('ARITY'), '$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('N'), '$VAR'('ARG_N_ISA')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[isa, '$VAR'('CONNECT'), 'FixedArityRelation'], [isa, '$VAR'('CONNECT'), 'LogicalConnective'], [arity, '$VAR'('CONNECT'), '$VAR'('ARITY')], [isa, '$VAR'('ARG_N_QUOTED_ISA'), 'ArgQuotedIsaBinaryPredicate'], [constrainsArg, '$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('N')], [integerBetween, 1, '$VAR'('N'), '$VAR'('ARITY')]], [['$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('CONNECT'), 'CycLSentence-Assertible']]], 'BaseKB', ["?CONNECT", "?ARITY", "?ARG-N-QUOTED-ISA", "?N"], [implies, [and, [isa, '$VAR'('CONNECT'), 'FixedArityRelation'], [isa, '$VAR'('CONNECT'), 'LogicalConnective'], [arity, '$VAR'('CONNECT'), '$VAR'('ARITY')], [isa, '$VAR'('ARG_N_QUOTED_ISA'), 'ArgQuotedIsaBinaryPredicate'], [constrainsArg, '$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('N')], [integerBetween, 1, '$VAR'('N'), '$VAR'('ARITY')]], ['$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('CONNECT'), 'CycLSentence-Assertible']])), 'BaseKB', vStrMon).
assertedTinyKB_implies( isa('$VAR'('INSTANCE'), 'ScalarInterval'), abnormal('TheList'('$VAR'('PRED'), '$VAR'('COLLECTION'), '$VAR'('INSTANCE')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[relationAllInstance, '$VAR'('PRED'), '$VAR'('COLLECTION'), '$VAR'('INSTANCE')]], [[conceptuallyRelated, '$VAR'('COLLECTION'), '$VAR'('INSTANCE')]]], 'BaseKB', ["?PRED", "?COLLECTION", "?INSTANCE"], [implies, [relationAllInstance, '$VAR'('PRED'), '$VAR'('COLLECTION'), '$VAR'('INSTANCE')], [conceptuallyRelated, '$VAR'('COLLECTION'), '$VAR'('INSTANCE')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( notAssertible('$VAR'('PRED')), abnormal('TheList'('$VAR'('PRED')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[genlPreds, '$VAR'('PRED'), termDependsOn]], [[afterRemoving, '$VAR'('PRED'), ['SubLQuoteFn', 'REMOVE-DEPENDENT-TERM']]]], 'BaseKB', ["?PRED"], [implies, [genlPreds, '$VAR'('PRED'), termDependsOn], [afterRemoving, '$VAR'('PRED'), ['SubLQuoteFn', 'REMOVE-DEPENDENT-TERM']]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( notAssertible('$VAR'('SPEC_PRED')), abnormal('TheList'('$VAR'('SPEC_PRED')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[different, disjointWith, '$VAR'('SPEC_PRED')], [genlPreds, '$VAR'('SPEC_PRED'), disjointWith]], [[afterAdding, '$VAR'('SPEC_PRED'), ['SubLQuoteFn', 'PROPAGATE-TO-DISJOINTWITH']]]], 'BaseKB', ["?SPEC-PRED"], [implies, [and, [different, disjointWith, '$VAR'('SPEC_PRED')], [genlPreds, '$VAR'('SPEC_PRED'), disjointWith]], [afterAdding, '$VAR'('SPEC_PRED'), ['SubLQuoteFn', 'PROPAGATE-TO-DISJOINTWITH']]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( omitArgIsa('$VAR'('RELN'), '$VAR'('N')), abnormal('TheList'('$VAR'('Q_COL'), '$VAR'('COL'), '$VAR'('RELN'), '$VAR'('N')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[['genls-SpecDenotesGenlInstances', '$VAR'('Q_COL'), '$VAR'('COL')], [argQuotedIsa, '$VAR'('RELN'), '$VAR'('N'), '$VAR'('Q_COL')]], [[argIsa, '$VAR'('RELN'), '$VAR'('N'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?Q-COL", "?COL", "?RELN", "?N"], [implies, [and, ['genls-SpecDenotesGenlInstances', '$VAR'('Q_COL'), '$VAR'('COL')], [argQuotedIsa, '$VAR'('RELN'), '$VAR'('N'), '$VAR'('Q_COL')]], [argIsa, '$VAR'('RELN'), '$VAR'('N'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( operatorFormulas('$VAR'('A'), '$VAR'('B')), natFunction('$VAR'('B'), '$VAR'('A')), 'BaseKB', vStrDef).

assertedTinyKB_implies( natArgument('$VAR'('NAT'), 0, '$VAR'('FUNCTION')), natFunction('$VAR'('NAT'), '$VAR'('FUNCTION')), 'BaseKB', vStrMon).
assertedTinyKB_implies( knownAntecedentRule('$VAR'('ASSERTION')), highlyRelevantAssertion('$VAR'('ASSERTION')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( ist('MtSpace'('$VAR'('MT')), '$VAR'('SENTENCE')), ist('$VAR'('MT'), '$VAR'('SENTENCE')), 'UniversalVocabularyMt', vStrDef).

assertedTinyKB_implies( and(trueSentence('$VAR'('FORMULA')), interArgDifferent('$VAR'('FORMULAARGFN_2'), '$VAR'('ARG_1'), '$VAR'('ARG_2')), evaluate('$VAR'('FORMULAARGFN_2'), 'FormulaArgFn'(0, '$VAR'('FORMULA'))), evaluate('$VAR'('FORMULAARGFN'), 'FormulaArgFn'('$VAR'('ARG_1'), '$VAR'('FORMULA'))), evaluate('$VAR'('FORMULAARGFN_1'), 'FormulaArgFn'('$VAR'('ARG_2'), '$VAR'('FORMULA')))), different('$VAR'('FORMULAARGFN'), '$VAR'('FORMULAARGFN_1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(trueSentence('$VAR'('ANTE')), sentenceImplies('$VAR'('ANTE'), '$VAR'('CONSEQ'))), trueSentence('$VAR'('CONSEQ')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(rewriteOf('$VAR'('TERM'), '$VAR'('NART1')), rewriteOf('$VAR'('TERM'), '$VAR'('NART2'))), equals('$VAR'('NART1'), '$VAR'('NART2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(rewriteOf('$VAR'('REWRITE'), '$VAR'('TERM')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('TERM'), '$VAR'('ARG3'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('REWRITE'), '$VAR'('ARG3')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(rewriteOf('$VAR'('REWRITE'), '$VAR'('TERM')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('TERM'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('REWRITE')), 'UniversalVocabularyMt', vStrDef).


assertedTinyKB_implies( and(requiredArg2Pred('$VAR'('COL_2'), '$VAR'('PRED')), 'interArgIsa2-1'('$VAR'('PRED'), '$VAR'('COL_2'), '$VAR'('COL_1'))), relationExistsAll('$VAR'('PRED'), '$VAR'('COL_1'), '$VAR'('COL_2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(relationAllExistsMax('$VAR'('REL'), '$VAR'('A'), '$VAR'('B'), '$VAR'('N')), relationAllExistsMin('$VAR'('REL'), '$VAR'('A'), '$VAR'('B'), '$VAR'('N'))), relationAllExistsCount('$VAR'('REL'), '$VAR'('A'), '$VAR'('B'), '$VAR'('N')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('M')), relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('N'))), numericallyEquals('$VAR'('M'), '$VAR'('N')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(relationAllExistsCount('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('N')), relationAllExistsMin('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('M'))), greaterThanOrEqualTo('$VAR'('N'), '$VAR'('M')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(relationAll('$VAR'('PRED'), '$VAR'('COL')), isa('$VAR'('OBJ'), '$VAR'('COL'))), holds('$VAR'('PRED'), '$VAR'('OBJ')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(quotedIsa('$VAR'('SUBL_NUM'), 'SubLPositiveInteger'), denotes('$VAR'('SUBL_NUM'), '$VAR'('NUM'))), isa('$VAR'('NUM'), 'PositiveInteger'), 'LogicalTruthImplementationMt', vStrDef).
assertedTinyKB_implies( and(quotedIsa('$VAR'('SUBL_NUM'), 'SubLNonNegativeInteger'), denotes('$VAR'('SUBL_NUM'), '$VAR'('NUM'))), isa('$VAR'('NUM'), 'NonNegativeInteger'), 'LogicalTruthImplementationMt', vStrDef).
assertedTinyKB_implies( and(quantitySubsumes('$VAR'('SUPER'), '$VAR'('SUB')), followingValue('$VAR'('SUPER'), '$VAR'('LATER'))), followingValue('$VAR'('SUB'), '$VAR'('LATER')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(quantitySubsumes('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), quantitySubsumes('$VAR'('INTERVAL2'), '$VAR'('INTERVAL1'))), numericallyEquals('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).

assertedTinyKB_implies( and(numericallyEquals('$VAR'('M'), '$VAR'('N')), relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('N'))), relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('M')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(termOfUnit('$VAR'('UNITPRODUCTFN'), 'UnitProductFn'('$VAR'('PERFN'), '$VAR'('UNIT2'))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('UNIT1'), '$VAR'('UNITPRODUCTFN')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(termOfUnit('$VAR'('PERFN_1'), 'PerFn'('$VAR'('UNIT2'), '$VAR'('UNIT3'))), termOfUnit('$VAR'('PERFN_2'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2'))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT3')))), multiplicationUnits('$VAR'('PERFN_1'), '$VAR'('PERFN_2'), '$VAR'('PERFN')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNITPRODUCTFN'), '$VAR'('UNIT2'))), termOfUnit('$VAR'('UNITPRODUCTFN'), 'UnitProductFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('PERFN'), '$VAR'('UNIT1')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( ist('$VAR'('MT'), '$VAR'('SENTENCE')), ist('MtSpace'('$VAR'('MT')), '$VAR'('SENTENCE')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( isa('$VAR'('X'), 'PositiveInteger'), greaterThanOrEqualTo('$VAR'('X'), 1), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(unitMultiplicationFactor('$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE'), '$VAR'('FACTOR1')), termOfUnit('$VAR'('PERFN_1'), 'PerFn'('$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE'))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO')))), unitMultiplicationFactor('$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(unitMultiplicationFactor('$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO'), '$VAR'('FACTOR1')), termOfUnit('$VAR'('PERFN_1'), 'PerFn'('$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE'))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE')))), unitMultiplicationFactor('$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(unitMultiplicationFactor('$VAR'('SMALL'), '$VAR'('BIG'), '$VAR'('FACTOR')), evaluate('$VAR'('TIMESFN'), 'TimesFn'('$VAR'('FACTOR'), '$VAR'('N')))), equals(holds('$VAR'('BIG'), '$VAR'('N')), holds('$VAR'('SMALL'), '$VAR'('TIMESFN'))), 'BaseKB', vStrMon).

exactlyAssertedEL(evaluationDefn, 'FunctionToArg'('$VAR'('N'), '$VAR'('PREDICATE')), 'SubLQuoteFn'('CYC-FUNCTION-TO-ARG'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'FormulaArityFn', 'SubLQuoteFn'('CYC-RELATION-EXPRESSION-ARITY'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'FormulaArgSetFn', 'SubLQuoteFn'('CYC-RELATION-ARG-SET'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'FormulaArgListFn', 'SubLQuoteFn'('CYC-RELATION-ARGS-LIST'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'FormulaArgFn', 'SubLQuoteFn'('CYC-RELATION-ARG'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'EvaluateSubLFn', 'SubLQuoteFn'('CYC-EVALUATE-SUBL'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'DifferenceFn', 'SubLQuoteFn'('CYC-DIFFERENCE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'DateEncodeStringFn', 'SubLQuoteFn'('CYC-DATE-ENCODE-STRING'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'DateDecodeStringFn', 'SubLQuoteFn'('CYC-DATE-DECODE-STRING'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'Average', 'SubLQuoteFn'('CYC-AVERAGE'), 'BaseKB', vStrMon).
exactlyAssertedEL(evaluationDefn, 'AbsoluteValueFn', 'SubLQuoteFn'('CYC-ABSOLUTE-VALUE'), 'BaseKB', vStrMon).



assertedTinyKB_implies( extentCardinality('TheSetOf'('$VAR'('OBJ'), and(isa('$VAR'('OBJ'), '$VAR'('COLL_1')), neg(isa('$VAR'('OBJ'), '$VAR'('COLL_2'))))), 0), subsetOf('$VAR'('COLL_1'), '$VAR'('COLL_2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( extConceptOverlapsColAndReln('$VAR'('COL'), '$VAR'('RELN'), '$VAR'('SOURCE'), '$VAR'('STRING')), overlappingExternalConcept('$VAR'('RELN'), '$VAR'('SOURCE'), '$VAR'('STRING')), 'BaseKB', vStrDef).
assertedTinyKB_implies( extConceptOverlapsColAndReln('$VAR'('COL'), '$VAR'('RELN'), '$VAR'('SOURCE'), '$VAR'('STRING')), overlappingExternalConcept('$VAR'('COL'), '$VAR'('SOURCE'), '$VAR'('STRING')), 'BaseKB', vStrDef).
assertedTinyKB_implies( except('$VAR'('ASSERTION')), exceptWhen(except('$VAR'('ASSERTION')), '$VAR'('ASSERTION')), 'BaseKB', vStrDef).
assertedTinyKB_implies( equals('$VAR'('A'), '$VAR'('B')), 'equalStrings-CaseInsensitive'('$VAR'('A'), '$VAR'('B')), 'BaseKB', vStrDef).
assertedTinyKB_implies( elInverse('$VAR'('SLOT'), '$VAR'('INVERSE')), expansion('$VAR'('INVERSE'), holds('$VAR'('SLOT'), (':ARG2'), (':ARG1'))), 'BaseKB', vStrDef).


assertedTinyKB_implies_InCode( genls('$VAR'('SUB'), '$VAR'('SUPER')), genls('$VAR'('SUPER'), 'Thing'), 'BaseKB', vStrMon).
assertedTinyKB_implies_InCode( genls('$VAR'('SUB'), '$VAR'('SUPER')), genls('$VAR'('SUB'), 'Thing'), 'BaseKB', vStrMon).
assertedTinyKB_implies_TODO( forwardNonTriggerLiteral(isa('$VAR'('TERM'), '$VAR'('INDEP_COL'))), meetsPragmaticRequirement('TheList'('$VAR'('NAT'), '$VAR'('FUNC'), '$VAR'('TERM'), '$VAR'('INDEP_COL'), '$VAR'('ARG'), '$VAR'('DEP_COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [isa, '$VAR'('TERM'), '$VAR'('INDEP_COL')], [natArgument, '$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')], [interArgResultIsa, '$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')]], [[isa, '$VAR'('NAT'), '$VAR'('DEP_COL')]]], 'BaseKB', ["?NAT", "?FUNC", "?TERM", "?INDEP-COL", "?ARG", "?DEP-COL"], [implies, [and, [natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [isa, '$VAR'('TERM'), '$VAR'('INDEP_COL')], [natArgument, '$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')], [interArgResultIsa, '$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')]], [isa, '$VAR'('NAT'), '$VAR'('DEP_COL')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies_TODO( forwardNonTriggerLiteral(isa('$VAR'('ARG'), '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('ARG'), '$VAR'('COL'), '$VAR'('NART'), '$VAR'('FUNC'), '$VAR'('INT')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[assertedSentence, [isa, '$VAR'('ARG'), '$VAR'('COL')]], [natFunction, '$VAR'('NART'), '$VAR'('FUNC')], [resultIsaArgIsa, '$VAR'('FUNC'), '$VAR'('INT')], [natArgument, '$VAR'('NART'), '$VAR'('INT'), '$VAR'('ARG')]], [[isa, '$VAR'('NART'), '$VAR'('COL')]]], 'BaseKB', ["?ARG", "?COL", "?NART", "?FUNC", "?INT"], [implies, [and, [assertedSentence, [isa, '$VAR'('ARG'), '$VAR'('COL')]], [natFunction, '$VAR'('NART'), '$VAR'('FUNC')], [resultIsaArgIsa, '$VAR'('FUNC'), '$VAR'('INT')], [natArgument, '$VAR'('NART'), '$VAR'('INT'), '$VAR'('ARG')]], [isa, '$VAR'('NART'), '$VAR'('COL')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies_TODO( forwardNonTriggerLiteral(arity('$VAR'('PRED'), 2)), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [[relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]]], 'BaseKB', ["?PRED", "?COL1", "?COL2"], [implies, [and, [arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]])), 'BaseKB', vStrMon).


assertedTinyKB_implies( assertionUtility('$VAR'('ASSERTION'), 1), highlyRelevantAssertion('$VAR'('ASSERTION')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( irrelevantAssertion('$VAR'('ASSERTION')), 'assertionUtility-1'('$VAR'('ASSERTION'), -1), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( 'assertionUtility-1'('$VAR'('ASSERTION'), 1), highlyRelevantAssertion('$VAR'('ASSERTION')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( 'assertionUtility-1'('$VAR'('ASSERTION'), -1), irrelevantAssertion('$VAR'('ASSERTION')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( integerBetween('$VAR'('LOW'), '$VAR'('MED'), '$VAR'('HIGH')), greaterThanOrEqualTo('$VAR'('MED'), '$VAR'('LOW')), 'BaseKB', vStrDef).
assertedTinyKB_implies( integerBetween('$VAR'('LOW'), '$VAR'('MED'), '$VAR'('HIGH')), greaterThanOrEqualTo('$VAR'('HIGH'), '$VAR'('MED')), 'BaseKB', vStrDef).
assertedTinyKB_implies( highlyRelevantAssertion('$VAR'('ASSERTION')), assertionUtility('$VAR'('ASSERTION'), 1), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( highlyRelevantAssertion('$VAR'('ASSERTION')), 'assertionUtility-1'('$VAR'('ASSERTION'), 1), 'UniversalVocabularyMt', vStrDef).



assertedTinyKB_implies( holdsIn('$VAR'('_T1'), holdsIn('$VAR'('T2'), '$VAR'('P'))), holdsIn('$VAR'('T2'), '$VAR'('P')), 'BaseKB', vStrDef).

assertedTinyKB_implies( assertedSentence(relationAllInstance(quotedIsa, '$VAR'('COLL'), '$VAR'('QUOTED_COLL'))), meetsPragmaticRequirement('TheList'('$VAR'('INS'), '$VAR'('COLL'), '$VAR'('QUOTED_COLL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[isa, '$VAR'('INS'), '$VAR'('COLL')], [relationAllInstance, quotedIsa, '$VAR'('COLL'), '$VAR'('QUOTED_COLL')]], [[quotedIsa, '$VAR'('INS'), '$VAR'('QUOTED_COLL')]]], 'BookkeepingMt', ["?INS", "?COLL", "?QUOTED-COLL"], [implies, [and, [isa, '$VAR'('INS'), '$VAR'('COLL')], [relationAllInstance, quotedIsa, '$VAR'('COLL'), '$VAR'('QUOTED_COLL')]], [quotedIsa, '$VAR'('INS'), '$VAR'('QUOTED_COLL')]])), 'BookkeepingMt', vStrDef).
assertedTinyKB_implies( assertedSentence(interArgResultIsa('$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), meetsPragmaticRequirement('TheList'('$VAR'('NAT'), '$VAR'('FUNC'), '$VAR'('TERM'), '$VAR'('INDEP_COL'), '$VAR'('ARG'), '$VAR'('DEP_COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [isa, '$VAR'('TERM'), '$VAR'('INDEP_COL')], [natArgument, '$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')], [interArgResultIsa, '$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')]], [[isa, '$VAR'('NAT'), '$VAR'('DEP_COL')]]], 'BaseKB', ["?NAT", "?FUNC", "?TERM", "?INDEP-COL", "?ARG", "?DEP-COL"], [implies, [and, [natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [isa, '$VAR'('TERM'), '$VAR'('INDEP_COL')], [natArgument, '$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')], [interArgResultIsa, '$VAR'('FUNC'), '$VAR'('ARG'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')]], [isa, '$VAR'('NAT'), '$VAR'('DEP_COL')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( assertedSentence(genls('$VAR'('TERM'), '$VAR'('INDEP_COLL'))), meetsPragmaticRequirement('TheList'('$VAR'('NAT'), '$VAR'('FUNC'), '$VAR'('NUM'), '$VAR'('INDEP_COLL_NAT'), '$VAR'('TERM'), '$VAR'('INDEP_COLL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [preservesGenlsInArg, '$VAR'('FUNC'), '$VAR'('NUM')], [natFunction, '$VAR'('INDEP_COLL_NAT'), '$VAR'('FUNC')], [genls, '$VAR'('TERM'), '$VAR'('INDEP_COLL')], [natArgument, '$VAR'('NAT'), '$VAR'('NUM'), '$VAR'('TERM')], [natArgument, '$VAR'('INDEP_COLL_NAT'), '$VAR'('NUM'), '$VAR'('INDEP_COLL')]], [[genls, '$VAR'('NAT'), '$VAR'('INDEP_COLL_NAT')]]], 'UniversalVocabularyMt', ["?NAT", "?FUNC", "?NUM", "?INDEP-COLL-NAT", "?TERM", "?INDEP-COLL"], [implies, [and, [natFunction, '$VAR'('NAT'), '$VAR'('FUNC')], [preservesGenlsInArg, '$VAR'('FUNC'), '$VAR'('NUM')], [natFunction, '$VAR'('INDEP_COLL_NAT'), '$VAR'('FUNC')], [genls, '$VAR'('TERM'), '$VAR'('INDEP_COLL')], [natArgument, '$VAR'('NAT'), '$VAR'('NUM'), '$VAR'('TERM')], [natArgument, '$VAR'('INDEP_COLL_NAT'), '$VAR'('NUM'), '$VAR'('INDEP_COLL')]], [genls, '$VAR'('NAT'), '$VAR'('INDEP_COLL_NAT')]])), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( assertedSentence(genlPreds('$VAR'('SPEC'), '$VAR'('PRED'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('SPEC')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[decontextualizedPredicate, '$VAR'('PRED')], [genlPreds, '$VAR'('SPEC'), '$VAR'('PRED')]], [[decontextualizedPredicate, '$VAR'('SPEC')]]], 'BaseKB', ["?PRED", "?SPEC"], [implies, [and, [decontextualizedPredicate, '$VAR'('PRED')], [genlPreds, '$VAR'('SPEC'), '$VAR'('PRED')]], [decontextualizedPredicate, '$VAR'('SPEC')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( assertedSentence(genlPreds('$VAR'('SPEC'), '$VAR'('PRED'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('MT'), '$VAR'('SPEC')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[decontextualizedPredicate, '$VAR'('PRED')], [predicateConventionMt, '$VAR'('PRED'), '$VAR'('MT')], [genlPreds, '$VAR'('SPEC'), '$VAR'('PRED')]], [[predicateConventionMt, '$VAR'('SPEC'), '$VAR'('MT')]]], 'BaseKB', ["?PRED", "?MT", "?SPEC"], [implies, [and, [decontextualizedPredicate, '$VAR'('PRED')], [predicateConventionMt, '$VAR'('PRED'), '$VAR'('MT')], [genlPreds, '$VAR'('SPEC'), '$VAR'('PRED')]], [predicateConventionMt, '$VAR'('SPEC'), '$VAR'('MT')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( assertedSentence(collectionIsaBackchainRequired('$VAR'('PRED'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[collectionIsaBackchainRequired, '$VAR'('PRED')]], [[collectionIsaBackchainEncouraged, '$VAR'('PRED')]]], 'UniversalVocabularyMt', ["?PRED"], [implies, [collectionIsaBackchainRequired, '$VAR'('PRED')], [collectionIsaBackchainEncouraged, '$VAR'('PRED')]])), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( assertedSentence(collectionGenlsBackchainRequired('$VAR'('PRED'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[collectionGenlsBackchainRequired, '$VAR'('PRED')]], [[collectionGenlsBackchainEncouraged, '$VAR'('PRED')]]], 'UniversalVocabularyMt', ["?PRED"], [implies, [collectionGenlsBackchainRequired, '$VAR'('PRED')], [collectionGenlsBackchainEncouraged, '$VAR'('PRED')]])), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( assertedSentence(collectionBackchainRequired('$VAR'('PRED'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[collectionBackchainRequired, '$VAR'('PRED')]], [[collectionBackchainEncouraged, '$VAR'('PRED')]]], 'UniversalVocabularyMt', ["?PRED"], [implies, [collectionBackchainRequired, '$VAR'('PRED')], [collectionBackchainEncouraged, '$VAR'('PRED')]])), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 6, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 6, '$VAR'('COL')]], [[arg6SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 6, '$VAR'('COL')], [arg6SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 5, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 5, '$VAR'('COL')]], [[arg5SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 5, '$VAR'('COL')], [arg5SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 4, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 4, '$VAR'('COL')]], [[arg4SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 4, '$VAR'('COL')], [arg4SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 3, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 3, '$VAR'('COL')]], [[arg3SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 3, '$VAR'('COL')], [arg3SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 2, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 2, '$VAR'('COL')]], [[arg2SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 2, '$VAR'('COL')], [arg2SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( assertedSentence(argSometimesIsa('$VAR'('RELN'), 1, '$VAR'('COL'))), meetsPragmaticRequirement('TheList'('$VAR'('RELN'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[argSometimesIsa, '$VAR'('RELN'), 1, '$VAR'('COL')]], [[arg1SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]]], 'UniversalVocabularyMt', ["?RELN", "?COL"], [implies, [argSometimesIsa, '$VAR'('RELN'), 1, '$VAR'('COL')], [arg1SometimesIsa, '$VAR'('RELN'), '$VAR'('COL')]])), 'UniversalVocabularyMt', vStrMon).

assertedTinyKB_implies( admittedSentence(isa('$VAR'('A'), '$VAR'('B'))), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[elementOf, '$VAR'('A'), '$VAR'('B')]], [[isa, '$VAR'('A'), '$VAR'('B')]]], 'BaseKB', ["?A", "?B"], [implies, [elementOf, '$VAR'('A'), '$VAR'('B')], [isa, '$VAR'('A'), '$VAR'('B')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( admittedSentence(genls('$VAR'('A'), '$VAR'('B'))), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[subsetOf, '$VAR'('A'), '$VAR'('B')]], [[genls, '$VAR'('A'), '$VAR'('B')]]], 'BaseKB', ["?A", "?B"], [implies, [subsetOf, '$VAR'('A'), '$VAR'('B')], [genls, '$VAR'('A'), '$VAR'('B')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( admittedSentence('equalStrings-CaseInsensitive'('$VAR'('A'), '$VAR'('B'))), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[equals, '$VAR'('A'), '$VAR'('B')]], [['equalStrings-CaseInsensitive', '$VAR'('A'), '$VAR'('B')]]], 'BaseKB', ["?A", "?B"], [implies, [equals, '$VAR'('A'), '$VAR'('B')], ['equalStrings-CaseInsensitive', '$VAR'('A'), '$VAR'('B')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( admittedAllArgument('$VAR'('COL'), '$VAR'('NUM'), '$VAR'('RELN')), relationAllInstance('Kappa'('?X'('$VAR'('Y')), admittedArgument('$VAR'('X'), '$VAR'('NUM'), '$VAR'('Y'))), '$VAR'('COL'), '$VAR'('RELN')), 'UniversalVocabularyMt', vStrMon).

assertedTinyKB_implies( and(negationPreds('$VAR'('GENL_PRED'), '$VAR'('NEG_PRED')), genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED'))), negationPreds('$VAR'('NEG_PRED'), '$VAR'('SPEC_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(negationPreds('$VAR'('GENL_PRED'), '$VAR'('NEG_PRED')), genlInverse('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED'))), negationInverse('$VAR'('NEG_PRED'), '$VAR'('SPEC_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(negationInverse('$VAR'('GENL_PRED'), '$VAR'('NEG_PRED')), genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED'))), negationInverse('$VAR'('NEG_PRED'), '$VAR'('SPEC_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(negationInverse('$VAR'('GENL_PRED'), '$VAR'('NEG_PRED')), genlInverse('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED'))), negationPreds('$VAR'('NEG_PRED'), '$VAR'('SPEC_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(minQuantValue('$VAR'('VALUE1'), '$VAR'('VALUE1MIN')), maxQuantValue('$VAR'('VALUE2'), '$VAR'('VALUE2MAX')), greaterThan('$VAR'('VALUE1MIN'), '$VAR'('VALUE2MAX'))), greaterThan('$VAR'('VALUE1'), '$VAR'('VALUE2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(minQuantValue('$VAR'('MORE'), '$VAR'('MOREMIN')), greaterThan('$VAR'('MORE'), '$VAR'('LESS')), maxQuantValue('$VAR'('LESS'), '$VAR'('LESSMAX'))), greaterThan('$VAR'('MOREMIN'), '$VAR'('LESSMAX')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(minQuantValue('$VAR'('INTERVAL1'), '$VAR'('VALUE')), maxQuantValue('$VAR'('INTERVAL2'), '$VAR'('VALUE'))), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(minQuantValue('$VAR'('INTERVAL1'), '$VAR'('MIN')), minQuantValue('$VAR'('INTERVAL2'), '$VAR'('MIN'))), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(maxQuantValue('$VAR'('INTERVAL1'), '$VAR'('MAX1')), minQuantValue('$VAR'('INTERVAL1'), '$VAR'('MIN1')), minQuantValue('$VAR'('INTERVAL2'), '$VAR'('MIN2')), maxQuantValue('$VAR'('INTERVAL2'), '$VAR'('MAX2')), greaterThanOrEqualTo('$VAR'('MAX1'), '$VAR'('MAX2')), greaterThanOrEqualTo('$VAR'('MIN2'), '$VAR'('MIN1'))), quantitySubsumes('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(maxQuantValue('$VAR'('INTERVAL1'), '$VAR'('MAX1')), minQuantValue('$VAR'('INTERVAL1'), '$VAR'('MIN1')), minQuantValue('$VAR'('INTERVAL2'), '$VAR'('MIN2')), greaterThanOrEqualTo('$VAR'('MIN2'), '$VAR'('MIN1')), greaterThanOrEqualTo('$VAR'('MAX1'), '$VAR'('MIN2'))), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(maxQuantValue('$VAR'('INTERVAL1'), '$VAR'('MAX1')), minQuantValue('$VAR'('INTERVAL1'), '$VAR'('MIN1')), maxQuantValue('$VAR'('INTERVAL2'), '$VAR'('MAX2')), greaterThanOrEqualTo('$VAR'('MAX2'), '$VAR'('MIN1')), greaterThanOrEqualTo('$VAR'('MAX1'), '$VAR'('MAX2'))), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(maxQuantValue('$VAR'('INTERVAL1'), '$VAR'('MAX')), maxQuantValue('$VAR'('INTERVAL2'), '$VAR'('MAX'))), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(maxQuantValue('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('VAL'))), minQuantValue('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('VAL')))), equals('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('VAL'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(ist('$VAR'('MT'), not(numericallyEquals('$VAR'('M'), '$VAR'('N')))), ist('$VAR'('MT'), relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('N')))), ist('$VAR'('MT'), not(relationAllExistsCount('$VAR'('REL'), '$VAR'('COL1'), '$VAR'('COL2'), '$VAR'('M')))), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('X'), '$VAR'('COL1')), trueSentence(forAll('$VAR'('Y'), or(isa('$VAR'('Y'), '$VAR'('COL2')), neg(isa('$VAR'('Y'), '$VAR'('COL1'))))))), isa('$VAR'('X'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('UNITPRODUCTFN'), 'UnitOfMeasure'), isa('$VAR'('PERFN'), 'UnitOfMeasure'), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2'))), termOfUnit('$VAR'('UNITPRODUCTFN'), 'UnitProductFn'('$VAR'('PERFN'), '$VAR'('UNIT2')))), equals('$VAR'('UNIT1'), '$VAR'('UNITPRODUCTFN')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('UNIT1'), 'UnitOfMeasure'), isa('$VAR'('UNIT2'), 'UnitOfMeasure'), evaluate('$VAR'('TIMESFN'), 'TimesFn'(holds('$VAR'('UNIT1'), '$VAR'('NUM2')), holds('$VAR'('UNIT2'), '$VAR'('NUM1')))), evaluate('$VAR'('TIMESFN_1'), 'TimesFn'(holds('$VAR'('UNIT1'), '$VAR'('NUM1')), holds('$VAR'('UNIT2'), '$VAR'('NUM2'))))), equals('$VAR'('TIMESFN'), '$VAR'('TIMESFN_1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), quantityIntersects(holds('$VAR'('UNIT'), '$VAR'('NUM1A'), '$VAR'('NUM1B')), holds('$VAR'('UNIT'), '$VAR'('NUM2A'), '$VAR'('NUM2B')))), quantityIntersects('Unity'('$VAR'('NUM1A'), '$VAR'('NUM1B')), 'Unity'('$VAR'('NUM2A'), '$VAR'('NUM2B'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), quantityIntersects(holds('$VAR'('UNIT'), '$VAR'('NUM1')), holds('$VAR'('UNIT'), '$VAR'('NUM2')))), quantityIntersects('$VAR'('NUM1'), '$VAR'('NUM2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), isa(holds('$VAR'('UNIT'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT'), '$VAR'('N')), 'ScalarIntegralValue'), evaluate('$VAR'('TIMESFN'), 'TimesFn'(holds('$VAR'('UNIT'), '$VAR'('M')), holds('$VAR'('UNIT'), '$VAR'('N'))))), isa('$VAR'('TIMESFN'), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), isa(holds('$VAR'('UNIT'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT'), '$VAR'('N')), 'ScalarIntegralValue'), evaluate('$VAR'('PLUSFN'), 'PlusFn'(holds('$VAR'('UNIT'), '$VAR'('M')), holds('$VAR'('UNIT'), '$VAR'('N'))))), isa('$VAR'('PLUSFN'), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), isa(holds('$VAR'('UNIT'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT'), '$VAR'('N')), 'ScalarIntegralValue'), evaluate('$VAR'('DIFFERENCEFN'), 'DifferenceFn'(holds('$VAR'('UNIT'), '$VAR'('M')), holds('$VAR'('UNIT'), '$VAR'('N'))))), isa('$VAR'('DIFFERENCEFN'), 'ScalarIntegralValue'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), greaterThan(holds('$VAR'('UNIT'), '$VAR'('NUM1A'), '$VAR'('NUM1B')), holds('$VAR'('UNIT'), '$VAR'('NUM2A'), '$VAR'('NUM2B')))), greaterThan('Unity'('$VAR'('NUM1A'), '$VAR'('NUM1B')), 'Unity'('$VAR'('NUM2A'), '$VAR'('NUM2B'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), greaterThan(holds('$VAR'('UNIT'), '$VAR'('NUM1')), holds('$VAR'('UNIT'), '$VAR'('NUM2')))), greaterThan('$VAR'('NUM1'), '$VAR'('NUM2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('UNIT'), 'UnitOfMeasure'), equals('$VAR'('QUANT'), holds('$VAR'('UNIT'), '$VAR'('NUM')))), equals('$VAR'('QUANT'), holds('$VAR'('UNIT'), '$VAR'('NUM'), '$VAR'('NUM'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('THING'), '$VAR'('UNIVCOL')), relationAllExists('$VAR'('PRED'), '$VAR'('UNIVCOL'), '$VAR'('EXISTCOL'))), trueSentence(thereExists('$VAR'('OTHER'), and(isa('$VAR'('OTHER'), '$VAR'('EXISTCOL')), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('OTHER'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('THING'), '$VAR'('COL1')), coExtensional('$VAR'('COL1'), '$VAR'('COL2'))), isa('$VAR'('THING'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), relationExistsAll('$VAR'('PRED'), '$VAR'('DEP_COL'), '$VAR'('INDEP_COL'))), isa('RelationExistsAllFn'('$VAR'('TERM'), '$VAR'('PRED'), '$VAR'('DEP_COL'), '$VAR'('INDEP_COL')), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), relationExistsAll('$VAR'('PRED'), '$VAR'('DEP_COL'), '$VAR'('INDEP_COL'))), holds('$VAR'('PRED'), 'RelationExistsAllFn'('$VAR'('TERM'), '$VAR'('PRED'), '$VAR'('DEP_COL'), '$VAR'('INDEP_COL')), '$VAR'('TERM')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), relationAllExists('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), isa('RelationAllExistsFn'('$VAR'('TERM'), '$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), '$VAR'('DEP_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('TERM'), '$VAR'('INDEP_COL')), relationAllExists('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), holds('$VAR'('PRED'), '$VAR'('TERM'), 'RelationAllExistsFn'('$VAR'('TERM'), '$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('SPEC_PRED'), 'ReflexiveBinaryPredicate'), genlInverse('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), different('$VAR'('GENL_PRED'), '$VAR'('SPEC_PRED')), arg1Isa('$VAR'('SPEC_PRED'), '$VAR'('ARG1ISA')), arg2Isa('$VAR'('GENL_PRED'), '$VAR'('ARG1ISA')), arg2Isa('$VAR'('SPEC_PRED'), '$VAR'('ARG2ISA')), arg1Isa('$VAR'('GENL_PRED'), '$VAR'('ARG2ISA'))), isa('$VAR'('GENL_PRED'), 'ReflexiveBinaryPredicate'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('SMALLER_UNIT'), 'UnitOfMeasure'), isa('$VAR'('LARGER_UNIT'), 'UnitOfMeasure'), unitMultiplicationFactor('$VAR'('SMALLER_UNIT'), '$VAR'('LARGER_UNIT'), '$VAR'('N')), evaluate('$VAR'('TIMESFN'), 'TimesFn'('$VAR'('M'), holds('$VAR'('SMALLER_UNIT'), '$VAR'('N'))))), equals('$VAR'('TIMESFN'), holds('$VAR'('LARGER_UNIT'), '$VAR'('M'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('SMALLER_UNIT'), 'UnitOfMeasure'), isa('$VAR'('LARGER_UNIT'), 'UnitOfMeasure'), unitMultiplicationFactor('$VAR'('SMALLER_UNIT'), '$VAR'('LARGER_UNIT'), '$VAR'('N'))), equals(holds('$VAR'('LARGER_UNIT'), 1), holds('$VAR'('SMALLER_UNIT'), '$VAR'('N'))), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('SLOT'), 'IrreflexiveBinaryPredicate'), isa('$VAR'('SLOT'), 'TransitiveBinaryPredicate')), isa('$VAR'('SLOT'), 'AsymmetricBinaryPredicate'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('SLOT'), 'AntiSymmetricBinaryPredicate'), isa('$VAR'('SLOT'), 'IrreflexiveBinaryPredicate')), isa('$VAR'('SLOT'), 'AsymmetricBinaryPredicate'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('SIBDIS_COL'), 'SiblingDisjointCollectionType'), isa('$VAR'('COL1'), '$VAR'('SIBDIS_COL')), isa('$VAR'('COL2'), '$VAR'('SIBDIS_COL'))), or(genls('$VAR'('COL1'), '$VAR'('COL2')), disjointWith('$VAR'('COL1'), '$VAR'('COL2')), siblingDisjointExceptions('$VAR'('COL1'), '$VAR'('COL2')), genls('$VAR'('COL2'), '$VAR'('COL1'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('RELN'), 'MicrotheoryDesignatingRelation'), sentenceDesignationArgnum('$VAR'('RELN'), '$VAR'('NUM'))), argIsa('$VAR'('RELN'), '$VAR'('NUM'), 'CycLSentence-Assertible'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('RELN'), 'MicrotheoryDesignatingRelation'), microtheoryDesignationArgnum('$VAR'('RELN'), '$VAR'('NUM'))), argIsa('$VAR'('RELN'), '$VAR'('NUM'), 'Microtheory'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('RELN'), 'MicrotheoryDesignatingRelation'), isa('$VAR'('RELN'), 'VariableArityRelation'), arityMin('$VAR'('RELN'), '$VAR'('ARITY_MIN'))), greaterThanOrEqualTo('$VAR'('ARITY_MIN'), 2), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('RELN'), 'FixedArityRelation'), isa('$VAR'('RELN'), 'MicrotheoryDesignatingRelation'), arity('$VAR'('RELN'), '$VAR'('ARITY'))), greaterThanOrEqualTo('$VAR'('ARITY'), 2), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('RELN'), 'CommutativeRelation'), arity('$VAR'('RELN'), '$VAR'('ARITY')), integerBetween(0, '$VAR'('M'), '$VAR'('ARITY')), different('$VAR'('M'), '$VAR'('N')), integerBetween(0, '$VAR'('N'), '$VAR'('ARITY'))), commutativeInArgs('$VAR'('RELN'), '$VAR'('M'), '$VAR'('N')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('REL'), 'TransitiveBinaryPredicate'), relationExistsMaxAll('$VAR'('REL'), '$VAR'('TYPE2'), '$VAR'('TYPE3'), 1), relationAllExistsCount('$VAR'('REL'), '$VAR'('TYPE1'), '$VAR'('TYPE2'), '$VAR'('X')), relationAllExistsCount('$VAR'('REL'), '$VAR'('TYPE2'), '$VAR'('TYPE3'), '$VAR'('Y')), evaluate('$VAR'('TIMESFN'), 'TimesFn'('$VAR'('X'), '$VAR'('Y')))), relationAllExistsMin('$VAR'('REL'), '$VAR'('TYPE1'), '$VAR'('TYPE3'), '$VAR'('TIMESFN')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('REL'), 'PartiallyCommutativeRelation'), arity('$VAR'('REL'), '$VAR'('N'))), greaterThanOrEqualTo('$VAR'('N'), 3), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), relationExistsAll('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), relationExistsAll('$VAR'('PRED'), '$VAR'('COL2'), '$VAR'('COL3'))), relationExistsAll('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL3')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), relationAllExists('$VAR'('PRED'), '$VAR'('COL2'), '$VAR'('COL3'))), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL3')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), holdsIn('$VAR'('TIME'), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), holdsIn('$VAR'('TIME'), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG3')))), holdsIn('$VAR'('TIME'), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG3'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('X'), '$VAR'('Y')), holds('$VAR'('PRED'), '$VAR'('Y'), '$VAR'('Z'))), holds('$VAR'('PRED'), '$VAR'('X'), '$VAR'('Z')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TernaryPredicate'), commutativeInArgs('$VAR'('PRED'), 2, 3), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG3'), '$VAR'('ARG2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TernaryPredicate'), commutativeInArgs('$VAR'('PRED'), 1, 3), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'))), holds('$VAR'('PRED'), '$VAR'('ARG3'), '$VAR'('ARG2'), '$VAR'('ARG1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'TernaryPredicate'), commutativeInArgs('$VAR'('PRED'), 1, 2), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'))), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG1'), '$VAR'('ARG3')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG_1'), '$VAR'('ARG_2'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG_2'), '$VAR'('ARG_1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), 'interArgIsa2-1'('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('COL'))), 'interArgIsa1-2'('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), 'interArgIsa1-2'('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('COL'))), 'interArgIsa2-1'('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'ReflexiveBinaryPredicate'), arg1Isa('$VAR'('PRED'), '$VAR'('CONSTRAINT1')), isa('$VAR'('OBJ1'), '$VAR'('CONSTRAINT1')), equals('$VAR'('OBJ1'), '$VAR'('OBJ2'))), holds('$VAR'('PRED'), '$VAR'('OBJ1'), '$VAR'('OBJ2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'ReflexiveBinaryPredicate'), admittedArgument('$VAR'('THING'), 1, '$VAR'('PRED')), admittedArgument('$VAR'('THING'), 2, '$VAR'('PRED')), equals('$VAR'('SAMETHING'), '$VAR'('THING'))), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('SAMETHING')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'ReflexiveBinaryPredicate'), admittedArgument('$VAR'('OBJ'), 1, '$VAR'('PRED')), admittedArgument('$VAR'('OBJ'), 2, '$VAR'('PRED'))), holds('$VAR'('PRED'), '$VAR'('OBJ'), '$VAR'('OBJ')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 3, 4), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG4'), '$VAR'('ARG3')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 2, 4), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG4'), '$VAR'('ARG3'), '$VAR'('ARG2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 2, 3), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG3'), '$VAR'('ARG2'), '$VAR'('ARG4')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 1, 4), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG4'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 1, 3), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG3'), '$VAR'('ARG2'), '$VAR'('ARG1'), '$VAR'('ARG4')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'QuaternaryPredicate'), commutativeInArgs('$VAR'('PRED'), 1, 2), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG1'), '$VAR'('ARG3'), '$VAR'('ARG4')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'IrreflexiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('OBJ1'), '$VAR'('OBJ2'))), different('$VAR'('OBJ1'), '$VAR'('OBJ2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'FixedArityRelation'), arity('$VAR'('PRED'), '$VAR'('ARITY')), genlPreds('$VAR'('SPECPRED'), '$VAR'('PRED'))), arity('$VAR'('SPECPRED'), '$VAR'('ARITY')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'BinaryPredicate'), isa('$VAR'('PRED'), 'CommutativeRelation')), isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('PRED'), 'BinaryPredicate'), arg2Isa('$VAR'('PRED'), '$VAR'('COL2')), requiredArg1Pred('$VAR'('COL1'), '$VAR'('PRED'))), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('POINT1'), 'ScalarPointValue'), minQuantValue('$VAR'('POINT1'), '$VAR'('POINT2'))), equals('$VAR'('POINT1'), '$VAR'('POINT2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('POINT1'), 'ScalarPointValue'), maxQuantValue('$VAR'('POINT1'), '$VAR'('POINT2'))), equals('$VAR'('POINT1'), '$VAR'('POINT2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('OBJECT2'), '$VAR'('TYPE')), holds('$VAR'('RELATION'), '$VAR'('OBJECT1'), '$VAR'('OBJECT2'))), relationInstanceExists('$VAR'('RELATION'), '$VAR'('OBJECT1'), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('OBJECT1'), '$VAR'('TYPE')), holds('$VAR'('RELATION'), '$VAR'('OBJECT1'), '$VAR'('OBJECT2'))), relationExistsInstance('$VAR'('RELATION'), '$VAR'('TYPE'), '$VAR'('OBJECT2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('OBJ_1'), '$VAR'('COMMON_NEAR')), isa('$VAR'('OBJ_2'), '$VAR'('COMMON_NEAR'))), or(nearestCommonIsa('$VAR'('OBJ_1'), '$VAR'('OBJ_2'), '$VAR'('COMMON_NEAR')), elementOf('$VAR'('COMMON_NEAR'), 'TheSetOf'('$VAR'('COMMON_FARTHER'), thereExists('$VAR'('COMMON_FAR'), and(isa('$VAR'('OBJ_1'), '$VAR'('COMMON_FAR')), isa('$VAR'('OBJ_2'), '$VAR'('COMMON_FAR')), genls('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER')), different('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER'))))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('OBJ'), '$VAR'('SUBSET')), genls('$VAR'('SUBSET'), '$VAR'('SUPERSET'))), isa('$VAR'('OBJ'), '$VAR'('SUPERSET')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('OBJ'), '$VAR'('COL_2')), relationExistsAll('$VAR'('PRED'), '$VAR'('COL_1'), '$VAR'('COL_2'))), relationExistsInstance('$VAR'('PRED'), '$VAR'('COL_1'), '$VAR'('OBJ')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('OBJ'), '$VAR'('COL_1')), relationAllExists('$VAR'('PRED'), '$VAR'('COL_1'), '$VAR'('COL_2'))), relationInstanceExists('$VAR'('PRED'), '$VAR'('OBJ'), '$VAR'('COL_2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('OBJ'), '$VAR'('COL')), conceptuallyRelated('$VAR'('COL'), '$VAR'('REL_OBJ'))), conceptuallyRelated('$VAR'('OBJ'), '$VAR'('REL_OBJ')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('NUM'), 'Integer'), isa(holds('$VAR'('UNIT1'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT2'), '$VAR'('N')), 'ScalarIntegralValue'), unitMultiplicationFactor('$VAR'('UNIT1'), '$VAR'('UNIT2'), '$VAR'('NUM')), evaluate('$VAR'('TIMESFN'), 'TimesFn'(holds('$VAR'('UNIT1'), '$VAR'('M')), holds('$VAR'('UNIT2'), '$VAR'('N'))))), isa('$VAR'('TIMESFN'), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('NUM'), 'Integer'), isa(holds('$VAR'('UNIT1'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT2'), '$VAR'('N')), 'ScalarIntegralValue'), unitMultiplicationFactor('$VAR'('UNIT1'), '$VAR'('UNIT2'), '$VAR'('NUM')), evaluate('$VAR'('PLUSFN'), 'PlusFn'(holds('$VAR'('UNIT1'), '$VAR'('M')), holds('$VAR'('UNIT2'), '$VAR'('N'))))), isa('$VAR'('PLUSFN'), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('NUM'), 'Integer'), isa(holds('$VAR'('UNIT1'), '$VAR'('M')), 'ScalarIntegralValue'), isa(holds('$VAR'('UNIT2'), '$VAR'('N')), 'ScalarIntegralValue'), unitMultiplicationFactor('$VAR'('UNIT1'), '$VAR'('UNIT2'), '$VAR'('NUM')), evaluate('$VAR'('DIFFERENCEFN'), 'DifferenceFn'(holds('$VAR'('UNIT1'), '$VAR'('M')), holds('$VAR'('UNIT2'), '$VAR'('N'))))), isa('$VAR'('DIFFERENCEFN'), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('N'), 'PositiveInteger'), greaterThanOrEqualTo('$VAR'('N'), '$VAR'('ARGNUM')), greaterThanOrEqualTo('$VAR'('ARITY'), '$VAR'('N')), arity('$VAR'('RELN'), '$VAR'('ARITY')), canonicalizerDirectiveForArgAndRest('$VAR'('RELN'), '$VAR'('ARGNUM'), '$VAR'('DIRECTIVE'))), canonicalizerDirectiveForArg('$VAR'('RELN'), '$VAR'('N'), '$VAR'('DIRECTIVE')), 'CoreCycLImplementationMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('N'), 'PositiveInteger'), greaterThanOrEqualTo('$VAR'('ARITY'), '$VAR'('N')), arity('$VAR'('RELN'), '$VAR'('ARITY')), canonicalizerDirectiveForAllArgs('$VAR'('RELN'), '$VAR'('DIRECTIVE'))), canonicalizerDirectiveForArg('$VAR'('RELN'), '$VAR'('N'), '$VAR'('DIRECTIVE')), 'CoreCycLImplementationMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('M'), 'PositiveInteger'), isa('$VAR'('N'), 'PositiveInteger'), different('$VAR'('M'), '$VAR'('N'), 1)), interArgDifferent(commutativeInArgs, '$VAR'('M'), '$VAR'('N')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('LOW'), 'ScalarPointValue'), isa('$VAR'('UNIT'), 'UnitOfMeasure')), minQuantValue(holds('$VAR'('UNIT'), '$VAR'('LOW'), '$VAR'('HIGH')), holds('$VAR'('UNIT'), '$VAR'('LOW'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INTERVAL1'), 'ScalarPointValue'), isa('$VAR'('INTERVAL2'), 'ScalarPointValue'), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2'))), numericallyEquals('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INTERVAL1'), 'ScalarInterval'), isa('$VAR'('INTERVAL2'), 'ScalarInterval'), equals('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2'))), numericallyEquals('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INT'), 'Integer'), isa('$VAR'('UNIT'), 'UnitOfMeasure')), isa(holds('$VAR'('UNIT'), '$VAR'('INT')), 'ScalarIntegralValue'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('INST_UNIV'), '$VAR'('UNIV_COL')), relationAllExistsCount('$VAR'('REL'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), '$VAR'('NUM'))), trueSentence(thereExistExactly('$VAR'('NUM'), '$VAR'('INST_EXIST'), and(isa('$VAR'('INST_EXIST'), '$VAR'('EXIST_COL')), holds('$VAR'('REL'), '$VAR'('INST_UNIV'), '$VAR'('INST_EXIST'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INST'), '$VAR'('COL2')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('INST'))), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('INST'), '$VAR'('COL')), relationInstanceAll('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COL'))), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('INST')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INST'), '$VAR'('COL')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING'))), trueSentence(holds('$VAR'('PRED'), '$VAR'('INST'), '$VAR'('THING'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INST'), '$VAR'('COL')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING'))), holds('$VAR'('PRED'), '$VAR'('INST'), '$VAR'('THING')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INST'), '$VAR'('COL')), admittedAllArgument('$VAR'('COL'), '$VAR'('NUM'), '$VAR'('RELN'))), admittedArgument('$VAR'('INST'), '$VAR'('NUM'), '$VAR'('RELN')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('INS1'), tPred), isa('$VAR'('INS2'), 'SymmetricBinaryPredicate'), isa('$VAR'('INS3'), 'PositiveInteger'), transitiveViaArgInverse('$VAR'('INS1'), '$VAR'('INS2'), '$VAR'('INS3'))), transitiveViaArg('$VAR'('INS1'), '$VAR'('INS2'), '$VAR'('INS3')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INS1'), tPred), isa('$VAR'('INS2'), 'SymmetricBinaryPredicate'), isa('$VAR'('INS3'), 'PositiveInteger'), transitiveViaArg('$VAR'('INS1'), '$VAR'('INS2'), '$VAR'('INS3'))), transitiveViaArgInverse('$VAR'('INS1'), '$VAR'('INS2'), '$VAR'('INS3')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INS'), '$VAR'('SPEC')), genls('$VAR'('SPEC'), '$VAR'('GENL'))), isa('$VAR'('INS'), '$VAR'('GENL')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('INS'), '$VAR'('COLL')), relationAllInstance(quotedIsa, '$VAR'('COLL'), '$VAR'('QUOTED_COLL'))), quotedIsa('$VAR'('INS'), '$VAR'('QUOTED_COLL')), 'BookkeepingMt', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INS'), '$VAR'('COL')), trueSentence(holds('$VAR'('PRED'), '$VAR'('INS'), '$VAR'('VALUE')))), relationExistsInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('VALUE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), holds('$VAR'('PRED'), '$VAR'('DEP_INS'), '$VAR'('INDEP_INS')), 'interArgIsa2-1'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa5-4'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('DEP_INS'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa5-3'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_4'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa5-2'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_3'), '$VAR'('ANY_ARG_4'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa5-1'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('ANY_ARG_4'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa4-5'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('INDEP_INS'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa4-3'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('DEP_INS'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa4-2'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_3'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa4-1'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa3-5'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('INDEP_INS'), '$VAR'('ANY_ARG_4'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa3-4'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('ANY_ARG_2'), '$VAR'('INDEP_INS'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa3-2'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('DEP_INS'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa3-1'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('DEP_INS'), '$VAR'('ANY_ARG_2'), '$VAR'('INDEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa2-5'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('INDEP_INS'), '$VAR'('ANY_ARG_3'), '$VAR'('ANY_ARG_4'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa2-4'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('INDEP_INS'), '$VAR'('ANY_ARG_3'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa2-3'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('ANY_ARG_1'), '$VAR'('INDEP_INS'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa1-5'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('INDEP_INS'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('ANY_ARG_4'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa1-4'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), holds('$VAR'('PRED'), '$VAR'('INDEP_INS'), '$VAR'('ANY_ARG_2'), '$VAR'('ANY_ARG_3'), '$VAR'('DEP_INS'))), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arityMax('$VAR'('RELN'), '$VAR'('MAX')), arityMin('$VAR'('RELN'), '$VAR'('MIN'))), greaterThanOrEqualTo('$VAR'('MAX'), '$VAR'('MIN')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arity('$VAR'('RELN'), 5), isa('$VAR'('RELN'), 'CommutativeRelation')), commutativeInArgs('$VAR'('RELN'), 1, 2, 3, 4, 5), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arity('$VAR'('RELN'), 4), isa('$VAR'('RELN'), 'CommutativeRelation')), commutativeInArgs('$VAR'('RELN'), 1, 2, 3, 4), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arity('$VAR'('RELN'), 3), isa('$VAR'('RELN'), 'CommutativeRelation')), commutativeInArgs('$VAR'('RELN'), 1, 2, 3), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arity('$VAR'('RELN'), 2), isa('$VAR'('RELN'), 'CommutativeRelation')), commutativeInArgs('$VAR'('RELN'), 1, 2), 'BaseKB', vStrMon).

assertedTinyKB_implies( and(arity('$VAR'('PRED1'), '$VAR'('ARITY')), arity('$VAR'('PRED2'), '$VAR'('ARITY')), disjointWith('$VAR'('TYPE1'), '$VAR'('TYPE2')), argIsa('$VAR'('PRED1'), '$VAR'('ARG'), '$VAR'('TYPE1')), argIsa('$VAR'('PRED2'), '$VAR'('ARG'), '$VAR'('TYPE2'))), negationPreds('$VAR'('PRED1'), '$VAR'('PRED2')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(elInverse('$VAR'('PRED'), '$VAR'('INVERSE')), arg2Isa('$VAR'('PRED'), '$VAR'('COL'))), arg1Isa('$VAR'('INVERSE'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(elInverse('$VAR'('PRED'), '$VAR'('INVERSE')), arg2Genl('$VAR'('PRED'), '$VAR'('COL'))), arg1Genl('$VAR'('INVERSE'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(elInverse('$VAR'('PRED'), '$VAR'('INVERSE')), arg1Isa('$VAR'('PRED'), '$VAR'('COL'))), arg2Isa('$VAR'('INVERSE'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(elInverse('$VAR'('PRED'), '$VAR'('INVERSE')), arg1Genl('$VAR'('PRED'), '$VAR'('COL'))), arg2Genl('$VAR'('INVERSE'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('CONNECT'), 'LogicalConnective'), isa('$VAR'('CONNECT'), 'VariableArityRelation')), argsQuotedIsa('$VAR'('CONNECT'), 'CycLSentence-Assertible'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('CONNECT'), 'FixedArityRelation'), isa('$VAR'('CONNECT'), 'LogicalConnective'), arity('$VAR'('CONNECT'), '$VAR'('ARITY')), isa('$VAR'('ARG_N_QUOTED_ISA'), 'ArgQuotedIsaBinaryPredicate'), constrainsArg('$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('N')), integerBetween(1, '$VAR'('N'), '$VAR'('ARITY'))), holds('$VAR'('ARG_N_QUOTED_ISA'), '$VAR'('CONNECT'), 'CycLSentence-Assertible'), 'BaseKB', vStrMon).
assertedTinyKB_not_first(and(scopingArg('$VAR'('RELN'), '$VAR'('N')), arity('$VAR'('RELN'), '$VAR'('ARITY')), greaterThan('$VAR'('N'), '$VAR'('ARITY'))), 'BaseKB', vStrDef).
assertedTinyKB_not_first(and(resultGenlArg('$VAR'('FUNC'), '$VAR'('ARGNUM')), arity('$VAR'('FUNC'), '$VAR'('ARITY')), greaterThan('$VAR'('ARGNUM'), '$VAR'('ARITY'))), 'BaseKB', vStrMon).
assertedTinyKB_not_first(and(omitArgIsa('$VAR'('RELN'), '$VAR'('N')), argIsa('$VAR'('RELN'), '$VAR'('N'), '$VAR'('_THING'))), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(and(notAssertible('$VAR'('PRED')), isa('$VAR'('PRED'), 'DistributingMetaKnowledgePredicate')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(and(backchainForbiddenWhenUnboundInArg('$VAR'('PRED'), '$VAR'('N')), arity('$VAR'('PRED'), '$VAR'('M')), greaterThan('$VAR'('N'), '$VAR'('M'))), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not_first(and(arity('$VAR'('REL'), 1), commutativeInArgsAndRest('$VAR'('REL'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not_first(and(arity('$VAR'('REL'), 1), commutativeInArgs('$VAR'('REL'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, resultIsa, 'UnitOfMeasure', 'ScalarInterval', 'UniversalVocabularyMt', vStrMon).

exactlyAssertedEL(equiv, arity('$VAR'('REL'), 4), isa('$VAR'('REL'), 'QuaternaryRelation'), 'BaseKB', vStrMon).
exactlyAssertedEL(equiv, arity('$VAR'('REL'), 3), isa('$VAR'('REL'), 'TernaryRelation'), 'BaseKB', vStrDef).
exactlyAssertedEL(equiv, arity('$VAR'('REL'), 2), isa('$VAR'('REL'), 'BinaryRelation'), 'BaseKB', vStrMon).
assertedTinyKB_implies_first( and(resultIsa('$VAR'('F'), '$VAR'('COL')), termOfUnit('$VAR'('U'), '$VAR'('F'))), isa('$VAR'('U'), '$VAR'('COL')), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, genls, implies(isa('$VAR'('OBJ'), (':ARG1')), isa('$VAR'('OBJ'), (':ARG2'))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, resultIsa, implies(equals('$VAR'('VALUE'), 'NART'([(':ARG1'), '?ARGS'])), isa('$VAR'('VALUE'), (':ARG2'))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, resultGenl, implies(equals('$VAR'('VALUE'), 'NART'([(':ARG1'), '?ARGS'])), genls('$VAR'('VALUE'), (':ARG2'))), 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, resultIsa, 'UnitOfMeasure', 'ScalarInterval', 'UniversalVocabularyMt', vStrMon).




assertedTinyKB_implies( and(isa('$VAR'('HIGH'), 'ScalarPointValue'), isa('$VAR'('LOW'), 'ScalarPointValue'), isa('$VAR'('UNIT'), 'UnitOfMeasure')), maxQuantValue(holds('$VAR'('UNIT'), '$VAR'('LOW'), '$VAR'('HIGH')), holds('$VAR'('UNIT'), '$VAR'('HIGH'))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('FUNCTION'), tFunction), quotedIsa('$VAR'('FUNCTION'), 'CycLConstant')), or(isa('$VAR'('FUNCTION'), 'ReifiableFunction'), isa('$VAR'('FUNCTION'), 'UnreifiableFunction')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('FUNC'), tFunction), arity('$VAR'('FUNC'), 5)), isa('$VAR'('FUNC'), 'QuintaryFunction'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('FUNC'), 'AssociativeRelation'), isa('$VAR'('FUNC'), tFunction), resultIsa('$VAR'('FUNC'), '$VAR'('RESULTCOL')), argIsa('$VAR'('FUNC'), '$VAR'('_N'), '$VAR'('ARGCOL'))), genls('$VAR'('RESULTCOL'), '$VAR'('ARGCOL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('FUNC'), 'AssociativeRelation'), isa('$VAR'('FUNC'), tFunction), argIsa('$VAR'('FUNC'), '$VAR'('_N'), '$VAR'('ARGCOL'))), argIsa('$VAR'('FUNC'), '$VAR'('_M'), '$VAR'('ARGCOL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('FUNC'), 'AssociativeRelation'), isa('$VAR'('FUNC'), 'BinaryFunction')), equals(holds('$VAR'('FUNC'), '$VAR'('THING1'), holds('$VAR'('FUNC'), '$VAR'('THING2'), '$VAR'('THING3'))), holds('$VAR'('FUNC'), '$VAR'('THING3'), holds('$VAR'('FUNC'), '$VAR'('THING1'), '$VAR'('THING2')))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('FUN'), tFunction), arity('$VAR'('FUN'), 2)), isa('$VAR'('FUN'), 'BinaryFunction'), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('DIS_COL_TYPE'), 'DisjointCollectionType'), isa('$VAR'('COL1'), '$VAR'('DIS_COL_TYPE')), isa('$VAR'('COL2'), '$VAR'('DIS_COL_TYPE')), different('$VAR'('COL1'), '$VAR'('COL2'))), disjointWith('$VAR'('COL1'), '$VAR'('COL2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('COL'), tCol), isa('$VAR'('RELN'), 'BinaryPredicate'), overlappingExternalConcept('$VAR'('RELN'), '$VAR'('SOURCE'), '$VAR'('STRING')), overlappingExternalConcept('$VAR'('COL'), '$VAR'('SOURCE'), '$VAR'('STRING'))), extConceptOverlapsColAndReln('$VAR'('COL'), '$VAR'('RELN'), '$VAR'('SOURCE'), '$VAR'('STRING')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('BPRED'), 'SymmetricBinaryPredicate'), transitiveViaArgInverse('$VAR'('PRED'), '$VAR'('BPRED'), '$VAR'('N'))), transitiveViaArg('$VAR'('PRED'), '$VAR'('BPRED'), '$VAR'('N')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('BPRED'), 'SymmetricBinaryPredicate'), transitiveViaArg('$VAR'('PRED'), '$VAR'('BPRED'), '$VAR'('N'))), transitiveViaArgInverse('$VAR'('PRED'), '$VAR'('BPRED'), '$VAR'('N')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('BINPRED'), 'BinaryPredicate'), arg1Isa('$VAR'('BINPRED'), '$VAR'('COL2')), requiredArg2Pred('$VAR'('COL1'), '$VAR'('BINPRED'))), relationExistsAll('$VAR'('BINPRED'), '$VAR'('COL2'), '$VAR'('COL1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('ARG_ISA_PRED'), 'ArgIsaBinaryPredicate'), constrainsArg('$VAR'('ARG_ISA_PRED'), '$VAR'('N')), preservesGenlsInArg('$VAR'('FUNC'), '$VAR'('N'))), holds('$VAR'('ARG_ISA_PRED'), '$VAR'('FUNC'), tCol), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ARG_ISA'), 'ArgIsaBinaryPredicate'), constrainsArg('$VAR'('ARG_ISA'), '$VAR'('NUM'))), trueRule('NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(holds('$VAR'('ARG_ISA'), '$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), '$VAR'('NUM'), '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), '$VAR'('NUM'), '$VAR'('COL')), holds('$VAR'('ARG_ISA'), '$VAR'('RELN'), '$VAR'('COL'))))), 'CoreCycLMt', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('ARG2'), '$VAR'('UNIV_COL')), relationExistsMinAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL'), '$VAR'('NUM'))), trueSentence(thereExistAtLeast('$VAR'('NUM'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), '$VAR'('EXIST_COL')), holds('$VAR'('SLOT'), '$VAR'('ARG'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ARG2'), '$VAR'('UNIV_COL')), relationExistsMaxAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL'), '$VAR'('NUM'))), trueSentence(thereExistAtMost('$VAR'('NUM'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), '$VAR'('EXIST_COL')), holds('$VAR'('SLOT'), '$VAR'('ARG'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ARG2'), '$VAR'('UNIV_COL')), relationExistsCountAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL'), '$VAR'('NUM'))), trueSentence(thereExistExactly('$VAR'('NUM'), '$VAR'('ARG1'), and(isa('$VAR'('ARG1'), '$VAR'('EXIST_COL')), holds('$VAR'('SLOT'), '$VAR'('ARG1'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ARG1'), '$VAR'('UNIV_COL')), relationAllExistsMin('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), '$VAR'('NUM'))), trueSentence(thereExistAtLeast('$VAR'('NUM'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), '$VAR'('EXIST_COL')), holds('$VAR'('SLOT'), '$VAR'('ARG1'), '$VAR'('ARG'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ARG1'), '$VAR'('UNIV_COL')), relationAllExistsMax('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), '$VAR'('NUM'))), trueSentence(thereExistAtMost('$VAR'('NUM'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), '$VAR'('EXIST_COL')), holds('$VAR'('SLOT'), '$VAR'('ARG1'), '$VAR'('ARG'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('ALL_INST'), '$VAR'('ALL_COL')), relationAllExists('$VAR'('PRED'), '$VAR'('ALL_COL'), '$VAR'('EX_COL'))), trueSentence(thereExists('$VAR'('EX_INST'), and(isa('$VAR'('EX_INST'), '$VAR'('EX_COL')), holds('$VAR'('PRED'), '$VAR'('ALL_INST'), '$VAR'('EX_INST'))))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(isa('$VAR'('_ANY'), '$VAR'('COL')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('INST'))), relationExistsInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('INST')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(holds('$VAR'('PRED'), '$VAR'('ARG1')), genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(greaterThanOrEqualTo(5, '$VAR'('N')), arg6Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg5Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo(4, '$VAR'('N')), arg5Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg4Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo(3, '$VAR'('N')), arg4Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg3Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo(2, '$VAR'('N')), arg3Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg2Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo(1, '$VAR'('N')), arg2Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg1Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo('$VAR'('N'), '$VAR'('ARGNUM')), argAndRestIsa('$VAR'('PRED'), '$VAR'('ARGNUM'), '$VAR'('COL'))), argIsa('$VAR'('PRED'), '$VAR'('N'), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThanOrEqualTo('$VAR'('MAX'), '$VAR'('MIN')), maxQuantValue('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('MAX'))), minQuantValue('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('MIN')))), equals('$VAR'('ATT'), holds('$VAR'('UNIT'), '$VAR'('MIN'), '$VAR'('MAX'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(greaterThan('$VAR'('NUM'), 0), relationExistsMinAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL'), '$VAR'('NUM'))), relationExistsAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('NUM'), 0), relationExistsCountAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL'), '$VAR'('NUM'))), relationExistsAll('$VAR'('SLOT'), '$VAR'('EXIST_COL'), '$VAR'('UNIV_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('NUM'), 0), relationAllExistsMin('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), '$VAR'('NUM'))), relationAllExists('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('NUM'), 0), relationAllExistsCount('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), '$VAR'('NUM'))), relationAllExists('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('NUM'), 0), greaterThanOrEqualTo('$VAR'('ARITY'), '$VAR'('NUM')), arity('$VAR'('FN'), '$VAR'('ARITY')), resultIsa('$VAR'('FN'), '$VAR'('COLL'))), interArgResultIsa('$VAR'('FN'), '$VAR'('NUM'), 'Thing', '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('N'), 5), arg5Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg5Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('N'), 4), arg4Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg4Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('N'), 3), arg3Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg3Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('N'), 2), arg2Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg2Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('N'), 1), arg1Isa('$VAR'('PRED'), '$VAR'('TYPE'))), arg1Isa('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(greaterThan('$VAR'('BIGGER'), '$VAR'('SMALLER')), relationAllInstance(greaterThanOrEqualTo, '$VAR'('COL'), '$VAR'('BIGGER'))), relationAllInstance(greaterThan, '$VAR'('COL'), '$VAR'('SMALLER')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('X'), 'larkc-Plugin'), 'larkc-hasOutputType'('$VAR'('X'), '$VAR'('TYPE')), genls('$VAR'('TYPE'), '$VAR'('TYPE1')), 'larkc-hasInputType'('$VAR'('Y'), '$VAR'('TYPE1')), genls('$VAR'('Y'), 'larkc-Plugin')), 'larkc-pluginByDataConnectsTo'('$VAR'('X'), '$VAR'('Y')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('X'), '$VAR'('Y')), genls('$VAR'('Y'), '$VAR'('Z'))), genls('$VAR'('X'), '$VAR'('Z')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('SPEC'), '$VAR'('COL2')), different('$VAR'('COL2'), '$VAR'('SPEC')), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('SPEC'))), abnormal('TheList'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [[relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]]], 'BaseKB', ["?PRED", "?COL1", "?COL2"], [implies, [and, [arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('SPEC'), '$VAR'('COL')), defnNecessary('$VAR'('COL'), '$VAR'('DEFN'))), defnNecessary('$VAR'('SPEC'), '$VAR'('DEFN')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('SPEC'), '$VAR'('COL')), conceptuallyRelated('$VAR'('COL'), '$VAR'('REL_OBJ'))), conceptuallyRelated('$VAR'('SPEC'), '$VAR'('REL_OBJ')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('INDEP_SPEC'), '$VAR'('INDEP_COL')), holds('$VAR'('PRED'), '$VAR'('INDEP_SPEC'), '$VAR'('DEP_SPEC')), 'interArgGenl1-2'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL'))), genls('$VAR'('DEP_SPEC'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('COL_1'), '$VAR'('DIFF_NEAR')), different('$VAR'('COL_1'), '$VAR'('DIFF_NEAR'))), or(elementOf('$VAR'('COL_2'), 'TheSetOf'('$VAR'('ITEM_1'), genls('$VAR'('ITEM_1'), '$VAR'('DIFF_NEAR')))), nearestDifferentGenls('$VAR'('COL_1'), '$VAR'('COL_2'), '$VAR'('DIFF_NEAR')), elementOf('$VAR'('DIFF_NEAR'), 'TheSetOf'('$VAR'('DIFF_FARTHER'), thereExists('$VAR'('DIFF_FAR'), and(genls('$VAR'('COL_1'), '$VAR'('DIFF_FAR')), genls('$VAR'('DIFF_FAR'), '$VAR'('DIFF_FARTHER')), different('$VAR'('COL_1'), '$VAR'('DIFF_FAR')), different('$VAR'('DIFF_FAR'), '$VAR'('DIFF_FARTHER')), not(elementOf('$VAR'('COL_2'), 'TheSetOf'('$VAR'('ITEM_2'), genls('$VAR'('ITEM_2'), '$VAR'('DIFF_FAR'))))), not(elementOf('$VAR'('COL_2'), 'TheSetOf'('$VAR'('ITEM_3'), genls('$VAR'('ITEM_3'), '$VAR'('DIFF_FARTHER')))))))))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('COL_1'), '$VAR'('COMMON_NEAR')), different('$VAR'('COL_1'), '$VAR'('COMMON_NEAR')), genls('$VAR'('COL_2'), '$VAR'('COMMON_NEAR')), different('$VAR'('COL_2'), '$VAR'('COMMON_NEAR'))), or(nearestCommonGenls('$VAR'('COL_1'), '$VAR'('COL_2'), '$VAR'('COMMON_NEAR')), elementOf('$VAR'('COMMON_NEAR'), 'TheSetOf'('$VAR'('COMMON_FARTHER'), thereExists('$VAR'('COMMON_FAR'), and(genls('$VAR'('COL_1'), '$VAR'('COMMON_FAR')), genls('$VAR'('COL_2'), '$VAR'('COMMON_FAR')), genls('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER')), different('$VAR'('COL_1'), '$VAR'('COMMON_FAR')), different('$VAR'('COL_2'), '$VAR'('COMMON_FAR')), different('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER'))))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('COL2'), '$VAR'('COL3')), arg2Isa('$VAR'('PRED'), '$VAR'('COL3'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [[relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]]], 'BaseKB', ["?PRED", "?COL1", "?COL2"], [implies, [and, [arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('COL1'), '$VAR'('GENL')), different('$VAR'('COL1'), '$VAR'('GENL')), relationAllExists('$VAR'('PRED'), '$VAR'('GENL'), '$VAR'('COL2'))), abnormal('TheList'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [[relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]]], 'BaseKB', ["?PRED", "?COL1", "?COL2"], [implies, [and, [arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('COL1'), '$VAR'('COL2')), genls('$VAR'('COL2'), '$VAR'('COL1'))), coExtensional('$VAR'('COL1'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('COL'), '$VAR'('NEAR_COL')), different('$VAR'('COL'), '$VAR'('NEAR_COL')), unknownSentence(thereExists('$VAR'('BETWEEN'), and(genls('$VAR'('BETWEEN'), '$VAR'('NEAR_COL')), genls('$VAR'('COL'), '$VAR'('BETWEEN')), different('$VAR'('BETWEEN'), '$VAR'('COL'), '$VAR'('NEAR_COL')))))), nearestGenls('$VAR'('COL'), '$VAR'('NEAR_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genls('$VAR'('COL'), '$VAR'('GENL')), defnSufficient('$VAR'('COL'), '$VAR'('DEFN'))), defnSufficient('$VAR'('GENL'), '$VAR'('DEFN')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genls('$VAR'('ARGS_5'), '$VAR'('ARGS_6')), genls('$VAR'('ARGS_6'), '$VAR'('ARGS_5'))), coExtensional('$VAR'('ARGS_5'), '$VAR'('ARGS_6')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('PRED')), genls('$VAR'('EXISTS_SPEC'), '$VAR'('EXISTS_COL')), genls('$VAR'('ALL_SPEC'), '$VAR'('ALL_COL')), greaterThanOrEqualTo('$VAR'('MORE'), '$VAR'('MAX')), relationExistsMaxAll('$VAR'('PRED'), '$VAR'('EXISTS_COL'), '$VAR'('ALL_COL'), '$VAR'('MAX'))), relationExistsMaxAll('$VAR'('SPEC_PRED'), '$VAR'('EXISTS_SPEC'), '$VAR'('ALL_SPEC'), '$VAR'('MORE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('PRED')), genlInverse('$VAR'('PRED'), '$VAR'('GENL_PRED'))), genlInverse('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('PRED')), different('$VAR'('PRED'), '$VAR'('SPEC_PRED')), relationAllExists('$VAR'('SPEC_PRED'), '$VAR'('COL1'), '$VAR'('COL2'))), abnormal('TheList'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [[relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]]], 'BaseKB', ["?PRED", "?COL1", "?COL2"], [implies, [and, [arity, '$VAR'('PRED'), 2], [requiredArg1Pred, '$VAR'('COL1'), '$VAR'('PRED')], ['interArgIsa1-2', '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]], [relationAllExists, '$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), unknownSentence(thereExists('$VAR'('DIR'), reformulationDirectionInMode('$VAR'('DIR'), '$VAR'('MODE'), '$VAR'('RULE')))), defaultReformulationDirectionInModeForPred('$VAR'('DEFAULT_DIR'), '$VAR'('MODE'), '$VAR'('GENL_PRED')), evaluate('$VAR'('SPEC_PRED'), 'FormulaArgFn'(0, '$VAR'('RULE')))), reformulationDirectionInMode('$VAR'('DEFAULT_DIR'), '$VAR'('MODE'), '$VAR'('RULE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), relationAllExists('$VAR'('SPEC_PRED'), '$VAR'('COL_1'), '$VAR'('COL_2'))), relationAllExists('$VAR'('GENL_PRED'), '$VAR'('COL_1'), '$VAR'('COL_2')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), relationAll('$VAR'('SPEC_PRED'), '$VAR'('COL'))), relationAll('$VAR'('GENL_PRED'), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), different('$VAR'('GENL_PRED'), '$VAR'('SPEC_PRED')), relationInstanceAll('$VAR'('SPEC_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), relationInstanceAll('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), different('$VAR'('GENL_PRED'), '$VAR'('SPEC_PRED')), relationAllInstance('$VAR'('SPEC_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), relationAllInstance('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('SPEC'), '$VAR'('GENL')), fanOutArg('$VAR'('GENL'), '$VAR'('ARG_NUM'))), fanOutArg('$VAR'('SPEC'), '$VAR'('ARG_NUM')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(genlPreds('$VAR'('PRED'), '$VAR'('NEAR_PRED')), different('$VAR'('NEAR_PRED'), '$VAR'('PRED')), unknownSentence(thereExists('$VAR'('BETWEEN'), and(genlPreds('$VAR'('BETWEEN'), '$VAR'('NEAR_PRED')), genlPreds('$VAR'('PRED'), '$VAR'('BETWEEN')), different('$VAR'('BETWEEN'), '$VAR'('NEAR_PRED'), '$VAR'('PRED')))))), nearestGenlPreds('$VAR'('PRED'), '$VAR'('NEAR_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'), '$VAR'('ARG5'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'), '$VAR'('ARG5')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), holds('$VAR'('GENL_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlMt('$VAR'('X'), '$VAR'('Y')), genlMt('$VAR'('Y'), '$VAR'('Z'))), genlMt('$VAR'('X'), '$VAR'('Z')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_implies( and(genlMt('$VAR'('MT_1'), '$VAR'('COMMON_NEAR')), different('$VAR'('COMMON_NEAR'), '$VAR'('MT_1')), different('$VAR'('COMMON_NEAR'), '$VAR'('MT_2')), genlMt('$VAR'('MT_2'), '$VAR'('COMMON_NEAR'))), or(nearestCommonGenlMt('$VAR'('MT_1'), '$VAR'('MT_2'), '$VAR'('COMMON_NEAR')), elementOf('$VAR'('COMMON_NEAR'), 'TheSetOf'('$VAR'('COMMON_FARTHER'), thereExists('$VAR'('COMMON_FAR'), and(genlMt('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER')), genlMt('$VAR'('MT_1'), '$VAR'('COMMON_FAR')), genlMt('$VAR'('MT_2'), '$VAR'('COMMON_FAR')), different('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER')), different('$VAR'('COMMON_FAR'), '$VAR'('MT_1')), different('$VAR'('COMMON_FAR'), '$VAR'('MT_2'))))))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlInverse('$VAR'('SPEC_PRED'), '$VAR'('PRED')), genlPreds('$VAR'('PRED'), '$VAR'('GENL_PRED'))), genlInverse('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlInverse('$VAR'('SPEC_PRED'), '$VAR'('PRED')), genlInverse('$VAR'('PRED'), '$VAR'('GENL_PRED'))), genlPreds('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlInverse('$VAR'('PRED'), '$VAR'('INVERSE')), relationExistsAll('$VAR'('PRED'), '$VAR'('TYPE1'), '$VAR'('TYPE2'))), relationAllExists('$VAR'('INVERSE'), '$VAR'('TYPE2'), '$VAR'('TYPE1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(genlInverse('$VAR'('PRED'), '$VAR'('GENL_INV_PRED')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), holds('$VAR'('GENL_INV_PRED'), '$VAR'('ARG2'), '$VAR'('ARG1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(evaluationResultQuotedIsa('$VAR'('FUNCTION'), '$VAR'('Q_COL')), 'genls-SpecDenotesGenlInstances'('$VAR'('Q_COL'), '$VAR'('COL'))), resultIsa('$VAR'('FUNCTION'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(evaluate('$VAR'('TIMESFN'), 'TimesFn'(holds('$VAR'('UNIT2'), 1), holds('$VAR'('UNIT1'), '$VAR'('N')))), termOfUnit('$VAR'('UNITPRODUCTFN'), 'UnitProductFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('TIMESFN'), holds('$VAR'('UNITPRODUCTFN'), '$VAR'('N'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(evaluate('$VAR'('TERM'), 'FormulaArgFn'('$VAR'('ARG'), '$VAR'('NAT'))), termOfUnit('$VAR'('NAT'), '$VAR'('FORMULA'))), natArgument('$VAR'('NAT'), '$VAR'('ARG'), '$VAR'('TERM')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(evaluate('$VAR'('QUOTIENTFN'), 'QuotientFn'(holds('$VAR'('UNIT1'), '$VAR'('N')), holds('$VAR'('UNIT2'), 1))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('QUOTIENTFN'), holds('$VAR'('PERFN'), '$VAR'('N'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(evaluate('$VAR'('QUOTIENTFN'), 'QuotientFn'(holds('$VAR'('UNIT1'), '$VAR'('M'), '$VAR'('N')), holds('$VAR'('UNIT2'), 1))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('QUOTIENTFN'), holds('$VAR'('PERFN'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrMon).

assertedTinyKB_implies( and(evaluate('$VAR'('FUNCTION'), 'FormulaArgFn'(0, '$VAR'('NAT'))), termOfUnit('$VAR'('NAT'), '$VAR'('FORMULA'))), natFunction('$VAR'('NAT'), '$VAR'('FUNCTION')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(evaluate('$VAR'('ARGS_LIST'), 'FormulaArgListFn'('$VAR'('NAT1'))), evaluate('$VAR'('ARGS_LIST'), 'FormulaArgListFn'('$VAR'('NAT2'))), termOfUnit('$VAR'('NAT1'), '$VAR'('FORMULA1')), termOfUnit('$VAR'('NAT2'), '$VAR'('FORMULA2'))), natArgumentsEqual('$VAR'('NAT1'), '$VAR'('NAT2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(evaluate('$VAR'('ARG'), 'FormulaArgFn'('$VAR'('N'), '$VAR'('NAT'))), termOfUnit('$VAR'('NAT'), '$VAR'('FORMULA'))), termDependsOn('$VAR'('NAT'), '$VAR'('ARG')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(equals('$VAR'('X'), '$VAR'('Y')), isa('$VAR'('X'), '$VAR'('COL'))), isa('$VAR'('Y'), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(equals('$VAR'('X'), '$VAR'('Y')), equals('$VAR'('Y'), '$VAR'('Z'))), equals('$VAR'('X'), '$VAR'('Z')), 'LogicalTruthMt', vStrMon).


assertedTinyKB_implies( evaluateImmediately('$VAR'('FUNC')), evaluateAtEL('$VAR'('FUNC')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( evaluate('$VAR'('TIMESFN'), 'TimesFn'('$VAR'('X'), 0)), evaluate(0, '$VAR'('TIMESFN')), 'BaseKB', vStrMon).
assertedTinyKB_implies( evaluate('$VAR'('QUOTIENTFN'), 'QuotientFn'('$VAR'('NUM_1'), '$VAR'('NUM_2'))), ratioOfTo('$VAR'('NUM_1'), '$VAR'('NUM_2'), '$VAR'('QUOTIENTFN')), 'BaseKB', vStrDef).
assertedTinyKB_implies( evaluate('$VAR'('PLUSFN'), 'PlusFn'('$VAR'('X'), 0)), equals('$VAR'('PLUSFN'), '$VAR'('X')), 'BaseKB', vStrMon).
assertedTinyKB_implies( evaluate('$VAR'('PLUSFN'), 'PlusFn'('$VAR'('X'))), equals('$VAR'('PLUSFN'), '$VAR'('X')), 'BaseKB', vStrMon).
assertedTinyKB_implies( evaluate('$VAR'('FORMULAARGFN'), 'FormulaArgFn'(0, '$VAR'('FORMULA'))), operatorFormulas('$VAR'('FORMULAARGFN'), '$VAR'('FORMULA')), 'BaseKB', vStrDef).
assertedTinyKB_implies( evaluate('$VAR'('_RESULT'), 'EvaluateSubLFn'('$VAR'('SUBL'))), performSubL('$VAR'('SUBL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( different('CycLNonAtomicTerm', '$VAR'('COL')), meetsPragmaticRequirement('TheList'('$VAR'('NAT'), '$VAR'('FUNCTION'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[natFunction, '$VAR'('NAT'), '$VAR'('FUNCTION')], [resultQuotedIsa, '$VAR'('FUNCTION'), '$VAR'('COL')]], [[quotedIsa, '$VAR'('NAT'), '$VAR'('COL')]]], 'CoreCycLMt', ["?NAT", "?FUNCTION", "?COL"], [implies, [and, [natFunction, '$VAR'('NAT'), '$VAR'('FUNCTION')], [resultQuotedIsa, '$VAR'('FUNCTION'), '$VAR'('COL')]], [quotedIsa, '$VAR'('NAT'), '$VAR'('COL')]])), 'CoreCycLMt', vStrDef).
assertedTinyKB_implies( different('$VAR'('UNIT_THREE'), '$VAR'('UNIT_TWO')), meetsPragmaticRequirement('TheList'('$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE'), '$VAR'('FACTOR1'), '$VAR'('PERFN_1'), '$VAR'('UNIT_ONE'), '$VAR'('PERFN')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[unitMultiplicationFactor, '$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE'), '$VAR'('FACTOR1')], [termOfUnit, '$VAR'('PERFN_1'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE')]], [termOfUnit, '$VAR'('PERFN'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO')]]], [[unitMultiplicationFactor, '$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')]]], 'BaseKB', ["?UNIT-TWO", "?UNIT-THREE", "?FACTOR1", "?PERFN-1", "?UNIT-ONE", "?PERFN"], [implies, [and, [unitMultiplicationFactor, '$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE'), '$VAR'('FACTOR1')], [termOfUnit, '$VAR'('PERFN_1'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE')]], [termOfUnit, '$VAR'('PERFN'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO')]]], [unitMultiplicationFactor, '$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( different('$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO')), meetsPragmaticRequirement('TheList'('$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO'), '$VAR'('FACTOR1'), '$VAR'('PERFN_1'), '$VAR'('UNIT_THREE'), '$VAR'('PERFN')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[unitMultiplicationFactor, '$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO'), '$VAR'('FACTOR1')], [termOfUnit, '$VAR'('PERFN_1'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE')]], [termOfUnit, '$VAR'('PERFN'), ['PerFn', '$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE')]]], [[unitMultiplicationFactor, '$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')]]], 'BaseKB', ["?UNIT-ONE", "?UNIT-TWO", "?FACTOR1", "?PERFN-1", "?UNIT-THREE", "?PERFN"], [implies, [and, [unitMultiplicationFactor, '$VAR'('UNIT_ONE'), '$VAR'('UNIT_TWO'), '$VAR'('FACTOR1')], [termOfUnit, '$VAR'('PERFN_1'), ['PerFn', '$VAR'('UNIT_ONE'), '$VAR'('UNIT_THREE')]], [termOfUnit, '$VAR'('PERFN'), ['PerFn', '$VAR'('UNIT_TWO'), '$VAR'('UNIT_THREE')]]], [unitMultiplicationFactor, '$VAR'('PERFN_1'), '$VAR'('PERFN'), '$VAR'('FACTOR1')]])), 'BaseKB', vStrMon).



assertedTinyKB_implies( and(disjointWith('$VAR'('COL'), '$VAR'('SUPERSET')), genls('$VAR'('SUBSET'), '$VAR'('SUPERSET'))), disjointWith('$VAR'('COL'), '$VAR'('SUBSET')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(negationPreds, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), negationPreds)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-NEGATIONPREDS')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(negationInverse, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), negationInverse)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-NEGATIONINVERSE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(isa, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), isa)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-ISA')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(genls, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), genls)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-GENLS')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(genlPreds, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), genlPreds)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-GENLPREDS')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(genlMt, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), genlMt)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-GENLMT')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(genlInverse, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), genlInverse)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-GENLINVERSE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different(disjointWith, '$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), disjointWith)), afterAdding('$VAR'('SPEC_PRED'), 'SubLQuoteFn'('PROPAGATE-TO-DISJOINTWITH')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(different('False', '$VAR'('EVALUATESUBLFN')), evaluate('$VAR'('EVALUATESUBLFN'), 'EvaluateSubLFn'('ExpandSubLFn'('$VAR'('RESULT'), 'FIF'('QUOTE'('$VAR'('RESULT')), 'True', 'False')))), evaluate('$VAR'('RESULT'), 'EvaluateSubLFn'('$VAR'('SUBL')))), trueSubL('$VAR'('SUBL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different('$VAR'('X'), '$VAR'('Y')), different('$VAR'('Y'), '$VAR'('Z'))), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('X'), '$VAR'('Y'), '$VAR'('Z')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[isa, '$VAR'('PRED'), 'TransitiveBinaryPredicate'], ['$VAR'('PRED'), '$VAR'('X'), '$VAR'('Y')], ['$VAR'('PRED'), '$VAR'('Y'), '$VAR'('Z')]], [['$VAR'('PRED'), '$VAR'('X'), '$VAR'('Z')]]], 'BaseKB', ["?PRED", "?X", "?Y", "?Z"], [implies, [and, [isa, '$VAR'('PRED'), 'TransitiveBinaryPredicate'], ['$VAR'('PRED'), '$VAR'('X'), '$VAR'('Y')], ['$VAR'('PRED'), '$VAR'('Y'), '$VAR'('Z')]], ['$VAR'('PRED'), '$VAR'('X'), '$VAR'('Z')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(different('$VAR'('MT'), '$VAR'('NEAR_MT')), genlMt('$VAR'('MT'), '$VAR'('NEAR_MT')), unknownSentence(thereExists('$VAR'('BETWEEN'), and(genlMt('$VAR'('BETWEEN'), '$VAR'('NEAR_MT')), genlMt('$VAR'('MT'), '$VAR'('BETWEEN')), different('$VAR'('BETWEEN'), '$VAR'('MT'), '$VAR'('NEAR_MT')))))), nearestGenlMt('$VAR'('MT'), '$VAR'('NEAR_MT')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different('$VAR'('GENL_COL'), '$VAR'('SPEC_COL')), genls('$VAR'('SPEC_COL'), '$VAR'('GENL_COL')), relationInstanceAll('$VAR'('PRED'), '$VAR'('ARG'), '$VAR'('GENL_COL'))), relationInstanceAll('$VAR'('PRED'), '$VAR'('ARG'), '$VAR'('SPEC_COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(different('$VAR'('GENL_COL'), '$VAR'('SPEC_COL')), genls('$VAR'('SPEC_COL'), '$VAR'('GENL_COL')), relationAllInstance('$VAR'('PRED'), '$VAR'('GENL_COL'), '$VAR'('ARG'))), relationAllInstance('$VAR'('PRED'), '$VAR'('SPEC_COL'), '$VAR'('ARG')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('SPEC_PRED')), genlPreds('$VAR'('SPEC_PRED'), genlMt)), predicateConventionMt('$VAR'('SPEC_PRED'), 'UniversalVocabularyMt'), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('PRED')), predicateConventionMt('$VAR'('PRED'), '$VAR'('MT')), genlPreds('$VAR'('SPEC'), '$VAR'('PRED'))), predicateConventionMt('$VAR'('SPEC'), '$VAR'('MT')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('PRED')), predicateConventionMt('$VAR'('PRED'), '$VAR'('MT'))), genlMt('BaseKB', '$VAR'('MT')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('PRED')), genlPreds('$VAR'('SPEC'), '$VAR'('PRED'))), decontextualizedPredicate('$VAR'('SPEC')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('PRED')), different('$VAR'('PRED'), '$VAR'('SPEC')), genlInverse('$VAR'('SPEC'), '$VAR'('PRED')), predicateConventionMt('$VAR'('PRED'), '$VAR'('MT'))), predicateConventionMt('$VAR'('SPEC'), '$VAR'('MT')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(decontextualizedPredicate('$VAR'('PRED')), different('$VAR'('PRED'), '$VAR'('SPEC')), genlInverse('$VAR'('SPEC'), '$VAR'('PRED'))), decontextualizedPredicate('$VAR'('SPEC')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(decontextualizedCollection('$VAR'('COL')), collectionConventionMt('$VAR'('COL'), '$VAR'('MT'))), genlMt('BaseKB', '$VAR'('MT')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(completelyEnumerableCollection('$VAR'('COL')), isa('$VAR'('INST'), '$VAR'('COL'))), knownSentence(isa('$VAR'('INST'), '$VAR'('COL'))), 'BaseKB', vStrDef).

assertedTinyKB_implies( and(completelyDecidableCollection('$VAR'('COLL_2')), completelyDecidableCollection('$VAR'('COLL_1'))), meetsPragmaticRequirement('TheList'('$VAR'('COLL_2'), '$VAR'('COLL_1')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[extentCardinality, ['TheSetOf', '?OBJ', [and, [isa, '?OBJ', '$VAR'('COLL_1')], [not, [isa, '?OBJ', '$VAR'('COLL_2')]]]], 0]], [[subsetOf, '$VAR'('COLL_1'), '$VAR'('COLL_2')]]], 'BaseKB', ["?COLL-2", "?COLL-1"], [implies, [extentCardinality, ['TheSetOf', '?OBJ', [and, [isa, '?OBJ', '$VAR'('COLL_1')], [not, [isa, '?OBJ', '$VAR'('COLL_2')]]]], 0], [subsetOf, '$VAR'('COLL_1'), '$VAR'('COLL_2')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(assertedSentence(isa('$VAR'('ARG'), '$VAR'('COL'))), natFunction('$VAR'('NART'), '$VAR'('FUNC')), resultIsaArgIsa('$VAR'('FUNC'), '$VAR'('INT')), natArgument('$VAR'('NART'), '$VAR'('INT'), '$VAR'('ARG'))), isa('$VAR'('NART'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('X'), 'TernaryPredicate'), arg4Isa('$VAR'('X'), '$VAR'('Y'))), 'BaseKB', vStrDef).

assertedTinyKB_implies( and(assertedSentence(genls('$VAR'('SPEC'), '$VAR'('GENL'))), genls('$VAR'('GENL'), '$VAR'('SPEC')), different('$VAR'('GENL'), '$VAR'('SPEC'))), coExtensional('$VAR'('GENL'), '$VAR'('SPEC')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(assertedSentence('$VAR'('FORMULA')), evaluate('$VAR'('FORMULAARGFN'), 'FormulaArgFn'(0, '$VAR'('FORMULA'))), evaluate('$VAR'('FORMULAARGFN_1'), 'FormulaArgFn'('$VAR'('ARG'), '$VAR'('FORMULA')))), assertedPredicateArg('$VAR'('FORMULAARGFN_1'), '$VAR'('ARG'), '$VAR'('FORMULAARGFN')), 'BaseKB', vStrMon).


assertedTinyKB_implies( and(arity('$VAR'('PRED'), 2), requiredArg1Pred('$VAR'('COL1'), '$VAR'('PRED')), 'interArgIsa1-2'('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2'))), relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arity('$VAR'('PRED'), '$VAR'('M')), evaluate('$VAR'('M_1'), 'DifferenceFn'('$VAR'('M'), 1))), arity('FunctionToArg'('$VAR'('N'), '$VAR'('PRED')), '$VAR'('M_1')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg5Isa('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 5, '$VAR'('REL'))), isa('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg5Genl('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 5, '$VAR'('REL'))), genls('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg4Isa('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 4, '$VAR'('REL'))), isa('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg4Genl('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 4, '$VAR'('REL'))), genls('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg4Format('$VAR'('GENLPRED'), 'SingleEntry'), different('$VAR'('GENLPRED'), '$VAR'('SPECPRED')), genlPreds('$VAR'('SPECPRED'), '$VAR'('GENLPRED'))), arg4Format('$VAR'('SPECPRED'), 'SingleEntry'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(arg3Isa('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 3, '$VAR'('REL'))), isa('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg3Genl('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 3, '$VAR'('REL'))), genls('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg3Format('$VAR'('GENLPRED'), 'SingleEntry'), different('$VAR'('GENLPRED'), '$VAR'('SPECPRED')), genlPreds('$VAR'('SPECPRED'), '$VAR'('GENLPRED'))), arg3Format('$VAR'('SPECPRED'), 'SingleEntry'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(arg2Isa('$VAR'('ROLE'), '$VAR'('TYPE')), requiredArg1Pred('$VAR'('SITTYPE'), '$VAR'('ROLE')), isa('$VAR'('SIT'), '$VAR'('SITTYPE'))), relationInstanceExists('$VAR'('ROLE'), '$VAR'('SIT'), '$VAR'('TYPE')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg2Isa('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 2, '$VAR'('REL'))), isa('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg2Isa('$VAR'('PRED'), '$VAR'('TYPE')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('ARG2'))), isa('$VAR'('ARG2'), '$VAR'('TYPE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg2Isa('$VAR'('PRED'), '$VAR'('COL')), relationExistsInstance('$VAR'('PRED'), '$VAR'('_DUMMY'), '$VAR'('THING'))), isa('$VAR'('THING'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg2Genl('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 2, '$VAR'('REL'))), genls('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg2Format('$VAR'('GENLPRED'), 'SingleEntry'), different('$VAR'('GENLPRED'), '$VAR'('SPECPRED')), genlPreds('$VAR'('SPECPRED'), '$VAR'('GENLPRED'))), arg2Format('$VAR'('SPECPRED'), 'SingleEntry'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(arg1Isa('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 1, '$VAR'('REL'))), isa('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg1Isa('$VAR'('PRED'), '$VAR'('TYPE')), relationInstanceAll('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('COL'))), isa('$VAR'('ARG1'), '$VAR'('TYPE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg1Isa('$VAR'('PRED'), '$VAR'('COL')), relationInstanceExists('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('_DUMMY'))), isa('$VAR'('THING'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg1Isa('$VAR'('PRED'), '$VAR'('COL')), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('_DUMMY'))), isa('$VAR'('THING'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg1Genl('$VAR'('REL'), '$VAR'('COLL')), admittedArgument('$VAR'('TERM'), 1, '$VAR'('REL'))), genls('$VAR'('TERM'), '$VAR'('COLL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(arg1Genl('$VAR'('PRED'), '$VAR'('COL2')), relationAllInstance('$VAR'('PRED'), '$VAR'('_ARG1'), '$VAR'('ARG2'))), isa('$VAR'('ARG2'), '$VAR'('COL2')), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(arg1Format('$VAR'('GENLPRED'), 'SingleEntry'), different('$VAR'('GENLPRED'), '$VAR'('SPECPRED')), genlPreds('$VAR'('SPECPRED'), '$VAR'('GENLPRED'))), arg1Format('$VAR'('SPECPRED'), 'SingleEntry'), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(admittedSentence('$VAR'('FORMULA')), integerBetween(1, '$VAR'('ARG'), '$VAR'('ARITY')), evaluate('$VAR'('RELATION'), 'FormulaArgFn'(0, '$VAR'('FORMULA'))), evaluate('$VAR'('ARITY'), 'FormulaArityFn'('$VAR'('FORMULA'))), evaluate('$VAR'('TERM'), 'FormulaArgFn'('$VAR'('ARG'), '$VAR'('FORMULA')))), admittedArgument('$VAR'('TERM'), '$VAR'('ARG'), '$VAR'('RELATION')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(admittedArgument('$VAR'('B'), 1, natFunction), admittedArgument('$VAR'('A'), 2, natFunction)), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[operatorFormulas, '$VAR'('A'), '$VAR'('B')]], [[natFunction, '$VAR'('B'), '$VAR'('A')]]], 'BaseKB', ["?A", "?B"], [implies, [operatorFormulas, '$VAR'('A'), '$VAR'('B')], [natFunction, '$VAR'('B'), '$VAR'('A')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(admittedArgument('$VAR'('A'), 1, isa), admittedArgument('$VAR'('B'), 2, isa)), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[elementOf, '$VAR'('A'), '$VAR'('B')]], [[isa, '$VAR'('A'), '$VAR'('B')]]], 'BaseKB', ["?A", "?B"], [implies, [elementOf, '$VAR'('A'), '$VAR'('B')], [isa, '$VAR'('A'), '$VAR'('B')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(admittedArgument('$VAR'('A'), 1, genls), admittedArgument('$VAR'('B'), 2, genls)), meetsPragmaticRequirement('TheList'('$VAR'('A'), '$VAR'('B')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[subsetOf, '$VAR'('A'), '$VAR'('B')]], [[genls, '$VAR'('A'), '$VAR'('B')]]], 'BaseKB', ["?A", "?B"], [implies, [subsetOf, '$VAR'('A'), '$VAR'('B')], [genls, '$VAR'('A'), '$VAR'('B')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( and('genls-SpecDenotesGenlInstances'('$VAR'('Q_COL'), '$VAR'('COL')), argQuotedIsa('$VAR'('RELN'), '$VAR'('N'), '$VAR'('Q_COL'))), argIsa('$VAR'('RELN'), '$VAR'('N'), '$VAR'('COL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( unknownSentence(thereExists('$VAR'('SOME_MT'), predicateConventionMt('$VAR'('SPEC'), '$VAR'('SOME_MT')))), meetsPragmaticRequirement('TheList'('$VAR'('PRED'), '$VAR'('SPEC'), '$VAR'('MT')), 'TINYKB-ASSERTION'(':TRUE-MON', [[[decontextualizedPredicate, '$VAR'('PRED')], [different, '$VAR'('PRED'), '$VAR'('SPEC')], [genlInverse, '$VAR'('SPEC'), '$VAR'('PRED')], [predicateConventionMt, '$VAR'('PRED'), '$VAR'('MT')]], [[predicateConventionMt, '$VAR'('SPEC'), '$VAR'('MT')]]], 'BaseKB', ["?PRED", "?SPEC", "?MT"], [implies, [and, [decontextualizedPredicate, '$VAR'('PRED')], [different, '$VAR'('PRED'), '$VAR'('SPEC')], [genlInverse, '$VAR'('SPEC'), '$VAR'('PRED')], [predicateConventionMt, '$VAR'('PRED'), '$VAR'('MT')]], [predicateConventionMt, '$VAR'('SPEC'), '$VAR'('MT')]])), 'BaseKB', vStrMon).
assertedTinyKB_implies( unknownSentence(disjointWith('$VAR'('COL1'), '$VAR'('COL2'))), consistent(and(isa('$VAR'('THING'), '$VAR'('COL1')), isa('$VAR'('THING'), '$VAR'('COL2')))), 'BaseKB', vStrDef).
assertedTinyKB_implies( trueSentence(thereExists('$VAR'('X'), and(isa('$VAR'('X'), '$VAR'('COL')), unknownSentence(holds('$VAR'('GENL_PRED'), '$VAR'('X')))))), meetsPragmaticRequirement('TheList'('$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED'), '$VAR'('COL')), 'TINYKB-ASSERTION'(':TRUE-DEF', [[[genlPreds, '$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')], [relationAll, '$VAR'('SPEC_PRED'), '$VAR'('COL')]], [[relationAll, '$VAR'('GENL_PRED'), '$VAR'('COL')]]], 'BaseKB', ["?SPEC-PRED", "?GENL-PRED", "?COL"], [implies, [and, [genlPreds, '$VAR'('SPEC_PRED'), '$VAR'('GENL_PRED')], [relationAll, '$VAR'('SPEC_PRED'), '$VAR'('COL')]], [relationAll, '$VAR'('GENL_PRED'), '$VAR'('COL')]])), 'BaseKB', vStrDef).
assertedTinyKB_implies( trueSentence(forAll('$VAR'('ISA_CONSTR'), implies(argIsa('$VAR'('PRED'), '$VAR'('N'), '$VAR'('ISA_CONSTR')), genls('$VAR'('ISA_CONSTR'), 'CycLTerm')))), quotedArgument('$VAR'('PRED'), '$VAR'('N')), 'BaseKB', vStrDef).
assertedTinyKB_implies( trueSentence(forAll('$VAR'('INST'), implies(isa('$VAR'('INST'), '$VAR'('COL')), admittedArgument('$VAR'('INST'), '$VAR'('NUM'), '$VAR'('RELN'))))), admittedAllArgument('$VAR'('COL'), '$VAR'('NUM'), '$VAR'('RELN')), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( trueSentence('$VAR'('SENT')), sentenceTruth('$VAR'('SENT'), 'True'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( trueRule('$VAR'('TEMPLATE'), '$VAR'('FORMULA')), trueSentence('$VAR'('FORMULA')), 'BaseKB', vStrDef).
assertedTinyKB_implies( termOfUnit('$VAR'('UNITPRODUCTFN'), 'UnitProductFn'('$VAR'('X'), '$VAR'('Y'))), multiplicationUnits('$VAR'('X'), '$VAR'('Y'), '$VAR'('UNITPRODUCTFN')), 'BaseKB', vStrDef).
assertedTinyKB_implies( termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UOM1'), '$VAR'('UOM2'))), multiplicationUnits('$VAR'('PERFN'), '$VAR'('UOM2'), '$VAR'('UOM1')), 'BaseKB', vStrDef).
assertedTinyKB_implies( termOfUnit('$VAR'('MEANINGINSYSTEMFN'), 'MeaningInSystemFn'('$VAR'('SYSTEM'), '$VAR'('STRING'))), synonymousExternalConcept('$VAR'('MEANINGINSYSTEMFN'), '$VAR'('SYSTEM'), '$VAR'('STRING')), 'BaseKB', vStrDef).
assertedTinyKB_implies( subsetOf('$VAR'('A'), '$VAR'('B')), genls('$VAR'('A'), '$VAR'('B')), 'BaseKB', vStrDef).
assertedTinyKB_implies( sentenceTruth('$VAR'('SENT'), 'True'), trueSentence('$VAR'('SENT')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( relationInstanceExists('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COLL')), isa('RelationInstanceExistsFn'('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COLL')), '$VAR'('COLL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationInstanceExists('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COLL')), holds('$VAR'('PRED'), '$VAR'('THING'), 'RelationInstanceExistsFn'('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COLL'))), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationInstanceExists('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COL')), trueSentence(thereExists('$VAR'('INST'), and(isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('INST'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationInstanceAll('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('COL')), trueSentence(implies(isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('PRED'), '$VAR'('THING'), '$VAR'('INST')))), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationInstanceAll('$VAR'('PRED'), '$VAR'('INSTANCE'), '$VAR'('COLLECTION')), conceptuallyRelated('$VAR'('COLLECTION'), '$VAR'('INSTANCE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationInstanceAll('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), requiredArg2Pred('$VAR'('COL2'), '$VAR'('PRED')), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationExistsInstance('$VAR'('PRED'), '$VAR'('COLL'), '$VAR'('THING')), isa('RelationExistsInstanceFn'('$VAR'('PRED'), '$VAR'('COLL'), '$VAR'('THING')), '$VAR'('COLL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationExistsInstance('$VAR'('PRED'), '$VAR'('COLL'), '$VAR'('THING')), holds('$VAR'('PRED'), 'RelationExistsInstanceFn'('$VAR'('PRED'), '$VAR'('COLL'), '$VAR'('THING')), '$VAR'('THING')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationExistsInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING')), trueSentence(thereExists('$VAR'('INST'), and(isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('PRED'), '$VAR'('INST'), '$VAR'('THING'))))), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationExistsAll('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL')), relationExistsMinAll('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), 1), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationExistsAll('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2')), requiredArg2Pred('$VAR'('COL2'), '$VAR'('PRED')), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationAllInstance('$VAR'('PRED'), '$VAR'('COLLECTION'), '$VAR'('INSTANCE')), conceptuallyRelated('$VAR'('COLLECTION'), '$VAR'('INSTANCE')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationAllInstance('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('_COL2')), requiredArg1Pred('$VAR'('COL1'), '$VAR'('PRED')), 'BaseKB', vStrMon).
assertedTinyKB_implies( relationAllExists('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL')), relationAllExistsMin('$VAR'('SLOT'), '$VAR'('UNIV_COL'), '$VAR'('EXIST_COL'), 1), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationAllExists('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('_COL2')), requiredArg1Pred('$VAR'('COL1'), '$VAR'('PRED')), 'BaseKB', vStrDef).
assertedTinyKB_implies( relationAll('$VAR'('PRED'), '$VAR'('COL')), trueSentence(implies(isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('PRED'), '$VAR'('INST')))), 'BaseKB', vStrMon).


assertedTinyKB_not(and(trueSentence('$VAR'('VALUE')), equals('False', '$VAR'('VALUE'))), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_not(and(trueSentence('$VAR'('SENT')), sentenceTruth('$VAR'('SENT'), 'False')), 'UniversalVocabularyMt', vStrDef).

assertedTinyKB_not(and(relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING')), trueSentence(thereExists('$VAR'('INST'), and(isa('$VAR'('INST'), '$VAR'('COL')), not(holds('$VAR'('PRED'), '$VAR'('INST'), '$VAR'('THING'))))))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING')), trueSentence(thereExists('$VAR'('COLINST'), and(isa('$VAR'('COLINST'), '$VAR'('COL')), not(holds('$VAR'('PRED'), '$VAR'('COLINST'), '$VAR'('THING'))))))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(relationAllExists('$VAR'('RELATION'), '$VAR'('COL1'), '$VAR'('COL2')), relationAllExistsCount('$VAR'('RELATION'), '$VAR'('COL1'), '$VAR'('COL2'), 0)), 'BaseKB', vStrDef).
assertedTinyKB_not(and(quantitySubsumes('$VAR'('SUPER'), '$VAR'('SUB')), maxQuantValue('$VAR'('SUPER'), '$VAR'('SUPERMAX')), greaterThan('$VAR'('SUBMAX'), '$VAR'('SUPERMAX')), maxQuantValue('$VAR'('SUB'), '$VAR'('SUBMAX'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(opaqueArgument('$VAR'('REL'), '$VAR'('N')), arity('$VAR'('REL'), '$VAR'('ARITY')), greaterThan('$VAR'('N'), '$VAR'('ARITY'))), 'BaseKB', vStrDef).

assertedTinyKB_not(and(negationPreds('$VAR'('NEGPRED'), '$VAR'('PRED')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING')), trueSentence(thereExists('$VAR'('INST'), and(isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('NEGPRED'), '$VAR'('INST'), '$VAR'('THING')))))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEGPRED'), '$VAR'('PRED')), isa('$VAR'('INST'), '$VAR'('COL')), holds('$VAR'('NEGPRED'), '$VAR'('INST'), '$VAR'('THING')), relationAllInstance('$VAR'('PRED'), '$VAR'('COL'), '$VAR'('THING'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEG_PRED'), '$VAR'('PRED')), holds('$VAR'('NEG_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'), '$VAR'('ARG5')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'), '$VAR'('ARG5'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEG_PRED'), '$VAR'('PRED')), holds('$VAR'('NEG_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'), '$VAR'('ARG4'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEG_PRED'), '$VAR'('PRED')), holds('$VAR'('NEG_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'), '$VAR'('ARG3'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEG_PRED'), '$VAR'('PRED')), holds('$VAR'('NEG_PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationPreds('$VAR'('NEG_PRED'), '$VAR'('PRED')), holds('$VAR'('NEG_PRED'), '$VAR'('ARG1')), holds('$VAR'('PRED'), '$VAR'('ARG1'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(negationInverse('$VAR'('BINPRED1'), '$VAR'('BINPRED2')), holds('$VAR'('BINPRED1'), '$VAR'('ARG1'), '$VAR'('ARG2')), holds('$VAR'('BINPRED2'), '$VAR'('ARG2'), '$VAR'('ARG1'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(minQuantValue('$VAR'('SUPER'), '$VAR'('SUPERMIN')), quantitySubsumes('$VAR'('SUPER'), '$VAR'('SUB')), minQuantValue('$VAR'('SUB'), '$VAR'('SUBMIN')), greaterThan('$VAR'('SUPERMIN'), '$VAR'('SUBMIN'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(minQuantValue('$VAR'('INTERVAL1'), '$VAR'('MIN1')), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), maxQuantValue('$VAR'('INTERVAL2'), '$VAR'('MAX2')), greaterThan('$VAR'('MIN1'), '$VAR'('MAX2'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(microtheoryDesignationArgnum('$VAR'('RELN'), '$VAR'('NUM')), sentenceDesignationArgnum('$VAR'('RELN'), '$VAR'('NUM'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('REL'), 'PartiallyCommutativeRelation'), arity('$VAR'('REL'), 5), different('$VAR'('J'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgs('$VAR'('REL'), '$VAR'('J'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('REL'), 'PartiallyCommutativeRelation'), arity('$VAR'('REL'), 4), different('$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgs('$VAR'('REL'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('REL'), 'PartiallyCommutativeRelation'), arity('$VAR'('REL'), 3), different('$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgs('$VAR'('REL'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('REL'), 'PartiallyCommutativeRelation'), arity('$VAR'('REL'), 2), different('$VAR'('M'), '$VAR'('N')), commutativeInArgs('$VAR'('REL'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'IrreflexiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('OBJ'), '$VAR'('OBJ'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'IrreflexiveBinaryPredicate'), equals('$VAR'('OBJ1'), '$VAR'('OBJ2')), holds('$VAR'('PRED'), '$VAR'('OBJ1'), '$VAR'('OBJ2'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'AsymmetricBinaryPredicate'), isa('$VAR'('PRED'), 'SymmetricBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('ANYTHING1'), '$VAR'('ANYTHING2'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'AsymmetricBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG1'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'AntiTransitiveBinaryPredicate'), isa('$VAR'('PRED'), 'TransitiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('_A'), '$VAR'('B')), holds('$VAR'('PRED'), '$VAR'('B'), '$VAR'('_C'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'AntiTransitiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('X'), '$VAR'('Y')), holds('$VAR'('PRED'), '$VAR'('X'), '$VAR'('Z')), holds('$VAR'('PRED'), '$VAR'('Y'), '$VAR'('Z'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('PRED'), 'AntiSymmetricBinaryPredicate'), admittedArgument('$VAR'('ARG1'), 1, '$VAR'('PRED')), admittedArgument('$VAR'('ARG1'), 2, '$VAR'('PRED')), different('$VAR'('ARG1'), '$VAR'('ARG2')), holds('$VAR'('PRED'), '$VAR'('ARG2'), '$VAR'('ARG1')), holds('$VAR'('PRED'), '$VAR'('ARG1'), '$VAR'('ARG2')), admittedArgument('$VAR'('ARG2'), 1, '$VAR'('PRED')), admittedArgument('$VAR'('ARG2'), 2, '$VAR'('PRED'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('OBJ'), '$VAR'('COL1')), isa('$VAR'('OBJ'), '$VAR'('COL2')), genls('$VAR'('COL2'), '$VAR'('COL3')), disjointWith('$VAR'('COL1'), '$VAR'('COL3'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(isa('$VAR'('OBJ'), '$VAR'('COL1')), isa('$VAR'('OBJ'), '$VAR'('COL2')), disjointWith('$VAR'('COL1'), '$VAR'('COL2'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('INST_1'), '$VAR'('COL1')), isa('$VAR'('INST_2A'), '$VAR'('COL2')), different('$VAR'('INST_2A'), '$VAR'('INST_2B')), isa('$VAR'('INST_2B'), '$VAR'('COL2')), holds('$VAR'('PRED'), '$VAR'('INST_1'), '$VAR'('INST_2B')), holds('$VAR'('PRED'), '$VAR'('INST_1'), '$VAR'('INST_2A')), relationAllExistsMax('$VAR'('PRED'), '$VAR'('COL1'), '$VAR'('COL2'), 1)), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_not(and(isa('$VAR'('INST1'), '$VAR'('TYPE1')), isa('$VAR'('INST2'), '$VAR'('TYPE2')), holds('$VAR'('PRED'), '$VAR'('INST1'), '$VAR'('INST2')), relationAllExistsCount('$VAR'('PRED'), '$VAR'('TYPE1'), '$VAR'('TYPE2'), 0)), 'BaseKB', vStrDef).
assertedTinyKB_not(and(holdsIn('$VAR'('TIME'), '$VAR'('PROP')), holdsIn('$VAR'('TIME'), not('$VAR'('PROP')))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(greaterThan('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2')), quantityIntersects('$VAR'('INTERVAL1'), '$VAR'('INTERVAL2'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(genlPreds('$VAR'('SPEC'), '$VAR'('GENL')), arity('$VAR'('SPEC'), '$VAR'('SPEC_ARITY')), different('$VAR'('GENL_ARITY'), '$VAR'('SPEC_ARITY')), arity('$VAR'('GENL'), '$VAR'('GENL_ARITY'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(disjointWith('$VAR'('COL1'), '$VAR'('COL2')), trueSentence(thereExists('$VAR'('THING'), and(isa('$VAR'('THING'), '$VAR'('COL1')), isa('$VAR'('THING'), '$VAR'('COL2')))))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(disjointWith('$VAR'('ARGTYPE1'), '$VAR'('ARGTYPE2')), argIsa('$VAR'('PRED'), '$VAR'('ARGNUM'), '$VAR'('ARGTYPE1')), argIsa('$VAR'('PRED'), '$VAR'('ARGNUM'), '$VAR'('ARGTYPE2'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(differentSymbols('$VAR'('A'), '$VAR'('B')), equalSymbols('$VAR'('A'), '$VAR'('B'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(different('$VAR'('THING1'), '$VAR'('THING2')), equals('$VAR'('THING1'), '$VAR'('THING2'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(arity('$VAR'('REL'), 5), different('$VAR'('J'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgsAndRest('$VAR'('REL'), '$VAR'('J'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(arity('$VAR'('REL'), 4), different('$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgsAndRest('$VAR'('REL'), '$VAR'('K'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(arity('$VAR'('REL'), 3), different('$VAR'('L'), '$VAR'('M'), '$VAR'('N')), commutativeInArgsAndRest('$VAR'('REL'), '$VAR'('L'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(arity('$VAR'('REL'), 2), different('$VAR'('M'), '$VAR'('N')), commutativeInArgsAndRest('$VAR'('REL'), '$VAR'('M'), '$VAR'('N'))), 'BaseKB', vStrDef).
assertedTinyKB_not(and(arg2Isa('$VAR'('PRED'), '$VAR'('COL1')), disjointWith('$VAR'('COL1'), '$VAR'('COL2')), isa('$VAR'('INST'), '$VAR'('COL2')), holds('$VAR'('PRED'), '$VAR'('_X'), '$VAR'('INST'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(arg2Isa('$VAR'('PRED'), '$VAR'('ARG2ISA')), disjointWith('$VAR'('ARG2ISA'), '$VAR'('ARG2TYPE')), relationExistsAll('$VAR'('PRED'), '$VAR'('ARG1TYPE'), '$VAR'('ARG2TYPE'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(arg2Isa('$VAR'('PRED'), '$VAR'('ARG2ISA')), disjointWith('$VAR'('ARG2ISA'), '$VAR'('ARG2TYPE')), relationAllExists('$VAR'('PRED'), '$VAR'('ARG1TYPE'), '$VAR'('ARG2TYPE'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(arg2Genl('$VAR'('PRED'), '$VAR'('ARG2TYPE')), disjointWith('$VAR'('ARG2TYPE'), '$VAR'('GROUPMEMBERTYPE')), relationAllInstance('$VAR'('PRED'), '$VAR'('GROUPTYPE'), '$VAR'('GROUPMEMBERTYPE'))), 'BaseKB', vStrMon).
assertedTinyKB_not(and(arg1Isa('$VAR'('PRED'), '$VAR'('ARG1ISA')), disjointWith('$VAR'('ARG1ISA'), '$VAR'('ARG1TYPE')), relationAllExists('$VAR'('PRED'), '$VAR'('ARG1TYPE'), '$VAR'('ARG2TYPE'))), 'BaseKB', vStrMon).


exactlyAssertedEL(transitiveViaArgInverse, subsetOf, subsetOf, 1, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, sentenceDesignationArgnum, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, requiredArg2Pred, genls, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, requiredArg1Pred, genls, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationInstanceAll, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationExistsMinAll, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationExistsMaxAll, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationExistsMaxAll, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationExistsMaxAll, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationExistsAll, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllInstance, quantitySubsumes, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllInstance, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExistsMin, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExistsMax, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExistsMax, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExistsMax, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExistsCount, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAllExists, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, relationAll, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, negationPreds, genlPreds, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, negationPreds, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, microtheoryDesignationArgnum, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, ist, genlMt, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, interArgResultIsa, genls, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, genls, genls, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, genlInverse, genlPreds, 1, 'BaseKB', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, disjointWith, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, disjointWith, genls, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, defnNecessary, genls, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, admittedAllArgument, genls, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-4', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-4', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-3', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-3', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-2', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-2', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-1', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa5-1', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-5', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-5', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-3', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-3', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-2', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-2', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-1', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa4-1', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-5', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-5', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-4', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-4', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-2', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-2', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-1', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa3-1', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-5', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-5', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-4', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-4', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-3', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-3', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-1', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa2-1', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-5', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-5', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-4', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-4', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-3', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-3', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-2', genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArgInverse, 'interArgIsa1-2', genlPreds, 1, 'UniversalVocabularyMt', vStrDef).

exactlyAssertedEL(transitiveViaArg, subsetOf, subsetOf, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, subsetOf, subsetOf, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, resultIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, resultGenl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, requiredArg2Pred, genlPreds, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, requiredArg1Pred, genlPreds, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationMemberInstance, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationInstanceMember, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationInstanceExists, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationInstanceExists, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationInstanceAll, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsMinAll, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsMinAll, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsInstance, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsInstance, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsCountAll, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsAll, genls, 2, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationExistsAll, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationAllInstance, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, relationAllExistsMin, genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationAllExistsMin, genlPreds, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, relationAllExists, genls, 3, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, relationAllExists, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, relationAll, genlPreds, 1, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, quotedIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, holdsIn, sentenceImplies, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, greaterThan, quantitySubsumes, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, genls, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, genlInverse, genlPreds, 2, 'BaseKB', vStrDef).
exactlyAssertedEL(transitiveViaArg, defnSufficient, genls, 1, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, canonicalizerDirectiveForArgAndRest, genlCanonicalizerDirectives, 3, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, canonicalizerDirectiveForArg, genlCanonicalizerDirectives, 3, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, canonicalizerDirectiveForAllArgs, genlCanonicalizerDirectives, 2, 'CoreCycLImplementationMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, argsIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, argsIsa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, argsGenl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, argsGenl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, argIsa, genls, 3, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, argAndRestIsa, genls, 3, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, argAndRestGenl, genls, 3, 'BaseKB', vStrDef).
exactlyAssertedEL(transitiveViaArg, arg6SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg6Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg6Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg6Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg6Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg5SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg5Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg5Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg5Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg5Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg4SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg4Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg4Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg4Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg4Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg3SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg3Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg3Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg3Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg3Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg2SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg2Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg2Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg2Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg2Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg1SometimesIsa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg1Isa, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg1Isa, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg1Genl, genls, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, arg1Genl, genls, 2, 'BaseKB', vStrMon).
exactlyAssertedEL(transitiveViaArg, admittedAllArgument, genlPreds, 2, 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa5-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa5-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa5-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa5-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa4-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa4-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa4-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa4-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa3-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa3-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa3-2', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa3-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa2-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa2-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa2-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa2-1', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa1-5', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa1-4', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa1-3', genls, 3, 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(transitiveViaArg, 'interArgIsa1-2', genls, 3, 'UniversalVocabularyMt', vStrDef).



exactlyAssertedEL(collectionExpansion, 'TransitiveBinaryPredicate', implies(and(holds((':ARG1'), '$VAR'('X'), '$VAR'('Y')), holds((':ARG1'), '$VAR'('Y'), '$VAR'('Z'))), holds((':ARG1'), '$VAR'('X'), '$VAR'('Z'))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(collectionExpansion, 'SymmetricBinaryPredicate', implies(holds((':ARG1'), '$VAR'('X'), '$VAR'('Y')), holds((':ARG1'), '$VAR'('Y'), '$VAR'('Z'))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(collectionExpansion, 'ReflexiveBinaryPredicate', holds((':ARG1'), '$VAR'('X'), '$VAR'('X')), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(collectionExpansion, 'IrreflexiveBinaryPredicate', not(holds((':ARG1'), '$VAR'('X'), '$VAR'('X'))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(collectionExpansion, 'AsymmetricBinaryPredicate', implies(holds((':ARG1'), '$VAR'('X'), '$VAR'('Y')), not(holds((':ARG1'), '$VAR'('Y'), '$VAR'('Z')))), 'UniversalVocabularyMt', vStrDef).


exactlyAssertedEL(expansion, requiredArg2Pred, implies(and(isa((':ARG2'), 'BinaryPredicate'), isa('$VAR'('INS_1'), (':ARG1'))), thereExists('$VAR'('INS'), holds((':ARG2'), '$VAR'('INS'), '$VAR'('INS_1')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, requiredArg1Pred, implies(and(isa((':ARG2'), 'BinaryPredicate'), isa('$VAR'('INS_1'), (':ARG1'))), thereExists('$VAR'('INS'), holds((':ARG2'), '$VAR'('INS_1'), '$VAR'('INS')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationInstanceExists, thereExists('$VAR'('ARG'), and(isa('$VAR'('ARG'), (':ARG3')), holds((':ARG1'), (':ARG2'), '$VAR'('ARG')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationInstanceAll, implies(isa('$VAR'('INS'), (':ARG3')), holds((':ARG1'), (':ARG2'), '$VAR'('INS'))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, relationExistsMinAll, implies(isa('$VAR'('ARG2'), (':ARG3')), thereExistAtLeast((':ARG4'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), (':ARG2')), holds((':ARG1'), '$VAR'('ARG'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationExistsMaxAll, implies(isa('$VAR'('ARG2'), (':ARG3')), thereExistAtMost((':ARG4'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), (':ARG2')), holds((':ARG1'), '$VAR'('ARG'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationExistsInstance, thereExists('$VAR'('OBJ'), and(isa('$VAR'('OBJ'), (':ARG2')), holds((':ARG1'), '$VAR'('OBJ'), (':ARG3')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationExistsCountAll, implies(isa('$VAR'('ARG2'), (':ARG3')), thereExistExactly((':ARG4'), '$VAR'('ARG1'), and(isa('$VAR'('ARG1'), (':ARG2')), holds((':ARG1'), '$VAR'('ARG1'), '$VAR'('ARG2'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationExistsAll, implies(isa('$VAR'('TERM'), (':ARG3')), holds((':ARG1'), 'RelationExistsAllFn'('$VAR'('TERM'), (':ARG1'), (':ARG2'), (':ARG3')), '$VAR'('TERM'))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, relationAllInstance, implies(isa('$VAR'('INS'), (':ARG2')), holds((':ARG1'), '$VAR'('INS'), (':ARG3'))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, relationAllExistsMin, implies(isa('$VAR'('ARG1'), (':ARG2')), thereExistAtLeast((':ARG4'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), (':ARG3')), holds((':ARG1'), '$VAR'('ARG1'), '$VAR'('ARG'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationAllExistsMax, implies(isa('$VAR'('ARG1'), (':ARG2')), thereExistAtMost((':ARG4'), '$VAR'('ARG'), and(isa('$VAR'('ARG'), (':ARG3')), holds((':ARG1'), '$VAR'('ARG1'), '$VAR'('ARG'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationAllExistsCount, implies(isa('$VAR'('TERM'), (':ARG2')), thereExistExactly((':ARG4'), '$VAR'('OTHER'), and(isa('$VAR'('OTHER'), (':ARG3')), holds((':ARG1'), '$VAR'('TERM'), '$VAR'('OTHER'))))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, relationAllExists, implies(isa('$VAR'('TERM'), (':ARG2')), holds((':ARG1'), '$VAR'('TERM'), 'RelationAllExistsFn'('$VAR'('TERM'), (':ARG1'), (':ARG2'), (':ARG3')))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, relationAll, implies(isa('$VAR'('OBJ'), (':ARG2')), holds((':ARG1'), '$VAR'('OBJ'))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, negationInverse, not(and(holds((':ARG1'), '$VAR'('ARG1'), '$VAR'('ARG2')), holds((':ARG2'), '$VAR'('ARG2'), '$VAR'('ARG1')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, mtVisible, trueSubL('ExpandSubLFn'((':ARG1'), 'RELEVANT-MT?'('QUOTE'((':ARG1'))))), 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(expansion, genlMt, implies(ist((':ARG2'), '$VAR'('ASSERTION')), ist((':ARG1'), '$VAR'('ASSERTION'))), 'BaseKB', vStrMon).
exactlyAssertedEL(expansion, genlInverse, implies(holds((':ARG1'), '$VAR'('ARG1'), '$VAR'('ARG2')), holds((':ARG2'), '$VAR'('ARG2'), '$VAR'('ARG1'))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, equiv, and(implies((':ARG1'), (':ARG2')), implies((':ARG2'), (':ARG1'))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, disjointWith, not(and(isa('$VAR'('OBJ'), (':ARG1')), isa('$VAR'('OBJ'), (':ARG2')))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, 'Percent', 'QuotientFn'((':ARG1'), 100), 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(expansion, 'interArgGenl1-2', implies(and(genls('$VAR'('INDEP_SPEC'), (':ARG2')), holds((':ARG1'), '$VAR'('INDEP_SPEC'), '$VAR'('DEP_SPEC'))), genls('$VAR'('DEP_SPEC'), (':ARG3'))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, 'genls-SpecDenotesGenlInstances', implies(quotedIsa('$VAR'('OBJ'), (':ARG1')), isa('$VAR'('OBJ'), (':ARG2'))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(expansion, 'genls-GenlDenotesSpecInstances', implies(isa('$VAR'('OBJ'), (':ARG1')), quotedIsa('$VAR'('OBJ'), (':ARG2'))), 'UniversalVocabularyMt', vStrDef).

assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa1-3'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), dot_holds(['$VAR'('PRED'), '$VAR'('INDEP_INS'), '$VAR'('_ANY_ARG_2'), '$VAR'('DEP_INS')|'$VAR'('_ARGS')])), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(isa('$VAR'('INDEP_INS'), '$VAR'('INDEP_COL')), 'interArgIsa1-2'('$VAR'('PRED'), '$VAR'('INDEP_COL'), '$VAR'('DEP_COL')), dot_holds(['$VAR'('PRED'), '$VAR'('INDEP_INS'), '$VAR'('DEP_INS')|'$VAR'('_ARGS')])), isa('$VAR'('DEP_INS'), '$VAR'('DEP_COL')), 'BaseKB', vStrDef).
assertedTinyKB_implies( and(resultGenl('$VAR'('FUNC'), '$VAR'('COL')), equals('$VAR'('VALUE'), 'NART'(['$VAR'('FUNC')|'$VAR'('ARGS')]))), genls('$VAR'('VALUE'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( genlMt('$VAR'('SPEC'), '$VAR'('GENL')), 'NART'('NART'(['MtUnionFn', '$VAR'('SPEC')|'$VAR'('OTHER_MTS')]), '$VAR'('GENL')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( elementOf('$VAR'('MT_DIM'), 'NART'(['TheSet'|'$VAR'('MT_DIMS')])), genlMt('NART'(['MtSpace'|'$VAR'('MT_DIMS')]), '$VAR'('MT_DIM')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( elementOf('$VAR'('A'), '$VAR'('B')), isa('$VAR'('A'), '$VAR'('B')), 'BaseKB', vStrDef).
assertedTinyKB_implies( dot_holds([commutativeInArgs, '$VAR'('_PRED')|'$VAR'('ARGS')]), dot_holds([different|'$VAR'('ARGS')]), 'BaseKB', vStrMon).
assertedTinyKB_implies( and(resultIsa('$VAR'('FUNC'), '$VAR'('COL')), equals('$VAR'('VALUE'), 'NART'(['$VAR'('FUNC')|'$VAR'('ARGS')]))), isa('$VAR'('VALUE'), '$VAR'('COL')), 'BaseKB', vStrMon).
assertedTinyKB_implies( isa('$VAR'('UNIT'), 'UnitOfMeasure'), equals('NART'(['$VAR'('UNIT')|'$VAR'('ARGS')]), 'NART'(['$VAR'('UNIT'), 'NART'(['Unity'|'$VAR'('ARGS')])])), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, implies, or((':ARG2'), not((':ARG1'))), 'BaseKB', vStrDef).


exactlyAssertedEL(expansion, genlPreds, implies(dot_holds([(':ARG1'), '?ARGS']), dot_holds([(':ARG2'), '?ARGS'])), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, quotedIsa, isa('QuasiQuote'((':ARG1')), (':ARG2')), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, negationPreds, not(and(dot_holds([(':ARG1'), '?ARGS']), dot_holds([(':ARG2'), '?ARGS']))), 'BaseKB', vStrDef).
exactlyAssertedEL(expansion, xor, or(and((':ARG1'), not((':ARG2'))), and((':ARG2'), not((':ARG1')))), 'BaseKB', vStrDef).
exactlyAssertedEL(genlMt, 'NART'(['MtSpace'|'$VAR'('_MT_DIMS')]), 'UniversalVocabularyMt', 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( ist('NART'(['MtSpace'|'$VAR'('OTHER_MT_DIMS')]), '$VAR'('SENTENCE')), ist('NART'(['MtSpace', '$VAR'('MT_DIM')|'$VAR'('OTHER_MT_DIMS')]), '$VAR'('SENTENCE')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( ist('NART'(['MtSpace', '$VAR'('MT_DIM')|'$VAR'('OTHER_MT_DIMS')]), '$VAR'('SENTENCE')), ist('NART'(['MtSpace'|'$VAR'('OTHER_MT_DIMS')]), '$VAR'('SENTENCE')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_implies( and(evaluate('$VAR'('QUOTIENTFN'), 'QuotientFn'('NART'(['$VAR'('UNIT1')|'$VAR'('ARGS')]), 'NART'(['$VAR'('UNIT2'), 1]))), termOfUnit('$VAR'('PERFN'), 'PerFn'('$VAR'('UNIT1'), '$VAR'('UNIT2')))), equals('$VAR'('QUOTIENTFN'), 'NART'(['$VAR'('PERFN')|'$VAR'('ARGS')])), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_implies( and(dot_holds(['$VAR'('SPEC')|'$VAR'('ARGS')]), genlPreds('$VAR'('SPEC'), '$VAR'('GENL'))), dot_holds(['$VAR'('GENL')|'$VAR'('ARGS')]), 'BaseKB', vStrDef).

exactlyAssertedEL(equals, 'TheEmptyList', 'TheList', 'BaseKB', vStrMon).
exactlyAssertedEL(equals, '$VAR'('X'), '$VAR'('X'), 'LogicalTruthMt', vStrDef).
exactlyAssertedEL(equals, '$VAR'('X'), '$VAR'('X'), 'BaseKB', vStrMon).
exactlyAssertedEL(equals, '$VAR'('NUM'), 'Unity'('$VAR'('NUM')), 'BaseKB', vStrDef).


exactlyAssertedEL(unitMultiplicationFactor, '$VAR'('UNIT'), '$VAR'('UNIT'), 1, 'BaseKB', vStrMon).

exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg6Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 6, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 6, '$VAR'('COL')), arg6Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg5Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 5, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 5, '$VAR'('COL')), arg5Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg4Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 4, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 4, '$VAR'('COL')), arg4Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg3Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 3, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 3, '$VAR'('COL')), arg3Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg2Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 2, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 2, '$VAR'('COL')), arg2Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).

exactlyAssertedEL(trueRule, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), and(implies(arg1Isa('$VAR'('RELN'), '$VAR'('COL')), argIsa('$VAR'('RELN'), 1, '$VAR'('COL'))), implies(argIsa('$VAR'('RELN'), 1, '$VAR'('COL')), arg1Isa('$VAR'('RELN'), '$VAR'('COL')))), 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(termOfUnit, 'NART'(['CollectionRuleTemplateFn', 'HypotheticalContext']), 'CollectionRuleTemplateFn'('HypotheticalContext'), 'BaseKB', vStrMon).
exactlyAssertedEL(termOfUnit, 'NART'(['CollectionRuleTemplateFn', 'ArgIsaPredicate']), 'CollectionRuleTemplateFn'('ArgIsaPredicate'), 'BaseKB', vStrMon).
exactlyAssertedEL(subsetOf, 'TheEmptySet', '$VAR'('SET'), 'BaseKB', vStrMon).
exactlyAssertedEL(relationAll, minimizeExtent, 'BookkeepingPredicate', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAll, decontextualizedCollection, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(relationAll, assertedSentence, 'CycLAssertion', 'UniversalVocabularyMt', vStrMon).

exactlyAssertedEL(relationInstanceAll, subsetOf, 'TheEmptySet', 'SetOrCollection', 'BaseKB', vStrDef).

exactlyAssertedEL(relationAllInstance, genls, tCol, 'Thing', 'BaseKB', vStrMon).

exactlyAssertedEL(relationAllInstance, genlPreds, 'IrreflexiveBinaryPredicate', different, 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllInstance, genlMt, 'Microtheory', 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, definingMt, 'Microtheory', 'BaseKB', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, collectionConventionMt, 'AtemporalNecessarilyEssentialCollectionType', 'UniversalVocabularyMt', 'UniversalVocabularyMt', vStrMon).
exactlyAssertedEL(relationAllInstance, assertionDirection, 'CycLRuleAssertion', 'Backward-AssertionDirection', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllInstance, assertionDirection, 'CycLGAFAssertion', 'Forward-AssertionDirection', 'BaseKB', vStrDef).
exactlyAssertedEL(relationAllExists, cycProblemStoreInferences, 'CycProblemStore', 'CycInference', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(relationAllExists, cycProblemStoreID, 'CycProblemStore', 'NonNegativeInteger', 'UniversalVocabularyMt', vStrDef).
exactlyAssertedEL(relationAllExists, constantID, 'CycLConstant', 'NonNegativeInteger', 'BaseKB', vStrMon).
exactlyAssertedEL(relationAllExists, arity, tPred, 'PositiveInteger', 'BaseKB', vStrDef).


assertedTinyKB_TODO(genls, '$VAR'('X'), '$VAR'('X'), 'LogicalTruthMt', vStrMon).
assertedTinyKB_TODO(or, trueSentence('$VAR'('SENT')), sentenceTruth('$VAR'('SENT'), 'False'), 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_TODO(or, different('$VAR'('THING1'), '$VAR'('THING2')), equals('$VAR'('THING1'), '$VAR'('THING2')), 'BaseKB', vStrDef).
assertedTinyKB_TODO(implies, and(different('$VAR'('COL_1'), '$VAR'('COMMON_NEAR')), genls('$VAR'('COMMON_NEAR'), '$VAR'('COL_1')), genls('$VAR'('COMMON_NEAR'), '$VAR'('COL_2')), different('$VAR'('COL_2'), '$VAR'('COMMON_NEAR'))), or(nearestCommonSpecs('$VAR'('COL_1'), '$VAR'('COL_2'), '$VAR'('COMMON_NEAR')), elementOf('$VAR'('COMMON_NEAR'), 'TheSetOf'('$VAR'('COMMON_FARTHER'), thereExists('$VAR'('COMMON_FAR'), and(genls('$VAR'('COMMON_FAR'), '$VAR'('COL_1')), genls('$VAR'('COMMON_FAR'), '$VAR'('COL_2')), genls('$VAR'('COMMON_FARTHER'), '$VAR'('COMMON_FAR')), different('$VAR'('COL_1'), '$VAR'('COMMON_FAR')), different('$VAR'('COL_2'), '$VAR'('COMMON_FAR')), different('$VAR'('COMMON_FAR'), '$VAR'('COMMON_FARTHER'))))))), 'BaseKB', vStrDef).
assertedTinyKB_TODO(implies, equals('True', '$VAR'('VALUE')), trueSentence('$VAR'('VALUE')), 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_TODO(implies, equals('$VAR'('X'), '$VAR'('Y')), equals('$VAR'('Y'), '$VAR'('X')), 'LogicalTruthMt', vStrMon).
assertedTinyKB_TODO(implies, isa('$VAR'('OBJ_1'), '$VAR'('DIFF_NEAR')), or(elementOf('$VAR'('OBJ_2'), 'TheSetOf'('$VAR'('ITEM_1'), isa('$VAR'('ITEM_1'), '$VAR'('DIFF_NEAR')))), nearestDifferentIsa('$VAR'('OBJ_1'), '$VAR'('OBJ_2'), '$VAR'('DIFF_NEAR')), elementOf('$VAR'('DIFF_NEAR'), 'TheSetOf'('$VAR'('DIFF_FARTHER'), thereExists('$VAR'('DIFF_FAR'), and(isa('$VAR'('OBJ_1'), '$VAR'('DIFF_FAR')), genls('$VAR'('DIFF_FAR'), '$VAR'('DIFF_FARTHER')), different('$VAR'('DIFF_FAR'), '$VAR'('DIFF_FARTHER')), not(elementOf('$VAR'('OBJ_2'), 'TheSetOf'('$VAR'('ITEM_2'), isa('$VAR'('ITEM_2'), '$VAR'('DIFF_NEAR')))))))))), 'BaseKB', vStrMon).
assertedTinyKB_TODO(implies, isa('$VAR'('OBJ'), '$VAR'('NEAR_COL')), or(nearestIsa('$VAR'('OBJ'), '$VAR'('NEAR_COL')), elementOf('$VAR'('NEAR_COL'), 'TheSetOf'('$VAR'('FARTHER_COL'), thereExists('$VAR'('FAR_COL'), and(isa('$VAR'('OBJ'), '$VAR'('FAR_COL')), genls('$VAR'('FAR_COL'), '$VAR'('FARTHER_COL')), different('$VAR'('FAR_COL'), '$VAR'('FARTHER_COL'))))))), 'BaseKB', vStrDef).
assertedTinyKB_TODO(genls, 'CharacterString', 'List', 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_TODO(implies, isa('$VAR'('PRED'), 'ReflexiveBinaryPredicate'), holds('$VAR'('PRED'), '$VAR'('OBJ'), '$VAR'('OBJ')), 'BaseKB', vStrMon).
assertedTinyKB_TODO(genls, 'CycLDenotationalTerm-Assertible', 'CycLExpression-Assertible', 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_TODO(implies, assertedSentence('$VAR'('SENT')), quotedIsa('$VAR'('SENT'), 'CycLAssertion'), 'BaseKB', vStrDef).

assertedTinyKB_InCode(coExtensional, 'CycLExpression', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_InCode(isa, '$VAR'('OBJ'), 'Thing', 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_InCode(implies, isa('Quote'('EscapeQuote'('$VAR'('X'))), '$VAR'('COL')), quotedIsa('$VAR'('X'), '$VAR'('COL')), 'BaseKB', vStrDef).
assertedTinyKB_InCode(genls, 'List', 'List', 'UniversalVocabularyMt', vStrMon).

assertedTinyKB_NEVER(coExtensional, 'List', 'List', 'UniversalVocabularyMt', vStrMon).
assertedTinyKB_NEVER(genls, 'SubLSExpression', 'CharacterString', 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_NEVER(genls, 'CycLExpression', 'CycLTerm', 'UniversalVocabularyMt', vStrDef).
assertedTinyKB_NEVER(genls, 'CycLExpression', 'CycLTerm', 'CoreCycLMt', vStrDef).

exactlyAssertedEL(implies,A,C,MT,STR):- assertedTinyKB_implies(A,C,MT,STR),not(is_better_backchained((A=>C))).
exactlyAssertedEL(implies,A,C,MT,STR):- assertedTinyKB_implies(A,C,MT,STR),is_better_backchained((A=>C)).
exactlyAssertedEL(not,What,MT,STR):- assertedTinyKB_not(What,MT,STR),true.


