

% File search paths

file_search_path(general_regulus_grammars,'$REGULUS/Grammar').
file_search_path(doris_regulus_grammars,'$REGULUS/Examples/Doris/Regulus').
file_search_path(corpora,'$REGULUS/Examples/Doris/corpora').
file_search_path(doris_runtime,'$REGULUS/Examples/Doris/Generated').
file_search_path(doris_prolog,'$REGULUS/Examples/Doris/Prolog').
file_search_path(doris_scripts,'$REGULUS/Examples/Doris/scripts').

file_search_path(tmp,'C:/Temp').

% LFs are post-processed using the predicate riacs_postproc_lf, defined in $REGULUS/Prolog/regulus_eval.pl
regulus_config(lf_postproc_pred, riacs_postproc_lf).

% The top-level category is .MAIN
regulus_config(top_level_cat, '.MAIN').

% Parse preferences
regulus_config(parse_preferences, doris_prolog('parse_preferences.pl')).

% EBL training will use the operationality criteria 
regulus_config(ebl_operationality, file(doris_prolog('operationality_recognition.pl'))).

% Include more lexicon entries as specified by this file
regulus_config(ebl_include_lex, doris_regulus_grammars('recognition_lex_includes.pl')).

% Ignore the following features in the specialised grammar.
% Including this declaration makes Regulus to Nuance compilation go much faster.
regulus_config(ebl_ignore_feats, 
	       [def, subj_def, obj_def, indobj_def,
		syn_type, subj_syn_type, obj_syn_type, indobj_syn_type,
		relagr
	       ]).	

% Config information for version of Doris derived from general grammar

% The current Regulus grammar consists of the following four files
regulus_config(regulus_grammar, 
	       [general_regulus_grammars(general_eng), 
		general_regulus_grammars(gen_eng_lex),
		general_regulus_grammars(ignore_apposition_rule), 
		general_regulus_grammars(ignore_numeric_a), 	
		%general_regulus_grammars(linear_sem),
		%general_regulus_grammars(nested_sem),
		general_regulus_grammars(riacs_sem), 
		doris_regulus_grammars(doris_lex)
	    ]).

% EBL training will use this file as its training corpus.
regulus_config(ebl_corpus,
	       [corpora('doris_corpus.pl')
	       ]).

% The EBL specialised grammar, which can be loaded using the EBL_LOAD command.
regulus_config(ebl_regulus_component_grammar, [doris_runtime(doris_specialised_default)]).

% The command EBL_NUANCE writes the specialised Nuance grammar to this file.
regulus_config(ebl_nuance_grammar, doris_runtime(recogniser)).

% Working files have names starting with the expansion of this file.
regulus_config(working_file_prefix, doris_runtime('doris')).
regulus_config(working_directory, doris_runtime('')).

% Dialogue specific declarations:

% Dialogue processing code in these files
regulus_config(dialogue_files,
	       [doris_prolog('input_manager.pl'),
		%doris_prolog('resolve_lf.pl'),
		doris_prolog('dialogue_manager.pl'),
		%doris_prolog('resolve_dialogue_move.pl'),
		doris_prolog('output_manager.pl'),

		doris_prolog('lf_consts.pl'),

	        doris_prolog('pre_process_for_paraphrasing.pl')
	       ]).

% N-best preference features and weights
regulus_config(nbest_preferences, doris_prolog('doris_nbest.pl')).

% LF rewrite rules for use in input manager
regulus_config(lf_rewrite_rules, doris_prolog('lf_rewrite.pl')).

% Modules referenced by compiled LF patterns
regulus_config(lf_patterns_modules,
	       [library(lists),
		library(system),
		'$REGULUS/PrologLib/utilities',
		'$REGULUS/Examples/Doris/Prolog/doris_utils']).

% Compiled paraphrase generation grammar.
% Created using resources defined in config file paraphrase.cfg, in this directory.	
regulus_config(paraphrase_generation_grammar, doris_runtime('paraphrase_generator.pl')).	

% Orthography rules for post-processing output
regulus_config(orthography_rules, doris_prolog('orthography_rules.pl')).

% Generation preferences don't work yet for paraphrases
%regulus_config(generation_preferences, doris_prolog('generation_preferences.pl')).

% Where to put data for training N-best preferences
regulus_config(nbest_training_data_file, doris_runtime('nbest_training_data.pl')).

% PARAMETERS FOR NUANCE-COMPILE

% Take data for doing PCFG tuning from here...
regulus_config(grammar_probs_data,
	       [corpora('doris_corpus.pl')]).
% ... and write the training data to here
regulus_config(ebl_grammar_probs, doris_runtime('grammar_probs_data_file.txt')).

% Perform PCFG training on the specialised Nuance grammar
regulus_config(nuance_grammar_for_pcfg_training, doris_runtime(recogniser)).

% ... putting the result in this directory
regulus_config(pcfg_training_output_directory, doris_runtime(pcfg_trained)).

% Perform nuance-compile on scripts/combined_glm_slm,
% which includes the grammar resulting from PCFG training
regulus_config(nuance_grammar_for_compilation, doris_scripts(combined_glm_slm)).

% ... using the English.UK or the Australia/NY language pack (comment in the relevant line):
%regulus_config(nuance_language_pack, 'English.UK').
regulus_config(nuance_language_pack, 'English.AusNZ').

% ... and the following parameters 
regulus_config(nuance_compile_params, ['-auto_pron', '-dont_flatten']).

% ... and writing out the resulting package here
regulus_config(nuance_recognition_package, doris_runtime(recogniser)).

% END OF PARAMETERS FOR NUANCE-COMPILE

regulus_config(dialogue_corpus,
	       [corpora('SHRDLU_corpus.pl')]).
regulus_config(dialogue_corpus(ellipsis), corpora('doris_dev_corpus_ellipsis.pl')).

regulus_config(dialogue_speech_corpus, corpora('doris_transcriptions.txt')).
regulus_config(dialogue_speech_corpus(in_coverage), corpora('doris_transcriptions_in_coverage.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage), corpora('doris_transcriptions_out_of_coverage.txt')).

% File for marking in-coverage paraphrases for out-of-coverage transcriptions
regulus_config(paraphrase_corpus, corpora('transcription_paraphrases.pl')).

regulus_config(dialogue_speech_corpus(training), corpora('doris_transcriptions_training.txt')).
regulus_config(dialogue_speech_corpus(test), corpora('doris_transcriptions_test.txt')).
regulus_config(dialogue_speech_corpus(in_coverage_test), corpora('doris_transcriptions_in_coverage_test.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage_test), corpora('doris_transcriptions_out_of_coverage_test.txt')).
regulus_config(dialogue_speech_corpus(pda), corpora('doris_transcriptions_pda.txt')).
regulus_config(dialogue_speech_corpus(in_coverage_pda), corpora('doris_transcriptions_in_coverage_pda.txt')).
regulus_config(dialogue_speech_corpus(out_of_coverage_pda), corpora('doris_transcriptions_out_of_coverage_pda.txt')).

regulus_config(dialogue_corpus_results, doris_runtime('doris_dev_corpus_results.pl')).
regulus_config(dialogue_corpus_results(ellipsis), doris_runtime('doris_dev_corpus_results_ellipsis.pl')).

regulus_config(dialogue_speech_corpus_results, doris_runtime('doris_speech_dialogue_results.pl')).
regulus_config(dialogue_speech_corpus_results(training), doris_runtime('doris_speech_dialogue_results_training.pl')).
regulus_config(dialogue_speech_corpus_results(test), doris_runtime('doris_speech_dialogue_results_test.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage), doris_runtime('doris_speech_dialogue_results_in_coverage.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage), doris_runtime('doris_speech_dialogue_results_out_of_coverage.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage_test), doris_runtime('doris_speech_dialogue_results_in_coverage_test.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage_test), doris_runtime('doris_speech_dialogue_results_out_of_coverage_test.pl')).
regulus_config(dialogue_speech_corpus_results(pda), doris_runtime('doris_speech_dialogue_results_pda.pl')).
regulus_config(dialogue_speech_corpus_results(in_coverage_pda), doris_runtime('doris_speech_dialogue_results_in_coverage_pda.pl')).
regulus_config(dialogue_speech_corpus_results(out_of_coverage_pda), doris_runtime('doris_speech_dialogue_results_out_of_coverage_pda.pl')).

regulus_config(dialogue_corpus_judgements, corpora('doris_dialogue_judgements.pl')).

regulus_config(targeted_help_source_files, [doris_runtime('doris_dev_corpus_results.pl')]).
regulus_config(targeted_help_classes_file, doris_prolog('help_classes.pl')).
regulus_config(compiled_targeted_help_classes_file, doris_runtime('compiled_help_classes.pl')).
regulus_config(targeted_help_backed_off_corpus_file, doris_runtime('targeted_help_backed_off_corpus.pl')).

regulus_config(dialogue_rec_params,
	       [package=doris_runtime(recogniser), grammar='.MAIN',
		'rec.Pruning=1600', 'rec.DoNBest=TRUE', 'rec.NumNBest=6']).
	       	%'rec.Pruning=1600']).
	       
