
% Config information for paraphrase recognition grammar

% File search paths

file_search_path(paraphrase_grammars,'$REGULUS/Examples/Calendar/Regulus').

file_search_path(calendar_runtime,'$REGULUS/Examples/Calendar/Generated').
file_search_path(calendar_prolog,'$REGULUS/Examples/Calendar/Prolog').
file_search_path(corpora,'$REGULUS/Examples/Calendar/corpora').

file_search_path(tmp,'C:/Temp').

% Regulus config values

regulus_config(regulus_grammar, 
	       [%paraphrase_grammars(paraphrase_main),
		paraphrase_grammars(paraphrase_main_speech_generation),
	        paraphrase_grammars(paraphrase_speech),
		paraphrase_grammars(paraphrase_generation),
		% Create this file by doing 'make name_lexicon' in $REGULUS/Examples/Calendar/scripts
		paraphrase_grammars(generated_names)]).

regulus_config(top_level_cat, '.MAIN').

regulus_config(prolog_semantics, yes).

regulus_config(nuance_grammar, calendar_runtime(paraphrase_recogniser)).

regulus_config(working_file_prefix, calendar_runtime(paraphrase_recogniser_generator)).
regulus_config(working_directory, calendar_runtime('')).

regulus_config(generation_grammar, calendar_runtime('paraphrase_speech_generator.pl')).

regulus_config(generation_module_name, paraphrase).
regulus_config(top_level_generation_pred, generate_paraphrase).
regulus_config(top_level_generation_cat, '.MAIN').
regulus_config(top_level_generation_feat, value).
