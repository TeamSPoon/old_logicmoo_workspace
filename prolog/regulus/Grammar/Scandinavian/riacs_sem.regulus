
macro(intro_and_coda_sem(Intro, Utt, Coda),
      concat(Intro, concat(Utt, Coda))).

macro(yesno_and_politeness_sem(YesNo, Politeness),
      concat(YesNo, Politeness)).

macro(yesno_and_interjection_sem(YesNo, Int),
      concat(YesNo, Int)).

macro(correction_and_interjection_sem(YesNo, Int),
      concat(YesNo, Int)).

macro(null_sem,
      []).

macro(dcl_sem(Sem), 
      [[dcl, Sem]]).

macro(whq_sem(Sem), 
      [[whq, Sem]]).

macro(ynq_sem(Sem), 
      [[ynq, Sem]]).

macro(embedded_dcl_sem(Sem), 
      [[dcl, Sem]]).

macro(embedded_whq_sem(Sem), 
      [[whq, Sem]]).

macro(embedded_ynq_sem(Sem), 
      [[ynq, Sem]]).

macro(imperative_sem(Sem), 
      [[imp, Sem]]).

macro(elliptical_utt_sem(Sem),
      [[elliptical, Sem]]).

macro(you_nbar_sem(Nbar),
      [[state, you_are], [subj, @np_nbar_sem(Nbar)]]).

macro(s_advp_s_sem(Advp, S),
      concat(Advp, S)).

macro(s_pp_s_sem(Pp, S),
      concat(Pp, S)).

macro(s_vp_imperative_sem(Vp),
      concat([[tense, imperative], [subj, @np_pronoun_sem( @pronoun_sem(you))]], Vp)).

macro(s_lets_vp_imperative_sem(Vp),
      concat([[tense, imperative], [subj, @np_pronoun_sem( @pronoun_sem(we))]], Vp)).

macro(fronting_sem(Fronted, S),
      [apply, [lambda, x, S], Fronted]).

macro(np_vp_sem(Np, Vp),
      concat([[subj, Np]], Vp)).

macro(s_vp_sem_inverted(Vp),
      Vp).

macro(s_vp_sem_inverted_passivised(Vp),
      Vp).

macro(np_vp_imperative_sem(Np, Vp),
      concat([[tense, imperative], [subj, Np]], Vp)).

macro(np_vp_sem_passive(Np, Vp),
      concat([[obj, Np]], Vp)).

macro(np_vp_sem_impersonal_subj(Np, Vp),
      Vp).

macro(inverted_subj_sem(V, Np),
      concat(V, [[subj, Np]])).

macro(inverted_subj_sem_passive(V, Np),
      concat(V, [[obj, Np]])).

macro(inverted_subj_sem_impersonal_subj(V, Np),
      V).

macro(unspecified_tense_sem(VP),
      concat([[tense, unspecified]], VP)).

macro(vp_v_sem(Verb),
      concat([[verb_type, intrans]], Verb)).

macro(vp_v_sem_passivised(Verb),
      concat([[verb_type, trans_passivised]], Verb)).

macro(vp_v_pp_sem(Verb, PP),
      concat(concat([[verb_type, pp]], Verb), [[subcat_pp, PP]])).

macro(vp_v_pp_sem_passivised(Verb, PP),
      concat(concat([[verb_type, np_pp_passivised]], Verb), [[subcat_pp, PP]])).

macro(vp_v_np_pp_sem(Verb, NP, PP),
      concat(concat([[verb_type, np_pp]], Verb), [[obj, NP], [subcat_pp, PP]])).

macro(vp_v_np_sem(Verb, NP),
      concat(concat([[verb_type, trans]], Verb), [[obj, NP]])).

macro(vp_v_np_sem_passivised(Verb, NP),
      concat(concat([[verb_type, ditrans_passivised]], Verb), [[indobj, NP]])).

macro(vp_v_np_np_sem(Verb, NP1, NP2),
      concat(concat([[verb_type, ditrans]], Verb), [[indobj, NP1], [obj, NP2]])).

macro(vp_v_np_there_is_sem(Verb, NP),
      concat(concat([[verb_type, existential]], Verb), [[subj, NP]])).

macro(modal_sem(V),
      [[modal, V]]).

macro(negated_modal_sem(V),
      [[polarity, negative], [modal, V]]).

%macro(vp_v_vp_modal_sem(Verb, VP),
%      concat(concat([[verb_type, vp_modal]], Verb), VP)).

macro(vp_v_vp_modal_sem(Verb, VP),
      concat(Verb, VP)).

macro(vp_v_vp_nonmodal_sem(Verb, VP),
      concat(concat([[verb_type, vp_nonmodal]], Verb), [[prop_obj, VP]])).

macro(vp_v_vp_passive_sem(Verb, VP),
      concat(Verb, VP)).

macro(vp_v_to_vp_sem(Verb, VP),
      concat(concat([[verb_type, to_vp]], Verb), [[prop_obj, VP]])).

macro(vp_v_np_to_vp_sem(Verb, NP, VP),
      concat(concat([[verb_type, np_to_vp]], Verb), [[obj, NP], [prop_obj, VP]])).

macro(vp_v_to_vp_sem_passivised(Verb, VP),
      concat(concat([[verb_type, np_to_vp_passivised]], Verb), [[prop_obj, VP]])).

macro(vp_v_s_prop_sem(Verb, S),
      concat(concat([[verb_type, s_prop]], Verb), S)).

macro(vp_v_s_embedded_q_sem(Verb, S),
      concat(concat([[verb_type, s_embedded_q]], Verb), S)).

macro(vp_v_np_s_embedded_q_sem(Verb, NP, S),
      concat(concat([[verb_type, s_np_embedded_q]], Verb), concat([[obj, NP]], S))).

macro(vp_v_adj_sem(Verb, Adj),
      concat(concat([[verb_type, adj]], Verb), [[adj, Adj]])).

macro(vp_v_np_adj_sem(Verb, NP, Adj),
      concat(concat([[verb_type, np_adj]], Verb), [[obj, NP], [adj, Adj]])).

macro(vp_v_np_p_sem(Verb, NP, P),
      concat(concat([[verb_type, np_p]], Verb), [[prep, P], [obj, NP]])).

macro(vp_v_p_sem(Verb, P),
      concat(concat([[verb_type, np_p]], Verb), [[prep, P]])).

macro(vp_vp_mods_sem(VP, Mods),
      concat(VP, Mods)).

macro(present_passive_v_from_imperative(V),
      concat(V, [[tense, present]])).

macro(vbar_vbar_advp_sem(V, Advp),
      concat(V, Advp)).

macro(partitive_sem(PP),
      %[[partitive, PP]]).
      PP).

macro(mods_mod_mods_sem(Mod, Mods),
      concat(Mod, Mods)).

macro(mods_adjp_mods_sem(Adjp, Mods),
      concat([[adj, Adjp]], Mods)).
%     concat(Adjp, Mods)).

macro(pp_p_np_sem(P, NP),
      [[P, NP]]).

macro(pp_sc_s_sem(SC, S),
      [[SC, S]]).

macro(pp_sc_vp_sem(SC, VP),
      [[SC, concat([[tense, unspecified],
		    [subj, @np_pronoun_sem( @pronoun_sem(unspecified))]],
		   VP)]]).

macro(of_pp_sem(NP),
      [[of, NP]]).

macro(pp_np_date_sem(NP),
      [[date, NP]]).

macro(pp_np_duration_sem(NP),
      [[duration, NP]]).

macro(pp_np_frequency_sem(NP),
      [[frequency, NP]]).

macro(np_d_nbar_sem(Det, Nbar),
      concat([[spec, Det]], Nbar)).

labelled_item(np_article_nbar_sem_macro, 
macro(np_article_nbar_sem(Det, Nbar),
      concat([[spec, Det]], Nbar))
).

macro(possessive_pron_sem(Pron),
      [[possessive, @np_pronoun_sem( @pronoun_sem(Pron))]]).

macro(np_possessive_nbar_sem(Poss, N),
      concat([[spec, null]], concat(Poss, N))).

macro(np_you_nbar_sem(Pron, N),
      concat([[spec, null], [pronoun, Pron]], N)).

macro(np_possessive_d_nbar_sem(Poss, Det, N),
      concat(Poss, concat([[spec, Det]], N))).

macro(np_nbar_sem(Nbar),
      concat([[spec, null]], Nbar)).

macro(np_pronoun_sem(Pro),
      [[spec, pro], [head, Pro]]).

macro(np_quantified_pronoun_sem(Pro),
      [[spec, Pro], [head, null]]).

macro(np_reflexive_pronoun_sem(Pro),
      [[spec, reflexive_pro], [head, Pro]]).

macro(np_d_sem(D),
      [[spec, D], [head, null]]).

macro(np_vp_gerund_sem(VP),
      [[gerund,
	concat([[tense, unspecified],
		[subj, @np_pronoun_sem( @pronoun_sem(unspecified))]],
	       VP)]]).

macro(np_name_sem(Name),
      [[spec, name], [head, Name]]).

macro(np_time_sem(Time),
      Time).

macro(np_date_sem(Date),
      Date).

macro(np_nbar_nbar_postmod_sem(N1, N2),
      concat([[spec, null]], concat(N1, N2))).

macro(nbar_nbar_nbar_postmod_sem(N1, N2),
      concat(N1, N2)).

macro(np_nbar_name_postmod_sem(N1, N2),
      concat([[spec, null]], concat(N1, [N2]))).

macro(np_np_postmods_sem(NP, Mods),
      concat(NP, Mods)).

macro(nbar_adj_nbar_sem(Adj, N),
      %concat([[adj, Adj]], N)).
      concat(Adj, N)).

macro(nbar_n_sem(N),
      [[head, N]]).

macro(nbar_kind_of_n_sem(N),
      concat([[spec, kind_of]], N)).

macro(nbar_n_n_sem(N1, N2),
      [[nn, N1], [head, N2]]).

macro(nbar_n_nbar_sem(N, Nbar),
      concat([[nn, N]], Nbar)).

macro(nbar_number_n_nbar_sem(Number, N, Nbar),
      concat([[nn, concat([[spec, Number]], N)]], Nbar)).

macro(nbar_name_n_sem(N1, N2),
      [[nn, N1], [head, N2]]).

macro(nbar_name_nbar_sem(N, Nbar),
      concat([[nn, N]], Nbar)).

macro(nbar_adjp_sem(Adj),
      concat([[head, thing]], Adj)).

macro(nbar_number_sem(N),
      [[number, N]]).

macro(nbar_number_and_number_sem(N1, N2),
      [[number, [and, N1, N2]]]).

macro(nbar_number_through_number_sem(N1, N2),
      [[number, [range, N1, N2]]]).

macro(n_n_conj_n_sem(N1, N2),
      [and, N1, N2]).

macro(nbar_nbar_conj_nbar_sem(N1, N2),
      [[head, null], [and, N1, N2]]).

macro(adjp_how_adj_sem(Adj),
      concat([[degree, how]], Adj)).

macro(adjp_how_sem,
      [[adj, how]]).

macro(adjp_list_sem(Adj1, Adj2),
      concat(Adj1, Adj2)).

macro(adj_pp_sem(Adj, PP),
      concat(Adj, PP)).

macro(adj_np_sem(Adj, NP),
      concat(Adj, [[adj_obj, NP]])).

macro(adjp_advp_adj_sem(Adv, Adj),
      concat(Adv, Adj)).

macro(advp_how_adv_sem(Adv),
      concat([[degree, how]], Adv)).

macro(conj2_sem(Conj, Arg1, Arg2),
      [[Conj, Arg1, Arg2]]).

macro(n_conjlist_sem(Conj, Args),
      concat([Conj], Args)).

macro(conj_list_sem(Conj, Args),
      %[concat([Conj], Args)]).
      concat([Conj], Args)).

macro(conjlist_item_item_sem(Item1, Item2),
      [Item1, Item2]).

macro(conjlist_item_conjlist_sem(Item, Conjlist),
      concat([Item], Conjlist)).

macro(np_gap_sem,
      [x]).

macro(pp_gap_sem,
      [x]).

macro(adjp_gap_sem,
      [x]).

macro(advp_gap_sem,
      [[x]]).

macro(rel_pron_sem,
      [y]).

macro(rel_s_sem(S),
      [[lambda, y, S]]).

macro(time_number_hundred_sem(H),
      [[special_np, time], [hour, H], [minute, 0]]).

macro(time_number_timesuffix_sem(H, Timesuffix),
      [[special_np, time], [hour, H], [minute, 0], [day_part, Timesuffix]]).

macro(time_hours_minutes_sem(H, M),
      [[special_np, time], [hour, H], [minute, M]]).

macro(time_hours_minutes_to_sem(H, M),
      [[special_np, time], [hour, sub(H, 1)], [minute, sub(60, M)]]).

macro(time_hours_minutes_timesuffix_sem(H, M, Timesuffix),
      [[special_np, time], [hour, H], [minute, M], [day_part, Timesuffix]]).

macro(date_month_sem(Month),
      [[special_np, date], [month, Month]]).      

macro(date_year_sem(Year),
      [[special_np, date], [year, Year]]).      

macro(date_month_year_sem(Month, Year),
      [[special_np, date], [month, Month], [year, Year]]).      

macro(date_day_month_sem(Day, Month),
      [[special_np, date], [month, Month], [day, Day]]). 

macro(date_day_month_year_sem(Day, Month, Year),
      [[special_np, date], [year, Year], [month, Month], [day, Day]]). 

macro(measure_phrase_det_unit(Det, Unit),
      [[special_np, measure], [amount, Det], [unit, Unit]]).

macro(det_number_sem(N),
      N).

macro(det_number_conj_number_sem(N1, N2),
      [and, N1, N2]).

macro(det_number_to_number_sem(N1, N2),
      [number_range, [N1, N2]]).

macro(det_det_number_sem(D, N),
      [D, N]).

macro(det_numcompare_number_sem(D, N),
      [D, N]).

macro(det_ordinal_sem(N),
      [ordinal, N]).

macro(det_det_ordinal_sem(D, N),
      [ordinal, D, N]).

macro(number_number_thousand_sem(N),
      mul(1000, N)).

macro(number_thousand_plus_sem(Thousands, Rest),
      add(Thousands, Rest)).

macro(number_number_hundred_sem(N),
      mul(100, N)).

macro(number_h_tu_sem(Hundreds, TensAndUnits),
      add(Hundreds, TensAndUnits)).

macro(number_two_digits(D1, D2),
      add(mul(10, D1), D2)).

macro(number_three_digits(D1, D2, D3),
      add(mul(100, D1), add(mul(10, D2), D3))).

macro(number_four_digits(D1, D2, D3, D4),
      add(mul(1000, D1), add(mul(100, D2), add(mul(10, D3), D4)))).

macro(number_five_digits(D1, D2, D3, D4, D5),
      add(mul(10000, D1), add(mul(1000, D2), add(mul(100, D3), add(mul(10, D4), D5))))).

macro(number_minutes_seconds_sem(Minutes, Seconds),
      add(mul(60, Minutes), Seconds)).

macro(number_decimal(N1, N2),
      [decimal, N1, N2]).

macro(passive_by_prep_sem,
      subj).

macro(prep_sem(Prep),
      Prep).

macro(sc_sem(SC),
      SC).

macro(interjection_sem(Interjection),
      [[interjection, Interjection]]).

macro(politeness_sem(Polite),
      [[politeness, Polite]]).

macro(verb_sem(Type, Verb),
      [verb, Verb]).

macro(pp_sem(Prep, NP),
      [Prep, NP]).

macro(wh_pp_sem(Prep, WHElement),
      [Prep, [[spec, what], [head, null]]]).

macro(noun_sem(Type, Noun),
      Noun).

macro(pronoun_sem(Pron),
      Pron).

macro(name_sem(Name),
      Name).

macro(adj_sem(Adj),
      Adj).

macro(adj_sem(Type, Adj),
      [[Type, Adj]]).

macro(adv_sem(AdvType, Adv),
      [[adverb, Adv]]).
