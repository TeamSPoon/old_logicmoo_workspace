/* soapStub.h
   Generated by gSOAP 2.8.12 from src/api/soap/candc_soap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <string>
#include "stdsoap2.h"
#if GSOAP_VERSION != 20812
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREstringResponse
#define SOAP_TYPE_ns1__parse_USCOREstringResponse (15)
/* ns1:parse_stringResponse */
struct ns1__parse_USCOREstringResponse
{
public:
	std::string _result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	int soap_type() const { return 15; } /* = unique id SOAP_TYPE_ns1__parse_USCOREstringResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREstring
#define SOAP_TYPE_ns1__parse_USCOREstring (16)
/* ns1:parse_string */
struct ns1__parse_USCOREstring
{
public:
	std::string _text;	/* required element of type xsd:string */
	bool _start;	/* required element of type xsd:boolean */
public:
	int soap_type() const { return 16; } /* = unique id SOAP_TYPE_ns1__parse_USCOREstring */
};
#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREsentenceResponse
#define SOAP_TYPE_ns1__parse_USCOREsentenceResponse (18)
/* ns1:parse_sentenceResponse */
struct ns1__parse_USCOREsentenceResponse
{
public:
	std::string _result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	int soap_type() const { return 18; } /* = unique id SOAP_TYPE_ns1__parse_USCOREsentenceResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREsentence
#define SOAP_TYPE_ns1__parse_USCOREsentence (19)
/* ns1:parse_sentence */
struct ns1__parse_USCOREsentence
{
public:
	std::string _text;	/* required element of type xsd:string */
	std::string _printer;	/* required element of type xsd:string */
public:
	int soap_type() const { return 19; } /* = unique id SOAP_TYPE_ns1__parse_USCOREsentence */
};
#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREoracleResponse
#define SOAP_TYPE_ns1__parse_USCOREoracleResponse (21)
/* ns1:parse_oracleResponse */
struct ns1__parse_USCOREoracleResponse
{
public:
	std::string _result;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* required element of type xsd:string */
public:
	int soap_type() const { return 21; } /* = unique id SOAP_TYPE_ns1__parse_USCOREoracleResponse */
};
#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREoracle
#define SOAP_TYPE_ns1__parse_USCOREoracle (22)
/* ns1:parse_oracle */
struct ns1__parse_USCOREoracle
{
public:
	std::string _text;	/* required element of type xsd:string */
	std::string _constraints;	/* required element of type xsd:string */
	std::string _printer;	/* required element of type xsd:string */
public:
	int soap_type() const { return 22; } /* = unique id SOAP_TYPE_ns1__parse_USCOREoracle */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 23; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 24; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 26; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 29; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 30; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (8)
typedef std::string xsd__string;
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (10)
typedef double xsd__double;
#endif

#ifndef SOAP_TYPE_xsd__bool
#define SOAP_TYPE_xsd__bool (12)
typedef bool xsd__bool;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 ns1__parse_USCOREstring(struct soap*, std::string _text, bool _start, std::string &_result);

SOAP_FMAC5 int SOAP_FMAC6 ns1__parse_USCOREsentence(struct soap*, std::string _text, std::string _printer, std::string &_result);

SOAP_FMAC5 int SOAP_FMAC6 ns1__parse_USCOREoracle(struct soap*, std::string _text, std::string _constraints, std::string _printer, std::string &_result);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__parse_USCOREstring(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__parse_USCOREsentence(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_ns1__parse_USCOREoracle(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREstring(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, bool _start, std::string &_result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREsentence(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, std::string _printer, std::string &_result);

SOAP_FMAC5 int SOAP_FMAC6 soap_call_ns1__parse_USCOREoracle(struct soap *soap, const char *soap_endpoint, const char *soap_action, std::string _text, std::string _constraints, std::string _printer, std::string &_result);

#endif

/* End of soapStub.h */
