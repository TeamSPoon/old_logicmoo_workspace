/* soapH.h
   Generated by gSOAP 2.8.12 from src/api/soap/candc_soap.h

Copyright(C) 2000-2012, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
1) GPL or 2) Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (10)
#endif

#define soap_default_xsd__double(soap, a) soap_default_double(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_xsd__double(soap, data, "xsd:double", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_xsd__bool
#define SOAP_TYPE_xsd__bool (12)
#endif

#define soap_default_xsd__bool(soap, a) soap_default_bool(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_xsd__bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_xsd__bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2xsd__bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_xsd__bool
#define soap_write_xsd__bool(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_xsd__bool(soap, data, "xsd:bool", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_xsd__bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_xsd__bool
#define soap_read_xsd__bool(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__bool(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (11)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (8)
#endif

#define soap_default_xsd__string(soap, a) soap_default_std__string(soap, a)


#define soap_serialize_xsd__string(soap, a) soap_serialize_std__string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#define soap_instantiate_xsd__string soap_instantiate_std__string


#define soap_copy_xsd__string soap_copy_std__string

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (7)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); _p->SOAP_ENV__Text = SOAP_ENV__Text; return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); _p->__type = __type; _p->fault = fault; return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); _p->__any = __any; _p->__type = __type; _p->fault = fault; return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_ns1__parse_USCOREoracle
#define SOAP_TYPE_ns1__parse_USCOREoracle (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREoracle(struct soap*, struct ns1__parse_USCOREoracle *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREoracle(struct soap*, const struct ns1__parse_USCOREoracle *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREoracle(struct soap*, const char*, int, const struct ns1__parse_USCOREoracle *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREoracle * SOAP_FMAC4 soap_in_ns1__parse_USCOREoracle(struct soap*, const char*, struct ns1__parse_USCOREoracle *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREoracle(struct soap*, const struct ns1__parse_USCOREoracle *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREoracle
#define soap_write_ns1__parse_USCOREoracle(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREoracle(soap, data, "ns1:parse_oracle", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREoracle * SOAP_FMAC4 soap_get_ns1__parse_USCOREoracle(struct soap*, struct ns1__parse_USCOREoracle *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREoracle
#define soap_read_ns1__parse_USCOREoracle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREoracle(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREoracle * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREoracle(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREoracle * soap_new_ns1__parse_USCOREoracle(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREoracle(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREoracle * soap_new_req_ns1__parse_USCOREoracle(struct soap *soap, std::string& _text, std::string& _constraints, std::string& _printer) { struct ns1__parse_USCOREoracle *_p = soap_instantiate_ns1__parse_USCOREoracle(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_constraints = _constraints; _p->_printer = _printer; return _p; }

inline struct ns1__parse_USCOREoracle * soap_new_set_ns1__parse_USCOREoracle(struct soap *soap, std::string& _text, std::string& _constraints, std::string& _printer) { struct ns1__parse_USCOREoracle *_p = soap_instantiate_ns1__parse_USCOREoracle(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_constraints = _constraints; _p->_printer = _printer; return _p; }

inline void soap_delete_ns1__parse_USCOREoracle(struct soap *soap, struct ns1__parse_USCOREoracle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREoracle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__parse_USCOREoracleResponse
#define SOAP_TYPE_ns1__parse_USCOREoracleResponse (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREoracleResponse(struct soap*, struct ns1__parse_USCOREoracleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREoracleResponse(struct soap*, const struct ns1__parse_USCOREoracleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREoracleResponse(struct soap*, const char*, int, const struct ns1__parse_USCOREoracleResponse *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREoracleResponse * SOAP_FMAC4 soap_in_ns1__parse_USCOREoracleResponse(struct soap*, const char*, struct ns1__parse_USCOREoracleResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREoracleResponse(struct soap*, const struct ns1__parse_USCOREoracleResponse *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREoracleResponse
#define soap_write_ns1__parse_USCOREoracleResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREoracleResponse(soap, data, "ns1:parse_oracleResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREoracleResponse * SOAP_FMAC4 soap_get_ns1__parse_USCOREoracleResponse(struct soap*, struct ns1__parse_USCOREoracleResponse *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREoracleResponse
#define soap_read_ns1__parse_USCOREoracleResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREoracleResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREoracleResponse * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREoracleResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREoracleResponse * soap_new_ns1__parse_USCOREoracleResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREoracleResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREoracleResponse * soap_new_req_ns1__parse_USCOREoracleResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREoracleResponse *_p = soap_instantiate_ns1__parse_USCOREoracleResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline struct ns1__parse_USCOREoracleResponse * soap_new_set_ns1__parse_USCOREoracleResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREoracleResponse *_p = soap_instantiate_ns1__parse_USCOREoracleResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline void soap_delete_ns1__parse_USCOREoracleResponse(struct soap *soap, struct ns1__parse_USCOREoracleResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREoracleResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__parse_USCOREsentence
#define SOAP_TYPE_ns1__parse_USCOREsentence (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREsentence(struct soap*, struct ns1__parse_USCOREsentence *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREsentence(struct soap*, const struct ns1__parse_USCOREsentence *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREsentence(struct soap*, const char*, int, const struct ns1__parse_USCOREsentence *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREsentence * SOAP_FMAC4 soap_in_ns1__parse_USCOREsentence(struct soap*, const char*, struct ns1__parse_USCOREsentence *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREsentence(struct soap*, const struct ns1__parse_USCOREsentence *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREsentence
#define soap_write_ns1__parse_USCOREsentence(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREsentence(soap, data, "ns1:parse_sentence", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREsentence * SOAP_FMAC4 soap_get_ns1__parse_USCOREsentence(struct soap*, struct ns1__parse_USCOREsentence *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREsentence
#define soap_read_ns1__parse_USCOREsentence(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREsentence(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREsentence * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREsentence(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREsentence * soap_new_ns1__parse_USCOREsentence(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREsentence(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREsentence * soap_new_req_ns1__parse_USCOREsentence(struct soap *soap, std::string& _text, std::string& _printer) { struct ns1__parse_USCOREsentence *_p = soap_instantiate_ns1__parse_USCOREsentence(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_printer = _printer; return _p; }

inline struct ns1__parse_USCOREsentence * soap_new_set_ns1__parse_USCOREsentence(struct soap *soap, std::string& _text, std::string& _printer) { struct ns1__parse_USCOREsentence *_p = soap_instantiate_ns1__parse_USCOREsentence(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_printer = _printer; return _p; }

inline void soap_delete_ns1__parse_USCOREsentence(struct soap *soap, struct ns1__parse_USCOREsentence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREsentence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__parse_USCOREsentenceResponse
#define SOAP_TYPE_ns1__parse_USCOREsentenceResponse (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREsentenceResponse(struct soap*, struct ns1__parse_USCOREsentenceResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREsentenceResponse(struct soap*, const struct ns1__parse_USCOREsentenceResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREsentenceResponse(struct soap*, const char*, int, const struct ns1__parse_USCOREsentenceResponse *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREsentenceResponse * SOAP_FMAC4 soap_in_ns1__parse_USCOREsentenceResponse(struct soap*, const char*, struct ns1__parse_USCOREsentenceResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREsentenceResponse(struct soap*, const struct ns1__parse_USCOREsentenceResponse *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREsentenceResponse
#define soap_write_ns1__parse_USCOREsentenceResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREsentenceResponse(soap, data, "ns1:parse_sentenceResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREsentenceResponse * SOAP_FMAC4 soap_get_ns1__parse_USCOREsentenceResponse(struct soap*, struct ns1__parse_USCOREsentenceResponse *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREsentenceResponse
#define soap_read_ns1__parse_USCOREsentenceResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREsentenceResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREsentenceResponse * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREsentenceResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREsentenceResponse * soap_new_ns1__parse_USCOREsentenceResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREsentenceResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREsentenceResponse * soap_new_req_ns1__parse_USCOREsentenceResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREsentenceResponse *_p = soap_instantiate_ns1__parse_USCOREsentenceResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline struct ns1__parse_USCOREsentenceResponse * soap_new_set_ns1__parse_USCOREsentenceResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREsentenceResponse *_p = soap_instantiate_ns1__parse_USCOREsentenceResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline void soap_delete_ns1__parse_USCOREsentenceResponse(struct soap *soap, struct ns1__parse_USCOREsentenceResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREsentenceResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__parse_USCOREstring
#define SOAP_TYPE_ns1__parse_USCOREstring (16)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREstring(struct soap*, struct ns1__parse_USCOREstring *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREstring(struct soap*, const struct ns1__parse_USCOREstring *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREstring(struct soap*, const char*, int, const struct ns1__parse_USCOREstring *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREstring * SOAP_FMAC4 soap_in_ns1__parse_USCOREstring(struct soap*, const char*, struct ns1__parse_USCOREstring *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREstring(struct soap*, const struct ns1__parse_USCOREstring *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREstring
#define soap_write_ns1__parse_USCOREstring(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREstring(soap, data, "ns1:parse_string", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREstring * SOAP_FMAC4 soap_get_ns1__parse_USCOREstring(struct soap*, struct ns1__parse_USCOREstring *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREstring
#define soap_read_ns1__parse_USCOREstring(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREstring(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREstring * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREstring(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREstring * soap_new_ns1__parse_USCOREstring(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREstring(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREstring * soap_new_req_ns1__parse_USCOREstring(struct soap *soap, std::string& _text, bool _start) { struct ns1__parse_USCOREstring *_p = soap_instantiate_ns1__parse_USCOREstring(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_start = _start; return _p; }

inline struct ns1__parse_USCOREstring * soap_new_set_ns1__parse_USCOREstring(struct soap *soap, std::string& _text, bool _start) { struct ns1__parse_USCOREstring *_p = soap_instantiate_ns1__parse_USCOREstring(soap, -1, NULL, NULL, NULL); _p->_text = _text; _p->_start = _start; return _p; }

inline void soap_delete_ns1__parse_USCOREstring(struct soap *soap, struct ns1__parse_USCOREstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__parse_USCOREstringResponse
#define SOAP_TYPE_ns1__parse_USCOREstringResponse (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__parse_USCOREstringResponse(struct soap*, struct ns1__parse_USCOREstringResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__parse_USCOREstringResponse(struct soap*, const struct ns1__parse_USCOREstringResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__parse_USCOREstringResponse(struct soap*, const char*, int, const struct ns1__parse_USCOREstringResponse *, const char*);
SOAP_FMAC3 struct ns1__parse_USCOREstringResponse * SOAP_FMAC4 soap_in_ns1__parse_USCOREstringResponse(struct soap*, const char*, struct ns1__parse_USCOREstringResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__parse_USCOREstringResponse(struct soap*, const struct ns1__parse_USCOREstringResponse *, const char*, const char*);

#ifndef soap_write_ns1__parse_USCOREstringResponse
#define soap_write_ns1__parse_USCOREstringResponse(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_ns1__parse_USCOREstringResponse(soap, data, "ns1:parse_stringResponse", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct ns1__parse_USCOREstringResponse * SOAP_FMAC4 soap_get_ns1__parse_USCOREstringResponse(struct soap*, struct ns1__parse_USCOREstringResponse *, const char*, const char*);

#ifndef soap_read_ns1__parse_USCOREstringResponse
#define soap_read_ns1__parse_USCOREstringResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__parse_USCOREstringResponse(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif

SOAP_FMAC1 struct ns1__parse_USCOREstringResponse * SOAP_FMAC2 soap_instantiate_ns1__parse_USCOREstringResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns1__parse_USCOREstringResponse * soap_new_ns1__parse_USCOREstringResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns1__parse_USCOREstringResponse(soap, n, NULL, NULL, NULL); }

inline struct ns1__parse_USCOREstringResponse * soap_new_req_ns1__parse_USCOREstringResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREstringResponse *_p = soap_instantiate_ns1__parse_USCOREstringResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline struct ns1__parse_USCOREstringResponse * soap_new_set_ns1__parse_USCOREstringResponse(struct soap *soap, std::string& _result) { struct ns1__parse_USCOREstringResponse *_p = soap_instantiate_ns1__parse_USCOREstringResponse(soap, -1, NULL, NULL, NULL); _p->_result = _result; return _p; }

inline void soap_delete_ns1__parse_USCOREstringResponse(struct soap *soap, struct ns1__parse_USCOREstringResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__parse_USCOREstringResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (32)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (25)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)


#define soap_serialize__QName(soap, a) soap_serialize_string(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_set_omode(soap, SOAP_XML_TREE), soap_begin(soap), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap) )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap) )
#endif


#endif

/* End of soapH.h */
